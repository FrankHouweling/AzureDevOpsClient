<?php
/**
 * RequestedExtension
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * RequestedExtension Class Doc Comment
 *
 * @category Class
 * @description A request for an extension (to be installed or have a license assigned)
 * @package  FrankHouweling\AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestedExtension implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestedExtension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extensionName' => 'string',
        'extensionRequests' => '\FrankHouweling\AzureDevOpsClient\ExtensionManagement\Model\ExtensionRequest[]',
        'publisherDisplayName' => 'string',
        'publisherName' => 'string',
        'requestCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extensionName' => null,
        'extensionRequests' => null,
        'publisherDisplayName' => null,
        'publisherName' => null,
        'requestCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extensionName' => 'extensionName',
        'extensionRequests' => 'extensionRequests',
        'publisherDisplayName' => 'publisherDisplayName',
        'publisherName' => 'publisherName',
        'requestCount' => 'requestCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extensionName' => 'setExtensionName',
        'extensionRequests' => 'setExtensionRequests',
        'publisherDisplayName' => 'setPublisherDisplayName',
        'publisherName' => 'setPublisherName',
        'requestCount' => 'setRequestCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extensionName' => 'getExtensionName',
        'extensionRequests' => 'getExtensionRequests',
        'publisherDisplayName' => 'getPublisherDisplayName',
        'publisherName' => 'getPublisherName',
        'requestCount' => 'getRequestCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extensionName'] = isset($data['extensionName']) ? $data['extensionName'] : null;
        $this->container['extensionRequests'] = isset($data['extensionRequests']) ? $data['extensionRequests'] : null;
        $this->container['publisherDisplayName'] = isset($data['publisherDisplayName']) ? $data['publisherDisplayName'] : null;
        $this->container['publisherName'] = isset($data['publisherName']) ? $data['publisherName'] : null;
        $this->container['requestCount'] = isset($data['requestCount']) ? $data['requestCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extensionName
     *
     * @return string
     */
    public function getExtensionName()
    {
        return $this->container['extensionName'];
    }

    /**
     * Sets extensionName
     *
     * @param string $extensionName The unique name of the extension
     *
     * @return $this
     */
    public function setExtensionName($extensionName)
    {
        $this->container['extensionName'] = $extensionName;

        return $this;
    }

    /**
     * Gets extensionRequests
     *
     * @return \FrankHouweling\AzureDevOpsClient\ExtensionManagement\Model\ExtensionRequest[]
     */
    public function getExtensionRequests()
    {
        return $this->container['extensionRequests'];
    }

    /**
     * Sets extensionRequests
     *
     * @param \FrankHouweling\AzureDevOpsClient\ExtensionManagement\Model\ExtensionRequest[] $extensionRequests A list of each request for the extension
     *
     * @return $this
     */
    public function setExtensionRequests($extensionRequests)
    {
        $this->container['extensionRequests'] = $extensionRequests;

        return $this;
    }

    /**
     * Gets publisherDisplayName
     *
     * @return string
     */
    public function getPublisherDisplayName()
    {
        return $this->container['publisherDisplayName'];
    }

    /**
     * Sets publisherDisplayName
     *
     * @param string $publisherDisplayName DisplayName of the publisher that owns the extension being published.
     *
     * @return $this
     */
    public function setPublisherDisplayName($publisherDisplayName)
    {
        $this->container['publisherDisplayName'] = $publisherDisplayName;

        return $this;
    }

    /**
     * Gets publisherName
     *
     * @return string
     */
    public function getPublisherName()
    {
        return $this->container['publisherName'];
    }

    /**
     * Sets publisherName
     *
     * @param string $publisherName Represents the Publisher of the requested extension
     *
     * @return $this
     */
    public function setPublisherName($publisherName)
    {
        $this->container['publisherName'] = $publisherName;

        return $this;
    }

    /**
     * Gets requestCount
     *
     * @return int
     */
    public function getRequestCount()
    {
        return $this->container['requestCount'];
    }

    /**
     * Sets requestCount
     *
     * @param int $requestCount The total number of requests for an extension
     *
     * @return $this
     */
    public function setRequestCount($requestCount)
    {
        $this->container['requestCount'] = $requestCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


