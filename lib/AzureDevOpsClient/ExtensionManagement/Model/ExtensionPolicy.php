<?php
/**
 * ExtensionPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * ExtensionPolicy Class Doc Comment
 *
 * @category Class
 * @description Policy with a set of permissions on extension operations
 * @package  FrankHouweling\AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExtensionPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExtensionPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'install' => 'string',
        'request' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'install' => null,
        'request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'install' => 'install',
        'request' => 'request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'install' => 'setInstall',
        'request' => 'setRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'install' => 'getInstall',
        'request' => 'getRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INSTALL_NONE = 'none';
    const INSTALL__PRIVATE = 'private';
    const INSTALL__PUBLIC = 'public';
    const INSTALL_PREVIEW = 'preview';
    const INSTALL_RELEASED = 'released';
    const INSTALL_FIRST_PARTY = 'firstParty';
    const INSTALL_ALL = 'all';
    const REQUEST_NONE = 'none';
    const REQUEST__PRIVATE = 'private';
    const REQUEST__PUBLIC = 'public';
    const REQUEST_PREVIEW = 'preview';
    const REQUEST_RELEASED = 'released';
    const REQUEST_FIRST_PARTY = 'firstParty';
    const REQUEST_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstallAllowableValues()
    {
        return [
            self::INSTALL_NONE,
            self::INSTALL__PRIVATE,
            self::INSTALL__PUBLIC,
            self::INSTALL_PREVIEW,
            self::INSTALL_RELEASED,
            self::INSTALL_FIRST_PARTY,
            self::INSTALL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestAllowableValues()
    {
        return [
            self::REQUEST_NONE,
            self::REQUEST__PRIVATE,
            self::REQUEST__PUBLIC,
            self::REQUEST_PREVIEW,
            self::REQUEST_RELEASED,
            self::REQUEST_FIRST_PARTY,
            self::REQUEST_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['install'] = isset($data['install']) ? $data['install'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInstallAllowableValues();
        if (!is_null($this->container['install']) && !in_array($this->container['install'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'install', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestAllowableValues();
        if (!is_null($this->container['request']) && !in_array($this->container['request'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets install
     *
     * @return string
     */
    public function getInstall()
    {
        return $this->container['install'];
    }

    /**
     * Sets install
     *
     * @param string $install Permissions on 'Install' operation
     *
     * @return $this
     */
    public function setInstall($install)
    {
        $allowedValues = $this->getInstallAllowableValues();
        if (!is_null($install) && !in_array($install, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'install', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['install'] = $install;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string $request Permission on 'Request' operation
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $allowedValues = $this->getRequestAllowableValues();
        if (!is_null($request) && !in_array($request, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request'] = $request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


