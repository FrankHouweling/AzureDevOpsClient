<?php
/**
 * ContributionNodeQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * ContributionNodeQuery Class Doc Comment
 *
 * @category Class
 * @description A query that can be issued for contribution nodes
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContributionNodeQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContributionNodeQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contributionIds' => 'string[]',
        'dataProviderContext' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderContext',
        'includeProviderDetails' => 'bool',
        'queryOptions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contributionIds' => null,
        'dataProviderContext' => null,
        'includeProviderDetails' => null,
        'queryOptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contributionIds' => 'contributionIds',
        'dataProviderContext' => 'dataProviderContext',
        'includeProviderDetails' => 'includeProviderDetails',
        'queryOptions' => 'queryOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contributionIds' => 'setContributionIds',
        'dataProviderContext' => 'setDataProviderContext',
        'includeProviderDetails' => 'setIncludeProviderDetails',
        'queryOptions' => 'setQueryOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contributionIds' => 'getContributionIds',
        'dataProviderContext' => 'getDataProviderContext',
        'includeProviderDetails' => 'getIncludeProviderDetails',
        'queryOptions' => 'getQueryOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const QUERY_OPTIONS_NONE = 'none';
    const QUERY_OPTIONS_INCLUDE_SELF = 'includeSelf';
    const QUERY_OPTIONS_INCLUDE_CHILDREN = 'includeChildren';
    const QUERY_OPTIONS_INCLUDE_SUB_TREE = 'includeSubTree';
    const QUERY_OPTIONS_INCLUDE_ALL = 'includeAll';
    const QUERY_OPTIONS_IGNORE_CONSTRAINTS = 'ignoreConstraints';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryOptionsAllowableValues()
    {
        return [
            self::QUERY_OPTIONS_NONE,
            self::QUERY_OPTIONS_INCLUDE_SELF,
            self::QUERY_OPTIONS_INCLUDE_CHILDREN,
            self::QUERY_OPTIONS_INCLUDE_SUB_TREE,
            self::QUERY_OPTIONS_INCLUDE_ALL,
            self::QUERY_OPTIONS_IGNORE_CONSTRAINTS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contributionIds'] = isset($data['contributionIds']) ? $data['contributionIds'] : null;
        $this->container['dataProviderContext'] = isset($data['dataProviderContext']) ? $data['dataProviderContext'] : null;
        $this->container['includeProviderDetails'] = isset($data['includeProviderDetails']) ? $data['includeProviderDetails'] : null;
        $this->container['queryOptions'] = isset($data['queryOptions']) ? $data['queryOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQueryOptionsAllowableValues();
        if (!is_null($this->container['queryOptions']) && !in_array($this->container['queryOptions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryOptions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contributionIds
     *
     * @return string[]
     */
    public function getContributionIds()
    {
        return $this->container['contributionIds'];
    }

    /**
     * Sets contributionIds
     *
     * @param string[] $contributionIds The contribution ids of the nodes to find.
     *
     * @return $this
     */
    public function setContributionIds($contributionIds)
    {
        $this->container['contributionIds'] = $contributionIds;

        return $this;
    }

    /**
     * Gets dataProviderContext
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderContext
     */
    public function getDataProviderContext()
    {
        return $this->container['dataProviderContext'];
    }

    /**
     * Sets dataProviderContext
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderContext $dataProviderContext Contextual information that can be leveraged by contribution constraints
     *
     * @return $this
     */
    public function setDataProviderContext($dataProviderContext)
    {
        $this->container['dataProviderContext'] = $dataProviderContext;

        return $this;
    }

    /**
     * Gets includeProviderDetails
     *
     * @return bool
     */
    public function getIncludeProviderDetails()
    {
        return $this->container['includeProviderDetails'];
    }

    /**
     * Sets includeProviderDetails
     *
     * @param bool $includeProviderDetails Indicator if contribution provider details should be included in the result.
     *
     * @return $this
     */
    public function setIncludeProviderDetails($includeProviderDetails)
    {
        $this->container['includeProviderDetails'] = $includeProviderDetails;

        return $this;
    }

    /**
     * Gets queryOptions
     *
     * @return string
     */
    public function getQueryOptions()
    {
        return $this->container['queryOptions'];
    }

    /**
     * Sets queryOptions
     *
     * @param string $queryOptions Query options tpo be used when fetching ContributionNodes
     *
     * @return $this
     */
    public function setQueryOptions($queryOptions)
    {
        $allowedValues = $this->getQueryOptionsAllowableValues();
        if (!is_null($queryOptions) && !in_array($queryOptions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryOptions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryOptions'] = $queryOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


