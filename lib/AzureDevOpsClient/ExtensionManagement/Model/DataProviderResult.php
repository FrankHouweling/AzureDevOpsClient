<?php
/**
 * DataProviderResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * DataProviderResult Class Doc Comment
 *
 * @category Class
 * @description Result structure from calls to GetDataProviderData
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataProviderResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataProviderResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientProviders' => 'map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ClientDataProviderQuery]',
        'data' => 'map[string,object]',
        'exceptions' => 'map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderExceptionDetails]',
        'resolvedProviders' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ResolvedDataProvider[]',
        'scopeName' => 'string',
        'scopeValue' => 'string',
        'sharedData' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientProviders' => null,
        'data' => null,
        'exceptions' => null,
        'resolvedProviders' => null,
        'scopeName' => null,
        'scopeValue' => null,
        'sharedData' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientProviders' => 'clientProviders',
        'data' => 'data',
        'exceptions' => 'exceptions',
        'resolvedProviders' => 'resolvedProviders',
        'scopeName' => 'scopeName',
        'scopeValue' => 'scopeValue',
        'sharedData' => 'sharedData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientProviders' => 'setClientProviders',
        'data' => 'setData',
        'exceptions' => 'setExceptions',
        'resolvedProviders' => 'setResolvedProviders',
        'scopeName' => 'setScopeName',
        'scopeValue' => 'setScopeValue',
        'sharedData' => 'setSharedData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientProviders' => 'getClientProviders',
        'data' => 'getData',
        'exceptions' => 'getExceptions',
        'resolvedProviders' => 'getResolvedProviders',
        'scopeName' => 'getScopeName',
        'scopeValue' => 'getScopeValue',
        'sharedData' => 'getSharedData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientProviders'] = isset($data['clientProviders']) ? $data['clientProviders'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['exceptions'] = isset($data['exceptions']) ? $data['exceptions'] : null;
        $this->container['resolvedProviders'] = isset($data['resolvedProviders']) ? $data['resolvedProviders'] : null;
        $this->container['scopeName'] = isset($data['scopeName']) ? $data['scopeName'] : null;
        $this->container['scopeValue'] = isset($data['scopeValue']) ? $data['scopeValue'] : null;
        $this->container['sharedData'] = isset($data['sharedData']) ? $data['sharedData'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientProviders
     *
     * @return map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ClientDataProviderQuery]
     */
    public function getClientProviders()
    {
        return $this->container['clientProviders'];
    }

    /**
     * Sets clientProviders
     *
     * @param map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ClientDataProviderQuery] $clientProviders This is the set of data providers that were requested, but either they were defined as client providers, or as remote providers that failed and may be retried by the client.
     *
     * @return $this
     */
    public function setClientProviders($clientProviders)
    {
        $this->container['clientProviders'] = $clientProviders;

        return $this;
    }

    /**
     * Gets data
     *
     * @return map[string,object]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param map[string,object] $data Property bag of data keyed off of the data provider contribution id
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets exceptions
     *
     * @return map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderExceptionDetails]
     */
    public function getExceptions()
    {
        return $this->container['exceptions'];
    }

    /**
     * Sets exceptions
     *
     * @param map[string,\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\DataProviderExceptionDetails] $exceptions Set of exceptions that occurred resolving the data providers.
     *
     * @return $this
     */
    public function setExceptions($exceptions)
    {
        $this->container['exceptions'] = $exceptions;

        return $this;
    }

    /**
     * Gets resolvedProviders
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ResolvedDataProvider[]
     */
    public function getResolvedProviders()
    {
        return $this->container['resolvedProviders'];
    }

    /**
     * Sets resolvedProviders
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\ResolvedDataProvider[] $resolvedProviders List of data providers resolved in the data-provider query
     *
     * @return $this
     */
    public function setResolvedProviders($resolvedProviders)
    {
        $this->container['resolvedProviders'] = $resolvedProviders;

        return $this;
    }

    /**
     * Gets scopeName
     *
     * @return string
     */
    public function getScopeName()
    {
        return $this->container['scopeName'];
    }

    /**
     * Sets scopeName
     *
     * @param string $scopeName Scope name applied to this data provider result.
     *
     * @return $this
     */
    public function setScopeName($scopeName)
    {
        $this->container['scopeName'] = $scopeName;

        return $this;
    }

    /**
     * Gets scopeValue
     *
     * @return string
     */
    public function getScopeValue()
    {
        return $this->container['scopeValue'];
    }

    /**
     * Sets scopeValue
     *
     * @param string $scopeValue Scope value applied to this data provider result.
     *
     * @return $this
     */
    public function setScopeValue($scopeValue)
    {
        $this->container['scopeValue'] = $scopeValue;

        return $this;
    }

    /**
     * Gets sharedData
     *
     * @return map[string,object]
     */
    public function getSharedData()
    {
        return $this->container['sharedData'];
    }

    /**
     * Sets sharedData
     *
     * @param map[string,object] $sharedData Property bag of shared data that was contributed to by any of the individual data providers
     *
     * @return $this
     */
    public function setSharedData($sharedData)
    {
        $this->container['sharedData'] = $sharedData;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


