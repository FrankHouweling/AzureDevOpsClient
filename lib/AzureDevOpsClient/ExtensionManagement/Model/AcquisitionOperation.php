<?php
/**
 * AcquisitionOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * AcquisitionOperation Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcquisitionOperation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AcquisitionOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operationState' => 'string',
        'operationType' => 'string',
        'reason' => 'string',
        'reasons' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\AcquisitionOperationDisallowReason[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operationState' => null,
        'operationType' => null,
        'reason' => null,
        'reasons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operationState' => 'operationState',
        'operationType' => 'operationType',
        'reason' => 'reason',
        'reasons' => 'reasons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operationState' => 'setOperationState',
        'operationType' => 'setOperationType',
        'reason' => 'setReason',
        'reasons' => 'setReasons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operationState' => 'getOperationState',
        'operationType' => 'getOperationType',
        'reason' => 'getReason',
        'reasons' => 'getReasons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_STATE_DISALLOW = 'disallow';
    const OPERATION_STATE_ALLOW = 'allow';
    const OPERATION_STATE_COMPLETED = 'completed';
    const OPERATION_TYPE_GET = 'get';
    const OPERATION_TYPE_INSTALL = 'install';
    const OPERATION_TYPE_BUY = 'buy';
    const OPERATION_TYPE__TRY = 'try';
    const OPERATION_TYPE_REQUEST = 'request';
    const OPERATION_TYPE_NONE = 'none';
    const OPERATION_TYPE_PURCHASE_REQUEST = 'purchaseRequest';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationStateAllowableValues()
    {
        return [
            self::OPERATION_STATE_DISALLOW,
            self::OPERATION_STATE_ALLOW,
            self::OPERATION_STATE_COMPLETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationTypeAllowableValues()
    {
        return [
            self::OPERATION_TYPE_GET,
            self::OPERATION_TYPE_INSTALL,
            self::OPERATION_TYPE_BUY,
            self::OPERATION_TYPE__TRY,
            self::OPERATION_TYPE_REQUEST,
            self::OPERATION_TYPE_NONE,
            self::OPERATION_TYPE_PURCHASE_REQUEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operationState'] = isset($data['operationState']) ? $data['operationState'] : null;
        $this->container['operationType'] = isset($data['operationType']) ? $data['operationType'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['reasons'] = isset($data['reasons']) ? $data['reasons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationStateAllowableValues();
        if (!is_null($this->container['operationState']) && !in_array($this->container['operationState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationTypeAllowableValues();
        if (!is_null($this->container['operationType']) && !in_array($this->container['operationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operationState
     *
     * @return string
     */
    public function getOperationState()
    {
        return $this->container['operationState'];
    }

    /**
     * Sets operationState
     *
     * @param string $operationState State of the the AcquisitionOperation for the current user
     *
     * @return $this
     */
    public function setOperationState($operationState)
    {
        $allowedValues = $this->getOperationStateAllowableValues();
        if (!is_null($operationState) && !in_array($operationState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationState'] = $operationState;

        return $this;
    }

    /**
     * Gets operationType
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operationType'];
    }

    /**
     * Sets operationType
     *
     * @param string $operationType AcquisitionOperationType: install, request, buy, etc...
     *
     * @return $this
     */
    public function setOperationType($operationType)
    {
        $allowedValues = $this->getOperationTypeAllowableValues();
        if (!is_null($operationType) && !in_array($operationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationType'] = $operationType;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Optional reason to justify current state. Typically used with Disallow state.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reasons
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\AcquisitionOperationDisallowReason[]
     */
    public function getReasons()
    {
        return $this->container['reasons'];
    }

    /**
     * Sets reasons
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\AcquisitionOperationDisallowReason[] $reasons List of reasons indicating why the operation is not allowed.
     *
     * @return $this
     */
    public function setReasons($reasons)
    {
        $this->container['reasons'] = $reasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


