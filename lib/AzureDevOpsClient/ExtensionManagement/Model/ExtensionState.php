<?php
/**
 * ExtensionState
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * ExtensionState Class Doc Comment
 *
 * @category Class
 * @description The state of an extension
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExtensionState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExtensionState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'flags' => 'string',
        'installationIssues' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\InstalledExtensionStateIssue[]',
        'lastUpdated' => '\DateTime',
        'extensionName' => 'string',
        'lastVersionCheck' => '\DateTime',
        'publisherName' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'flags' => null,
        'installationIssues' => null,
        'lastUpdated' => 'date-time',
        'extensionName' => null,
        'lastVersionCheck' => 'date-time',
        'publisherName' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flags' => 'flags',
        'installationIssues' => 'installationIssues',
        'lastUpdated' => 'lastUpdated',
        'extensionName' => 'extensionName',
        'lastVersionCheck' => 'lastVersionCheck',
        'publisherName' => 'publisherName',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flags' => 'setFlags',
        'installationIssues' => 'setInstallationIssues',
        'lastUpdated' => 'setLastUpdated',
        'extensionName' => 'setExtensionName',
        'lastVersionCheck' => 'setLastVersionCheck',
        'publisherName' => 'setPublisherName',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flags' => 'getFlags',
        'installationIssues' => 'getInstallationIssues',
        'lastUpdated' => 'getLastUpdated',
        'extensionName' => 'getExtensionName',
        'lastVersionCheck' => 'getLastVersionCheck',
        'publisherName' => 'getPublisherName',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLAGS_NONE = 'none';
    const FLAGS_DISABLED = 'disabled';
    const FLAGS_BUILT_IN = 'builtIn';
    const FLAGS_MULTI_VERSION = 'multiVersion';
    const FLAGS_UN_INSTALLED = 'unInstalled';
    const FLAGS_VERSION_CHECK_ERROR = 'versionCheckError';
    const FLAGS_TRUSTED = 'trusted';
    const FLAGS_ERROR = 'error';
    const FLAGS_NEEDS_REAUTHORIZATION = 'needsReauthorization';
    const FLAGS_AUTO_UPGRADE_ERROR = 'autoUpgradeError';
    const FLAGS_WARNING = 'warning';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlagsAllowableValues()
    {
        return [
            self::FLAGS_NONE,
            self::FLAGS_DISABLED,
            self::FLAGS_BUILT_IN,
            self::FLAGS_MULTI_VERSION,
            self::FLAGS_UN_INSTALLED,
            self::FLAGS_VERSION_CHECK_ERROR,
            self::FLAGS_TRUSTED,
            self::FLAGS_ERROR,
            self::FLAGS_NEEDS_REAUTHORIZATION,
            self::FLAGS_AUTO_UPGRADE_ERROR,
            self::FLAGS_WARNING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['installationIssues'] = isset($data['installationIssues']) ? $data['installationIssues'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['extensionName'] = isset($data['extensionName']) ? $data['extensionName'] : null;
        $this->container['lastVersionCheck'] = isset($data['lastVersionCheck']) ? $data['lastVersionCheck'] : null;
        $this->container['publisherName'] = isset($data['publisherName']) ? $data['publisherName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFlagsAllowableValues();
        if (!is_null($this->container['flags']) && !in_array($this->container['flags'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flags', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flags
     *
     * @return string
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string $flags States of an installed extension
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $allowedValues = $this->getFlagsAllowableValues();
        if (!is_null($flags) && !in_array($flags, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets installationIssues
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\InstalledExtensionStateIssue[]
     */
    public function getInstallationIssues()
    {
        return $this->container['installationIssues'];
    }

    /**
     * Sets installationIssues
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\InstalledExtensionStateIssue[] $installationIssues List of installation issues
     *
     * @return $this
     */
    public function setInstallationIssues($installationIssues)
    {
        $this->container['installationIssues'] = $installationIssues;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated The time at which this installation was last updated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets extensionName
     *
     * @return string
     */
    public function getExtensionName()
    {
        return $this->container['extensionName'];
    }

    /**
     * Sets extensionName
     *
     * @param string $extensionName extensionName
     *
     * @return $this
     */
    public function setExtensionName($extensionName)
    {
        $this->container['extensionName'] = $extensionName;

        return $this;
    }

    /**
     * Gets lastVersionCheck
     *
     * @return \DateTime
     */
    public function getLastVersionCheck()
    {
        return $this->container['lastVersionCheck'];
    }

    /**
     * Sets lastVersionCheck
     *
     * @param \DateTime $lastVersionCheck The time at which the version was last checked
     *
     * @return $this
     */
    public function setLastVersionCheck($lastVersionCheck)
    {
        $this->container['lastVersionCheck'] = $lastVersionCheck;

        return $this;
    }

    /**
     * Gets publisherName
     *
     * @return string
     */
    public function getPublisherName()
    {
        return $this->container['publisherName'];
    }

    /**
     * Sets publisherName
     *
     * @param string $publisherName publisherName
     *
     * @return $this
     */
    public function setPublisherName($publisherName)
    {
        $this->container['publisherName'] = $publisherName;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


