<?php
/**
 * ExtensionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExtensionManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ExtensionManagement\ObjectSerializer;

/**
 * ExtensionRequest Class Doc Comment
 *
 * @category Class
 * @description A request for an extension (to be installed or have a license assigned)
 * @package  AzureDevOpsClient\ExtensionManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExtensionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExtensionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rejectMessage' => 'string',
        'requestDate' => '\DateTime',
        'requestedBy' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef',
        'requestMessage' => 'string',
        'requestState' => 'string',
        'resolveDate' => '\DateTime',
        'resolvedBy' => '\AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rejectMessage' => null,
        'requestDate' => 'date-time',
        'requestedBy' => null,
        'requestMessage' => null,
        'requestState' => null,
        'resolveDate' => 'date-time',
        'resolvedBy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rejectMessage' => 'rejectMessage',
        'requestDate' => 'requestDate',
        'requestedBy' => 'requestedBy',
        'requestMessage' => 'requestMessage',
        'requestState' => 'requestState',
        'resolveDate' => 'resolveDate',
        'resolvedBy' => 'resolvedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rejectMessage' => 'setRejectMessage',
        'requestDate' => 'setRequestDate',
        'requestedBy' => 'setRequestedBy',
        'requestMessage' => 'setRequestMessage',
        'requestState' => 'setRequestState',
        'resolveDate' => 'setResolveDate',
        'resolvedBy' => 'setResolvedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rejectMessage' => 'getRejectMessage',
        'requestDate' => 'getRequestDate',
        'requestedBy' => 'getRequestedBy',
        'requestMessage' => 'getRequestMessage',
        'requestState' => 'getRequestState',
        'resolveDate' => 'getResolveDate',
        'resolvedBy' => 'getResolvedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REQUEST_STATE_OPEN = 'open';
    const REQUEST_STATE_ACCEPTED = 'accepted';
    const REQUEST_STATE_REJECTED = 'rejected';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestStateAllowableValues()
    {
        return [
            self::REQUEST_STATE_OPEN,
            self::REQUEST_STATE_ACCEPTED,
            self::REQUEST_STATE_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rejectMessage'] = isset($data['rejectMessage']) ? $data['rejectMessage'] : null;
        $this->container['requestDate'] = isset($data['requestDate']) ? $data['requestDate'] : null;
        $this->container['requestedBy'] = isset($data['requestedBy']) ? $data['requestedBy'] : null;
        $this->container['requestMessage'] = isset($data['requestMessage']) ? $data['requestMessage'] : null;
        $this->container['requestState'] = isset($data['requestState']) ? $data['requestState'] : null;
        $this->container['resolveDate'] = isset($data['resolveDate']) ? $data['resolveDate'] : null;
        $this->container['resolvedBy'] = isset($data['resolvedBy']) ? $data['resolvedBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRequestStateAllowableValues();
        if (!is_null($this->container['requestState']) && !in_array($this->container['requestState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'requestState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rejectMessage
     *
     * @return string
     */
    public function getRejectMessage()
    {
        return $this->container['rejectMessage'];
    }

    /**
     * Sets rejectMessage
     *
     * @param string $rejectMessage Required message supplied if the request is rejected
     *
     * @return $this
     */
    public function setRejectMessage($rejectMessage)
    {
        $this->container['rejectMessage'] = $rejectMessage;

        return $this;
    }

    /**
     * Gets requestDate
     *
     * @return \DateTime
     */
    public function getRequestDate()
    {
        return $this->container['requestDate'];
    }

    /**
     * Sets requestDate
     *
     * @param \DateTime $requestDate Date at which the request was made
     *
     * @return $this
     */
    public function setRequestDate($requestDate)
    {
        $this->container['requestDate'] = $requestDate;

        return $this;
    }

    /**
     * Gets requestedBy
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef
     */
    public function getRequestedBy()
    {
        return $this->container['requestedBy'];
    }

    /**
     * Sets requestedBy
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef $requestedBy Represents the user who made the request
     *
     * @return $this
     */
    public function setRequestedBy($requestedBy)
    {
        $this->container['requestedBy'] = $requestedBy;

        return $this;
    }

    /**
     * Gets requestMessage
     *
     * @return string
     */
    public function getRequestMessage()
    {
        return $this->container['requestMessage'];
    }

    /**
     * Sets requestMessage
     *
     * @param string $requestMessage Optional message supplied by the requester justifying the request
     *
     * @return $this
     */
    public function setRequestMessage($requestMessage)
    {
        $this->container['requestMessage'] = $requestMessage;

        return $this;
    }

    /**
     * Gets requestState
     *
     * @return string
     */
    public function getRequestState()
    {
        return $this->container['requestState'];
    }

    /**
     * Sets requestState
     *
     * @param string $requestState Represents the state of the request
     *
     * @return $this
     */
    public function setRequestState($requestState)
    {
        $allowedValues = $this->getRequestStateAllowableValues();
        if (!is_null($requestState) && !in_array($requestState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'requestState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requestState'] = $requestState;

        return $this;
    }

    /**
     * Gets resolveDate
     *
     * @return \DateTime
     */
    public function getResolveDate()
    {
        return $this->container['resolveDate'];
    }

    /**
     * Sets resolveDate
     *
     * @param \DateTime $resolveDate Date at which the request was resolved
     *
     * @return $this
     */
    public function setResolveDate($resolveDate)
    {
        $this->container['resolveDate'] = $resolveDate;

        return $this;
    }

    /**
     * Gets resolvedBy
     *
     * @return \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef
     */
    public function getResolvedBy()
    {
        return $this->container['resolvedBy'];
    }

    /**
     * Sets resolvedBy
     *
     * @param \AzureDevOpsClient\ExtensionManagement\AzureDevOpsClient\ExtensionManagement\Model\IdentityRef $resolvedBy Represents the user who resolved the request
     *
     * @return $this
     */
    public function setResolvedBy($resolvedBy)
    {
        $this->container['resolvedBy'] = $resolvedBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


