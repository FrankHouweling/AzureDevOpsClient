<?php
/**
 * TestResult2
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestResult2 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestResult2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestResult2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'afnStripId' => 'int',
        'computerName' => 'string',
        'creationDate' => '\DateTime',
        'dateCompleted' => '\DateTime',
        'dateStarted' => '\DateTime',
        'effectivePointState' => 'string',
        'failureType' => 'string',
        'lastUpdated' => '\DateTime',
        'lastUpdatedBy' => 'string',
        'outcome' => 'string',
        'owner' => 'string',
        'projectId' => 'string',
        'resetCount' => 'int',
        'resolutionStateId' => 'int',
        'revision' => 'int',
        'runBy' => 'string',
        'state' => 'string',
        'testCaseRefId' => 'int',
        'testResultId' => 'int',
        'testRunId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'afnStripId' => 'int32',
        'computerName' => null,
        'creationDate' => 'date-time',
        'dateCompleted' => 'date-time',
        'dateStarted' => 'date-time',
        'effectivePointState' => 'byte',
        'failureType' => 'byte',
        'lastUpdated' => 'date-time',
        'lastUpdatedBy' => 'uuid',
        'outcome' => 'byte',
        'owner' => 'uuid',
        'projectId' => 'uuid',
        'resetCount' => 'int32',
        'resolutionStateId' => 'int32',
        'revision' => 'int32',
        'runBy' => 'uuid',
        'state' => 'byte',
        'testCaseRefId' => 'int32',
        'testResultId' => 'int32',
        'testRunId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'afnStripId' => 'afnStripId',
        'computerName' => 'computerName',
        'creationDate' => 'creationDate',
        'dateCompleted' => 'dateCompleted',
        'dateStarted' => 'dateStarted',
        'effectivePointState' => 'effectivePointState',
        'failureType' => 'failureType',
        'lastUpdated' => 'lastUpdated',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'outcome' => 'outcome',
        'owner' => 'owner',
        'projectId' => 'projectId',
        'resetCount' => 'resetCount',
        'resolutionStateId' => 'resolutionStateId',
        'revision' => 'revision',
        'runBy' => 'runBy',
        'state' => 'state',
        'testCaseRefId' => 'testCaseRefId',
        'testResultId' => 'testResultId',
        'testRunId' => 'testRunId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'afnStripId' => 'setAfnStripId',
        'computerName' => 'setComputerName',
        'creationDate' => 'setCreationDate',
        'dateCompleted' => 'setDateCompleted',
        'dateStarted' => 'setDateStarted',
        'effectivePointState' => 'setEffectivePointState',
        'failureType' => 'setFailureType',
        'lastUpdated' => 'setLastUpdated',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'outcome' => 'setOutcome',
        'owner' => 'setOwner',
        'projectId' => 'setProjectId',
        'resetCount' => 'setResetCount',
        'resolutionStateId' => 'setResolutionStateId',
        'revision' => 'setRevision',
        'runBy' => 'setRunBy',
        'state' => 'setState',
        'testCaseRefId' => 'setTestCaseRefId',
        'testResultId' => 'setTestResultId',
        'testRunId' => 'setTestRunId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'afnStripId' => 'getAfnStripId',
        'computerName' => 'getComputerName',
        'creationDate' => 'getCreationDate',
        'dateCompleted' => 'getDateCompleted',
        'dateStarted' => 'getDateStarted',
        'effectivePointState' => 'getEffectivePointState',
        'failureType' => 'getFailureType',
        'lastUpdated' => 'getLastUpdated',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'outcome' => 'getOutcome',
        'owner' => 'getOwner',
        'projectId' => 'getProjectId',
        'resetCount' => 'getResetCount',
        'resolutionStateId' => 'getResolutionStateId',
        'revision' => 'getRevision',
        'runBy' => 'getRunBy',
        'state' => 'getState',
        'testCaseRefId' => 'getTestCaseRefId',
        'testResultId' => 'getTestResultId',
        'testRunId' => 'getTestRunId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['afnStripId'] = isset($data['afnStripId']) ? $data['afnStripId'] : null;
        $this->container['computerName'] = isset($data['computerName']) ? $data['computerName'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['dateCompleted'] = isset($data['dateCompleted']) ? $data['dateCompleted'] : null;
        $this->container['dateStarted'] = isset($data['dateStarted']) ? $data['dateStarted'] : null;
        $this->container['effectivePointState'] = isset($data['effectivePointState']) ? $data['effectivePointState'] : null;
        $this->container['failureType'] = isset($data['failureType']) ? $data['failureType'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['resetCount'] = isset($data['resetCount']) ? $data['resetCount'] : null;
        $this->container['resolutionStateId'] = isset($data['resolutionStateId']) ? $data['resolutionStateId'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['runBy'] = isset($data['runBy']) ? $data['runBy'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['testCaseRefId'] = isset($data['testCaseRefId']) ? $data['testCaseRefId'] : null;
        $this->container['testResultId'] = isset($data['testResultId']) ? $data['testResultId'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['effectivePointState']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['effectivePointState'])) {
            $invalidProperties[] = "invalid value for 'effectivePointState', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['failureType']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['failureType'])) {
            $invalidProperties[] = "invalid value for 'failureType', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['outcome']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['outcome'])) {
            $invalidProperties[] = "invalid value for 'outcome', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['state']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['state'])) {
            $invalidProperties[] = "invalid value for 'state', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets afnStripId
     *
     * @return int
     */
    public function getAfnStripId()
    {
        return $this->container['afnStripId'];
    }

    /**
     * Sets afnStripId
     *
     * @param int $afnStripId afnStripId
     *
     * @return $this
     */
    public function setAfnStripId($afnStripId)
    {
        $this->container['afnStripId'] = $afnStripId;

        return $this;
    }

    /**
     * Gets computerName
     *
     * @return string
     */
    public function getComputerName()
    {
        return $this->container['computerName'];
    }

    /**
     * Sets computerName
     *
     * @param string $computerName computerName
     *
     * @return $this
     */
    public function setComputerName($computerName)
    {
        $this->container['computerName'] = $computerName;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets dateCompleted
     *
     * @return \DateTime
     */
    public function getDateCompleted()
    {
        return $this->container['dateCompleted'];
    }

    /**
     * Sets dateCompleted
     *
     * @param \DateTime $dateCompleted dateCompleted
     *
     * @return $this
     */
    public function setDateCompleted($dateCompleted)
    {
        $this->container['dateCompleted'] = $dateCompleted;

        return $this;
    }

    /**
     * Gets dateStarted
     *
     * @return \DateTime
     */
    public function getDateStarted()
    {
        return $this->container['dateStarted'];
    }

    /**
     * Sets dateStarted
     *
     * @param \DateTime $dateStarted dateStarted
     *
     * @return $this
     */
    public function setDateStarted($dateStarted)
    {
        $this->container['dateStarted'] = $dateStarted;

        return $this;
    }

    /**
     * Gets effectivePointState
     *
     * @return string
     */
    public function getEffectivePointState()
    {
        return $this->container['effectivePointState'];
    }

    /**
     * Sets effectivePointState
     *
     * @param string $effectivePointState effectivePointState
     *
     * @return $this
     */
    public function setEffectivePointState($effectivePointState)
    {

        if (!is_null($effectivePointState) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $effectivePointState))) {
            throw new \InvalidArgumentException("invalid value for $effectivePointState when calling TestResult2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['effectivePointState'] = $effectivePointState;

        return $this;
    }

    /**
     * Gets failureType
     *
     * @return string
     */
    public function getFailureType()
    {
        return $this->container['failureType'];
    }

    /**
     * Sets failureType
     *
     * @param string $failureType failureType
     *
     * @return $this
     */
    public function setFailureType($failureType)
    {

        if (!is_null($failureType) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $failureType))) {
            throw new \InvalidArgumentException("invalid value for $failureType when calling TestResult2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['failureType'] = $failureType;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated lastUpdated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy lastUpdatedBy
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome outcome
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {

        if (!is_null($outcome) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $outcome))) {
            throw new \InvalidArgumentException("invalid value for $outcome when calling TestResult2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets resetCount
     *
     * @return int
     */
    public function getResetCount()
    {
        return $this->container['resetCount'];
    }

    /**
     * Sets resetCount
     *
     * @param int $resetCount resetCount
     *
     * @return $this
     */
    public function setResetCount($resetCount)
    {
        $this->container['resetCount'] = $resetCount;

        return $this;
    }

    /**
     * Gets resolutionStateId
     *
     * @return int
     */
    public function getResolutionStateId()
    {
        return $this->container['resolutionStateId'];
    }

    /**
     * Sets resolutionStateId
     *
     * @param int $resolutionStateId resolutionStateId
     *
     * @return $this
     */
    public function setResolutionStateId($resolutionStateId)
    {
        $this->container['resolutionStateId'] = $resolutionStateId;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets runBy
     *
     * @return string
     */
    public function getRunBy()
    {
        return $this->container['runBy'];
    }

    /**
     * Sets runBy
     *
     * @param string $runBy runBy
     *
     * @return $this
     */
    public function setRunBy($runBy)
    {
        $this->container['runBy'] = $runBy;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {

        if (!is_null($state) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $state))) {
            throw new \InvalidArgumentException("invalid value for $state when calling TestResult2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets testCaseRefId
     *
     * @return int
     */
    public function getTestCaseRefId()
    {
        return $this->container['testCaseRefId'];
    }

    /**
     * Sets testCaseRefId
     *
     * @param int $testCaseRefId testCaseRefId
     *
     * @return $this
     */
    public function setTestCaseRefId($testCaseRefId)
    {
        $this->container['testCaseRefId'] = $testCaseRefId;

        return $this;
    }

    /**
     * Gets testResultId
     *
     * @return int
     */
    public function getTestResultId()
    {
        return $this->container['testResultId'];
    }

    /**
     * Sets testResultId
     *
     * @param int $testResultId testResultId
     *
     * @return $this
     */
    public function setTestResultId($testResultId)
    {
        $this->container['testResultId'] = $testResultId;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId testRunId
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


