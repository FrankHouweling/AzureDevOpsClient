<?php
/**
 * FetchTestResultsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * FetchTestResultsResponse Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FetchTestResultsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FetchTestResultsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actionResults' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]',
        'attachments' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[]',
        'deletedIds' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier[]',
        'results' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult[]',
        'testParameters' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actionResults' => null,
        'attachments' => null,
        'deletedIds' => null,
        'results' => null,
        'testParameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actionResults' => 'actionResults',
        'attachments' => 'attachments',
        'deletedIds' => 'deletedIds',
        'results' => 'results',
        'testParameters' => 'testParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actionResults' => 'setActionResults',
        'attachments' => 'setAttachments',
        'deletedIds' => 'setDeletedIds',
        'results' => 'setResults',
        'testParameters' => 'setTestParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actionResults' => 'getActionResults',
        'attachments' => 'getAttachments',
        'deletedIds' => 'getDeletedIds',
        'results' => 'getResults',
        'testParameters' => 'getTestParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actionResults'] = isset($data['actionResults']) ? $data['actionResults'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['deletedIds'] = isset($data['deletedIds']) ? $data['deletedIds'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['testParameters'] = isset($data['testParameters']) ? $data['testParameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actionResults
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]
     */
    public function getActionResults()
    {
        return $this->container['actionResults'];
    }

    /**
     * Sets actionResults
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[] $actionResults actionResults
     *
     * @return $this
     */
    public function setActionResults($actionResults)
    {
        $this->container['actionResults'] = $actionResults;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets deletedIds
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier[]
     */
    public function getDeletedIds()
    {
        return $this->container['deletedIds'];
    }

    /**
     * Sets deletedIds
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier[] $deletedIds deletedIds
     *
     * @return $this
     */
    public function setDeletedIds($deletedIds)
    {
        $this->container['deletedIds'] = $deletedIds;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult[]
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult[] $results results
     *
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets testParameters
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]
     */
    public function getTestParameters()
    {
        return $this->container['testParameters'];
    }

    /**
     * Sets testParameters
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[] $testParameters testParameters
     *
     * @return $this
     */
    public function setTestParameters($testParameters)
    {
        $this->container['testParameters'] = $testParameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


