<?php
/**
 * TestExtensionFieldDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestExtensionFieldDetails Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestExtensionFieldDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestExtensionFieldDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'isResultScoped' => 'bool',
        'isRunScoped' => 'bool',
        'isSystemField' => 'bool',
        'name' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'isResultScoped' => null,
        'isRunScoped' => null,
        'isSystemField' => null,
        'name' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'isResultScoped' => 'isResultScoped',
        'isRunScoped' => 'isRunScoped',
        'isSystemField' => 'isSystemField',
        'name' => 'name',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'isResultScoped' => 'setIsResultScoped',
        'isRunScoped' => 'setIsRunScoped',
        'isSystemField' => 'setIsSystemField',
        'name' => 'setName',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'isResultScoped' => 'getIsResultScoped',
        'isRunScoped' => 'getIsRunScoped',
        'isSystemField' => 'getIsSystemField',
        'name' => 'getName',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BIG_INT = 'bigInt';
    const TYPE_BINARY = 'binary';
    const TYPE_BIT = 'bit';
    const TYPE_CHAR = 'char';
    const TYPE_DATE_TIME = 'dateTime';
    const TYPE_DECIMAL = 'decimal';
    const TYPE_FLOAT = 'float';
    const TYPE_IMAGE = 'image';
    const TYPE_INT = 'int';
    const TYPE_MONEY = 'money';
    const TYPE_N_CHAR = 'nChar';
    const TYPE_N_TEXT = 'nText';
    const TYPE_N_VAR_CHAR = 'nVarChar';
    const TYPE_REAL = 'real';
    const TYPE_UNIQUE_IDENTIFIER = 'uniqueIdentifier';
    const TYPE_SMALL_DATE_TIME = 'smallDateTime';
    const TYPE_SMALL_INT = 'smallInt';
    const TYPE_SMALL_MONEY = 'smallMoney';
    const TYPE_TEXT = 'text';
    const TYPE_TIMESTAMP = 'timestamp';
    const TYPE_TINY_INT = 'tinyInt';
    const TYPE_VAR_BINARY = 'varBinary';
    const TYPE_VAR_CHAR = 'varChar';
    const TYPE_VARIANT = 'variant';
    const TYPE_XML = 'xml';
    const TYPE_UDT = 'udt';
    const TYPE_STRUCTURED = 'structured';
    const TYPE_DATE = 'date';
    const TYPE_TIME = 'time';
    const TYPE_DATE_TIME2 = 'dateTime2';
    const TYPE_DATE_TIME_OFFSET = 'dateTimeOffset';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BIG_INT,
            self::TYPE_BINARY,
            self::TYPE_BIT,
            self::TYPE_CHAR,
            self::TYPE_DATE_TIME,
            self::TYPE_DECIMAL,
            self::TYPE_FLOAT,
            self::TYPE_IMAGE,
            self::TYPE_INT,
            self::TYPE_MONEY,
            self::TYPE_N_CHAR,
            self::TYPE_N_TEXT,
            self::TYPE_N_VAR_CHAR,
            self::TYPE_REAL,
            self::TYPE_UNIQUE_IDENTIFIER,
            self::TYPE_SMALL_DATE_TIME,
            self::TYPE_SMALL_INT,
            self::TYPE_SMALL_MONEY,
            self::TYPE_TEXT,
            self::TYPE_TIMESTAMP,
            self::TYPE_TINY_INT,
            self::TYPE_VAR_BINARY,
            self::TYPE_VAR_CHAR,
            self::TYPE_VARIANT,
            self::TYPE_XML,
            self::TYPE_UDT,
            self::TYPE_STRUCTURED,
            self::TYPE_DATE,
            self::TYPE_TIME,
            self::TYPE_DATE_TIME2,
            self::TYPE_DATE_TIME_OFFSET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isResultScoped'] = isset($data['isResultScoped']) ? $data['isResultScoped'] : null;
        $this->container['isRunScoped'] = isset($data['isRunScoped']) ? $data['isRunScoped'] : null;
        $this->container['isSystemField'] = isset($data['isSystemField']) ? $data['isSystemField'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isResultScoped
     *
     * @return bool
     */
    public function getIsResultScoped()
    {
        return $this->container['isResultScoped'];
    }

    /**
     * Sets isResultScoped
     *
     * @param bool $isResultScoped isResultScoped
     *
     * @return $this
     */
    public function setIsResultScoped($isResultScoped)
    {
        $this->container['isResultScoped'] = $isResultScoped;

        return $this;
    }

    /**
     * Gets isRunScoped
     *
     * @return bool
     */
    public function getIsRunScoped()
    {
        return $this->container['isRunScoped'];
    }

    /**
     * Sets isRunScoped
     *
     * @param bool $isRunScoped isRunScoped
     *
     * @return $this
     */
    public function setIsRunScoped($isRunScoped)
    {
        $this->container['isRunScoped'] = $isRunScoped;

        return $this;
    }

    /**
     * Gets isSystemField
     *
     * @return bool
     */
    public function getIsSystemField()
    {
        return $this->container['isSystemField'];
    }

    /**
     * Sets isSystemField
     *
     * @param bool $isSystemField isSystemField
     *
     * @return $this
     */
    public function setIsSystemField($isSystemField)
    {
        $this->container['isSystemField'] = $isSystemField;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


