<?php
/**
 * CloneStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * CloneStatistics Class Doc Comment
 *
 * @category Class
 * @description Clone Statistics Details.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloneStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CloneStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clonedRequirementsCount' => 'int',
        'clonedSharedStepsCount' => 'int',
        'clonedTestCasesCount' => 'int',
        'totalRequirementsCount' => 'int',
        'totalTestCasesCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clonedRequirementsCount' => 'int32',
        'clonedSharedStepsCount' => 'int32',
        'clonedTestCasesCount' => 'int32',
        'totalRequirementsCount' => 'int32',
        'totalTestCasesCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clonedRequirementsCount' => 'clonedRequirementsCount',
        'clonedSharedStepsCount' => 'clonedSharedStepsCount',
        'clonedTestCasesCount' => 'clonedTestCasesCount',
        'totalRequirementsCount' => 'totalRequirementsCount',
        'totalTestCasesCount' => 'totalTestCasesCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clonedRequirementsCount' => 'setClonedRequirementsCount',
        'clonedSharedStepsCount' => 'setClonedSharedStepsCount',
        'clonedTestCasesCount' => 'setClonedTestCasesCount',
        'totalRequirementsCount' => 'setTotalRequirementsCount',
        'totalTestCasesCount' => 'setTotalTestCasesCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clonedRequirementsCount' => 'getClonedRequirementsCount',
        'clonedSharedStepsCount' => 'getClonedSharedStepsCount',
        'clonedTestCasesCount' => 'getClonedTestCasesCount',
        'totalRequirementsCount' => 'getTotalRequirementsCount',
        'totalTestCasesCount' => 'getTotalTestCasesCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clonedRequirementsCount'] = isset($data['clonedRequirementsCount']) ? $data['clonedRequirementsCount'] : null;
        $this->container['clonedSharedStepsCount'] = isset($data['clonedSharedStepsCount']) ? $data['clonedSharedStepsCount'] : null;
        $this->container['clonedTestCasesCount'] = isset($data['clonedTestCasesCount']) ? $data['clonedTestCasesCount'] : null;
        $this->container['totalRequirementsCount'] = isset($data['totalRequirementsCount']) ? $data['totalRequirementsCount'] : null;
        $this->container['totalTestCasesCount'] = isset($data['totalTestCasesCount']) ? $data['totalTestCasesCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clonedRequirementsCount
     *
     * @return int
     */
    public function getClonedRequirementsCount()
    {
        return $this->container['clonedRequirementsCount'];
    }

    /**
     * Sets clonedRequirementsCount
     *
     * @param int $clonedRequirementsCount Number of requirements cloned so far.
     *
     * @return $this
     */
    public function setClonedRequirementsCount($clonedRequirementsCount)
    {
        $this->container['clonedRequirementsCount'] = $clonedRequirementsCount;

        return $this;
    }

    /**
     * Gets clonedSharedStepsCount
     *
     * @return int
     */
    public function getClonedSharedStepsCount()
    {
        return $this->container['clonedSharedStepsCount'];
    }

    /**
     * Sets clonedSharedStepsCount
     *
     * @param int $clonedSharedStepsCount Number of shared steps cloned so far.
     *
     * @return $this
     */
    public function setClonedSharedStepsCount($clonedSharedStepsCount)
    {
        $this->container['clonedSharedStepsCount'] = $clonedSharedStepsCount;

        return $this;
    }

    /**
     * Gets clonedTestCasesCount
     *
     * @return int
     */
    public function getClonedTestCasesCount()
    {
        return $this->container['clonedTestCasesCount'];
    }

    /**
     * Sets clonedTestCasesCount
     *
     * @param int $clonedTestCasesCount Number of test cases cloned so far
     *
     * @return $this
     */
    public function setClonedTestCasesCount($clonedTestCasesCount)
    {
        $this->container['clonedTestCasesCount'] = $clonedTestCasesCount;

        return $this;
    }

    /**
     * Gets totalRequirementsCount
     *
     * @return int
     */
    public function getTotalRequirementsCount()
    {
        return $this->container['totalRequirementsCount'];
    }

    /**
     * Sets totalRequirementsCount
     *
     * @param int $totalRequirementsCount Total number of requirements to be cloned
     *
     * @return $this
     */
    public function setTotalRequirementsCount($totalRequirementsCount)
    {
        $this->container['totalRequirementsCount'] = $totalRequirementsCount;

        return $this;
    }

    /**
     * Gets totalTestCasesCount
     *
     * @return int
     */
    public function getTotalTestCasesCount()
    {
        return $this->container['totalTestCasesCount'];
    }

    /**
     * Sets totalTestCasesCount
     *
     * @param int $totalTestCasesCount Total number of test cases to be cloned
     *
     * @return $this
     */
    public function setTotalTestCasesCount($totalTestCasesCount)
    {
        $this->container['totalTestCasesCount'] = $totalTestCasesCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


