<?php
/**
 * TestRunExtended2
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestRunExtended2 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestRunExtended2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestRunExtended2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'autEnvironmentUrl' => 'string',
        'csmContent' => 'string',
        'csmParameters' => 'string',
        'projectId' => 'string',
        'sourceFilter' => 'string',
        'subscriptionName' => 'string',
        'substate' => 'string',
        'testCaseFilter' => 'string',
        'testEnvironmentUrl' => 'string',
        'testRunId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'autEnvironmentUrl' => null,
        'csmContent' => null,
        'csmParameters' => null,
        'projectId' => 'uuid',
        'sourceFilter' => null,
        'subscriptionName' => null,
        'substate' => 'byte',
        'testCaseFilter' => null,
        'testEnvironmentUrl' => null,
        'testRunId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autEnvironmentUrl' => 'autEnvironmentUrl',
        'csmContent' => 'csmContent',
        'csmParameters' => 'csmParameters',
        'projectId' => 'projectId',
        'sourceFilter' => 'sourceFilter',
        'subscriptionName' => 'subscriptionName',
        'substate' => 'substate',
        'testCaseFilter' => 'testCaseFilter',
        'testEnvironmentUrl' => 'testEnvironmentUrl',
        'testRunId' => 'testRunId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autEnvironmentUrl' => 'setAutEnvironmentUrl',
        'csmContent' => 'setCsmContent',
        'csmParameters' => 'setCsmParameters',
        'projectId' => 'setProjectId',
        'sourceFilter' => 'setSourceFilter',
        'subscriptionName' => 'setSubscriptionName',
        'substate' => 'setSubstate',
        'testCaseFilter' => 'setTestCaseFilter',
        'testEnvironmentUrl' => 'setTestEnvironmentUrl',
        'testRunId' => 'setTestRunId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autEnvironmentUrl' => 'getAutEnvironmentUrl',
        'csmContent' => 'getCsmContent',
        'csmParameters' => 'getCsmParameters',
        'projectId' => 'getProjectId',
        'sourceFilter' => 'getSourceFilter',
        'subscriptionName' => 'getSubscriptionName',
        'substate' => 'getSubstate',
        'testCaseFilter' => 'getTestCaseFilter',
        'testEnvironmentUrl' => 'getTestEnvironmentUrl',
        'testRunId' => 'getTestRunId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['autEnvironmentUrl'] = isset($data['autEnvironmentUrl']) ? $data['autEnvironmentUrl'] : null;
        $this->container['csmContent'] = isset($data['csmContent']) ? $data['csmContent'] : null;
        $this->container['csmParameters'] = isset($data['csmParameters']) ? $data['csmParameters'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['sourceFilter'] = isset($data['sourceFilter']) ? $data['sourceFilter'] : null;
        $this->container['subscriptionName'] = isset($data['subscriptionName']) ? $data['subscriptionName'] : null;
        $this->container['substate'] = isset($data['substate']) ? $data['substate'] : null;
        $this->container['testCaseFilter'] = isset($data['testCaseFilter']) ? $data['testCaseFilter'] : null;
        $this->container['testEnvironmentUrl'] = isset($data['testEnvironmentUrl']) ? $data['testEnvironmentUrl'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['substate']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['substate'])) {
            $invalidProperties[] = "invalid value for 'substate', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autEnvironmentUrl
     *
     * @return string
     */
    public function getAutEnvironmentUrl()
    {
        return $this->container['autEnvironmentUrl'];
    }

    /**
     * Sets autEnvironmentUrl
     *
     * @param string $autEnvironmentUrl autEnvironmentUrl
     *
     * @return $this
     */
    public function setAutEnvironmentUrl($autEnvironmentUrl)
    {
        $this->container['autEnvironmentUrl'] = $autEnvironmentUrl;

        return $this;
    }

    /**
     * Gets csmContent
     *
     * @return string
     */
    public function getCsmContent()
    {
        return $this->container['csmContent'];
    }

    /**
     * Sets csmContent
     *
     * @param string $csmContent csmContent
     *
     * @return $this
     */
    public function setCsmContent($csmContent)
    {
        $this->container['csmContent'] = $csmContent;

        return $this;
    }

    /**
     * Gets csmParameters
     *
     * @return string
     */
    public function getCsmParameters()
    {
        return $this->container['csmParameters'];
    }

    /**
     * Sets csmParameters
     *
     * @param string $csmParameters csmParameters
     *
     * @return $this
     */
    public function setCsmParameters($csmParameters)
    {
        $this->container['csmParameters'] = $csmParameters;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets sourceFilter
     *
     * @return string
     */
    public function getSourceFilter()
    {
        return $this->container['sourceFilter'];
    }

    /**
     * Sets sourceFilter
     *
     * @param string $sourceFilter sourceFilter
     *
     * @return $this
     */
    public function setSourceFilter($sourceFilter)
    {
        $this->container['sourceFilter'] = $sourceFilter;

        return $this;
    }

    /**
     * Gets subscriptionName
     *
     * @return string
     */
    public function getSubscriptionName()
    {
        return $this->container['subscriptionName'];
    }

    /**
     * Sets subscriptionName
     *
     * @param string $subscriptionName subscriptionName
     *
     * @return $this
     */
    public function setSubscriptionName($subscriptionName)
    {
        $this->container['subscriptionName'] = $subscriptionName;

        return $this;
    }

    /**
     * Gets substate
     *
     * @return string
     */
    public function getSubstate()
    {
        return $this->container['substate'];
    }

    /**
     * Sets substate
     *
     * @param string $substate substate
     *
     * @return $this
     */
    public function setSubstate($substate)
    {

        if (!is_null($substate) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $substate))) {
            throw new \InvalidArgumentException("invalid value for $substate when calling TestRunExtended2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['substate'] = $substate;

        return $this;
    }

    /**
     * Gets testCaseFilter
     *
     * @return string
     */
    public function getTestCaseFilter()
    {
        return $this->container['testCaseFilter'];
    }

    /**
     * Sets testCaseFilter
     *
     * @param string $testCaseFilter testCaseFilter
     *
     * @return $this
     */
    public function setTestCaseFilter($testCaseFilter)
    {
        $this->container['testCaseFilter'] = $testCaseFilter;

        return $this;
    }

    /**
     * Gets testEnvironmentUrl
     *
     * @return string
     */
    public function getTestEnvironmentUrl()
    {
        return $this->container['testEnvironmentUrl'];
    }

    /**
     * Sets testEnvironmentUrl
     *
     * @param string $testEnvironmentUrl testEnvironmentUrl
     *
     * @return $this
     */
    public function setTestEnvironmentUrl($testEnvironmentUrl)
    {
        $this->container['testEnvironmentUrl'] = $testEnvironmentUrl;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId testRunId
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


