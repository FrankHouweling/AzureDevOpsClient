<?php
/**
 * LegacyTestRun
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * LegacyTestRun Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyTestRun implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegacyTestRun';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bugsCount' => 'int',
        'buildConfigurationId' => 'int',
        'buildFlavor' => 'string',
        'buildNumber' => 'string',
        'buildPlatform' => 'string',
        'buildReference' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration',
        'buildUri' => 'string',
        'comment' => 'string',
        'completeDate' => '\DateTime',
        'configurationIds' => 'int[]',
        'controller' => 'string',
        'creationDate' => '\DateTime',
        'csmContent' => 'string',
        'csmParameters' => 'string',
        'customFields' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[]',
        'dropLocation' => 'string',
        'dtlAutEnvironment' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference',
        'dtlTestEnvironment' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference',
        'dueDate' => '\DateTime',
        'errorMessage' => 'string',
        'filter' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\RunFilter',
        'incompleteTests' => 'int',
        'isAutomated' => 'bool',
        'isBvt' => 'bool',
        'iteration' => 'string',
        'iterationId' => 'int',
        'lastUpdated' => '\DateTime',
        'lastUpdatedBy' => 'string',
        'lastUpdatedByName' => 'string',
        'legacySharePath' => 'string',
        'notApplicableTests' => 'int',
        'owner' => 'string',
        'ownerName' => 'string',
        'passedTests' => 'int',
        'postProcessState' => 'string',
        'publicTestSettingsId' => 'int',
        'releaseEnvironmentUri' => 'string',
        'releaseReference' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference',
        'releaseUri' => 'string',
        'revision' => 'int',
        'rowVersion' => 'string[]',
        'runHasDtlEnvironment' => 'bool',
        'runTimeout' => 'string',
        'serviceVersion' => 'string',
        'sourceWorkflow' => 'string',
        'startDate' => '\DateTime',
        'state' => 'string',
        'subscriptionName' => 'string',
        'substate' => 'string',
        'teamProject' => 'string',
        'teamProjectUri' => 'string',
        'testConfigurationsMapping' => 'string',
        'testEnvironmentId' => 'string',
        'testMessageLogEntries' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestMessageLogDetails[]',
        'testMessageLogId' => 'int',
        'testPlanId' => 'int',
        'testRunId' => 'int',
        'testRunStatistics' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestRunStatistic[]',
        'testSettingsId' => 'int',
        'title' => 'string',
        'totalTests' => 'int',
        'type' => 'string',
        'unanalyzedTests' => 'int',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bugsCount' => 'int32',
        'buildConfigurationId' => 'int32',
        'buildFlavor' => null,
        'buildNumber' => null,
        'buildPlatform' => null,
        'buildReference' => null,
        'buildUri' => null,
        'comment' => null,
        'completeDate' => 'date-time',
        'configurationIds' => 'int32',
        'controller' => null,
        'creationDate' => 'date-time',
        'csmContent' => null,
        'csmParameters' => null,
        'customFields' => null,
        'dropLocation' => null,
        'dtlAutEnvironment' => null,
        'dtlTestEnvironment' => null,
        'dueDate' => 'date-time',
        'errorMessage' => null,
        'filter' => null,
        'incompleteTests' => 'int32',
        'isAutomated' => null,
        'isBvt' => null,
        'iteration' => null,
        'iterationId' => 'int32',
        'lastUpdated' => 'date-time',
        'lastUpdatedBy' => 'uuid',
        'lastUpdatedByName' => null,
        'legacySharePath' => null,
        'notApplicableTests' => 'int32',
        'owner' => 'uuid',
        'ownerName' => null,
        'passedTests' => 'int32',
        'postProcessState' => 'byte',
        'publicTestSettingsId' => 'int32',
        'releaseEnvironmentUri' => null,
        'releaseReference' => null,
        'releaseUri' => null,
        'revision' => 'int32',
        'rowVersion' => 'byte',
        'runHasDtlEnvironment' => null,
        'runTimeout' => 'TimeSpan',
        'serviceVersion' => null,
        'sourceWorkflow' => null,
        'startDate' => 'date-time',
        'state' => 'byte',
        'subscriptionName' => null,
        'substate' => 'byte',
        'teamProject' => null,
        'teamProjectUri' => null,
        'testConfigurationsMapping' => null,
        'testEnvironmentId' => 'uuid',
        'testMessageLogEntries' => null,
        'testMessageLogId' => 'int32',
        'testPlanId' => 'int32',
        'testRunId' => 'int32',
        'testRunStatistics' => null,
        'testSettingsId' => 'int32',
        'title' => null,
        'totalTests' => 'int32',
        'type' => 'byte',
        'unanalyzedTests' => 'int32',
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bugsCount' => 'bugsCount',
        'buildConfigurationId' => 'buildConfigurationId',
        'buildFlavor' => 'buildFlavor',
        'buildNumber' => 'buildNumber',
        'buildPlatform' => 'buildPlatform',
        'buildReference' => 'buildReference',
        'buildUri' => 'buildUri',
        'comment' => 'comment',
        'completeDate' => 'completeDate',
        'configurationIds' => 'configurationIds',
        'controller' => 'controller',
        'creationDate' => 'creationDate',
        'csmContent' => 'csmContent',
        'csmParameters' => 'csmParameters',
        'customFields' => 'customFields',
        'dropLocation' => 'dropLocation',
        'dtlAutEnvironment' => 'dtlAutEnvironment',
        'dtlTestEnvironment' => 'dtlTestEnvironment',
        'dueDate' => 'dueDate',
        'errorMessage' => 'errorMessage',
        'filter' => 'filter',
        'incompleteTests' => 'incompleteTests',
        'isAutomated' => 'isAutomated',
        'isBvt' => 'isBvt',
        'iteration' => 'iteration',
        'iterationId' => 'iterationId',
        'lastUpdated' => 'lastUpdated',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedByName' => 'lastUpdatedByName',
        'legacySharePath' => 'legacySharePath',
        'notApplicableTests' => 'notApplicableTests',
        'owner' => 'owner',
        'ownerName' => 'ownerName',
        'passedTests' => 'passedTests',
        'postProcessState' => 'postProcessState',
        'publicTestSettingsId' => 'publicTestSettingsId',
        'releaseEnvironmentUri' => 'releaseEnvironmentUri',
        'releaseReference' => 'releaseReference',
        'releaseUri' => 'releaseUri',
        'revision' => 'revision',
        'rowVersion' => 'rowVersion',
        'runHasDtlEnvironment' => 'runHasDtlEnvironment',
        'runTimeout' => 'runTimeout',
        'serviceVersion' => 'serviceVersion',
        'sourceWorkflow' => 'sourceWorkflow',
        'startDate' => 'startDate',
        'state' => 'state',
        'subscriptionName' => 'subscriptionName',
        'substate' => 'substate',
        'teamProject' => 'teamProject',
        'teamProjectUri' => 'teamProjectUri',
        'testConfigurationsMapping' => 'testConfigurationsMapping',
        'testEnvironmentId' => 'testEnvironmentId',
        'testMessageLogEntries' => 'testMessageLogEntries',
        'testMessageLogId' => 'testMessageLogId',
        'testPlanId' => 'testPlanId',
        'testRunId' => 'testRunId',
        'testRunStatistics' => 'testRunStatistics',
        'testSettingsId' => 'testSettingsId',
        'title' => 'title',
        'totalTests' => 'totalTests',
        'type' => 'type',
        'unanalyzedTests' => 'unanalyzedTests',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bugsCount' => 'setBugsCount',
        'buildConfigurationId' => 'setBuildConfigurationId',
        'buildFlavor' => 'setBuildFlavor',
        'buildNumber' => 'setBuildNumber',
        'buildPlatform' => 'setBuildPlatform',
        'buildReference' => 'setBuildReference',
        'buildUri' => 'setBuildUri',
        'comment' => 'setComment',
        'completeDate' => 'setCompleteDate',
        'configurationIds' => 'setConfigurationIds',
        'controller' => 'setController',
        'creationDate' => 'setCreationDate',
        'csmContent' => 'setCsmContent',
        'csmParameters' => 'setCsmParameters',
        'customFields' => 'setCustomFields',
        'dropLocation' => 'setDropLocation',
        'dtlAutEnvironment' => 'setDtlAutEnvironment',
        'dtlTestEnvironment' => 'setDtlTestEnvironment',
        'dueDate' => 'setDueDate',
        'errorMessage' => 'setErrorMessage',
        'filter' => 'setFilter',
        'incompleteTests' => 'setIncompleteTests',
        'isAutomated' => 'setIsAutomated',
        'isBvt' => 'setIsBvt',
        'iteration' => 'setIteration',
        'iterationId' => 'setIterationId',
        'lastUpdated' => 'setLastUpdated',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedByName' => 'setLastUpdatedByName',
        'legacySharePath' => 'setLegacySharePath',
        'notApplicableTests' => 'setNotApplicableTests',
        'owner' => 'setOwner',
        'ownerName' => 'setOwnerName',
        'passedTests' => 'setPassedTests',
        'postProcessState' => 'setPostProcessState',
        'publicTestSettingsId' => 'setPublicTestSettingsId',
        'releaseEnvironmentUri' => 'setReleaseEnvironmentUri',
        'releaseReference' => 'setReleaseReference',
        'releaseUri' => 'setReleaseUri',
        'revision' => 'setRevision',
        'rowVersion' => 'setRowVersion',
        'runHasDtlEnvironment' => 'setRunHasDtlEnvironment',
        'runTimeout' => 'setRunTimeout',
        'serviceVersion' => 'setServiceVersion',
        'sourceWorkflow' => 'setSourceWorkflow',
        'startDate' => 'setStartDate',
        'state' => 'setState',
        'subscriptionName' => 'setSubscriptionName',
        'substate' => 'setSubstate',
        'teamProject' => 'setTeamProject',
        'teamProjectUri' => 'setTeamProjectUri',
        'testConfigurationsMapping' => 'setTestConfigurationsMapping',
        'testEnvironmentId' => 'setTestEnvironmentId',
        'testMessageLogEntries' => 'setTestMessageLogEntries',
        'testMessageLogId' => 'setTestMessageLogId',
        'testPlanId' => 'setTestPlanId',
        'testRunId' => 'setTestRunId',
        'testRunStatistics' => 'setTestRunStatistics',
        'testSettingsId' => 'setTestSettingsId',
        'title' => 'setTitle',
        'totalTests' => 'setTotalTests',
        'type' => 'setType',
        'unanalyzedTests' => 'setUnanalyzedTests',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bugsCount' => 'getBugsCount',
        'buildConfigurationId' => 'getBuildConfigurationId',
        'buildFlavor' => 'getBuildFlavor',
        'buildNumber' => 'getBuildNumber',
        'buildPlatform' => 'getBuildPlatform',
        'buildReference' => 'getBuildReference',
        'buildUri' => 'getBuildUri',
        'comment' => 'getComment',
        'completeDate' => 'getCompleteDate',
        'configurationIds' => 'getConfigurationIds',
        'controller' => 'getController',
        'creationDate' => 'getCreationDate',
        'csmContent' => 'getCsmContent',
        'csmParameters' => 'getCsmParameters',
        'customFields' => 'getCustomFields',
        'dropLocation' => 'getDropLocation',
        'dtlAutEnvironment' => 'getDtlAutEnvironment',
        'dtlTestEnvironment' => 'getDtlTestEnvironment',
        'dueDate' => 'getDueDate',
        'errorMessage' => 'getErrorMessage',
        'filter' => 'getFilter',
        'incompleteTests' => 'getIncompleteTests',
        'isAutomated' => 'getIsAutomated',
        'isBvt' => 'getIsBvt',
        'iteration' => 'getIteration',
        'iterationId' => 'getIterationId',
        'lastUpdated' => 'getLastUpdated',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedByName' => 'getLastUpdatedByName',
        'legacySharePath' => 'getLegacySharePath',
        'notApplicableTests' => 'getNotApplicableTests',
        'owner' => 'getOwner',
        'ownerName' => 'getOwnerName',
        'passedTests' => 'getPassedTests',
        'postProcessState' => 'getPostProcessState',
        'publicTestSettingsId' => 'getPublicTestSettingsId',
        'releaseEnvironmentUri' => 'getReleaseEnvironmentUri',
        'releaseReference' => 'getReleaseReference',
        'releaseUri' => 'getReleaseUri',
        'revision' => 'getRevision',
        'rowVersion' => 'getRowVersion',
        'runHasDtlEnvironment' => 'getRunHasDtlEnvironment',
        'runTimeout' => 'getRunTimeout',
        'serviceVersion' => 'getServiceVersion',
        'sourceWorkflow' => 'getSourceWorkflow',
        'startDate' => 'getStartDate',
        'state' => 'getState',
        'subscriptionName' => 'getSubscriptionName',
        'substate' => 'getSubstate',
        'teamProject' => 'getTeamProject',
        'teamProjectUri' => 'getTeamProjectUri',
        'testConfigurationsMapping' => 'getTestConfigurationsMapping',
        'testEnvironmentId' => 'getTestEnvironmentId',
        'testMessageLogEntries' => 'getTestMessageLogEntries',
        'testMessageLogId' => 'getTestMessageLogId',
        'testPlanId' => 'getTestPlanId',
        'testRunId' => 'getTestRunId',
        'testRunStatistics' => 'getTestRunStatistics',
        'testSettingsId' => 'getTestSettingsId',
        'title' => 'getTitle',
        'totalTests' => 'getTotalTests',
        'type' => 'getType',
        'unanalyzedTests' => 'getUnanalyzedTests',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bugsCount'] = isset($data['bugsCount']) ? $data['bugsCount'] : null;
        $this->container['buildConfigurationId'] = isset($data['buildConfigurationId']) ? $data['buildConfigurationId'] : null;
        $this->container['buildFlavor'] = isset($data['buildFlavor']) ? $data['buildFlavor'] : null;
        $this->container['buildNumber'] = isset($data['buildNumber']) ? $data['buildNumber'] : null;
        $this->container['buildPlatform'] = isset($data['buildPlatform']) ? $data['buildPlatform'] : null;
        $this->container['buildReference'] = isset($data['buildReference']) ? $data['buildReference'] : null;
        $this->container['buildUri'] = isset($data['buildUri']) ? $data['buildUri'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['completeDate'] = isset($data['completeDate']) ? $data['completeDate'] : null;
        $this->container['configurationIds'] = isset($data['configurationIds']) ? $data['configurationIds'] : null;
        $this->container['controller'] = isset($data['controller']) ? $data['controller'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['csmContent'] = isset($data['csmContent']) ? $data['csmContent'] : null;
        $this->container['csmParameters'] = isset($data['csmParameters']) ? $data['csmParameters'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['dropLocation'] = isset($data['dropLocation']) ? $data['dropLocation'] : null;
        $this->container['dtlAutEnvironment'] = isset($data['dtlAutEnvironment']) ? $data['dtlAutEnvironment'] : null;
        $this->container['dtlTestEnvironment'] = isset($data['dtlTestEnvironment']) ? $data['dtlTestEnvironment'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['incompleteTests'] = isset($data['incompleteTests']) ? $data['incompleteTests'] : null;
        $this->container['isAutomated'] = isset($data['isAutomated']) ? $data['isAutomated'] : null;
        $this->container['isBvt'] = isset($data['isBvt']) ? $data['isBvt'] : null;
        $this->container['iteration'] = isset($data['iteration']) ? $data['iteration'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedByName'] = isset($data['lastUpdatedByName']) ? $data['lastUpdatedByName'] : null;
        $this->container['legacySharePath'] = isset($data['legacySharePath']) ? $data['legacySharePath'] : null;
        $this->container['notApplicableTests'] = isset($data['notApplicableTests']) ? $data['notApplicableTests'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['ownerName'] = isset($data['ownerName']) ? $data['ownerName'] : null;
        $this->container['passedTests'] = isset($data['passedTests']) ? $data['passedTests'] : null;
        $this->container['postProcessState'] = isset($data['postProcessState']) ? $data['postProcessState'] : null;
        $this->container['publicTestSettingsId'] = isset($data['publicTestSettingsId']) ? $data['publicTestSettingsId'] : null;
        $this->container['releaseEnvironmentUri'] = isset($data['releaseEnvironmentUri']) ? $data['releaseEnvironmentUri'] : null;
        $this->container['releaseReference'] = isset($data['releaseReference']) ? $data['releaseReference'] : null;
        $this->container['releaseUri'] = isset($data['releaseUri']) ? $data['releaseUri'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['rowVersion'] = isset($data['rowVersion']) ? $data['rowVersion'] : null;
        $this->container['runHasDtlEnvironment'] = isset($data['runHasDtlEnvironment']) ? $data['runHasDtlEnvironment'] : null;
        $this->container['runTimeout'] = isset($data['runTimeout']) ? $data['runTimeout'] : null;
        $this->container['serviceVersion'] = isset($data['serviceVersion']) ? $data['serviceVersion'] : null;
        $this->container['sourceWorkflow'] = isset($data['sourceWorkflow']) ? $data['sourceWorkflow'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['subscriptionName'] = isset($data['subscriptionName']) ? $data['subscriptionName'] : null;
        $this->container['substate'] = isset($data['substate']) ? $data['substate'] : null;
        $this->container['teamProject'] = isset($data['teamProject']) ? $data['teamProject'] : null;
        $this->container['teamProjectUri'] = isset($data['teamProjectUri']) ? $data['teamProjectUri'] : null;
        $this->container['testConfigurationsMapping'] = isset($data['testConfigurationsMapping']) ? $data['testConfigurationsMapping'] : null;
        $this->container['testEnvironmentId'] = isset($data['testEnvironmentId']) ? $data['testEnvironmentId'] : null;
        $this->container['testMessageLogEntries'] = isset($data['testMessageLogEntries']) ? $data['testMessageLogEntries'] : null;
        $this->container['testMessageLogId'] = isset($data['testMessageLogId']) ? $data['testMessageLogId'] : null;
        $this->container['testPlanId'] = isset($data['testPlanId']) ? $data['testPlanId'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
        $this->container['testRunStatistics'] = isset($data['testRunStatistics']) ? $data['testRunStatistics'] : null;
        $this->container['testSettingsId'] = isset($data['testSettingsId']) ? $data['testSettingsId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['totalTests'] = isset($data['totalTests']) ? $data['totalTests'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unanalyzedTests'] = isset($data['unanalyzedTests']) ? $data['unanalyzedTests'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['postProcessState']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['postProcessState'])) {
            $invalidProperties[] = "invalid value for 'postProcessState', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['state']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['state'])) {
            $invalidProperties[] = "invalid value for 'state', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['substate']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['substate'])) {
            $invalidProperties[] = "invalid value for 'substate', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['type']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['type'])) {
            $invalidProperties[] = "invalid value for 'type', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bugsCount
     *
     * @return int
     */
    public function getBugsCount()
    {
        return $this->container['bugsCount'];
    }

    /**
     * Sets bugsCount
     *
     * @param int $bugsCount bugsCount
     *
     * @return $this
     */
    public function setBugsCount($bugsCount)
    {
        $this->container['bugsCount'] = $bugsCount;

        return $this;
    }

    /**
     * Gets buildConfigurationId
     *
     * @return int
     */
    public function getBuildConfigurationId()
    {
        return $this->container['buildConfigurationId'];
    }

    /**
     * Sets buildConfigurationId
     *
     * @param int $buildConfigurationId buildConfigurationId
     *
     * @return $this
     */
    public function setBuildConfigurationId($buildConfigurationId)
    {
        $this->container['buildConfigurationId'] = $buildConfigurationId;

        return $this;
    }

    /**
     * Gets buildFlavor
     *
     * @return string
     */
    public function getBuildFlavor()
    {
        return $this->container['buildFlavor'];
    }

    /**
     * Sets buildFlavor
     *
     * @param string $buildFlavor buildFlavor
     *
     * @return $this
     */
    public function setBuildFlavor($buildFlavor)
    {
        $this->container['buildFlavor'] = $buildFlavor;

        return $this;
    }

    /**
     * Gets buildNumber
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['buildNumber'];
    }

    /**
     * Sets buildNumber
     *
     * @param string $buildNumber buildNumber
     *
     * @return $this
     */
    public function setBuildNumber($buildNumber)
    {
        $this->container['buildNumber'] = $buildNumber;

        return $this;
    }

    /**
     * Gets buildPlatform
     *
     * @return string
     */
    public function getBuildPlatform()
    {
        return $this->container['buildPlatform'];
    }

    /**
     * Sets buildPlatform
     *
     * @param string $buildPlatform buildPlatform
     *
     * @return $this
     */
    public function setBuildPlatform($buildPlatform)
    {
        $this->container['buildPlatform'] = $buildPlatform;

        return $this;
    }

    /**
     * Gets buildReference
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration
     */
    public function getBuildReference()
    {
        return $this->container['buildReference'];
    }

    /**
     * Sets buildReference
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration $buildReference buildReference
     *
     * @return $this
     */
    public function setBuildReference($buildReference)
    {
        $this->container['buildReference'] = $buildReference;

        return $this;
    }

    /**
     * Gets buildUri
     *
     * @return string
     */
    public function getBuildUri()
    {
        return $this->container['buildUri'];
    }

    /**
     * Sets buildUri
     *
     * @param string $buildUri buildUri
     *
     * @return $this
     */
    public function setBuildUri($buildUri)
    {
        $this->container['buildUri'] = $buildUri;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets completeDate
     *
     * @return \DateTime
     */
    public function getCompleteDate()
    {
        return $this->container['completeDate'];
    }

    /**
     * Sets completeDate
     *
     * @param \DateTime $completeDate completeDate
     *
     * @return $this
     */
    public function setCompleteDate($completeDate)
    {
        $this->container['completeDate'] = $completeDate;

        return $this;
    }

    /**
     * Gets configurationIds
     *
     * @return int[]
     */
    public function getConfigurationIds()
    {
        return $this->container['configurationIds'];
    }

    /**
     * Sets configurationIds
     *
     * @param int[] $configurationIds configurationIds
     *
     * @return $this
     */
    public function setConfigurationIds($configurationIds)
    {
        $this->container['configurationIds'] = $configurationIds;

        return $this;
    }

    /**
     * Gets controller
     *
     * @return string
     */
    public function getController()
    {
        return $this->container['controller'];
    }

    /**
     * Sets controller
     *
     * @param string $controller controller
     *
     * @return $this
     */
    public function setController($controller)
    {
        $this->container['controller'] = $controller;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets csmContent
     *
     * @return string
     */
    public function getCsmContent()
    {
        return $this->container['csmContent'];
    }

    /**
     * Sets csmContent
     *
     * @param string $csmContent csmContent
     *
     * @return $this
     */
    public function setCsmContent($csmContent)
    {
        $this->container['csmContent'] = $csmContent;

        return $this;
    }

    /**
     * Gets csmParameters
     *
     * @return string
     */
    public function getCsmParameters()
    {
        return $this->container['csmParameters'];
    }

    /**
     * Sets csmParameters
     *
     * @param string $csmParameters csmParameters
     *
     * @return $this
     */
    public function setCsmParameters($csmParameters)
    {
        $this->container['csmParameters'] = $csmParameters;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[] $customFields customFields
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets dropLocation
     *
     * @return string
     */
    public function getDropLocation()
    {
        return $this->container['dropLocation'];
    }

    /**
     * Sets dropLocation
     *
     * @param string $dropLocation dropLocation
     *
     * @return $this
     */
    public function setDropLocation($dropLocation)
    {
        $this->container['dropLocation'] = $dropLocation;

        return $this;
    }

    /**
     * Gets dtlAutEnvironment
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getDtlAutEnvironment()
    {
        return $this->container['dtlAutEnvironment'];
    }

    /**
     * Sets dtlAutEnvironment
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference $dtlAutEnvironment dtlAutEnvironment
     *
     * @return $this
     */
    public function setDtlAutEnvironment($dtlAutEnvironment)
    {
        $this->container['dtlAutEnvironment'] = $dtlAutEnvironment;

        return $this;
    }

    /**
     * Gets dtlTestEnvironment
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getDtlTestEnvironment()
    {
        return $this->container['dtlTestEnvironment'];
    }

    /**
     * Sets dtlTestEnvironment
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\ShallowReference $dtlTestEnvironment dtlTestEnvironment
     *
     * @return $this
     */
    public function setDtlTestEnvironment($dtlTestEnvironment)
    {
        $this->container['dtlTestEnvironment'] = $dtlTestEnvironment;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime $dueDate dueDate
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage errorMessage
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\RunFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\RunFilter $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets incompleteTests
     *
     * @return int
     */
    public function getIncompleteTests()
    {
        return $this->container['incompleteTests'];
    }

    /**
     * Sets incompleteTests
     *
     * @param int $incompleteTests incompleteTests
     *
     * @return $this
     */
    public function setIncompleteTests($incompleteTests)
    {
        $this->container['incompleteTests'] = $incompleteTests;

        return $this;
    }

    /**
     * Gets isAutomated
     *
     * @return bool
     */
    public function getIsAutomated()
    {
        return $this->container['isAutomated'];
    }

    /**
     * Sets isAutomated
     *
     * @param bool $isAutomated isAutomated
     *
     * @return $this
     */
    public function setIsAutomated($isAutomated)
    {
        $this->container['isAutomated'] = $isAutomated;

        return $this;
    }

    /**
     * Gets isBvt
     *
     * @return bool
     */
    public function getIsBvt()
    {
        return $this->container['isBvt'];
    }

    /**
     * Sets isBvt
     *
     * @param bool $isBvt isBvt
     *
     * @return $this
     */
    public function setIsBvt($isBvt)
    {
        $this->container['isBvt'] = $isBvt;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return string
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param string $iteration iteration
     *
     * @return $this
     */
    public function setIteration($iteration)
    {
        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId iterationId
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated lastUpdated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy lastUpdatedBy
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedByName
     *
     * @return string
     */
    public function getLastUpdatedByName()
    {
        return $this->container['lastUpdatedByName'];
    }

    /**
     * Sets lastUpdatedByName
     *
     * @param string $lastUpdatedByName lastUpdatedByName
     *
     * @return $this
     */
    public function setLastUpdatedByName($lastUpdatedByName)
    {
        $this->container['lastUpdatedByName'] = $lastUpdatedByName;

        return $this;
    }

    /**
     * Gets legacySharePath
     *
     * @return string
     */
    public function getLegacySharePath()
    {
        return $this->container['legacySharePath'];
    }

    /**
     * Sets legacySharePath
     *
     * @param string $legacySharePath legacySharePath
     *
     * @return $this
     */
    public function setLegacySharePath($legacySharePath)
    {
        $this->container['legacySharePath'] = $legacySharePath;

        return $this;
    }

    /**
     * Gets notApplicableTests
     *
     * @return int
     */
    public function getNotApplicableTests()
    {
        return $this->container['notApplicableTests'];
    }

    /**
     * Sets notApplicableTests
     *
     * @param int $notApplicableTests notApplicableTests
     *
     * @return $this
     */
    public function setNotApplicableTests($notApplicableTests)
    {
        $this->container['notApplicableTests'] = $notApplicableTests;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets ownerName
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['ownerName'];
    }

    /**
     * Sets ownerName
     *
     * @param string $ownerName ownerName
     *
     * @return $this
     */
    public function setOwnerName($ownerName)
    {
        $this->container['ownerName'] = $ownerName;

        return $this;
    }

    /**
     * Gets passedTests
     *
     * @return int
     */
    public function getPassedTests()
    {
        return $this->container['passedTests'];
    }

    /**
     * Sets passedTests
     *
     * @param int $passedTests passedTests
     *
     * @return $this
     */
    public function setPassedTests($passedTests)
    {
        $this->container['passedTests'] = $passedTests;

        return $this;
    }

    /**
     * Gets postProcessState
     *
     * @return string
     */
    public function getPostProcessState()
    {
        return $this->container['postProcessState'];
    }

    /**
     * Sets postProcessState
     *
     * @param string $postProcessState postProcessState
     *
     * @return $this
     */
    public function setPostProcessState($postProcessState)
    {

        if (!is_null($postProcessState) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $postProcessState))) {
            throw new \InvalidArgumentException("invalid value for $postProcessState when calling LegacyTestRun., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['postProcessState'] = $postProcessState;

        return $this;
    }

    /**
     * Gets publicTestSettingsId
     *
     * @return int
     */
    public function getPublicTestSettingsId()
    {
        return $this->container['publicTestSettingsId'];
    }

    /**
     * Sets publicTestSettingsId
     *
     * @param int $publicTestSettingsId publicTestSettingsId
     *
     * @return $this
     */
    public function setPublicTestSettingsId($publicTestSettingsId)
    {
        $this->container['publicTestSettingsId'] = $publicTestSettingsId;

        return $this;
    }

    /**
     * Gets releaseEnvironmentUri
     *
     * @return string
     */
    public function getReleaseEnvironmentUri()
    {
        return $this->container['releaseEnvironmentUri'];
    }

    /**
     * Sets releaseEnvironmentUri
     *
     * @param string $releaseEnvironmentUri releaseEnvironmentUri
     *
     * @return $this
     */
    public function setReleaseEnvironmentUri($releaseEnvironmentUri)
    {
        $this->container['releaseEnvironmentUri'] = $releaseEnvironmentUri;

        return $this;
    }

    /**
     * Gets releaseReference
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference
     */
    public function getReleaseReference()
    {
        return $this->container['releaseReference'];
    }

    /**
     * Sets releaseReference
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference $releaseReference releaseReference
     *
     * @return $this
     */
    public function setReleaseReference($releaseReference)
    {
        $this->container['releaseReference'] = $releaseReference;

        return $this;
    }

    /**
     * Gets releaseUri
     *
     * @return string
     */
    public function getReleaseUri()
    {
        return $this->container['releaseUri'];
    }

    /**
     * Sets releaseUri
     *
     * @param string $releaseUri releaseUri
     *
     * @return $this
     */
    public function setReleaseUri($releaseUri)
    {
        $this->container['releaseUri'] = $releaseUri;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets rowVersion
     *
     * @return string[]
     */
    public function getRowVersion()
    {
        return $this->container['rowVersion'];
    }

    /**
     * Sets rowVersion
     *
     * @param string[] $rowVersion rowVersion
     *
     * @return $this
     */
    public function setRowVersion($rowVersion)
    {
        $this->container['rowVersion'] = $rowVersion;

        return $this;
    }

    /**
     * Gets runHasDtlEnvironment
     *
     * @return bool
     */
    public function getRunHasDtlEnvironment()
    {
        return $this->container['runHasDtlEnvironment'];
    }

    /**
     * Sets runHasDtlEnvironment
     *
     * @param bool $runHasDtlEnvironment runHasDtlEnvironment
     *
     * @return $this
     */
    public function setRunHasDtlEnvironment($runHasDtlEnvironment)
    {
        $this->container['runHasDtlEnvironment'] = $runHasDtlEnvironment;

        return $this;
    }

    /**
     * Gets runTimeout
     *
     * @return string
     */
    public function getRunTimeout()
    {
        return $this->container['runTimeout'];
    }

    /**
     * Sets runTimeout
     *
     * @param string $runTimeout runTimeout
     *
     * @return $this
     */
    public function setRunTimeout($runTimeout)
    {
        $this->container['runTimeout'] = $runTimeout;

        return $this;
    }

    /**
     * Gets serviceVersion
     *
     * @return string
     */
    public function getServiceVersion()
    {
        return $this->container['serviceVersion'];
    }

    /**
     * Sets serviceVersion
     *
     * @param string $serviceVersion serviceVersion
     *
     * @return $this
     */
    public function setServiceVersion($serviceVersion)
    {
        $this->container['serviceVersion'] = $serviceVersion;

        return $this;
    }

    /**
     * Gets sourceWorkflow
     *
     * @return string
     */
    public function getSourceWorkflow()
    {
        return $this->container['sourceWorkflow'];
    }

    /**
     * Sets sourceWorkflow
     *
     * @param string $sourceWorkflow sourceWorkflow
     *
     * @return $this
     */
    public function setSourceWorkflow($sourceWorkflow)
    {
        $this->container['sourceWorkflow'] = $sourceWorkflow;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {

        if (!is_null($state) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $state))) {
            throw new \InvalidArgumentException("invalid value for $state when calling LegacyTestRun., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subscriptionName
     *
     * @return string
     */
    public function getSubscriptionName()
    {
        return $this->container['subscriptionName'];
    }

    /**
     * Sets subscriptionName
     *
     * @param string $subscriptionName subscriptionName
     *
     * @return $this
     */
    public function setSubscriptionName($subscriptionName)
    {
        $this->container['subscriptionName'] = $subscriptionName;

        return $this;
    }

    /**
     * Gets substate
     *
     * @return string
     */
    public function getSubstate()
    {
        return $this->container['substate'];
    }

    /**
     * Sets substate
     *
     * @param string $substate substate
     *
     * @return $this
     */
    public function setSubstate($substate)
    {

        if (!is_null($substate) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $substate))) {
            throw new \InvalidArgumentException("invalid value for $substate when calling LegacyTestRun., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['substate'] = $substate;

        return $this;
    }

    /**
     * Gets teamProject
     *
     * @return string
     */
    public function getTeamProject()
    {
        return $this->container['teamProject'];
    }

    /**
     * Sets teamProject
     *
     * @param string $teamProject teamProject
     *
     * @return $this
     */
    public function setTeamProject($teamProject)
    {
        $this->container['teamProject'] = $teamProject;

        return $this;
    }

    /**
     * Gets teamProjectUri
     *
     * @return string
     */
    public function getTeamProjectUri()
    {
        return $this->container['teamProjectUri'];
    }

    /**
     * Sets teamProjectUri
     *
     * @param string $teamProjectUri teamProjectUri
     *
     * @return $this
     */
    public function setTeamProjectUri($teamProjectUri)
    {
        $this->container['teamProjectUri'] = $teamProjectUri;

        return $this;
    }

    /**
     * Gets testConfigurationsMapping
     *
     * @return string
     */
    public function getTestConfigurationsMapping()
    {
        return $this->container['testConfigurationsMapping'];
    }

    /**
     * Sets testConfigurationsMapping
     *
     * @param string $testConfigurationsMapping testConfigurationsMapping
     *
     * @return $this
     */
    public function setTestConfigurationsMapping($testConfigurationsMapping)
    {
        $this->container['testConfigurationsMapping'] = $testConfigurationsMapping;

        return $this;
    }

    /**
     * Gets testEnvironmentId
     *
     * @return string
     */
    public function getTestEnvironmentId()
    {
        return $this->container['testEnvironmentId'];
    }

    /**
     * Sets testEnvironmentId
     *
     * @param string $testEnvironmentId testEnvironmentId
     *
     * @return $this
     */
    public function setTestEnvironmentId($testEnvironmentId)
    {
        $this->container['testEnvironmentId'] = $testEnvironmentId;

        return $this;
    }

    /**
     * Gets testMessageLogEntries
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestMessageLogDetails[]
     */
    public function getTestMessageLogEntries()
    {
        return $this->container['testMessageLogEntries'];
    }

    /**
     * Sets testMessageLogEntries
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestMessageLogDetails[] $testMessageLogEntries testMessageLogEntries
     *
     * @return $this
     */
    public function setTestMessageLogEntries($testMessageLogEntries)
    {
        $this->container['testMessageLogEntries'] = $testMessageLogEntries;

        return $this;
    }

    /**
     * Gets testMessageLogId
     *
     * @return int
     */
    public function getTestMessageLogId()
    {
        return $this->container['testMessageLogId'];
    }

    /**
     * Sets testMessageLogId
     *
     * @param int $testMessageLogId testMessageLogId
     *
     * @return $this
     */
    public function setTestMessageLogId($testMessageLogId)
    {
        $this->container['testMessageLogId'] = $testMessageLogId;

        return $this;
    }

    /**
     * Gets testPlanId
     *
     * @return int
     */
    public function getTestPlanId()
    {
        return $this->container['testPlanId'];
    }

    /**
     * Sets testPlanId
     *
     * @param int $testPlanId testPlanId
     *
     * @return $this
     */
    public function setTestPlanId($testPlanId)
    {
        $this->container['testPlanId'] = $testPlanId;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId testRunId
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }

    /**
     * Gets testRunStatistics
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestRunStatistic[]
     */
    public function getTestRunStatistics()
    {
        return $this->container['testRunStatistics'];
    }

    /**
     * Sets testRunStatistics
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestRunStatistic[] $testRunStatistics testRunStatistics
     *
     * @return $this
     */
    public function setTestRunStatistics($testRunStatistics)
    {
        $this->container['testRunStatistics'] = $testRunStatistics;

        return $this;
    }

    /**
     * Gets testSettingsId
     *
     * @return int
     */
    public function getTestSettingsId()
    {
        return $this->container['testSettingsId'];
    }

    /**
     * Sets testSettingsId
     *
     * @param int $testSettingsId testSettingsId
     *
     * @return $this
     */
    public function setTestSettingsId($testSettingsId)
    {
        $this->container['testSettingsId'] = $testSettingsId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets totalTests
     *
     * @return int
     */
    public function getTotalTests()
    {
        return $this->container['totalTests'];
    }

    /**
     * Sets totalTests
     *
     * @param int $totalTests totalTests
     *
     * @return $this
     */
    public function setTotalTests($totalTests)
    {
        $this->container['totalTests'] = $totalTests;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {

        if (!is_null($type) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $type))) {
            throw new \InvalidArgumentException("invalid value for $type when calling LegacyTestRun., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unanalyzedTests
     *
     * @return int
     */
    public function getUnanalyzedTests()
    {
        return $this->container['unanalyzedTests'];
    }

    /**
     * Sets unanalyzedTests
     *
     * @param int $unanalyzedTests unanalyzedTests
     *
     * @return $this
     */
    public function setUnanalyzedTests($unanalyzedTests)
    {
        $this->container['unanalyzedTests'] = $unanalyzedTests;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


