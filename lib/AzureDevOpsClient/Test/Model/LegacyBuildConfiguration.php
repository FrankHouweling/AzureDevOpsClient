<?php
/**
 * LegacyBuildConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * LegacyBuildConfiguration Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyBuildConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegacyBuildConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branchName' => 'string',
        'buildConfigurationId' => 'int',
        'buildDefinitionId' => 'int',
        'buildDefinitionName' => 'string',
        'buildFlavor' => 'string',
        'buildId' => 'int',
        'buildNumber' => 'string',
        'buildPlatform' => 'string',
        'buildQuality' => 'string',
        'buildSystem' => 'string',
        'buildUri' => 'string',
        'completedDate' => '\DateTime',
        'createdDate' => '\DateTime',
        'oldBuildConfigurationId' => 'int',
        'repositoryId' => 'string',
        'repositoryType' => 'string',
        'sourceVersion' => 'string',
        'teamProjectName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branchName' => null,
        'buildConfigurationId' => 'int32',
        'buildDefinitionId' => 'int32',
        'buildDefinitionName' => null,
        'buildFlavor' => null,
        'buildId' => 'int32',
        'buildNumber' => null,
        'buildPlatform' => null,
        'buildQuality' => null,
        'buildSystem' => null,
        'buildUri' => null,
        'completedDate' => 'date-time',
        'createdDate' => 'date-time',
        'oldBuildConfigurationId' => 'int32',
        'repositoryId' => null,
        'repositoryType' => null,
        'sourceVersion' => null,
        'teamProjectName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branchName' => 'branchName',
        'buildConfigurationId' => 'buildConfigurationId',
        'buildDefinitionId' => 'buildDefinitionId',
        'buildDefinitionName' => 'buildDefinitionName',
        'buildFlavor' => 'buildFlavor',
        'buildId' => 'buildId',
        'buildNumber' => 'buildNumber',
        'buildPlatform' => 'buildPlatform',
        'buildQuality' => 'buildQuality',
        'buildSystem' => 'buildSystem',
        'buildUri' => 'buildUri',
        'completedDate' => 'completedDate',
        'createdDate' => 'createdDate',
        'oldBuildConfigurationId' => 'oldBuildConfigurationId',
        'repositoryId' => 'repositoryId',
        'repositoryType' => 'repositoryType',
        'sourceVersion' => 'sourceVersion',
        'teamProjectName' => 'teamProjectName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branchName' => 'setBranchName',
        'buildConfigurationId' => 'setBuildConfigurationId',
        'buildDefinitionId' => 'setBuildDefinitionId',
        'buildDefinitionName' => 'setBuildDefinitionName',
        'buildFlavor' => 'setBuildFlavor',
        'buildId' => 'setBuildId',
        'buildNumber' => 'setBuildNumber',
        'buildPlatform' => 'setBuildPlatform',
        'buildQuality' => 'setBuildQuality',
        'buildSystem' => 'setBuildSystem',
        'buildUri' => 'setBuildUri',
        'completedDate' => 'setCompletedDate',
        'createdDate' => 'setCreatedDate',
        'oldBuildConfigurationId' => 'setOldBuildConfigurationId',
        'repositoryId' => 'setRepositoryId',
        'repositoryType' => 'setRepositoryType',
        'sourceVersion' => 'setSourceVersion',
        'teamProjectName' => 'setTeamProjectName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branchName' => 'getBranchName',
        'buildConfigurationId' => 'getBuildConfigurationId',
        'buildDefinitionId' => 'getBuildDefinitionId',
        'buildDefinitionName' => 'getBuildDefinitionName',
        'buildFlavor' => 'getBuildFlavor',
        'buildId' => 'getBuildId',
        'buildNumber' => 'getBuildNumber',
        'buildPlatform' => 'getBuildPlatform',
        'buildQuality' => 'getBuildQuality',
        'buildSystem' => 'getBuildSystem',
        'buildUri' => 'getBuildUri',
        'completedDate' => 'getCompletedDate',
        'createdDate' => 'getCreatedDate',
        'oldBuildConfigurationId' => 'getOldBuildConfigurationId',
        'repositoryId' => 'getRepositoryId',
        'repositoryType' => 'getRepositoryType',
        'sourceVersion' => 'getSourceVersion',
        'teamProjectName' => 'getTeamProjectName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branchName'] = isset($data['branchName']) ? $data['branchName'] : null;
        $this->container['buildConfigurationId'] = isset($data['buildConfigurationId']) ? $data['buildConfigurationId'] : null;
        $this->container['buildDefinitionId'] = isset($data['buildDefinitionId']) ? $data['buildDefinitionId'] : null;
        $this->container['buildDefinitionName'] = isset($data['buildDefinitionName']) ? $data['buildDefinitionName'] : null;
        $this->container['buildFlavor'] = isset($data['buildFlavor']) ? $data['buildFlavor'] : null;
        $this->container['buildId'] = isset($data['buildId']) ? $data['buildId'] : null;
        $this->container['buildNumber'] = isset($data['buildNumber']) ? $data['buildNumber'] : null;
        $this->container['buildPlatform'] = isset($data['buildPlatform']) ? $data['buildPlatform'] : null;
        $this->container['buildQuality'] = isset($data['buildQuality']) ? $data['buildQuality'] : null;
        $this->container['buildSystem'] = isset($data['buildSystem']) ? $data['buildSystem'] : null;
        $this->container['buildUri'] = isset($data['buildUri']) ? $data['buildUri'] : null;
        $this->container['completedDate'] = isset($data['completedDate']) ? $data['completedDate'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['oldBuildConfigurationId'] = isset($data['oldBuildConfigurationId']) ? $data['oldBuildConfigurationId'] : null;
        $this->container['repositoryId'] = isset($data['repositoryId']) ? $data['repositoryId'] : null;
        $this->container['repositoryType'] = isset($data['repositoryType']) ? $data['repositoryType'] : null;
        $this->container['sourceVersion'] = isset($data['sourceVersion']) ? $data['sourceVersion'] : null;
        $this->container['teamProjectName'] = isset($data['teamProjectName']) ? $data['teamProjectName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName branchName
     *
     * @return $this
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets buildConfigurationId
     *
     * @return int
     */
    public function getBuildConfigurationId()
    {
        return $this->container['buildConfigurationId'];
    }

    /**
     * Sets buildConfigurationId
     *
     * @param int $buildConfigurationId buildConfigurationId
     *
     * @return $this
     */
    public function setBuildConfigurationId($buildConfigurationId)
    {
        $this->container['buildConfigurationId'] = $buildConfigurationId;

        return $this;
    }

    /**
     * Gets buildDefinitionId
     *
     * @return int
     */
    public function getBuildDefinitionId()
    {
        return $this->container['buildDefinitionId'];
    }

    /**
     * Sets buildDefinitionId
     *
     * @param int $buildDefinitionId buildDefinitionId
     *
     * @return $this
     */
    public function setBuildDefinitionId($buildDefinitionId)
    {
        $this->container['buildDefinitionId'] = $buildDefinitionId;

        return $this;
    }

    /**
     * Gets buildDefinitionName
     *
     * @return string
     */
    public function getBuildDefinitionName()
    {
        return $this->container['buildDefinitionName'];
    }

    /**
     * Sets buildDefinitionName
     *
     * @param string $buildDefinitionName buildDefinitionName
     *
     * @return $this
     */
    public function setBuildDefinitionName($buildDefinitionName)
    {
        $this->container['buildDefinitionName'] = $buildDefinitionName;

        return $this;
    }

    /**
     * Gets buildFlavor
     *
     * @return string
     */
    public function getBuildFlavor()
    {
        return $this->container['buildFlavor'];
    }

    /**
     * Sets buildFlavor
     *
     * @param string $buildFlavor buildFlavor
     *
     * @return $this
     */
    public function setBuildFlavor($buildFlavor)
    {
        $this->container['buildFlavor'] = $buildFlavor;

        return $this;
    }

    /**
     * Gets buildId
     *
     * @return int
     */
    public function getBuildId()
    {
        return $this->container['buildId'];
    }

    /**
     * Sets buildId
     *
     * @param int $buildId buildId
     *
     * @return $this
     */
    public function setBuildId($buildId)
    {
        $this->container['buildId'] = $buildId;

        return $this;
    }

    /**
     * Gets buildNumber
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['buildNumber'];
    }

    /**
     * Sets buildNumber
     *
     * @param string $buildNumber buildNumber
     *
     * @return $this
     */
    public function setBuildNumber($buildNumber)
    {
        $this->container['buildNumber'] = $buildNumber;

        return $this;
    }

    /**
     * Gets buildPlatform
     *
     * @return string
     */
    public function getBuildPlatform()
    {
        return $this->container['buildPlatform'];
    }

    /**
     * Sets buildPlatform
     *
     * @param string $buildPlatform buildPlatform
     *
     * @return $this
     */
    public function setBuildPlatform($buildPlatform)
    {
        $this->container['buildPlatform'] = $buildPlatform;

        return $this;
    }

    /**
     * Gets buildQuality
     *
     * @return string
     */
    public function getBuildQuality()
    {
        return $this->container['buildQuality'];
    }

    /**
     * Sets buildQuality
     *
     * @param string $buildQuality buildQuality
     *
     * @return $this
     */
    public function setBuildQuality($buildQuality)
    {
        $this->container['buildQuality'] = $buildQuality;

        return $this;
    }

    /**
     * Gets buildSystem
     *
     * @return string
     */
    public function getBuildSystem()
    {
        return $this->container['buildSystem'];
    }

    /**
     * Sets buildSystem
     *
     * @param string $buildSystem buildSystem
     *
     * @return $this
     */
    public function setBuildSystem($buildSystem)
    {
        $this->container['buildSystem'] = $buildSystem;

        return $this;
    }

    /**
     * Gets buildUri
     *
     * @return string
     */
    public function getBuildUri()
    {
        return $this->container['buildUri'];
    }

    /**
     * Sets buildUri
     *
     * @param string $buildUri buildUri
     *
     * @return $this
     */
    public function setBuildUri($buildUri)
    {
        $this->container['buildUri'] = $buildUri;

        return $this;
    }

    /**
     * Gets completedDate
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param \DateTime $completedDate completedDate
     *
     * @return $this
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets oldBuildConfigurationId
     *
     * @return int
     */
    public function getOldBuildConfigurationId()
    {
        return $this->container['oldBuildConfigurationId'];
    }

    /**
     * Sets oldBuildConfigurationId
     *
     * @param int $oldBuildConfigurationId oldBuildConfigurationId
     *
     * @return $this
     */
    public function setOldBuildConfigurationId($oldBuildConfigurationId)
    {
        $this->container['oldBuildConfigurationId'] = $oldBuildConfigurationId;

        return $this;
    }

    /**
     * Gets repositoryId
     *
     * @return string
     */
    public function getRepositoryId()
    {
        return $this->container['repositoryId'];
    }

    /**
     * Sets repositoryId
     *
     * @param string $repositoryId repositoryId
     *
     * @return $this
     */
    public function setRepositoryId($repositoryId)
    {
        $this->container['repositoryId'] = $repositoryId;

        return $this;
    }

    /**
     * Gets repositoryType
     *
     * @return string
     */
    public function getRepositoryType()
    {
        return $this->container['repositoryType'];
    }

    /**
     * Sets repositoryType
     *
     * @param string $repositoryType repositoryType
     *
     * @return $this
     */
    public function setRepositoryType($repositoryType)
    {
        $this->container['repositoryType'] = $repositoryType;

        return $this;
    }

    /**
     * Gets sourceVersion
     *
     * @return string
     */
    public function getSourceVersion()
    {
        return $this->container['sourceVersion'];
    }

    /**
     * Sets sourceVersion
     *
     * @param string $sourceVersion sourceVersion
     *
     * @return $this
     */
    public function setSourceVersion($sourceVersion)
    {
        $this->container['sourceVersion'] = $sourceVersion;

        return $this;
    }

    /**
     * Gets teamProjectName
     *
     * @return string
     */
    public function getTeamProjectName()
    {
        return $this->container['teamProjectName'];
    }

    /**
     * Sets teamProjectName
     *
     * @param string $teamProjectName teamProjectName
     *
     * @return $this
     */
    public function setTeamProjectName($teamProjectName)
    {
        $this->container['teamProjectName'] = $teamProjectName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


