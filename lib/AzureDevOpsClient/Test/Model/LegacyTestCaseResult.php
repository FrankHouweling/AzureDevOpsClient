<?php
/**
 * LegacyTestCaseResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * LegacyTestCaseResult Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyTestCaseResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegacyTestCaseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'afnStripId' => 'int',
        'areaId' => 'int',
        'areaUri' => 'string',
        'automatedTestId' => 'string',
        'automatedTestName' => 'string',
        'automatedTestStorage' => 'string',
        'automatedTestType' => 'string',
        'automatedTestTypeId' => 'string',
        'buildNumber' => 'string',
        'buildReference' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration',
        'comment' => 'string',
        'computerName' => 'string',
        'configurationId' => 'int',
        'configurationName' => 'string',
        'creationDate' => '\DateTime',
        'customFields' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[]',
        'dateCompleted' => '\DateTime',
        'dateStarted' => '\DateTime',
        'duration' => 'int',
        'errorMessage' => 'string',
        'failingSince' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FailingSince',
        'failureType' => 'string',
        'id' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier',
        'isRerun' => 'bool',
        'lastUpdated' => '\DateTime',
        'lastUpdatedBy' => 'string',
        'lastUpdatedByName' => 'string',
        'outcome' => 'string',
        'owner' => 'string',
        'ownerName' => 'string',
        'priority' => 'string',
        'releaseReference' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference',
        'resetCount' => 'int',
        'resolutionStateId' => 'int',
        'resultGroupType' => 'string',
        'revision' => 'int',
        'runBy' => 'string',
        'runByName' => 'string',
        'sequenceId' => 'int',
        'stackTrace' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField',
        'state' => 'string',
        'subResultCount' => 'int',
        'suiteName' => 'string',
        'testCaseArea' => 'string',
        'testCaseAreaUri' => 'string',
        'testCaseId' => 'int',
        'testCaseReferenceId' => 'int',
        'testCaseRevision' => 'int',
        'testCaseTitle' => 'string',
        'testPlanId' => 'int',
        'testPointId' => 'int',
        'testResultId' => 'int',
        'testRunId' => 'int',
        'testRunTitle' => 'string',
        'testSuiteId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'afnStripId' => 'int32',
        'areaId' => 'int32',
        'areaUri' => null,
        'automatedTestId' => null,
        'automatedTestName' => null,
        'automatedTestStorage' => null,
        'automatedTestType' => null,
        'automatedTestTypeId' => null,
        'buildNumber' => null,
        'buildReference' => null,
        'comment' => null,
        'computerName' => null,
        'configurationId' => 'int32',
        'configurationName' => null,
        'creationDate' => 'date-time',
        'customFields' => null,
        'dateCompleted' => 'date-time',
        'dateStarted' => 'date-time',
        'duration' => 'int64',
        'errorMessage' => null,
        'failingSince' => null,
        'failureType' => 'byte',
        'id' => null,
        'isRerun' => null,
        'lastUpdated' => 'date-time',
        'lastUpdatedBy' => 'uuid',
        'lastUpdatedByName' => null,
        'outcome' => 'byte',
        'owner' => 'uuid',
        'ownerName' => null,
        'priority' => 'byte',
        'releaseReference' => null,
        'resetCount' => 'int32',
        'resolutionStateId' => 'int32',
        'resultGroupType' => null,
        'revision' => 'int32',
        'runBy' => 'uuid',
        'runByName' => null,
        'sequenceId' => 'int32',
        'stackTrace' => null,
        'state' => 'byte',
        'subResultCount' => 'int32',
        'suiteName' => null,
        'testCaseArea' => null,
        'testCaseAreaUri' => null,
        'testCaseId' => 'int32',
        'testCaseReferenceId' => 'int32',
        'testCaseRevision' => 'int32',
        'testCaseTitle' => null,
        'testPlanId' => 'int32',
        'testPointId' => 'int32',
        'testResultId' => 'int32',
        'testRunId' => 'int32',
        'testRunTitle' => null,
        'testSuiteId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'afnStripId' => 'afnStripId',
        'areaId' => 'areaId',
        'areaUri' => 'areaUri',
        'automatedTestId' => 'automatedTestId',
        'automatedTestName' => 'automatedTestName',
        'automatedTestStorage' => 'automatedTestStorage',
        'automatedTestType' => 'automatedTestType',
        'automatedTestTypeId' => 'automatedTestTypeId',
        'buildNumber' => 'buildNumber',
        'buildReference' => 'buildReference',
        'comment' => 'comment',
        'computerName' => 'computerName',
        'configurationId' => 'configurationId',
        'configurationName' => 'configurationName',
        'creationDate' => 'creationDate',
        'customFields' => 'customFields',
        'dateCompleted' => 'dateCompleted',
        'dateStarted' => 'dateStarted',
        'duration' => 'duration',
        'errorMessage' => 'errorMessage',
        'failingSince' => 'failingSince',
        'failureType' => 'failureType',
        'id' => 'id',
        'isRerun' => 'isRerun',
        'lastUpdated' => 'lastUpdated',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedByName' => 'lastUpdatedByName',
        'outcome' => 'outcome',
        'owner' => 'owner',
        'ownerName' => 'ownerName',
        'priority' => 'priority',
        'releaseReference' => 'releaseReference',
        'resetCount' => 'resetCount',
        'resolutionStateId' => 'resolutionStateId',
        'resultGroupType' => 'resultGroupType',
        'revision' => 'revision',
        'runBy' => 'runBy',
        'runByName' => 'runByName',
        'sequenceId' => 'sequenceId',
        'stackTrace' => 'stackTrace',
        'state' => 'state',
        'subResultCount' => 'subResultCount',
        'suiteName' => 'suiteName',
        'testCaseArea' => 'testCaseArea',
        'testCaseAreaUri' => 'testCaseAreaUri',
        'testCaseId' => 'testCaseId',
        'testCaseReferenceId' => 'testCaseReferenceId',
        'testCaseRevision' => 'testCaseRevision',
        'testCaseTitle' => 'testCaseTitle',
        'testPlanId' => 'testPlanId',
        'testPointId' => 'testPointId',
        'testResultId' => 'testResultId',
        'testRunId' => 'testRunId',
        'testRunTitle' => 'testRunTitle',
        'testSuiteId' => 'testSuiteId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'afnStripId' => 'setAfnStripId',
        'areaId' => 'setAreaId',
        'areaUri' => 'setAreaUri',
        'automatedTestId' => 'setAutomatedTestId',
        'automatedTestName' => 'setAutomatedTestName',
        'automatedTestStorage' => 'setAutomatedTestStorage',
        'automatedTestType' => 'setAutomatedTestType',
        'automatedTestTypeId' => 'setAutomatedTestTypeId',
        'buildNumber' => 'setBuildNumber',
        'buildReference' => 'setBuildReference',
        'comment' => 'setComment',
        'computerName' => 'setComputerName',
        'configurationId' => 'setConfigurationId',
        'configurationName' => 'setConfigurationName',
        'creationDate' => 'setCreationDate',
        'customFields' => 'setCustomFields',
        'dateCompleted' => 'setDateCompleted',
        'dateStarted' => 'setDateStarted',
        'duration' => 'setDuration',
        'errorMessage' => 'setErrorMessage',
        'failingSince' => 'setFailingSince',
        'failureType' => 'setFailureType',
        'id' => 'setId',
        'isRerun' => 'setIsRerun',
        'lastUpdated' => 'setLastUpdated',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedByName' => 'setLastUpdatedByName',
        'outcome' => 'setOutcome',
        'owner' => 'setOwner',
        'ownerName' => 'setOwnerName',
        'priority' => 'setPriority',
        'releaseReference' => 'setReleaseReference',
        'resetCount' => 'setResetCount',
        'resolutionStateId' => 'setResolutionStateId',
        'resultGroupType' => 'setResultGroupType',
        'revision' => 'setRevision',
        'runBy' => 'setRunBy',
        'runByName' => 'setRunByName',
        'sequenceId' => 'setSequenceId',
        'stackTrace' => 'setStackTrace',
        'state' => 'setState',
        'subResultCount' => 'setSubResultCount',
        'suiteName' => 'setSuiteName',
        'testCaseArea' => 'setTestCaseArea',
        'testCaseAreaUri' => 'setTestCaseAreaUri',
        'testCaseId' => 'setTestCaseId',
        'testCaseReferenceId' => 'setTestCaseReferenceId',
        'testCaseRevision' => 'setTestCaseRevision',
        'testCaseTitle' => 'setTestCaseTitle',
        'testPlanId' => 'setTestPlanId',
        'testPointId' => 'setTestPointId',
        'testResultId' => 'setTestResultId',
        'testRunId' => 'setTestRunId',
        'testRunTitle' => 'setTestRunTitle',
        'testSuiteId' => 'setTestSuiteId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'afnStripId' => 'getAfnStripId',
        'areaId' => 'getAreaId',
        'areaUri' => 'getAreaUri',
        'automatedTestId' => 'getAutomatedTestId',
        'automatedTestName' => 'getAutomatedTestName',
        'automatedTestStorage' => 'getAutomatedTestStorage',
        'automatedTestType' => 'getAutomatedTestType',
        'automatedTestTypeId' => 'getAutomatedTestTypeId',
        'buildNumber' => 'getBuildNumber',
        'buildReference' => 'getBuildReference',
        'comment' => 'getComment',
        'computerName' => 'getComputerName',
        'configurationId' => 'getConfigurationId',
        'configurationName' => 'getConfigurationName',
        'creationDate' => 'getCreationDate',
        'customFields' => 'getCustomFields',
        'dateCompleted' => 'getDateCompleted',
        'dateStarted' => 'getDateStarted',
        'duration' => 'getDuration',
        'errorMessage' => 'getErrorMessage',
        'failingSince' => 'getFailingSince',
        'failureType' => 'getFailureType',
        'id' => 'getId',
        'isRerun' => 'getIsRerun',
        'lastUpdated' => 'getLastUpdated',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedByName' => 'getLastUpdatedByName',
        'outcome' => 'getOutcome',
        'owner' => 'getOwner',
        'ownerName' => 'getOwnerName',
        'priority' => 'getPriority',
        'releaseReference' => 'getReleaseReference',
        'resetCount' => 'getResetCount',
        'resolutionStateId' => 'getResolutionStateId',
        'resultGroupType' => 'getResultGroupType',
        'revision' => 'getRevision',
        'runBy' => 'getRunBy',
        'runByName' => 'getRunByName',
        'sequenceId' => 'getSequenceId',
        'stackTrace' => 'getStackTrace',
        'state' => 'getState',
        'subResultCount' => 'getSubResultCount',
        'suiteName' => 'getSuiteName',
        'testCaseArea' => 'getTestCaseArea',
        'testCaseAreaUri' => 'getTestCaseAreaUri',
        'testCaseId' => 'getTestCaseId',
        'testCaseReferenceId' => 'getTestCaseReferenceId',
        'testCaseRevision' => 'getTestCaseRevision',
        'testCaseTitle' => 'getTestCaseTitle',
        'testPlanId' => 'getTestPlanId',
        'testPointId' => 'getTestPointId',
        'testResultId' => 'getTestResultId',
        'testRunId' => 'getTestRunId',
        'testRunTitle' => 'getTestRunTitle',
        'testSuiteId' => 'getTestSuiteId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_GROUP_TYPE_NONE = 'none';
    const RESULT_GROUP_TYPE_RERUN = 'rerun';
    const RESULT_GROUP_TYPE_DATA_DRIVEN = 'dataDriven';
    const RESULT_GROUP_TYPE_ORDERED_TEST = 'orderedTest';
    const RESULT_GROUP_TYPE_GENERIC = 'generic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultGroupTypeAllowableValues()
    {
        return [
            self::RESULT_GROUP_TYPE_NONE,
            self::RESULT_GROUP_TYPE_RERUN,
            self::RESULT_GROUP_TYPE_DATA_DRIVEN,
            self::RESULT_GROUP_TYPE_ORDERED_TEST,
            self::RESULT_GROUP_TYPE_GENERIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['afnStripId'] = isset($data['afnStripId']) ? $data['afnStripId'] : null;
        $this->container['areaId'] = isset($data['areaId']) ? $data['areaId'] : null;
        $this->container['areaUri'] = isset($data['areaUri']) ? $data['areaUri'] : null;
        $this->container['automatedTestId'] = isset($data['automatedTestId']) ? $data['automatedTestId'] : null;
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['automatedTestStorage'] = isset($data['automatedTestStorage']) ? $data['automatedTestStorage'] : null;
        $this->container['automatedTestType'] = isset($data['automatedTestType']) ? $data['automatedTestType'] : null;
        $this->container['automatedTestTypeId'] = isset($data['automatedTestTypeId']) ? $data['automatedTestTypeId'] : null;
        $this->container['buildNumber'] = isset($data['buildNumber']) ? $data['buildNumber'] : null;
        $this->container['buildReference'] = isset($data['buildReference']) ? $data['buildReference'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['computerName'] = isset($data['computerName']) ? $data['computerName'] : null;
        $this->container['configurationId'] = isset($data['configurationId']) ? $data['configurationId'] : null;
        $this->container['configurationName'] = isset($data['configurationName']) ? $data['configurationName'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['dateCompleted'] = isset($data['dateCompleted']) ? $data['dateCompleted'] : null;
        $this->container['dateStarted'] = isset($data['dateStarted']) ? $data['dateStarted'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['failingSince'] = isset($data['failingSince']) ? $data['failingSince'] : null;
        $this->container['failureType'] = isset($data['failureType']) ? $data['failureType'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isRerun'] = isset($data['isRerun']) ? $data['isRerun'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedByName'] = isset($data['lastUpdatedByName']) ? $data['lastUpdatedByName'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['ownerName'] = isset($data['ownerName']) ? $data['ownerName'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['releaseReference'] = isset($data['releaseReference']) ? $data['releaseReference'] : null;
        $this->container['resetCount'] = isset($data['resetCount']) ? $data['resetCount'] : null;
        $this->container['resolutionStateId'] = isset($data['resolutionStateId']) ? $data['resolutionStateId'] : null;
        $this->container['resultGroupType'] = isset($data['resultGroupType']) ? $data['resultGroupType'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['runBy'] = isset($data['runBy']) ? $data['runBy'] : null;
        $this->container['runByName'] = isset($data['runByName']) ? $data['runByName'] : null;
        $this->container['sequenceId'] = isset($data['sequenceId']) ? $data['sequenceId'] : null;
        $this->container['stackTrace'] = isset($data['stackTrace']) ? $data['stackTrace'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['subResultCount'] = isset($data['subResultCount']) ? $data['subResultCount'] : null;
        $this->container['suiteName'] = isset($data['suiteName']) ? $data['suiteName'] : null;
        $this->container['testCaseArea'] = isset($data['testCaseArea']) ? $data['testCaseArea'] : null;
        $this->container['testCaseAreaUri'] = isset($data['testCaseAreaUri']) ? $data['testCaseAreaUri'] : null;
        $this->container['testCaseId'] = isset($data['testCaseId']) ? $data['testCaseId'] : null;
        $this->container['testCaseReferenceId'] = isset($data['testCaseReferenceId']) ? $data['testCaseReferenceId'] : null;
        $this->container['testCaseRevision'] = isset($data['testCaseRevision']) ? $data['testCaseRevision'] : null;
        $this->container['testCaseTitle'] = isset($data['testCaseTitle']) ? $data['testCaseTitle'] : null;
        $this->container['testPlanId'] = isset($data['testPlanId']) ? $data['testPlanId'] : null;
        $this->container['testPointId'] = isset($data['testPointId']) ? $data['testPointId'] : null;
        $this->container['testResultId'] = isset($data['testResultId']) ? $data['testResultId'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
        $this->container['testRunTitle'] = isset($data['testRunTitle']) ? $data['testRunTitle'] : null;
        $this->container['testSuiteId'] = isset($data['testSuiteId']) ? $data['testSuiteId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['failureType']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['failureType'])) {
            $invalidProperties[] = "invalid value for 'failureType', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['outcome']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['outcome'])) {
            $invalidProperties[] = "invalid value for 'outcome', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['priority']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['priority'])) {
            $invalidProperties[] = "invalid value for 'priority', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($this->container['resultGroupType']) && !in_array($this->container['resultGroupType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resultGroupType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['state']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['state'])) {
            $invalidProperties[] = "invalid value for 'state', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets afnStripId
     *
     * @return int
     */
    public function getAfnStripId()
    {
        return $this->container['afnStripId'];
    }

    /**
     * Sets afnStripId
     *
     * @param int $afnStripId afnStripId
     *
     * @return $this
     */
    public function setAfnStripId($afnStripId)
    {
        $this->container['afnStripId'] = $afnStripId;

        return $this;
    }

    /**
     * Gets areaId
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['areaId'];
    }

    /**
     * Sets areaId
     *
     * @param int $areaId areaId
     *
     * @return $this
     */
    public function setAreaId($areaId)
    {
        $this->container['areaId'] = $areaId;

        return $this;
    }

    /**
     * Gets areaUri
     *
     * @return string
     */
    public function getAreaUri()
    {
        return $this->container['areaUri'];
    }

    /**
     * Sets areaUri
     *
     * @param string $areaUri areaUri
     *
     * @return $this
     */
    public function setAreaUri($areaUri)
    {
        $this->container['areaUri'] = $areaUri;

        return $this;
    }

    /**
     * Gets automatedTestId
     *
     * @return string
     */
    public function getAutomatedTestId()
    {
        return $this->container['automatedTestId'];
    }

    /**
     * Sets automatedTestId
     *
     * @param string $automatedTestId automatedTestId
     *
     * @return $this
     */
    public function setAutomatedTestId($automatedTestId)
    {
        $this->container['automatedTestId'] = $automatedTestId;

        return $this;
    }

    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName automatedTestName
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets automatedTestStorage
     *
     * @return string
     */
    public function getAutomatedTestStorage()
    {
        return $this->container['automatedTestStorage'];
    }

    /**
     * Sets automatedTestStorage
     *
     * @param string $automatedTestStorage automatedTestStorage
     *
     * @return $this
     */
    public function setAutomatedTestStorage($automatedTestStorage)
    {
        $this->container['automatedTestStorage'] = $automatedTestStorage;

        return $this;
    }

    /**
     * Gets automatedTestType
     *
     * @return string
     */
    public function getAutomatedTestType()
    {
        return $this->container['automatedTestType'];
    }

    /**
     * Sets automatedTestType
     *
     * @param string $automatedTestType automatedTestType
     *
     * @return $this
     */
    public function setAutomatedTestType($automatedTestType)
    {
        $this->container['automatedTestType'] = $automatedTestType;

        return $this;
    }

    /**
     * Gets automatedTestTypeId
     *
     * @return string
     */
    public function getAutomatedTestTypeId()
    {
        return $this->container['automatedTestTypeId'];
    }

    /**
     * Sets automatedTestTypeId
     *
     * @param string $automatedTestTypeId automatedTestTypeId
     *
     * @return $this
     */
    public function setAutomatedTestTypeId($automatedTestTypeId)
    {
        $this->container['automatedTestTypeId'] = $automatedTestTypeId;

        return $this;
    }

    /**
     * Gets buildNumber
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['buildNumber'];
    }

    /**
     * Sets buildNumber
     *
     * @param string $buildNumber buildNumber
     *
     * @return $this
     */
    public function setBuildNumber($buildNumber)
    {
        $this->container['buildNumber'] = $buildNumber;

        return $this;
    }

    /**
     * Gets buildReference
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration
     */
    public function getBuildReference()
    {
        return $this->container['buildReference'];
    }

    /**
     * Sets buildReference
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyBuildConfiguration $buildReference buildReference
     *
     * @return $this
     */
    public function setBuildReference($buildReference)
    {
        $this->container['buildReference'] = $buildReference;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets computerName
     *
     * @return string
     */
    public function getComputerName()
    {
        return $this->container['computerName'];
    }

    /**
     * Sets computerName
     *
     * @param string $computerName computerName
     *
     * @return $this
     */
    public function setComputerName($computerName)
    {
        $this->container['computerName'] = $computerName;

        return $this;
    }

    /**
     * Gets configurationId
     *
     * @return int
     */
    public function getConfigurationId()
    {
        return $this->container['configurationId'];
    }

    /**
     * Sets configurationId
     *
     * @param int $configurationId configurationId
     *
     * @return $this
     */
    public function setConfigurationId($configurationId)
    {
        $this->container['configurationId'] = $configurationId;

        return $this;
    }

    /**
     * Gets configurationName
     *
     * @return string
     */
    public function getConfigurationName()
    {
        return $this->container['configurationName'];
    }

    /**
     * Sets configurationName
     *
     * @param string $configurationName configurationName
     *
     * @return $this
     */
    public function setConfigurationName($configurationName)
    {
        $this->container['configurationName'] = $configurationName;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField[] $customFields customFields
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets dateCompleted
     *
     * @return \DateTime
     */
    public function getDateCompleted()
    {
        return $this->container['dateCompleted'];
    }

    /**
     * Sets dateCompleted
     *
     * @param \DateTime $dateCompleted dateCompleted
     *
     * @return $this
     */
    public function setDateCompleted($dateCompleted)
    {
        $this->container['dateCompleted'] = $dateCompleted;

        return $this;
    }

    /**
     * Gets dateStarted
     *
     * @return \DateTime
     */
    public function getDateStarted()
    {
        return $this->container['dateStarted'];
    }

    /**
     * Sets dateStarted
     *
     * @param \DateTime $dateStarted dateStarted
     *
     * @return $this
     */
    public function setDateStarted($dateStarted)
    {
        $this->container['dateStarted'] = $dateStarted;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage errorMessage
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets failingSince
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FailingSince
     */
    public function getFailingSince()
    {
        return $this->container['failingSince'];
    }

    /**
     * Sets failingSince
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FailingSince $failingSince failingSince
     *
     * @return $this
     */
    public function setFailingSince($failingSince)
    {
        $this->container['failingSince'] = $failingSince;

        return $this;
    }

    /**
     * Gets failureType
     *
     * @return string
     */
    public function getFailureType()
    {
        return $this->container['failureType'];
    }

    /**
     * Sets failureType
     *
     * @param string $failureType failureType
     *
     * @return $this
     */
    public function setFailureType($failureType)
    {

        if (!is_null($failureType) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $failureType))) {
            throw new \InvalidArgumentException("invalid value for $failureType when calling LegacyTestCaseResult., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['failureType'] = $failureType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResultIdentifier $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isRerun
     *
     * @return bool
     */
    public function getIsRerun()
    {
        return $this->container['isRerun'];
    }

    /**
     * Sets isRerun
     *
     * @param bool $isRerun isRerun
     *
     * @return $this
     */
    public function setIsRerun($isRerun)
    {
        $this->container['isRerun'] = $isRerun;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated lastUpdated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy lastUpdatedBy
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedByName
     *
     * @return string
     */
    public function getLastUpdatedByName()
    {
        return $this->container['lastUpdatedByName'];
    }

    /**
     * Sets lastUpdatedByName
     *
     * @param string $lastUpdatedByName lastUpdatedByName
     *
     * @return $this
     */
    public function setLastUpdatedByName($lastUpdatedByName)
    {
        $this->container['lastUpdatedByName'] = $lastUpdatedByName;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome outcome
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {

        if (!is_null($outcome) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $outcome))) {
            throw new \InvalidArgumentException("invalid value for $outcome when calling LegacyTestCaseResult., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets ownerName
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['ownerName'];
    }

    /**
     * Sets ownerName
     *
     * @param string $ownerName ownerName
     *
     * @return $this
     */
    public function setOwnerName($ownerName)
    {
        $this->container['ownerName'] = $ownerName;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $priority))) {
            throw new \InvalidArgumentException("invalid value for $priority when calling LegacyTestCaseResult., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets releaseReference
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference
     */
    public function getReleaseReference()
    {
        return $this->container['releaseReference'];
    }

    /**
     * Sets releaseReference
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyReleaseReference $releaseReference releaseReference
     *
     * @return $this
     */
    public function setReleaseReference($releaseReference)
    {
        $this->container['releaseReference'] = $releaseReference;

        return $this;
    }

    /**
     * Gets resetCount
     *
     * @return int
     */
    public function getResetCount()
    {
        return $this->container['resetCount'];
    }

    /**
     * Sets resetCount
     *
     * @param int $resetCount resetCount
     *
     * @return $this
     */
    public function setResetCount($resetCount)
    {
        $this->container['resetCount'] = $resetCount;

        return $this;
    }

    /**
     * Gets resolutionStateId
     *
     * @return int
     */
    public function getResolutionStateId()
    {
        return $this->container['resolutionStateId'];
    }

    /**
     * Sets resolutionStateId
     *
     * @param int $resolutionStateId resolutionStateId
     *
     * @return $this
     */
    public function setResolutionStateId($resolutionStateId)
    {
        $this->container['resolutionStateId'] = $resolutionStateId;

        return $this;
    }

    /**
     * Gets resultGroupType
     *
     * @return string
     */
    public function getResultGroupType()
    {
        return $this->container['resultGroupType'];
    }

    /**
     * Sets resultGroupType
     *
     * @param string $resultGroupType resultGroupType
     *
     * @return $this
     */
    public function setResultGroupType($resultGroupType)
    {
        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($resultGroupType) && !in_array($resultGroupType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resultGroupType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resultGroupType'] = $resultGroupType;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets runBy
     *
     * @return string
     */
    public function getRunBy()
    {
        return $this->container['runBy'];
    }

    /**
     * Sets runBy
     *
     * @param string $runBy runBy
     *
     * @return $this
     */
    public function setRunBy($runBy)
    {
        $this->container['runBy'] = $runBy;

        return $this;
    }

    /**
     * Gets runByName
     *
     * @return string
     */
    public function getRunByName()
    {
        return $this->container['runByName'];
    }

    /**
     * Sets runByName
     *
     * @param string $runByName runByName
     *
     * @return $this
     */
    public function setRunByName($runByName)
    {
        $this->container['runByName'] = $runByName;

        return $this;
    }

    /**
     * Gets sequenceId
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->container['sequenceId'];
    }

    /**
     * Sets sequenceId
     *
     * @param int $sequenceId sequenceId
     *
     * @return $this
     */
    public function setSequenceId($sequenceId)
    {
        $this->container['sequenceId'] = $sequenceId;

        return $this;
    }

    /**
     * Gets stackTrace
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField
     */
    public function getStackTrace()
    {
        return $this->container['stackTrace'];
    }

    /**
     * Sets stackTrace
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestExtensionField $stackTrace stackTrace
     *
     * @return $this
     */
    public function setStackTrace($stackTrace)
    {
        $this->container['stackTrace'] = $stackTrace;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {

        if (!is_null($state) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $state))) {
            throw new \InvalidArgumentException("invalid value for $state when calling LegacyTestCaseResult., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subResultCount
     *
     * @return int
     */
    public function getSubResultCount()
    {
        return $this->container['subResultCount'];
    }

    /**
     * Sets subResultCount
     *
     * @param int $subResultCount subResultCount
     *
     * @return $this
     */
    public function setSubResultCount($subResultCount)
    {
        $this->container['subResultCount'] = $subResultCount;

        return $this;
    }

    /**
     * Gets suiteName
     *
     * @return string
     */
    public function getSuiteName()
    {
        return $this->container['suiteName'];
    }

    /**
     * Sets suiteName
     *
     * @param string $suiteName suiteName
     *
     * @return $this
     */
    public function setSuiteName($suiteName)
    {
        $this->container['suiteName'] = $suiteName;

        return $this;
    }

    /**
     * Gets testCaseArea
     *
     * @return string
     */
    public function getTestCaseArea()
    {
        return $this->container['testCaseArea'];
    }

    /**
     * Sets testCaseArea
     *
     * @param string $testCaseArea testCaseArea
     *
     * @return $this
     */
    public function setTestCaseArea($testCaseArea)
    {
        $this->container['testCaseArea'] = $testCaseArea;

        return $this;
    }

    /**
     * Gets testCaseAreaUri
     *
     * @return string
     */
    public function getTestCaseAreaUri()
    {
        return $this->container['testCaseAreaUri'];
    }

    /**
     * Sets testCaseAreaUri
     *
     * @param string $testCaseAreaUri testCaseAreaUri
     *
     * @return $this
     */
    public function setTestCaseAreaUri($testCaseAreaUri)
    {
        $this->container['testCaseAreaUri'] = $testCaseAreaUri;

        return $this;
    }

    /**
     * Gets testCaseId
     *
     * @return int
     */
    public function getTestCaseId()
    {
        return $this->container['testCaseId'];
    }

    /**
     * Sets testCaseId
     *
     * @param int $testCaseId testCaseId
     *
     * @return $this
     */
    public function setTestCaseId($testCaseId)
    {
        $this->container['testCaseId'] = $testCaseId;

        return $this;
    }

    /**
     * Gets testCaseReferenceId
     *
     * @return int
     */
    public function getTestCaseReferenceId()
    {
        return $this->container['testCaseReferenceId'];
    }

    /**
     * Sets testCaseReferenceId
     *
     * @param int $testCaseReferenceId testCaseReferenceId
     *
     * @return $this
     */
    public function setTestCaseReferenceId($testCaseReferenceId)
    {
        $this->container['testCaseReferenceId'] = $testCaseReferenceId;

        return $this;
    }

    /**
     * Gets testCaseRevision
     *
     * @return int
     */
    public function getTestCaseRevision()
    {
        return $this->container['testCaseRevision'];
    }

    /**
     * Sets testCaseRevision
     *
     * @param int $testCaseRevision testCaseRevision
     *
     * @return $this
     */
    public function setTestCaseRevision($testCaseRevision)
    {
        $this->container['testCaseRevision'] = $testCaseRevision;

        return $this;
    }

    /**
     * Gets testCaseTitle
     *
     * @return string
     */
    public function getTestCaseTitle()
    {
        return $this->container['testCaseTitle'];
    }

    /**
     * Sets testCaseTitle
     *
     * @param string $testCaseTitle testCaseTitle
     *
     * @return $this
     */
    public function setTestCaseTitle($testCaseTitle)
    {
        $this->container['testCaseTitle'] = $testCaseTitle;

        return $this;
    }

    /**
     * Gets testPlanId
     *
     * @return int
     */
    public function getTestPlanId()
    {
        return $this->container['testPlanId'];
    }

    /**
     * Sets testPlanId
     *
     * @param int $testPlanId testPlanId
     *
     * @return $this
     */
    public function setTestPlanId($testPlanId)
    {
        $this->container['testPlanId'] = $testPlanId;

        return $this;
    }

    /**
     * Gets testPointId
     *
     * @return int
     */
    public function getTestPointId()
    {
        return $this->container['testPointId'];
    }

    /**
     * Sets testPointId
     *
     * @param int $testPointId testPointId
     *
     * @return $this
     */
    public function setTestPointId($testPointId)
    {
        $this->container['testPointId'] = $testPointId;

        return $this;
    }

    /**
     * Gets testResultId
     *
     * @return int
     */
    public function getTestResultId()
    {
        return $this->container['testResultId'];
    }

    /**
     * Sets testResultId
     *
     * @param int $testResultId testResultId
     *
     * @return $this
     */
    public function setTestResultId($testResultId)
    {
        $this->container['testResultId'] = $testResultId;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId testRunId
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }

    /**
     * Gets testRunTitle
     *
     * @return string
     */
    public function getTestRunTitle()
    {
        return $this->container['testRunTitle'];
    }

    /**
     * Sets testRunTitle
     *
     * @param string $testRunTitle testRunTitle
     *
     * @return $this
     */
    public function setTestRunTitle($testRunTitle)
    {
        $this->container['testRunTitle'] = $testRunTitle;

        return $this;
    }

    /**
     * Gets testSuiteId
     *
     * @return int
     */
    public function getTestSuiteId()
    {
        return $this->container['testSuiteId'];
    }

    /**
     * Sets testSuiteId
     *
     * @param int $testSuiteId testSuiteId
     *
     * @return $this
     */
    public function setTestSuiteId($testSuiteId)
    {
        $this->container['testSuiteId'] = $testSuiteId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


