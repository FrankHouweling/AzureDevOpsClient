<?php
/**
 * ResultUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * ResultUpdateRequest Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResultUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actionResultDeletes' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]',
        'actionResults' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]',
        'attachmentDeletes' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachmentIdentity[]',
        'attachments' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[]',
        'parameterDeletes' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]',
        'parameters' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]',
        'testCaseResult' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult',
        'testResultId' => 'int',
        'testRunId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actionResultDeletes' => null,
        'actionResults' => null,
        'attachmentDeletes' => null,
        'attachments' => null,
        'parameterDeletes' => null,
        'parameters' => null,
        'testCaseResult' => null,
        'testResultId' => 'int32',
        'testRunId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actionResultDeletes' => 'actionResultDeletes',
        'actionResults' => 'actionResults',
        'attachmentDeletes' => 'attachmentDeletes',
        'attachments' => 'attachments',
        'parameterDeletes' => 'parameterDeletes',
        'parameters' => 'parameters',
        'testCaseResult' => 'testCaseResult',
        'testResultId' => 'testResultId',
        'testRunId' => 'testRunId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actionResultDeletes' => 'setActionResultDeletes',
        'actionResults' => 'setActionResults',
        'attachmentDeletes' => 'setAttachmentDeletes',
        'attachments' => 'setAttachments',
        'parameterDeletes' => 'setParameterDeletes',
        'parameters' => 'setParameters',
        'testCaseResult' => 'setTestCaseResult',
        'testResultId' => 'setTestResultId',
        'testRunId' => 'setTestRunId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actionResultDeletes' => 'getActionResultDeletes',
        'actionResults' => 'getActionResults',
        'attachmentDeletes' => 'getAttachmentDeletes',
        'attachments' => 'getAttachments',
        'parameterDeletes' => 'getParameterDeletes',
        'parameters' => 'getParameters',
        'testCaseResult' => 'getTestCaseResult',
        'testResultId' => 'getTestResultId',
        'testRunId' => 'getTestRunId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actionResultDeletes'] = isset($data['actionResultDeletes']) ? $data['actionResultDeletes'] : null;
        $this->container['actionResults'] = isset($data['actionResults']) ? $data['actionResults'] : null;
        $this->container['attachmentDeletes'] = isset($data['attachmentDeletes']) ? $data['attachmentDeletes'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['parameterDeletes'] = isset($data['parameterDeletes']) ? $data['parameterDeletes'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['testCaseResult'] = isset($data['testCaseResult']) ? $data['testCaseResult'] : null;
        $this->container['testResultId'] = isset($data['testResultId']) ? $data['testResultId'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actionResultDeletes
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]
     */
    public function getActionResultDeletes()
    {
        return $this->container['actionResultDeletes'];
    }

    /**
     * Sets actionResultDeletes
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[] $actionResultDeletes actionResultDeletes
     *
     * @return $this
     */
    public function setActionResultDeletes($actionResultDeletes)
    {
        $this->container['actionResultDeletes'] = $actionResultDeletes;

        return $this;
    }

    /**
     * Gets actionResults
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[]
     */
    public function getActionResults()
    {
        return $this->container['actionResults'];
    }

    /**
     * Sets actionResults
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestActionResult[] $actionResults actionResults
     *
     * @return $this
     */
    public function setActionResults($actionResults)
    {
        $this->container['actionResults'] = $actionResults;

        return $this;
    }

    /**
     * Gets attachmentDeletes
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachmentIdentity[]
     */
    public function getAttachmentDeletes()
    {
        return $this->container['attachmentDeletes'];
    }

    /**
     * Sets attachmentDeletes
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachmentIdentity[] $attachmentDeletes attachmentDeletes
     *
     * @return $this
     */
    public function setAttachmentDeletes($attachmentDeletes)
    {
        $this->container['attachmentDeletes'] = $attachmentDeletes;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets parameterDeletes
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]
     */
    public function getParameterDeletes()
    {
        return $this->container['parameterDeletes'];
    }

    /**
     * Sets parameterDeletes
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[] $parameterDeletes parameterDeletes
     *
     * @return $this
     */
    public function setParameterDeletes($parameterDeletes)
    {
        $this->container['parameterDeletes'] = $parameterDeletes;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\TestResultParameter[] $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets testCaseResult
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult
     */
    public function getTestCaseResult()
    {
        return $this->container['testCaseResult'];
    }

    /**
     * Sets testCaseResult
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\LegacyTestCaseResult $testCaseResult testCaseResult
     *
     * @return $this
     */
    public function setTestCaseResult($testCaseResult)
    {
        $this->container['testCaseResult'] = $testCaseResult;

        return $this;
    }

    /**
     * Gets testResultId
     *
     * @return int
     */
    public function getTestResultId()
    {
        return $this->container['testResultId'];
    }

    /**
     * Sets testResultId
     *
     * @param int $testResultId testResultId
     *
     * @return $this
     */
    public function setTestResultId($testResultId)
    {
        $this->container['testResultId'] = $testResultId;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId testRunId
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


