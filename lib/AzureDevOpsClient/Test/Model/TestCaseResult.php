<?php
/**
 * TestCaseResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestCaseResult Class Doc Comment
 *
 * @category Class
 * @description Represents a test result.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestCaseResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestCaseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'afnStripId' => 'int',
        'area' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'associatedBugs' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference[]',
        'automatedTestId' => 'string',
        'automatedTestName' => 'string',
        'automatedTestStorage' => 'string',
        'automatedTestType' => 'string',
        'automatedTestTypeId' => 'string',
        'build' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'buildReference' => '\FrankHouweling\AzureDevOpsClient\Test\Model\BuildReference',
        'comment' => 'string',
        'completedDate' => '\DateTime',
        'computerName' => 'string',
        'configuration' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'createdDate' => '\DateTime',
        'customFields' => '\FrankHouweling\AzureDevOpsClient\Test\Model\CustomTestField[]',
        'durationInMs' => 'double',
        'errorMessage' => 'string',
        'failingSince' => '\FrankHouweling\AzureDevOpsClient\Test\Model\FailingSince',
        'failureType' => 'string',
        'id' => 'int',
        'iterationDetails' => '\FrankHouweling\AzureDevOpsClient\Test\Model\TestIterationDetailsModel[]',
        'lastUpdatedBy' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'lastUpdatedDate' => '\DateTime',
        'outcome' => 'string',
        'owner' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'priority' => 'int',
        'project' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'release' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'releaseReference' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseReference',
        'resetCount' => 'int',
        'resolutionState' => 'string',
        'resolutionStateId' => 'int',
        'resultGroupType' => 'string',
        'revision' => 'int',
        'runBy' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'stackTrace' => 'string',
        'startedDate' => '\DateTime',
        'state' => 'string',
        'subResults' => '\FrankHouweling\AzureDevOpsClient\Test\Model\TestSubResult[]',
        'testCase' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'testCaseReferenceId' => 'int',
        'testCaseRevision' => 'int',
        'testCaseTitle' => 'string',
        'testPlan' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'testPoint' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'testRun' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'testSuite' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'afnStripId' => 'int32',
        'area' => null,
        'associatedBugs' => null,
        'automatedTestId' => null,
        'automatedTestName' => null,
        'automatedTestStorage' => null,
        'automatedTestType' => null,
        'automatedTestTypeId' => null,
        'build' => null,
        'buildReference' => null,
        'comment' => null,
        'completedDate' => 'date-time',
        'computerName' => null,
        'configuration' => null,
        'createdDate' => 'date-time',
        'customFields' => null,
        'durationInMs' => 'double',
        'errorMessage' => null,
        'failingSince' => null,
        'failureType' => null,
        'id' => 'int32',
        'iterationDetails' => null,
        'lastUpdatedBy' => null,
        'lastUpdatedDate' => 'date-time',
        'outcome' => null,
        'owner' => null,
        'priority' => 'int32',
        'project' => null,
        'release' => null,
        'releaseReference' => null,
        'resetCount' => 'int32',
        'resolutionState' => null,
        'resolutionStateId' => 'int32',
        'resultGroupType' => null,
        'revision' => 'int32',
        'runBy' => null,
        'stackTrace' => null,
        'startedDate' => 'date-time',
        'state' => null,
        'subResults' => null,
        'testCase' => null,
        'testCaseReferenceId' => 'int32',
        'testCaseRevision' => 'int32',
        'testCaseTitle' => null,
        'testPlan' => null,
        'testPoint' => null,
        'testRun' => null,
        'testSuite' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'afnStripId' => 'afnStripId',
        'area' => 'area',
        'associatedBugs' => 'associatedBugs',
        'automatedTestId' => 'automatedTestId',
        'automatedTestName' => 'automatedTestName',
        'automatedTestStorage' => 'automatedTestStorage',
        'automatedTestType' => 'automatedTestType',
        'automatedTestTypeId' => 'automatedTestTypeId',
        'build' => 'build',
        'buildReference' => 'buildReference',
        'comment' => 'comment',
        'completedDate' => 'completedDate',
        'computerName' => 'computerName',
        'configuration' => 'configuration',
        'createdDate' => 'createdDate',
        'customFields' => 'customFields',
        'durationInMs' => 'durationInMs',
        'errorMessage' => 'errorMessage',
        'failingSince' => 'failingSince',
        'failureType' => 'failureType',
        'id' => 'id',
        'iterationDetails' => 'iterationDetails',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'outcome' => 'outcome',
        'owner' => 'owner',
        'priority' => 'priority',
        'project' => 'project',
        'release' => 'release',
        'releaseReference' => 'releaseReference',
        'resetCount' => 'resetCount',
        'resolutionState' => 'resolutionState',
        'resolutionStateId' => 'resolutionStateId',
        'resultGroupType' => 'resultGroupType',
        'revision' => 'revision',
        'runBy' => 'runBy',
        'stackTrace' => 'stackTrace',
        'startedDate' => 'startedDate',
        'state' => 'state',
        'subResults' => 'subResults',
        'testCase' => 'testCase',
        'testCaseReferenceId' => 'testCaseReferenceId',
        'testCaseRevision' => 'testCaseRevision',
        'testCaseTitle' => 'testCaseTitle',
        'testPlan' => 'testPlan',
        'testPoint' => 'testPoint',
        'testRun' => 'testRun',
        'testSuite' => 'testSuite',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'afnStripId' => 'setAfnStripId',
        'area' => 'setArea',
        'associatedBugs' => 'setAssociatedBugs',
        'automatedTestId' => 'setAutomatedTestId',
        'automatedTestName' => 'setAutomatedTestName',
        'automatedTestStorage' => 'setAutomatedTestStorage',
        'automatedTestType' => 'setAutomatedTestType',
        'automatedTestTypeId' => 'setAutomatedTestTypeId',
        'build' => 'setBuild',
        'buildReference' => 'setBuildReference',
        'comment' => 'setComment',
        'completedDate' => 'setCompletedDate',
        'computerName' => 'setComputerName',
        'configuration' => 'setConfiguration',
        'createdDate' => 'setCreatedDate',
        'customFields' => 'setCustomFields',
        'durationInMs' => 'setDurationInMs',
        'errorMessage' => 'setErrorMessage',
        'failingSince' => 'setFailingSince',
        'failureType' => 'setFailureType',
        'id' => 'setId',
        'iterationDetails' => 'setIterationDetails',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'outcome' => 'setOutcome',
        'owner' => 'setOwner',
        'priority' => 'setPriority',
        'project' => 'setProject',
        'release' => 'setRelease',
        'releaseReference' => 'setReleaseReference',
        'resetCount' => 'setResetCount',
        'resolutionState' => 'setResolutionState',
        'resolutionStateId' => 'setResolutionStateId',
        'resultGroupType' => 'setResultGroupType',
        'revision' => 'setRevision',
        'runBy' => 'setRunBy',
        'stackTrace' => 'setStackTrace',
        'startedDate' => 'setStartedDate',
        'state' => 'setState',
        'subResults' => 'setSubResults',
        'testCase' => 'setTestCase',
        'testCaseReferenceId' => 'setTestCaseReferenceId',
        'testCaseRevision' => 'setTestCaseRevision',
        'testCaseTitle' => 'setTestCaseTitle',
        'testPlan' => 'setTestPlan',
        'testPoint' => 'setTestPoint',
        'testRun' => 'setTestRun',
        'testSuite' => 'setTestSuite',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'afnStripId' => 'getAfnStripId',
        'area' => 'getArea',
        'associatedBugs' => 'getAssociatedBugs',
        'automatedTestId' => 'getAutomatedTestId',
        'automatedTestName' => 'getAutomatedTestName',
        'automatedTestStorage' => 'getAutomatedTestStorage',
        'automatedTestType' => 'getAutomatedTestType',
        'automatedTestTypeId' => 'getAutomatedTestTypeId',
        'build' => 'getBuild',
        'buildReference' => 'getBuildReference',
        'comment' => 'getComment',
        'completedDate' => 'getCompletedDate',
        'computerName' => 'getComputerName',
        'configuration' => 'getConfiguration',
        'createdDate' => 'getCreatedDate',
        'customFields' => 'getCustomFields',
        'durationInMs' => 'getDurationInMs',
        'errorMessage' => 'getErrorMessage',
        'failingSince' => 'getFailingSince',
        'failureType' => 'getFailureType',
        'id' => 'getId',
        'iterationDetails' => 'getIterationDetails',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'outcome' => 'getOutcome',
        'owner' => 'getOwner',
        'priority' => 'getPriority',
        'project' => 'getProject',
        'release' => 'getRelease',
        'releaseReference' => 'getReleaseReference',
        'resetCount' => 'getResetCount',
        'resolutionState' => 'getResolutionState',
        'resolutionStateId' => 'getResolutionStateId',
        'resultGroupType' => 'getResultGroupType',
        'revision' => 'getRevision',
        'runBy' => 'getRunBy',
        'stackTrace' => 'getStackTrace',
        'startedDate' => 'getStartedDate',
        'state' => 'getState',
        'subResults' => 'getSubResults',
        'testCase' => 'getTestCase',
        'testCaseReferenceId' => 'getTestCaseReferenceId',
        'testCaseRevision' => 'getTestCaseRevision',
        'testCaseTitle' => 'getTestCaseTitle',
        'testPlan' => 'getTestPlan',
        'testPoint' => 'getTestPoint',
        'testRun' => 'getTestRun',
        'testSuite' => 'getTestSuite',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_GROUP_TYPE_NONE = 'none';
    const RESULT_GROUP_TYPE_RERUN = 'rerun';
    const RESULT_GROUP_TYPE_DATA_DRIVEN = 'dataDriven';
    const RESULT_GROUP_TYPE_ORDERED_TEST = 'orderedTest';
    const RESULT_GROUP_TYPE_GENERIC = 'generic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultGroupTypeAllowableValues()
    {
        return [
            self::RESULT_GROUP_TYPE_NONE,
            self::RESULT_GROUP_TYPE_RERUN,
            self::RESULT_GROUP_TYPE_DATA_DRIVEN,
            self::RESULT_GROUP_TYPE_ORDERED_TEST,
            self::RESULT_GROUP_TYPE_GENERIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['afnStripId'] = isset($data['afnStripId']) ? $data['afnStripId'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['associatedBugs'] = isset($data['associatedBugs']) ? $data['associatedBugs'] : null;
        $this->container['automatedTestId'] = isset($data['automatedTestId']) ? $data['automatedTestId'] : null;
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['automatedTestStorage'] = isset($data['automatedTestStorage']) ? $data['automatedTestStorage'] : null;
        $this->container['automatedTestType'] = isset($data['automatedTestType']) ? $data['automatedTestType'] : null;
        $this->container['automatedTestTypeId'] = isset($data['automatedTestTypeId']) ? $data['automatedTestTypeId'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildReference'] = isset($data['buildReference']) ? $data['buildReference'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['completedDate'] = isset($data['completedDate']) ? $data['completedDate'] : null;
        $this->container['computerName'] = isset($data['computerName']) ? $data['computerName'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['durationInMs'] = isset($data['durationInMs']) ? $data['durationInMs'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['failingSince'] = isset($data['failingSince']) ? $data['failingSince'] : null;
        $this->container['failureType'] = isset($data['failureType']) ? $data['failureType'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['iterationDetails'] = isset($data['iterationDetails']) ? $data['iterationDetails'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['releaseReference'] = isset($data['releaseReference']) ? $data['releaseReference'] : null;
        $this->container['resetCount'] = isset($data['resetCount']) ? $data['resetCount'] : null;
        $this->container['resolutionState'] = isset($data['resolutionState']) ? $data['resolutionState'] : null;
        $this->container['resolutionStateId'] = isset($data['resolutionStateId']) ? $data['resolutionStateId'] : null;
        $this->container['resultGroupType'] = isset($data['resultGroupType']) ? $data['resultGroupType'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['runBy'] = isset($data['runBy']) ? $data['runBy'] : null;
        $this->container['stackTrace'] = isset($data['stackTrace']) ? $data['stackTrace'] : null;
        $this->container['startedDate'] = isset($data['startedDate']) ? $data['startedDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['subResults'] = isset($data['subResults']) ? $data['subResults'] : null;
        $this->container['testCase'] = isset($data['testCase']) ? $data['testCase'] : null;
        $this->container['testCaseReferenceId'] = isset($data['testCaseReferenceId']) ? $data['testCaseReferenceId'] : null;
        $this->container['testCaseRevision'] = isset($data['testCaseRevision']) ? $data['testCaseRevision'] : null;
        $this->container['testCaseTitle'] = isset($data['testCaseTitle']) ? $data['testCaseTitle'] : null;
        $this->container['testPlan'] = isset($data['testPlan']) ? $data['testPlan'] : null;
        $this->container['testPoint'] = isset($data['testPoint']) ? $data['testPoint'] : null;
        $this->container['testRun'] = isset($data['testRun']) ? $data['testRun'] : null;
        $this->container['testSuite'] = isset($data['testSuite']) ? $data['testSuite'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($this->container['resultGroupType']) && !in_array($this->container['resultGroupType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resultGroupType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets afnStripId
     *
     * @return int
     */
    public function getAfnStripId()
    {
        return $this->container['afnStripId'];
    }

    /**
     * Sets afnStripId
     *
     * @param int $afnStripId Test attachment ID of action recording.
     *
     * @return $this
     */
    public function setAfnStripId($afnStripId)
    {
        $this->container['afnStripId'] = $afnStripId;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $area Reference to area path of test.
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets associatedBugs
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference[]
     */
    public function getAssociatedBugs()
    {
        return $this->container['associatedBugs'];
    }

    /**
     * Sets associatedBugs
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference[] $associatedBugs Reference to bugs linked to test result.
     *
     * @return $this
     */
    public function setAssociatedBugs($associatedBugs)
    {
        $this->container['associatedBugs'] = $associatedBugs;

        return $this;
    }

    /**
     * Gets automatedTestId
     *
     * @return string
     */
    public function getAutomatedTestId()
    {
        return $this->container['automatedTestId'];
    }

    /**
     * Sets automatedTestId
     *
     * @param string $automatedTestId ID representing test method in a dll.
     *
     * @return $this
     */
    public function setAutomatedTestId($automatedTestId)
    {
        $this->container['automatedTestId'] = $automatedTestId;

        return $this;
    }

    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName Fully qualified name of test executed.
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets automatedTestStorage
     *
     * @return string
     */
    public function getAutomatedTestStorage()
    {
        return $this->container['automatedTestStorage'];
    }

    /**
     * Sets automatedTestStorage
     *
     * @param string $automatedTestStorage Container to which test belongs.
     *
     * @return $this
     */
    public function setAutomatedTestStorage($automatedTestStorage)
    {
        $this->container['automatedTestStorage'] = $automatedTestStorage;

        return $this;
    }

    /**
     * Gets automatedTestType
     *
     * @return string
     */
    public function getAutomatedTestType()
    {
        return $this->container['automatedTestType'];
    }

    /**
     * Sets automatedTestType
     *
     * @param string $automatedTestType Type of automated test.
     *
     * @return $this
     */
    public function setAutomatedTestType($automatedTestType)
    {
        $this->container['automatedTestType'] = $automatedTestType;

        return $this;
    }

    /**
     * Gets automatedTestTypeId
     *
     * @return string
     */
    public function getAutomatedTestTypeId()
    {
        return $this->container['automatedTestTypeId'];
    }

    /**
     * Sets automatedTestTypeId
     *
     * @param string $automatedTestTypeId TypeId of automated test.
     *
     * @return $this
     */
    public function setAutomatedTestTypeId($automatedTestTypeId)
    {
        $this->container['automatedTestTypeId'] = $automatedTestTypeId;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $build Shallow reference to build associated with test result.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\BuildReference
     */
    public function getBuildReference()
    {
        return $this->container['buildReference'];
    }

    /**
     * Sets buildReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\BuildReference $buildReference Reference to build associated with test result.
     *
     * @return $this
     */
    public function setBuildReference($buildReference)
    {
        $this->container['buildReference'] = $buildReference;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment in a test result with maxSize= 1000 chars.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets completedDate
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param \DateTime $completedDate Time when test execution completed. Completed date should be greater than StartedDate.
     *
     * @return $this
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets computerName
     *
     * @return string
     */
    public function getComputerName()
    {
        return $this->container['computerName'];
    }

    /**
     * Sets computerName
     *
     * @param string $computerName Machine name where test executed.
     *
     * @return $this
     */
    public function setComputerName($computerName)
    {
        $this->container['computerName'] = $computerName;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $configuration Reference to test configuration. Type ShallowReference.
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Timestamp when test result created.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\CustomTestField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\CustomTestField[] $customFields Additional properties of test result.
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets durationInMs
     *
     * @return double
     */
    public function getDurationInMs()
    {
        return $this->container['durationInMs'];
    }

    /**
     * Sets durationInMs
     *
     * @param double $durationInMs Duration of test execution in milliseconds. If not provided value will be set as CompletedDate - StartedDate
     *
     * @return $this
     */
    public function setDurationInMs($durationInMs)
    {
        $this->container['durationInMs'] = $durationInMs;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Error message in test execution.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets failingSince
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\FailingSince
     */
    public function getFailingSince()
    {
        return $this->container['failingSince'];
    }

    /**
     * Sets failingSince
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\FailingSince $failingSince Information when test results started failing.
     *
     * @return $this
     */
    public function setFailingSince($failingSince)
    {
        $this->container['failingSince'] = $failingSince;

        return $this;
    }

    /**
     * Gets failureType
     *
     * @return string
     */
    public function getFailureType()
    {
        return $this->container['failureType'];
    }

    /**
     * Sets failureType
     *
     * @param string $failureType Failure type of test result. Valid Value= (Known Issue, New Issue, Regression, Unknown, None)
     *
     * @return $this
     */
    public function setFailureType($failureType)
    {
        $this->container['failureType'] = $failureType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of a test result.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets iterationDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\TestIterationDetailsModel[]
     */
    public function getIterationDetails()
    {
        return $this->container['iterationDetails'];
    }

    /**
     * Sets iterationDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\TestIterationDetailsModel[] $iterationDetails Test result details of test iterations used only for Manual Testing.
     *
     * @return $this
     */
    public function setIterationDetails($iterationDetails)
    {
        $this->container['iterationDetails'] = $iterationDetails;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $lastUpdatedBy Reference to identity last updated test result.
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate Last updated datetime of test result.
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome Test outcome of test result. Valid values = (Unspecified, None, Passed, Failed, Inconclusive, Timeout, Aborted, Blocked, NotExecuted, Warning, Error, NotApplicable, Paused, InProgress, NotImpacted)
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $owner Reference to test owner.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Priority of test executed.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $project Reference to team project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $release Shallow reference to release associated with test result.
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets releaseReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseReference
     */
    public function getReleaseReference()
    {
        return $this->container['releaseReference'];
    }

    /**
     * Sets releaseReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseReference $releaseReference Reference to release associated with test result.
     *
     * @return $this
     */
    public function setReleaseReference($releaseReference)
    {
        $this->container['releaseReference'] = $releaseReference;

        return $this;
    }

    /**
     * Gets resetCount
     *
     * @return int
     */
    public function getResetCount()
    {
        return $this->container['resetCount'];
    }

    /**
     * Sets resetCount
     *
     * @param int $resetCount ResetCount.
     *
     * @return $this
     */
    public function setResetCount($resetCount)
    {
        $this->container['resetCount'] = $resetCount;

        return $this;
    }

    /**
     * Gets resolutionState
     *
     * @return string
     */
    public function getResolutionState()
    {
        return $this->container['resolutionState'];
    }

    /**
     * Sets resolutionState
     *
     * @param string $resolutionState Resolution state of test result.
     *
     * @return $this
     */
    public function setResolutionState($resolutionState)
    {
        $this->container['resolutionState'] = $resolutionState;

        return $this;
    }

    /**
     * Gets resolutionStateId
     *
     * @return int
     */
    public function getResolutionStateId()
    {
        return $this->container['resolutionStateId'];
    }

    /**
     * Sets resolutionStateId
     *
     * @param int $resolutionStateId ID of resolution state.
     *
     * @return $this
     */
    public function setResolutionStateId($resolutionStateId)
    {
        $this->container['resolutionStateId'] = $resolutionStateId;

        return $this;
    }

    /**
     * Gets resultGroupType
     *
     * @return string
     */
    public function getResultGroupType()
    {
        return $this->container['resultGroupType'];
    }

    /**
     * Sets resultGroupType
     *
     * @param string $resultGroupType Hierarchy type of the result, default value of None means its leaf node.
     *
     * @return $this
     */
    public function setResultGroupType($resultGroupType)
    {
        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($resultGroupType) && !in_array($resultGroupType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resultGroupType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resultGroupType'] = $resultGroupType;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Revision number of test result.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets runBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getRunBy()
    {
        return $this->container['runBy'];
    }

    /**
     * Sets runBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $runBy Reference to identity executed the test.
     *
     * @return $this
     */
    public function setRunBy($runBy)
    {
        $this->container['runBy'] = $runBy;

        return $this;
    }

    /**
     * Gets stackTrace
     *
     * @return string
     */
    public function getStackTrace()
    {
        return $this->container['stackTrace'];
    }

    /**
     * Sets stackTrace
     *
     * @param string $stackTrace Stacktrace with maxSize= 1000 chars.
     *
     * @return $this
     */
    public function setStackTrace($stackTrace)
    {
        $this->container['stackTrace'] = $stackTrace;

        return $this;
    }

    /**
     * Gets startedDate
     *
     * @return \DateTime
     */
    public function getStartedDate()
    {
        return $this->container['startedDate'];
    }

    /**
     * Sets startedDate
     *
     * @param \DateTime $startedDate Time when test execution started.
     *
     * @return $this
     */
    public function setStartedDate($startedDate)
    {
        $this->container['startedDate'] = $startedDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of test result. Type TestRunState.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subResults
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\TestSubResult[]
     */
    public function getSubResults()
    {
        return $this->container['subResults'];
    }

    /**
     * Sets subResults
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\TestSubResult[] $subResults List of sub results inside a test result, if ResultGroupType is not None, it holds corresponding type sub results.
     *
     * @return $this
     */
    public function setSubResults($subResults)
    {
        $this->container['subResults'] = $subResults;

        return $this;
    }

    /**
     * Gets testCase
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestCase()
    {
        return $this->container['testCase'];
    }

    /**
     * Sets testCase
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testCase Reference to the test executed.
     *
     * @return $this
     */
    public function setTestCase($testCase)
    {
        $this->container['testCase'] = $testCase;

        return $this;
    }

    /**
     * Gets testCaseReferenceId
     *
     * @return int
     */
    public function getTestCaseReferenceId()
    {
        return $this->container['testCaseReferenceId'];
    }

    /**
     * Sets testCaseReferenceId
     *
     * @param int $testCaseReferenceId Reference ID of test used by test result. Type TestResultMetaData
     *
     * @return $this
     */
    public function setTestCaseReferenceId($testCaseReferenceId)
    {
        $this->container['testCaseReferenceId'] = $testCaseReferenceId;

        return $this;
    }

    /**
     * Gets testCaseRevision
     *
     * @return int
     */
    public function getTestCaseRevision()
    {
        return $this->container['testCaseRevision'];
    }

    /**
     * Sets testCaseRevision
     *
     * @param int $testCaseRevision TestCaseRevision Number.
     *
     * @return $this
     */
    public function setTestCaseRevision($testCaseRevision)
    {
        $this->container['testCaseRevision'] = $testCaseRevision;

        return $this;
    }

    /**
     * Gets testCaseTitle
     *
     * @return string
     */
    public function getTestCaseTitle()
    {
        return $this->container['testCaseTitle'];
    }

    /**
     * Sets testCaseTitle
     *
     * @param string $testCaseTitle Name of test.
     *
     * @return $this
     */
    public function setTestCaseTitle($testCaseTitle)
    {
        $this->container['testCaseTitle'] = $testCaseTitle;

        return $this;
    }

    /**
     * Gets testPlan
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestPlan()
    {
        return $this->container['testPlan'];
    }

    /**
     * Sets testPlan
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testPlan Reference to test plan test case workitem is part of.
     *
     * @return $this
     */
    public function setTestPlan($testPlan)
    {
        $this->container['testPlan'] = $testPlan;

        return $this;
    }

    /**
     * Gets testPoint
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestPoint()
    {
        return $this->container['testPoint'];
    }

    /**
     * Sets testPoint
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testPoint Reference to the test point executed.
     *
     * @return $this
     */
    public function setTestPoint($testPoint)
    {
        $this->container['testPoint'] = $testPoint;

        return $this;
    }

    /**
     * Gets testRun
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestRun()
    {
        return $this->container['testRun'];
    }

    /**
     * Sets testRun
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testRun Reference to test run.
     *
     * @return $this
     */
    public function setTestRun($testRun)
    {
        $this->container['testRun'] = $testRun;

        return $this;
    }

    /**
     * Gets testSuite
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestSuite()
    {
        return $this->container['testSuite'];
    }

    /**
     * Sets testSuite
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testSuite Reference to test suite test case workitem is part of.
     *
     * @return $this
     */
    public function setTestSuite($testSuite)
    {
        $this->container['testSuite'] = $testSuite;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url of test result.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


