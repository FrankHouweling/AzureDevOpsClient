<?php
/**
 * PlanUpdateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * PlanUpdateModel Class Doc Comment
 *
 * @category Class
 * @description A model class used for creating and updating test plans.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanUpdateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanUpdateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'area' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'build' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'buildDefinition' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'configurationIds' => 'int[]',
        'description' => 'string',
        'endDate' => 'string',
        'iteration' => 'string',
        'name' => 'string',
        'owner' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'releaseEnvironmentDefinition' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseEnvironmentDefinitionReference',
        'startDate' => 'string',
        'state' => 'string',
        'testOutcomeSettings' => '\FrankHouweling\AzureDevOpsClient\Test\Model\TestOutcomeSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'area' => null,
        'build' => null,
        'buildDefinition' => null,
        'configurationIds' => 'int32',
        'description' => null,
        'endDate' => null,
        'iteration' => null,
        'name' => null,
        'owner' => null,
        'releaseEnvironmentDefinition' => null,
        'startDate' => null,
        'state' => null,
        'testOutcomeSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'area',
        'build' => 'build',
        'buildDefinition' => 'buildDefinition',
        'configurationIds' => 'configurationIds',
        'description' => 'description',
        'endDate' => 'endDate',
        'iteration' => 'iteration',
        'name' => 'name',
        'owner' => 'owner',
        'releaseEnvironmentDefinition' => 'releaseEnvironmentDefinition',
        'startDate' => 'startDate',
        'state' => 'state',
        'testOutcomeSettings' => 'testOutcomeSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'build' => 'setBuild',
        'buildDefinition' => 'setBuildDefinition',
        'configurationIds' => 'setConfigurationIds',
        'description' => 'setDescription',
        'endDate' => 'setEndDate',
        'iteration' => 'setIteration',
        'name' => 'setName',
        'owner' => 'setOwner',
        'releaseEnvironmentDefinition' => 'setReleaseEnvironmentDefinition',
        'startDate' => 'setStartDate',
        'state' => 'setState',
        'testOutcomeSettings' => 'setTestOutcomeSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'build' => 'getBuild',
        'buildDefinition' => 'getBuildDefinition',
        'configurationIds' => 'getConfigurationIds',
        'description' => 'getDescription',
        'endDate' => 'getEndDate',
        'iteration' => 'getIteration',
        'name' => 'getName',
        'owner' => 'getOwner',
        'releaseEnvironmentDefinition' => 'getReleaseEnvironmentDefinition',
        'startDate' => 'getStartDate',
        'state' => 'getState',
        'testOutcomeSettings' => 'getTestOutcomeSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildDefinition'] = isset($data['buildDefinition']) ? $data['buildDefinition'] : null;
        $this->container['configurationIds'] = isset($data['configurationIds']) ? $data['configurationIds'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['iteration'] = isset($data['iteration']) ? $data['iteration'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['releaseEnvironmentDefinition'] = isset($data['releaseEnvironmentDefinition']) ? $data['releaseEnvironmentDefinition'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['testOutcomeSettings'] = isset($data['testOutcomeSettings']) ? $data['testOutcomeSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets area
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $area Area path to which the test plan belongs. This should be set to area path of the team that works on this test plan.
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $build Build ID of the build whose quality is tested by the tests in this test plan. For automated testing, this build ID is used to find the test binaries that contain automated test methods.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildDefinition
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getBuildDefinition()
    {
        return $this->container['buildDefinition'];
    }

    /**
     * Sets buildDefinition
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $buildDefinition The Build Definition that generates a build associated with this test plan.
     *
     * @return $this
     */
    public function setBuildDefinition($buildDefinition)
    {
        $this->container['buildDefinition'] = $buildDefinition;

        return $this;
    }

    /**
     * Gets configurationIds
     *
     * @return int[]
     */
    public function getConfigurationIds()
    {
        return $this->container['configurationIds'];
    }

    /**
     * Sets configurationIds
     *
     * @param int[] $configurationIds IDs of configurations to be applied when new test suites and test cases are added to the test plan.
     *
     * @return $this
     */
    public function setConfigurationIds($configurationIds)
    {
        $this->container['configurationIds'] = $configurationIds;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the test plan.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string $endDate End date for the test plan.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return string
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param string $iteration Iteration path assigned to the test plan. This indicates when the target iteration by which the testing in this plan is supposed to be complete and the product is ready to be released.
     *
     * @return $this
     */
    public function setIteration($iteration)
    {
        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the test plan.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $owner Owner of the test plan.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets releaseEnvironmentDefinition
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseEnvironmentDefinitionReference
     */
    public function getReleaseEnvironmentDefinition()
    {
        return $this->container['releaseEnvironmentDefinition'];
    }

    /**
     * Sets releaseEnvironmentDefinition
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ReleaseEnvironmentDefinitionReference $releaseEnvironmentDefinition Release Environment to be used to deploy the build and run automated tests from this test plan.
     *
     * @return $this
     */
    public function setReleaseEnvironmentDefinition($releaseEnvironmentDefinition)
    {
        $this->container['releaseEnvironmentDefinition'] = $releaseEnvironmentDefinition;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate Start date for the test plan.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the test plan.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets testOutcomeSettings
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\TestOutcomeSettings
     */
    public function getTestOutcomeSettings()
    {
        return $this->container['testOutcomeSettings'];
    }

    /**
     * Sets testOutcomeSettings
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\TestOutcomeSettings $testOutcomeSettings Test Outcome settings
     *
     * @return $this
     */
    public function setTestOutcomeSettings($testOutcomeSettings)
    {
        $this->container['testOutcomeSettings'] = $testOutcomeSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


