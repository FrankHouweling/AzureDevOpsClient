<?php
/**
 * AfnStrip
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * AfnStrip Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AfnStrip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AfnStrip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auxiliaryUrl' => 'string',
        'creationDate' => '\DateTime',
        'fileName' => 'string',
        'id' => 'int',
        'project' => 'string',
        'storedIn' => 'string',
        'stream' => 'string',
        'testCaseId' => 'int',
        'testResultId' => 'int',
        'testRunId' => 'int',
        'unCompressedStreamLength' => 'int',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auxiliaryUrl' => null,
        'creationDate' => 'date-time',
        'fileName' => null,
        'id' => 'int32',
        'project' => null,
        'storedIn' => null,
        'stream' => null,
        'testCaseId' => 'int32',
        'testResultId' => 'int32',
        'testRunId' => 'int32',
        'unCompressedStreamLength' => 'int64',
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auxiliaryUrl' => 'auxiliaryUrl',
        'creationDate' => 'creationDate',
        'fileName' => 'fileName',
        'id' => 'id',
        'project' => 'project',
        'storedIn' => 'storedIn',
        'stream' => 'stream',
        'testCaseId' => 'testCaseId',
        'testResultId' => 'testResultId',
        'testRunId' => 'testRunId',
        'unCompressedStreamLength' => 'unCompressedStreamLength',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auxiliaryUrl' => 'setAuxiliaryUrl',
        'creationDate' => 'setCreationDate',
        'fileName' => 'setFileName',
        'id' => 'setId',
        'project' => 'setProject',
        'storedIn' => 'setStoredIn',
        'stream' => 'setStream',
        'testCaseId' => 'setTestCaseId',
        'testResultId' => 'setTestResultId',
        'testRunId' => 'setTestRunId',
        'unCompressedStreamLength' => 'setUnCompressedStreamLength',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auxiliaryUrl' => 'getAuxiliaryUrl',
        'creationDate' => 'getCreationDate',
        'fileName' => 'getFileName',
        'id' => 'getId',
        'project' => 'getProject',
        'storedIn' => 'getStoredIn',
        'stream' => 'getStream',
        'testCaseId' => 'getTestCaseId',
        'testResultId' => 'getTestResultId',
        'testRunId' => 'getTestRunId',
        'unCompressedStreamLength' => 'getUnCompressedStreamLength',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auxiliaryUrl'] = isset($data['auxiliaryUrl']) ? $data['auxiliaryUrl'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['fileName'] = isset($data['fileName']) ? $data['fileName'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['storedIn'] = isset($data['storedIn']) ? $data['storedIn'] : null;
        $this->container['stream'] = isset($data['stream']) ? $data['stream'] : null;
        $this->container['testCaseId'] = isset($data['testCaseId']) ? $data['testCaseId'] : null;
        $this->container['testResultId'] = isset($data['testResultId']) ? $data['testResultId'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
        $this->container['unCompressedStreamLength'] = isset($data['unCompressedStreamLength']) ? $data['unCompressedStreamLength'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auxiliaryUrl
     *
     * @return string
     */
    public function getAuxiliaryUrl()
    {
        return $this->container['auxiliaryUrl'];
    }

    /**
     * Sets auxiliaryUrl
     *
     * @param string $auxiliaryUrl Auxiliary Url to be consumed by MTM
     *
     * @return $this
     */
    public function setAuxiliaryUrl($auxiliaryUrl)
    {
        $this->container['auxiliaryUrl'] = $auxiliaryUrl;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate Creation date of the AfnStrip
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets fileName
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string $fileName File name of the attachment created
     *
     * @return $this
     */
    public function setFileName($fileName)
    {
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of AfnStrip. This is same as the attachment ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project Project identifier which contains AfnStrip
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets storedIn
     *
     * @return string
     */
    public function getStoredIn()
    {
        return $this->container['storedIn'];
    }

    /**
     * Sets storedIn
     *
     * @param string $storedIn Service in which this attachment is stored in
     *
     * @return $this
     */
    public function setStoredIn($storedIn)
    {
        $this->container['storedIn'] = $storedIn;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return string
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param string $stream Afn strip stream.
     *
     * @return $this
     */
    public function setStream($stream)
    {
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets testCaseId
     *
     * @return int
     */
    public function getTestCaseId()
    {
        return $this->container['testCaseId'];
    }

    /**
     * Sets testCaseId
     *
     * @param int $testCaseId ID of the testcase.
     *
     * @return $this
     */
    public function setTestCaseId($testCaseId)
    {
        $this->container['testCaseId'] = $testCaseId;

        return $this;
    }

    /**
     * Gets testResultId
     *
     * @return int
     */
    public function getTestResultId()
    {
        return $this->container['testResultId'];
    }

    /**
     * Sets testResultId
     *
     * @param int $testResultId Backing test result id.
     *
     * @return $this
     */
    public function setTestResultId($testResultId)
    {
        $this->container['testResultId'] = $testResultId;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return int
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param int $testRunId Backing test run id.
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }

    /**
     * Gets unCompressedStreamLength
     *
     * @return int
     */
    public function getUnCompressedStreamLength()
    {
        return $this->container['unCompressedStreamLength'];
    }

    /**
     * Sets unCompressedStreamLength
     *
     * @param int $unCompressedStreamLength Byte stream (uncompressed) length of Afn strip.
     *
     * @return $this
     */
    public function setUnCompressedStreamLength($unCompressedStreamLength)
    {
        $this->container['unCompressedStreamLength'] = $unCompressedStreamLength;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url of the attachment created.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


