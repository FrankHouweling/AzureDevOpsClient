<?php
/**
 * RequirementsToTestsMapping2
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * RequirementsToTestsMapping2 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequirementsToTestsMapping2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequirementsToTestsMapping2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'createdBy' => 'string',
        'creationDate' => '\DateTime',
        'deletedBy' => 'string',
        'deletionDate' => '\DateTime',
        'isMigratedToWIT' => 'bool',
        'projectId' => 'string',
        'testMetadataId' => 'int',
        'workItemId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'createdBy' => 'uuid',
        'creationDate' => 'date-time',
        'deletedBy' => 'uuid',
        'deletionDate' => 'date-time',
        'isMigratedToWIT' => null,
        'projectId' => 'uuid',
        'testMetadataId' => 'int32',
        'workItemId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdBy' => 'createdBy',
        'creationDate' => 'creationDate',
        'deletedBy' => 'deletedBy',
        'deletionDate' => 'deletionDate',
        'isMigratedToWIT' => 'isMigratedToWIT',
        'projectId' => 'projectId',
        'testMetadataId' => 'testMetadataId',
        'workItemId' => 'workItemId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdBy' => 'setCreatedBy',
        'creationDate' => 'setCreationDate',
        'deletedBy' => 'setDeletedBy',
        'deletionDate' => 'setDeletionDate',
        'isMigratedToWIT' => 'setIsMigratedToWIT',
        'projectId' => 'setProjectId',
        'testMetadataId' => 'setTestMetadataId',
        'workItemId' => 'setWorkItemId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdBy' => 'getCreatedBy',
        'creationDate' => 'getCreationDate',
        'deletedBy' => 'getDeletedBy',
        'deletionDate' => 'getDeletionDate',
        'isMigratedToWIT' => 'getIsMigratedToWIT',
        'projectId' => 'getProjectId',
        'testMetadataId' => 'getTestMetadataId',
        'workItemId' => 'getWorkItemId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['deletedBy'] = isset($data['deletedBy']) ? $data['deletedBy'] : null;
        $this->container['deletionDate'] = isset($data['deletionDate']) ? $data['deletionDate'] : null;
        $this->container['isMigratedToWIT'] = isset($data['isMigratedToWIT']) ? $data['isMigratedToWIT'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['testMetadataId'] = isset($data['testMetadataId']) ? $data['testMetadataId'] : null;
        $this->container['workItemId'] = isset($data['workItemId']) ? $data['workItemId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets deletedBy
     *
     * @return string
     */
    public function getDeletedBy()
    {
        return $this->container['deletedBy'];
    }

    /**
     * Sets deletedBy
     *
     * @param string $deletedBy deletedBy
     *
     * @return $this
     */
    public function setDeletedBy($deletedBy)
    {
        $this->container['deletedBy'] = $deletedBy;

        return $this;
    }

    /**
     * Gets deletionDate
     *
     * @return \DateTime
     */
    public function getDeletionDate()
    {
        return $this->container['deletionDate'];
    }

    /**
     * Sets deletionDate
     *
     * @param \DateTime $deletionDate deletionDate
     *
     * @return $this
     */
    public function setDeletionDate($deletionDate)
    {
        $this->container['deletionDate'] = $deletionDate;

        return $this;
    }

    /**
     * Gets isMigratedToWIT
     *
     * @return bool
     */
    public function getIsMigratedToWIT()
    {
        return $this->container['isMigratedToWIT'];
    }

    /**
     * Sets isMigratedToWIT
     *
     * @param bool $isMigratedToWIT isMigratedToWIT
     *
     * @return $this
     */
    public function setIsMigratedToWIT($isMigratedToWIT)
    {
        $this->container['isMigratedToWIT'] = $isMigratedToWIT;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets testMetadataId
     *
     * @return int
     */
    public function getTestMetadataId()
    {
        return $this->container['testMetadataId'];
    }

    /**
     * Sets testMetadataId
     *
     * @param int $testMetadataId testMetadataId
     *
     * @return $this
     */
    public function setTestMetadataId($testMetadataId)
    {
        $this->container['testMetadataId'] = $testMetadataId;

        return $this;
    }

    /**
     * Gets workItemId
     *
     * @return int
     */
    public function getWorkItemId()
    {
        return $this->container['workItemId'];
    }

    /**
     * Sets workItemId
     *
     * @param int $workItemId workItemId
     *
     * @return $this
     */
    public function setWorkItemId($workItemId)
    {
        $this->container['workItemId'] = $workItemId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


