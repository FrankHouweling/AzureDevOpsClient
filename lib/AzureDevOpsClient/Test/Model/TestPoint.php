<?php
/**
 * TestPoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestPoint Class Doc Comment
 *
 * @category Class
 * @description Test point.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestPoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestPoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignedTo' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'automated' => 'bool',
        'comment' => 'string',
        'configuration' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'failureType' => 'string',
        'id' => 'int',
        'lastResetToActive' => '\DateTime',
        'lastResolutionStateId' => 'int',
        'lastResult' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'lastResultDetails' => '\FrankHouweling\AzureDevOpsClient\Test\Model\LastResultDetails',
        'lastResultState' => 'string',
        'lastRunBuildNumber' => 'string',
        'lastTestRun' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'lastUpdatedBy' => '\FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef',
        'lastUpdatedDate' => '\DateTime',
        'outcome' => 'string',
        'revision' => 'int',
        'state' => 'string',
        'suite' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'testCase' => '\FrankHouweling\AzureDevOpsClient\Test\Model\WorkItemReference',
        'testPlan' => '\FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference',
        'url' => 'string',
        'workItemProperties' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assignedTo' => null,
        'automated' => null,
        'comment' => null,
        'configuration' => null,
        'failureType' => null,
        'id' => 'int32',
        'lastResetToActive' => 'date-time',
        'lastResolutionStateId' => 'int32',
        'lastResult' => null,
        'lastResultDetails' => null,
        'lastResultState' => null,
        'lastRunBuildNumber' => null,
        'lastTestRun' => null,
        'lastUpdatedBy' => null,
        'lastUpdatedDate' => 'date-time',
        'outcome' => null,
        'revision' => 'int32',
        'state' => null,
        'suite' => null,
        'testCase' => null,
        'testPlan' => null,
        'url' => null,
        'workItemProperties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignedTo' => 'assignedTo',
        'automated' => 'automated',
        'comment' => 'comment',
        'configuration' => 'configuration',
        'failureType' => 'failureType',
        'id' => 'id',
        'lastResetToActive' => 'lastResetToActive',
        'lastResolutionStateId' => 'lastResolutionStateId',
        'lastResult' => 'lastResult',
        'lastResultDetails' => 'lastResultDetails',
        'lastResultState' => 'lastResultState',
        'lastRunBuildNumber' => 'lastRunBuildNumber',
        'lastTestRun' => 'lastTestRun',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'outcome' => 'outcome',
        'revision' => 'revision',
        'state' => 'state',
        'suite' => 'suite',
        'testCase' => 'testCase',
        'testPlan' => 'testPlan',
        'url' => 'url',
        'workItemProperties' => 'workItemProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignedTo' => 'setAssignedTo',
        'automated' => 'setAutomated',
        'comment' => 'setComment',
        'configuration' => 'setConfiguration',
        'failureType' => 'setFailureType',
        'id' => 'setId',
        'lastResetToActive' => 'setLastResetToActive',
        'lastResolutionStateId' => 'setLastResolutionStateId',
        'lastResult' => 'setLastResult',
        'lastResultDetails' => 'setLastResultDetails',
        'lastResultState' => 'setLastResultState',
        'lastRunBuildNumber' => 'setLastRunBuildNumber',
        'lastTestRun' => 'setLastTestRun',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'outcome' => 'setOutcome',
        'revision' => 'setRevision',
        'state' => 'setState',
        'suite' => 'setSuite',
        'testCase' => 'setTestCase',
        'testPlan' => 'setTestPlan',
        'url' => 'setUrl',
        'workItemProperties' => 'setWorkItemProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignedTo' => 'getAssignedTo',
        'automated' => 'getAutomated',
        'comment' => 'getComment',
        'configuration' => 'getConfiguration',
        'failureType' => 'getFailureType',
        'id' => 'getId',
        'lastResetToActive' => 'getLastResetToActive',
        'lastResolutionStateId' => 'getLastResolutionStateId',
        'lastResult' => 'getLastResult',
        'lastResultDetails' => 'getLastResultDetails',
        'lastResultState' => 'getLastResultState',
        'lastRunBuildNumber' => 'getLastRunBuildNumber',
        'lastTestRun' => 'getLastTestRun',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'outcome' => 'getOutcome',
        'revision' => 'getRevision',
        'state' => 'getState',
        'suite' => 'getSuite',
        'testCase' => 'getTestCase',
        'testPlan' => 'getTestPlan',
        'url' => 'getUrl',
        'workItemProperties' => 'getWorkItemProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignedTo'] = isset($data['assignedTo']) ? $data['assignedTo'] : null;
        $this->container['automated'] = isset($data['automated']) ? $data['automated'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['failureType'] = isset($data['failureType']) ? $data['failureType'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastResetToActive'] = isset($data['lastResetToActive']) ? $data['lastResetToActive'] : null;
        $this->container['lastResolutionStateId'] = isset($data['lastResolutionStateId']) ? $data['lastResolutionStateId'] : null;
        $this->container['lastResult'] = isset($data['lastResult']) ? $data['lastResult'] : null;
        $this->container['lastResultDetails'] = isset($data['lastResultDetails']) ? $data['lastResultDetails'] : null;
        $this->container['lastResultState'] = isset($data['lastResultState']) ? $data['lastResultState'] : null;
        $this->container['lastRunBuildNumber'] = isset($data['lastRunBuildNumber']) ? $data['lastRunBuildNumber'] : null;
        $this->container['lastTestRun'] = isset($data['lastTestRun']) ? $data['lastTestRun'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['suite'] = isset($data['suite']) ? $data['suite'] : null;
        $this->container['testCase'] = isset($data['testCase']) ? $data['testCase'] : null;
        $this->container['testPlan'] = isset($data['testPlan']) ? $data['testPlan'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['workItemProperties'] = isset($data['workItemProperties']) ? $data['workItemProperties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignedTo
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getAssignedTo()
    {
        return $this->container['assignedTo'];
    }

    /**
     * Sets assignedTo
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $assignedTo AssignedTo. Type IdentityRef.
     *
     * @return $this
     */
    public function setAssignedTo($assignedTo)
    {
        $this->container['assignedTo'] = $assignedTo;

        return $this;
    }

    /**
     * Gets automated
     *
     * @return bool
     */
    public function getAutomated()
    {
        return $this->container['automated'];
    }

    /**
     * Sets automated
     *
     * @param bool $automated Automated.
     *
     * @return $this
     */
    public function setAutomated($automated)
    {
        $this->container['automated'] = $automated;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment associated with test point.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $configuration Configuration. Type ShallowReference.
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets failureType
     *
     * @return string
     */
    public function getFailureType()
    {
        return $this->container['failureType'];
    }

    /**
     * Sets failureType
     *
     * @param string $failureType Failure type of test point.
     *
     * @return $this
     */
    public function setFailureType($failureType)
    {
        $this->container['failureType'] = $failureType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the test point.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastResetToActive
     *
     * @return \DateTime
     */
    public function getLastResetToActive()
    {
        return $this->container['lastResetToActive'];
    }

    /**
     * Sets lastResetToActive
     *
     * @param \DateTime $lastResetToActive Last date when test point was reset to Active.
     *
     * @return $this
     */
    public function setLastResetToActive($lastResetToActive)
    {
        $this->container['lastResetToActive'] = $lastResetToActive;

        return $this;
    }

    /**
     * Gets lastResolutionStateId
     *
     * @return int
     */
    public function getLastResolutionStateId()
    {
        return $this->container['lastResolutionStateId'];
    }

    /**
     * Sets lastResolutionStateId
     *
     * @param int $lastResolutionStateId Last resolution state id of test point.
     *
     * @return $this
     */
    public function setLastResolutionStateId($lastResolutionStateId)
    {
        $this->container['lastResolutionStateId'] = $lastResolutionStateId;

        return $this;
    }

    /**
     * Gets lastResult
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getLastResult()
    {
        return $this->container['lastResult'];
    }

    /**
     * Sets lastResult
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $lastResult Last result of test point. Type ShallowReference.
     *
     * @return $this
     */
    public function setLastResult($lastResult)
    {
        $this->container['lastResult'] = $lastResult;

        return $this;
    }

    /**
     * Gets lastResultDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\LastResultDetails
     */
    public function getLastResultDetails()
    {
        return $this->container['lastResultDetails'];
    }

    /**
     * Sets lastResultDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\LastResultDetails $lastResultDetails Last result details of test point. Type LastResultDetails.
     *
     * @return $this
     */
    public function setLastResultDetails($lastResultDetails)
    {
        $this->container['lastResultDetails'] = $lastResultDetails;

        return $this;
    }

    /**
     * Gets lastResultState
     *
     * @return string
     */
    public function getLastResultState()
    {
        return $this->container['lastResultState'];
    }

    /**
     * Sets lastResultState
     *
     * @param string $lastResultState Last result state of test point.
     *
     * @return $this
     */
    public function setLastResultState($lastResultState)
    {
        $this->container['lastResultState'] = $lastResultState;

        return $this;
    }

    /**
     * Gets lastRunBuildNumber
     *
     * @return string
     */
    public function getLastRunBuildNumber()
    {
        return $this->container['lastRunBuildNumber'];
    }

    /**
     * Sets lastRunBuildNumber
     *
     * @param string $lastRunBuildNumber LastRun build number of test point.
     *
     * @return $this
     */
    public function setLastRunBuildNumber($lastRunBuildNumber)
    {
        $this->container['lastRunBuildNumber'] = $lastRunBuildNumber;

        return $this;
    }

    /**
     * Gets lastTestRun
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getLastTestRun()
    {
        return $this->container['lastTestRun'];
    }

    /**
     * Sets lastTestRun
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $lastTestRun Last testRun of test point. Type ShallowReference.
     *
     * @return $this
     */
    public function setLastTestRun($lastTestRun)
    {
        $this->container['lastTestRun'] = $lastTestRun;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\IdentityRef $lastUpdatedBy Test point last updated by. Type IdentityRef.
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate Last updated date of test point.
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome Outcome of test point.
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Revision number.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of test point.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets suite
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getSuite()
    {
        return $this->container['suite'];
    }

    /**
     * Sets suite
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $suite Suite of test point. Type ShallowReference.
     *
     * @return $this
     */
    public function setSuite($suite)
    {
        $this->container['suite'] = $suite;

        return $this;
    }

    /**
     * Gets testCase
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\WorkItemReference
     */
    public function getTestCase()
    {
        return $this->container['testCase'];
    }

    /**
     * Sets testCase
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\WorkItemReference $testCase TestCase associated to test point. Type WorkItemReference.
     *
     * @return $this
     */
    public function setTestCase($testCase)
    {
        $this->container['testCase'] = $testCase;

        return $this;
    }

    /**
     * Gets testPlan
     *
     * @return \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference
     */
    public function getTestPlan()
    {
        return $this->container['testPlan'];
    }

    /**
     * Sets testPlan
     *
     * @param \FrankHouweling\AzureDevOpsClient\Test\Model\ShallowReference $testPlan TestPlan of test point. Type ShallowReference.
     *
     * @return $this
     */
    public function setTestPlan($testPlan)
    {
        $this->container['testPlan'] = $testPlan;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Test point Url.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets workItemProperties
     *
     * @return object[]
     */
    public function getWorkItemProperties()
    {
        return $this->container['workItemProperties'];
    }

    /**
     * Sets workItemProperties
     *
     * @param object[] $workItemProperties Work item properties of test point.
     *
     * @return $this
     */
    public function setWorkItemProperties($workItemProperties)
    {
        $this->container['workItemProperties'] = $workItemProperties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


