<?php
/**
 * PointsResults2
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * PointsResults2 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PointsResults2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PointsResults2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'changeNumber' => 'int',
        'lastFailureType' => 'string',
        'lastResolutionStateId' => 'int',
        'lastResultOutcome' => 'string',
        'lastResultState' => 'string',
        'lastTestResultId' => 'int',
        'lastTestRunId' => 'int',
        'lastUpdated' => '\DateTime',
        'lastUpdatedBy' => 'string',
        'planId' => 'int',
        'pointId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'changeNumber' => 'int32',
        'lastFailureType' => 'byte',
        'lastResolutionStateId' => 'int32',
        'lastResultOutcome' => 'byte',
        'lastResultState' => 'byte',
        'lastTestResultId' => 'int32',
        'lastTestRunId' => 'int32',
        'lastUpdated' => 'date-time',
        'lastUpdatedBy' => 'uuid',
        'planId' => 'int32',
        'pointId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'changeNumber' => 'changeNumber',
        'lastFailureType' => 'lastFailureType',
        'lastResolutionStateId' => 'lastResolutionStateId',
        'lastResultOutcome' => 'lastResultOutcome',
        'lastResultState' => 'lastResultState',
        'lastTestResultId' => 'lastTestResultId',
        'lastTestRunId' => 'lastTestRunId',
        'lastUpdated' => 'lastUpdated',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'planId' => 'planId',
        'pointId' => 'pointId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'changeNumber' => 'setChangeNumber',
        'lastFailureType' => 'setLastFailureType',
        'lastResolutionStateId' => 'setLastResolutionStateId',
        'lastResultOutcome' => 'setLastResultOutcome',
        'lastResultState' => 'setLastResultState',
        'lastTestResultId' => 'setLastTestResultId',
        'lastTestRunId' => 'setLastTestRunId',
        'lastUpdated' => 'setLastUpdated',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'planId' => 'setPlanId',
        'pointId' => 'setPointId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'changeNumber' => 'getChangeNumber',
        'lastFailureType' => 'getLastFailureType',
        'lastResolutionStateId' => 'getLastResolutionStateId',
        'lastResultOutcome' => 'getLastResultOutcome',
        'lastResultState' => 'getLastResultState',
        'lastTestResultId' => 'getLastTestResultId',
        'lastTestRunId' => 'getLastTestRunId',
        'lastUpdated' => 'getLastUpdated',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'planId' => 'getPlanId',
        'pointId' => 'getPointId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['changeNumber'] = isset($data['changeNumber']) ? $data['changeNumber'] : null;
        $this->container['lastFailureType'] = isset($data['lastFailureType']) ? $data['lastFailureType'] : null;
        $this->container['lastResolutionStateId'] = isset($data['lastResolutionStateId']) ? $data['lastResolutionStateId'] : null;
        $this->container['lastResultOutcome'] = isset($data['lastResultOutcome']) ? $data['lastResultOutcome'] : null;
        $this->container['lastResultState'] = isset($data['lastResultState']) ? $data['lastResultState'] : null;
        $this->container['lastTestResultId'] = isset($data['lastTestResultId']) ? $data['lastTestResultId'] : null;
        $this->container['lastTestRunId'] = isset($data['lastTestRunId']) ? $data['lastTestRunId'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['planId'] = isset($data['planId']) ? $data['planId'] : null;
        $this->container['pointId'] = isset($data['pointId']) ? $data['pointId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['lastFailureType']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['lastFailureType'])) {
            $invalidProperties[] = "invalid value for 'lastFailureType', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['lastResultOutcome']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['lastResultOutcome'])) {
            $invalidProperties[] = "invalid value for 'lastResultOutcome', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['lastResultState']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['lastResultState'])) {
            $invalidProperties[] = "invalid value for 'lastResultState', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets changeNumber
     *
     * @return int
     */
    public function getChangeNumber()
    {
        return $this->container['changeNumber'];
    }

    /**
     * Sets changeNumber
     *
     * @param int $changeNumber changeNumber
     *
     * @return $this
     */
    public function setChangeNumber($changeNumber)
    {
        $this->container['changeNumber'] = $changeNumber;

        return $this;
    }

    /**
     * Gets lastFailureType
     *
     * @return string
     */
    public function getLastFailureType()
    {
        return $this->container['lastFailureType'];
    }

    /**
     * Sets lastFailureType
     *
     * @param string $lastFailureType lastFailureType
     *
     * @return $this
     */
    public function setLastFailureType($lastFailureType)
    {

        if (!is_null($lastFailureType) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $lastFailureType))) {
            throw new \InvalidArgumentException("invalid value for $lastFailureType when calling PointsResults2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['lastFailureType'] = $lastFailureType;

        return $this;
    }

    /**
     * Gets lastResolutionStateId
     *
     * @return int
     */
    public function getLastResolutionStateId()
    {
        return $this->container['lastResolutionStateId'];
    }

    /**
     * Sets lastResolutionStateId
     *
     * @param int $lastResolutionStateId lastResolutionStateId
     *
     * @return $this
     */
    public function setLastResolutionStateId($lastResolutionStateId)
    {
        $this->container['lastResolutionStateId'] = $lastResolutionStateId;

        return $this;
    }

    /**
     * Gets lastResultOutcome
     *
     * @return string
     */
    public function getLastResultOutcome()
    {
        return $this->container['lastResultOutcome'];
    }

    /**
     * Sets lastResultOutcome
     *
     * @param string $lastResultOutcome lastResultOutcome
     *
     * @return $this
     */
    public function setLastResultOutcome($lastResultOutcome)
    {

        if (!is_null($lastResultOutcome) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $lastResultOutcome))) {
            throw new \InvalidArgumentException("invalid value for $lastResultOutcome when calling PointsResults2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['lastResultOutcome'] = $lastResultOutcome;

        return $this;
    }

    /**
     * Gets lastResultState
     *
     * @return string
     */
    public function getLastResultState()
    {
        return $this->container['lastResultState'];
    }

    /**
     * Sets lastResultState
     *
     * @param string $lastResultState lastResultState
     *
     * @return $this
     */
    public function setLastResultState($lastResultState)
    {

        if (!is_null($lastResultState) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $lastResultState))) {
            throw new \InvalidArgumentException("invalid value for $lastResultState when calling PointsResults2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['lastResultState'] = $lastResultState;

        return $this;
    }

    /**
     * Gets lastTestResultId
     *
     * @return int
     */
    public function getLastTestResultId()
    {
        return $this->container['lastTestResultId'];
    }

    /**
     * Sets lastTestResultId
     *
     * @param int $lastTestResultId lastTestResultId
     *
     * @return $this
     */
    public function setLastTestResultId($lastTestResultId)
    {
        $this->container['lastTestResultId'] = $lastTestResultId;

        return $this;
    }

    /**
     * Gets lastTestRunId
     *
     * @return int
     */
    public function getLastTestRunId()
    {
        return $this->container['lastTestRunId'];
    }

    /**
     * Sets lastTestRunId
     *
     * @param int $lastTestRunId lastTestRunId
     *
     * @return $this
     */
    public function setLastTestRunId($lastTestRunId)
    {
        $this->container['lastTestRunId'] = $lastTestRunId;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated lastUpdated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy lastUpdatedBy
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets planId
     *
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId
     *
     * @param int $planId planId
     *
     * @return $this
     */
    public function setPlanId($planId)
    {
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets pointId
     *
     * @return int
     */
    public function getPointId()
    {
        return $this->container['pointId'];
    }

    /**
     * Sets pointId
     *
     * @param int $pointId pointId
     *
     * @return $this
     */
    public function setPointId($pointId)
    {
        $this->container['pointId'] = $pointId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


