<?php
/**
 * ReleaseReference
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * ReleaseReference Class Doc Comment
 *
 * @category Class
 * @description Reference to a release.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseReference implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseReference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attempt' => 'int',
        'creationDate' => '\DateTime',
        'definitionId' => 'int',
        'environmentCreationDate' => '\DateTime',
        'environmentDefinitionId' => 'int',
        'environmentDefinitionName' => 'string',
        'environmentId' => 'int',
        'environmentName' => 'string',
        'id' => 'int',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attempt' => 'int32',
        'creationDate' => 'date-time',
        'definitionId' => 'int32',
        'environmentCreationDate' => 'date-time',
        'environmentDefinitionId' => 'int32',
        'environmentDefinitionName' => null,
        'environmentId' => 'int32',
        'environmentName' => null,
        'id' => 'int32',
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempt' => 'attempt',
        'creationDate' => 'creationDate',
        'definitionId' => 'definitionId',
        'environmentCreationDate' => 'environmentCreationDate',
        'environmentDefinitionId' => 'environmentDefinitionId',
        'environmentDefinitionName' => 'environmentDefinitionName',
        'environmentId' => 'environmentId',
        'environmentName' => 'environmentName',
        'id' => 'id',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempt' => 'setAttempt',
        'creationDate' => 'setCreationDate',
        'definitionId' => 'setDefinitionId',
        'environmentCreationDate' => 'setEnvironmentCreationDate',
        'environmentDefinitionId' => 'setEnvironmentDefinitionId',
        'environmentDefinitionName' => 'setEnvironmentDefinitionName',
        'environmentId' => 'setEnvironmentId',
        'environmentName' => 'setEnvironmentName',
        'id' => 'setId',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempt' => 'getAttempt',
        'creationDate' => 'getCreationDate',
        'definitionId' => 'getDefinitionId',
        'environmentCreationDate' => 'getEnvironmentCreationDate',
        'environmentDefinitionId' => 'getEnvironmentDefinitionId',
        'environmentDefinitionName' => 'getEnvironmentDefinitionName',
        'environmentId' => 'getEnvironmentId',
        'environmentName' => 'getEnvironmentName',
        'id' => 'getId',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['definitionId'] = isset($data['definitionId']) ? $data['definitionId'] : null;
        $this->container['environmentCreationDate'] = isset($data['environmentCreationDate']) ? $data['environmentCreationDate'] : null;
        $this->container['environmentDefinitionId'] = isset($data['environmentDefinitionId']) ? $data['environmentDefinitionId'] : null;
        $this->container['environmentDefinitionName'] = isset($data['environmentDefinitionName']) ? $data['environmentDefinitionName'] : null;
        $this->container['environmentId'] = isset($data['environmentId']) ? $data['environmentId'] : null;
        $this->container['environmentName'] = isset($data['environmentName']) ? $data['environmentName'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempt
     *
     * @return int
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int $attempt Number of Release Attempt.
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate Release Creation Date.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets definitionId
     *
     * @return int
     */
    public function getDefinitionId()
    {
        return $this->container['definitionId'];
    }

    /**
     * Sets definitionId
     *
     * @param int $definitionId Release definition ID.
     *
     * @return $this
     */
    public function setDefinitionId($definitionId)
    {
        $this->container['definitionId'] = $definitionId;

        return $this;
    }

    /**
     * Gets environmentCreationDate
     *
     * @return \DateTime
     */
    public function getEnvironmentCreationDate()
    {
        return $this->container['environmentCreationDate'];
    }

    /**
     * Sets environmentCreationDate
     *
     * @param \DateTime $environmentCreationDate Environment creation Date.
     *
     * @return $this
     */
    public function setEnvironmentCreationDate($environmentCreationDate)
    {
        $this->container['environmentCreationDate'] = $environmentCreationDate;

        return $this;
    }

    /**
     * Gets environmentDefinitionId
     *
     * @return int
     */
    public function getEnvironmentDefinitionId()
    {
        return $this->container['environmentDefinitionId'];
    }

    /**
     * Sets environmentDefinitionId
     *
     * @param int $environmentDefinitionId Release environment definition ID.
     *
     * @return $this
     */
    public function setEnvironmentDefinitionId($environmentDefinitionId)
    {
        $this->container['environmentDefinitionId'] = $environmentDefinitionId;

        return $this;
    }

    /**
     * Gets environmentDefinitionName
     *
     * @return string
     */
    public function getEnvironmentDefinitionName()
    {
        return $this->container['environmentDefinitionName'];
    }

    /**
     * Sets environmentDefinitionName
     *
     * @param string $environmentDefinitionName Release environment definition name.
     *
     * @return $this
     */
    public function setEnvironmentDefinitionName($environmentDefinitionName)
    {
        $this->container['environmentDefinitionName'] = $environmentDefinitionName;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int
     */
    public function getEnvironmentId()
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int $environmentId Release environment ID.
     *
     * @return $this
     */
    public function setEnvironmentId($environmentId)
    {
        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets environmentName
     *
     * @return string
     */
    public function getEnvironmentName()
    {
        return $this->container['environmentName'];
    }

    /**
     * Sets environmentName
     *
     * @param string $environmentName Release environment name.
     *
     * @return $this
     */
    public function setEnvironmentName($environmentName)
    {
        $this->container['environmentName'] = $environmentName;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Release ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Release name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


