<?php
/**
 * TestMessageLogEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestMessageLogEntry Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestMessageLogEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestMessageLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dateCreated' => '\DateTime',
        'entryId' => 'int',
        'logLevel' => 'string',
        'logUser' => 'string',
        'logUserName' => 'string',
        'message' => 'string',
        'testMessageLogId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dateCreated' => 'date-time',
        'entryId' => 'int32',
        'logLevel' => 'byte',
        'logUser' => 'uuid',
        'logUserName' => null,
        'message' => null,
        'testMessageLogId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateCreated' => 'dateCreated',
        'entryId' => 'entryId',
        'logLevel' => 'logLevel',
        'logUser' => 'logUser',
        'logUserName' => 'logUserName',
        'message' => 'message',
        'testMessageLogId' => 'testMessageLogId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateCreated' => 'setDateCreated',
        'entryId' => 'setEntryId',
        'logLevel' => 'setLogLevel',
        'logUser' => 'setLogUser',
        'logUserName' => 'setLogUserName',
        'message' => 'setMessage',
        'testMessageLogId' => 'setTestMessageLogId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateCreated' => 'getDateCreated',
        'entryId' => 'getEntryId',
        'logLevel' => 'getLogLevel',
        'logUser' => 'getLogUser',
        'logUserName' => 'getLogUserName',
        'message' => 'getMessage',
        'testMessageLogId' => 'getTestMessageLogId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['entryId'] = isset($data['entryId']) ? $data['entryId'] : null;
        $this->container['logLevel'] = isset($data['logLevel']) ? $data['logLevel'] : null;
        $this->container['logUser'] = isset($data['logUser']) ? $data['logUser'] : null;
        $this->container['logUserName'] = isset($data['logUserName']) ? $data['logUserName'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['testMessageLogId'] = isset($data['testMessageLogId']) ? $data['testMessageLogId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['logLevel']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['logLevel'])) {
            $invalidProperties[] = "invalid value for 'logLevel', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets entryId
     *
     * @return int
     */
    public function getEntryId()
    {
        return $this->container['entryId'];
    }

    /**
     * Sets entryId
     *
     * @param int $entryId entryId
     *
     * @return $this
     */
    public function setEntryId($entryId)
    {
        $this->container['entryId'] = $entryId;

        return $this;
    }

    /**
     * Gets logLevel
     *
     * @return string
     */
    public function getLogLevel()
    {
        return $this->container['logLevel'];
    }

    /**
     * Sets logLevel
     *
     * @param string $logLevel logLevel
     *
     * @return $this
     */
    public function setLogLevel($logLevel)
    {

        if (!is_null($logLevel) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $logLevel))) {
            throw new \InvalidArgumentException("invalid value for $logLevel when calling TestMessageLogEntry., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['logLevel'] = $logLevel;

        return $this;
    }

    /**
     * Gets logUser
     *
     * @return string
     */
    public function getLogUser()
    {
        return $this->container['logUser'];
    }

    /**
     * Sets logUser
     *
     * @param string $logUser logUser
     *
     * @return $this
     */
    public function setLogUser($logUser)
    {
        $this->container['logUser'] = $logUser;

        return $this;
    }

    /**
     * Gets logUserName
     *
     * @return string
     */
    public function getLogUserName()
    {
        return $this->container['logUserName'];
    }

    /**
     * Sets logUserName
     *
     * @param string $logUserName logUserName
     *
     * @return $this
     */
    public function setLogUserName($logUserName)
    {
        $this->container['logUserName'] = $logUserName;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets testMessageLogId
     *
     * @return int
     */
    public function getTestMessageLogId()
    {
        return $this->container['testMessageLogId'];
    }

    /**
     * Sets testMessageLogId
     *
     * @param int $testMessageLogId testMessageLogId
     *
     * @return $this
     */
    public function setTestMessageLogId($testMessageLogId)
    {
        $this->container['testMessageLogId'] = $testMessageLogId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


