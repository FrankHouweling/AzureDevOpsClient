<?php
/**
 * ShallowTestCaseResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * ShallowTestCaseResult Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShallowTestCaseResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShallowTestCaseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automatedTestName' => 'string',
        'automatedTestStorage' => 'string',
        'durationInMs' => 'double',
        'id' => 'int',
        'isReRun' => 'bool',
        'outcome' => 'string',
        'owner' => 'string',
        'priority' => 'int',
        'refId' => 'int',
        'runId' => 'int',
        'tags' => 'string[]',
        'testCaseTitle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automatedTestName' => null,
        'automatedTestStorage' => null,
        'durationInMs' => 'double',
        'id' => 'int32',
        'isReRun' => null,
        'outcome' => null,
        'owner' => null,
        'priority' => 'int32',
        'refId' => 'int32',
        'runId' => 'int32',
        'tags' => null,
        'testCaseTitle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatedTestName' => 'automatedTestName',
        'automatedTestStorage' => 'automatedTestStorage',
        'durationInMs' => 'durationInMs',
        'id' => 'id',
        'isReRun' => 'isReRun',
        'outcome' => 'outcome',
        'owner' => 'owner',
        'priority' => 'priority',
        'refId' => 'refId',
        'runId' => 'runId',
        'tags' => 'tags',
        'testCaseTitle' => 'testCaseTitle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatedTestName' => 'setAutomatedTestName',
        'automatedTestStorage' => 'setAutomatedTestStorage',
        'durationInMs' => 'setDurationInMs',
        'id' => 'setId',
        'isReRun' => 'setIsReRun',
        'outcome' => 'setOutcome',
        'owner' => 'setOwner',
        'priority' => 'setPriority',
        'refId' => 'setRefId',
        'runId' => 'setRunId',
        'tags' => 'setTags',
        'testCaseTitle' => 'setTestCaseTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatedTestName' => 'getAutomatedTestName',
        'automatedTestStorage' => 'getAutomatedTestStorage',
        'durationInMs' => 'getDurationInMs',
        'id' => 'getId',
        'isReRun' => 'getIsReRun',
        'outcome' => 'getOutcome',
        'owner' => 'getOwner',
        'priority' => 'getPriority',
        'refId' => 'getRefId',
        'runId' => 'getRunId',
        'tags' => 'getTags',
        'testCaseTitle' => 'getTestCaseTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['automatedTestStorage'] = isset($data['automatedTestStorage']) ? $data['automatedTestStorage'] : null;
        $this->container['durationInMs'] = isset($data['durationInMs']) ? $data['durationInMs'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isReRun'] = isset($data['isReRun']) ? $data['isReRun'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['refId'] = isset($data['refId']) ? $data['refId'] : null;
        $this->container['runId'] = isset($data['runId']) ? $data['runId'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['testCaseTitle'] = isset($data['testCaseTitle']) ? $data['testCaseTitle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName automatedTestName
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets automatedTestStorage
     *
     * @return string
     */
    public function getAutomatedTestStorage()
    {
        return $this->container['automatedTestStorage'];
    }

    /**
     * Sets automatedTestStorage
     *
     * @param string $automatedTestStorage automatedTestStorage
     *
     * @return $this
     */
    public function setAutomatedTestStorage($automatedTestStorage)
    {
        $this->container['automatedTestStorage'] = $automatedTestStorage;

        return $this;
    }

    /**
     * Gets durationInMs
     *
     * @return double
     */
    public function getDurationInMs()
    {
        return $this->container['durationInMs'];
    }

    /**
     * Sets durationInMs
     *
     * @param double $durationInMs durationInMs
     *
     * @return $this
     */
    public function setDurationInMs($durationInMs)
    {
        $this->container['durationInMs'] = $durationInMs;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isReRun
     *
     * @return bool
     */
    public function getIsReRun()
    {
        return $this->container['isReRun'];
    }

    /**
     * Sets isReRun
     *
     * @param bool $isReRun isReRun
     *
     * @return $this
     */
    public function setIsReRun($isReRun)
    {
        $this->container['isReRun'] = $isReRun;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome outcome
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets refId
     *
     * @return int
     */
    public function getRefId()
    {
        return $this->container['refId'];
    }

    /**
     * Sets refId
     *
     * @param int $refId refId
     *
     * @return $this
     */
    public function setRefId($refId)
    {
        $this->container['refId'] = $refId;

        return $this;
    }

    /**
     * Gets runId
     *
     * @return int
     */
    public function getRunId()
    {
        return $this->container['runId'];
    }

    /**
     * Sets runId
     *
     * @param int $runId runId
     *
     * @return $this
     */
    public function setRunId($runId)
    {
        $this->container['runId'] = $runId;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets testCaseTitle
     *
     * @return string
     */
    public function getTestCaseTitle()
    {
        return $this->container['testCaseTitle'];
    }

    /**
     * Sets testCaseTitle
     *
     * @param string $testCaseTitle testCaseTitle
     *
     * @return $this
     */
    public function setTestCaseTitle($testCaseTitle)
    {
        $this->container['testCaseTitle'] = $testCaseTitle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


