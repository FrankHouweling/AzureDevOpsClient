<?php
/**
 * TestLogReference
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestLogReference Class Doc Comment
 *
 * @category Class
 * @description Test Log Reference object
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestLogReference implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestLogReference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buildId' => 'int',
        'filePath' => 'string',
        'releaseEnvId' => 'int',
        'releaseId' => 'int',
        'resultId' => 'int',
        'runId' => 'int',
        'scope' => 'string',
        'subResultId' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buildId' => 'int32',
        'filePath' => null,
        'releaseEnvId' => 'int32',
        'releaseId' => 'int32',
        'resultId' => 'int32',
        'runId' => 'int32',
        'scope' => null,
        'subResultId' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buildId' => 'buildId',
        'filePath' => 'filePath',
        'releaseEnvId' => 'releaseEnvId',
        'releaseId' => 'releaseId',
        'resultId' => 'resultId',
        'runId' => 'runId',
        'scope' => 'scope',
        'subResultId' => 'subResultId',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buildId' => 'setBuildId',
        'filePath' => 'setFilePath',
        'releaseEnvId' => 'setReleaseEnvId',
        'releaseId' => 'setReleaseId',
        'resultId' => 'setResultId',
        'runId' => 'setRunId',
        'scope' => 'setScope',
        'subResultId' => 'setSubResultId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buildId' => 'getBuildId',
        'filePath' => 'getFilePath',
        'releaseEnvId' => 'getReleaseEnvId',
        'releaseId' => 'getReleaseId',
        'resultId' => 'getResultId',
        'runId' => 'getRunId',
        'scope' => 'getScope',
        'subResultId' => 'getSubResultId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCOPE_RUN = 'run';
    const TYPE_GENERAL_ATTACHMENT = 'generalAttachment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_RUN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GENERAL_ATTACHMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buildId'] = isset($data['buildId']) ? $data['buildId'] : null;
        $this->container['filePath'] = isset($data['filePath']) ? $data['filePath'] : null;
        $this->container['releaseEnvId'] = isset($data['releaseEnvId']) ? $data['releaseEnvId'] : null;
        $this->container['releaseId'] = isset($data['releaseId']) ? $data['releaseId'] : null;
        $this->container['resultId'] = isset($data['resultId']) ? $data['resultId'] : null;
        $this->container['runId'] = isset($data['runId']) ? $data['runId'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['subResultId'] = isset($data['subResultId']) ? $data['subResultId'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buildId
     *
     * @return int
     */
    public function getBuildId()
    {
        return $this->container['buildId'];
    }

    /**
     * Sets buildId
     *
     * @param int $buildId BuildId for test log, if context is build
     *
     * @return $this
     */
    public function setBuildId($buildId)
    {
        $this->container['buildId'] = $buildId;

        return $this;
    }

    /**
     * Gets filePath
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['filePath'];
    }

    /**
     * Sets filePath
     *
     * @param string $filePath FileName for log file
     *
     * @return $this
     */
    public function setFilePath($filePath)
    {
        $this->container['filePath'] = $filePath;

        return $this;
    }

    /**
     * Gets releaseEnvId
     *
     * @return int
     */
    public function getReleaseEnvId()
    {
        return $this->container['releaseEnvId'];
    }

    /**
     * Sets releaseEnvId
     *
     * @param int $releaseEnvId ReleaseEnvId for test log, if context is Release
     *
     * @return $this
     */
    public function setReleaseEnvId($releaseEnvId)
    {
        $this->container['releaseEnvId'] = $releaseEnvId;

        return $this;
    }

    /**
     * Gets releaseId
     *
     * @return int
     */
    public function getReleaseId()
    {
        return $this->container['releaseId'];
    }

    /**
     * Sets releaseId
     *
     * @param int $releaseId ReleaseId for test log, if context is Release
     *
     * @return $this
     */
    public function setReleaseId($releaseId)
    {
        $this->container['releaseId'] = $releaseId;

        return $this;
    }

    /**
     * Gets resultId
     *
     * @return int
     */
    public function getResultId()
    {
        return $this->container['resultId'];
    }

    /**
     * Sets resultId
     *
     * @param int $resultId Resultid for test log, if context is run and log is related to result
     *
     * @return $this
     */
    public function setResultId($resultId)
    {
        $this->container['resultId'] = $resultId;

        return $this;
    }

    /**
     * Gets runId
     *
     * @return int
     */
    public function getRunId()
    {
        return $this->container['runId'];
    }

    /**
     * Sets runId
     *
     * @param int $runId runid for test log, if context is run
     *
     * @return $this
     */
    public function setRunId($runId)
    {
        $this->container['runId'] = $runId;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Test Log Scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets subResultId
     *
     * @return int
     */
    public function getSubResultId()
    {
        return $this->container['subResultId'];
    }

    /**
     * Sets subResultId
     *
     * @param int $subResultId SubResultid for test log, if context is run and log is related to subresult
     *
     * @return $this
     */
    public function setSubResultId($subResultId)
    {
        $this->container['subResultId'] = $subResultId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Log Type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


