<?php
/**
 * CloneOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Test\ObjectSerializer;

/**
 * CloneOptions Class Doc Comment
 *
 * @category Class
 * @description Clone options for cloning the test suite.
 * @package  FrankHouweling\AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloneOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CloneOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloneRequirements' => 'bool',
        'copyAllSuites' => 'bool',
        'copyAncestorHierarchy' => 'bool',
        'destinationWorkItemType' => 'string',
        'overrideParameters' => 'map[string,string]',
        'relatedLinkComment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloneRequirements' => null,
        'copyAllSuites' => null,
        'copyAncestorHierarchy' => null,
        'destinationWorkItemType' => null,
        'overrideParameters' => null,
        'relatedLinkComment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloneRequirements' => 'cloneRequirements',
        'copyAllSuites' => 'copyAllSuites',
        'copyAncestorHierarchy' => 'copyAncestorHierarchy',
        'destinationWorkItemType' => 'destinationWorkItemType',
        'overrideParameters' => 'overrideParameters',
        'relatedLinkComment' => 'relatedLinkComment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloneRequirements' => 'setCloneRequirements',
        'copyAllSuites' => 'setCopyAllSuites',
        'copyAncestorHierarchy' => 'setCopyAncestorHierarchy',
        'destinationWorkItemType' => 'setDestinationWorkItemType',
        'overrideParameters' => 'setOverrideParameters',
        'relatedLinkComment' => 'setRelatedLinkComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloneRequirements' => 'getCloneRequirements',
        'copyAllSuites' => 'getCopyAllSuites',
        'copyAncestorHierarchy' => 'getCopyAncestorHierarchy',
        'destinationWorkItemType' => 'getDestinationWorkItemType',
        'overrideParameters' => 'getOverrideParameters',
        'relatedLinkComment' => 'getRelatedLinkComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloneRequirements'] = isset($data['cloneRequirements']) ? $data['cloneRequirements'] : null;
        $this->container['copyAllSuites'] = isset($data['copyAllSuites']) ? $data['copyAllSuites'] : null;
        $this->container['copyAncestorHierarchy'] = isset($data['copyAncestorHierarchy']) ? $data['copyAncestorHierarchy'] : null;
        $this->container['destinationWorkItemType'] = isset($data['destinationWorkItemType']) ? $data['destinationWorkItemType'] : null;
        $this->container['overrideParameters'] = isset($data['overrideParameters']) ? $data['overrideParameters'] : null;
        $this->container['relatedLinkComment'] = isset($data['relatedLinkComment']) ? $data['relatedLinkComment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloneRequirements
     *
     * @return bool
     */
    public function getCloneRequirements()
    {
        return $this->container['cloneRequirements'];
    }

    /**
     * Sets cloneRequirements
     *
     * @param bool $cloneRequirements If set to true requirements will be cloned
     *
     * @return $this
     */
    public function setCloneRequirements($cloneRequirements)
    {
        $this->container['cloneRequirements'] = $cloneRequirements;

        return $this;
    }

    /**
     * Gets copyAllSuites
     *
     * @return bool
     */
    public function getCopyAllSuites()
    {
        return $this->container['copyAllSuites'];
    }

    /**
     * Sets copyAllSuites
     *
     * @param bool $copyAllSuites copy all suites from a source plan
     *
     * @return $this
     */
    public function setCopyAllSuites($copyAllSuites)
    {
        $this->container['copyAllSuites'] = $copyAllSuites;

        return $this;
    }

    /**
     * Gets copyAncestorHierarchy
     *
     * @return bool
     */
    public function getCopyAncestorHierarchy()
    {
        return $this->container['copyAncestorHierarchy'];
    }

    /**
     * Sets copyAncestorHierarchy
     *
     * @param bool $copyAncestorHierarchy copy ancestor hierarchy
     *
     * @return $this
     */
    public function setCopyAncestorHierarchy($copyAncestorHierarchy)
    {
        $this->container['copyAncestorHierarchy'] = $copyAncestorHierarchy;

        return $this;
    }

    /**
     * Gets destinationWorkItemType
     *
     * @return string
     */
    public function getDestinationWorkItemType()
    {
        return $this->container['destinationWorkItemType'];
    }

    /**
     * Sets destinationWorkItemType
     *
     * @param string $destinationWorkItemType Name of the workitem type of the clone
     *
     * @return $this
     */
    public function setDestinationWorkItemType($destinationWorkItemType)
    {
        $this->container['destinationWorkItemType'] = $destinationWorkItemType;

        return $this;
    }

    /**
     * Gets overrideParameters
     *
     * @return map[string,string]
     */
    public function getOverrideParameters()
    {
        return $this->container['overrideParameters'];
    }

    /**
     * Sets overrideParameters
     *
     * @param map[string,string] $overrideParameters Key value pairs where the key value is overridden by the value.
     *
     * @return $this
     */
    public function setOverrideParameters($overrideParameters)
    {
        $this->container['overrideParameters'] = $overrideParameters;

        return $this;
    }

    /**
     * Gets relatedLinkComment
     *
     * @return string
     */
    public function getRelatedLinkComment()
    {
        return $this->container['relatedLinkComment'];
    }

    /**
     * Sets relatedLinkComment
     *
     * @param string $relatedLinkComment Comment on the link that will link the new clone  test case to the original Set null for no comment
     *
     * @return $this
     */
    public function setRelatedLinkComment($relatedLinkComment)
    {
        $this->container['relatedLinkComment'] = $relatedLinkComment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


