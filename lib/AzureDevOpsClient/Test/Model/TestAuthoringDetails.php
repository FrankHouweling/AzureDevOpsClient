<?php
/**
 * TestAuthoringDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestAuthoringDetails Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestAuthoringDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestAuthoringDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'configurationId' => 'int',
        'isAutomated' => 'bool',
        'lastUpdated' => '\DateTime',
        'pointId' => 'int',
        'priority' => 'string',
        'runBy' => 'string',
        'state' => 'string',
        'suiteId' => 'int',
        'testerId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'configurationId' => 'int32',
        'isAutomated' => null,
        'lastUpdated' => 'date-time',
        'pointId' => 'int32',
        'priority' => 'byte',
        'runBy' => 'uuid',
        'state' => null,
        'suiteId' => 'int32',
        'testerId' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'configurationId' => 'configurationId',
        'isAutomated' => 'isAutomated',
        'lastUpdated' => 'lastUpdated',
        'pointId' => 'pointId',
        'priority' => 'priority',
        'runBy' => 'runBy',
        'state' => 'state',
        'suiteId' => 'suiteId',
        'testerId' => 'testerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'configurationId' => 'setConfigurationId',
        'isAutomated' => 'setIsAutomated',
        'lastUpdated' => 'setLastUpdated',
        'pointId' => 'setPointId',
        'priority' => 'setPriority',
        'runBy' => 'setRunBy',
        'state' => 'setState',
        'suiteId' => 'setSuiteId',
        'testerId' => 'setTesterId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'configurationId' => 'getConfigurationId',
        'isAutomated' => 'getIsAutomated',
        'lastUpdated' => 'getLastUpdated',
        'pointId' => 'getPointId',
        'priority' => 'getPriority',
        'runBy' => 'getRunBy',
        'state' => 'getState',
        'suiteId' => 'getSuiteId',
        'testerId' => 'getTesterId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_NONE = 'none';
    const STATE_READY = 'ready';
    const STATE_COMPLETED = 'completed';
    const STATE_NOT_READY = 'notReady';
    const STATE_IN_PROGRESS = 'inProgress';
    const STATE_MAX_VALUE = 'maxValue';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_NONE,
            self::STATE_READY,
            self::STATE_COMPLETED,
            self::STATE_NOT_READY,
            self::STATE_IN_PROGRESS,
            self::STATE_MAX_VALUE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['configurationId'] = isset($data['configurationId']) ? $data['configurationId'] : null;
        $this->container['isAutomated'] = isset($data['isAutomated']) ? $data['isAutomated'] : null;
        $this->container['lastUpdated'] = isset($data['lastUpdated']) ? $data['lastUpdated'] : null;
        $this->container['pointId'] = isset($data['pointId']) ? $data['pointId'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['runBy'] = isset($data['runBy']) ? $data['runBy'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['suiteId'] = isset($data['suiteId']) ? $data['suiteId'] : null;
        $this->container['testerId'] = isset($data['testerId']) ? $data['testerId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['priority']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['priority'])) {
            $invalidProperties[] = "invalid value for 'priority', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets configurationId
     *
     * @return int
     */
    public function getConfigurationId()
    {
        return $this->container['configurationId'];
    }

    /**
     * Sets configurationId
     *
     * @param int $configurationId configurationId
     *
     * @return $this
     */
    public function setConfigurationId($configurationId)
    {
        $this->container['configurationId'] = $configurationId;

        return $this;
    }

    /**
     * Gets isAutomated
     *
     * @return bool
     */
    public function getIsAutomated()
    {
        return $this->container['isAutomated'];
    }

    /**
     * Sets isAutomated
     *
     * @param bool $isAutomated isAutomated
     *
     * @return $this
     */
    public function setIsAutomated($isAutomated)
    {
        $this->container['isAutomated'] = $isAutomated;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime $lastUpdated lastUpdated
     *
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets pointId
     *
     * @return int
     */
    public function getPointId()
    {
        return $this->container['pointId'];
    }

    /**
     * Sets pointId
     *
     * @param int $pointId pointId
     *
     * @return $this
     */
    public function setPointId($pointId)
    {
        $this->container['pointId'] = $pointId;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $priority))) {
            throw new \InvalidArgumentException("invalid value for $priority when calling TestAuthoringDetails., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets runBy
     *
     * @return string
     */
    public function getRunBy()
    {
        return $this->container['runBy'];
    }

    /**
     * Sets runBy
     *
     * @param string $runBy runBy
     *
     * @return $this
     */
    public function setRunBy($runBy)
    {
        $this->container['runBy'] = $runBy;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets suiteId
     *
     * @return int
     */
    public function getSuiteId()
    {
        return $this->container['suiteId'];
    }

    /**
     * Sets suiteId
     *
     * @param int $suiteId suiteId
     *
     * @return $this
     */
    public function setSuiteId($suiteId)
    {
        $this->container['suiteId'] = $suiteId;

        return $this;
    }

    /**
     * Gets testerId
     *
     * @return string
     */
    public function getTesterId()
    {
        return $this->container['testerId'];
    }

    /**
     * Sets testerId
     *
     * @param string $testerId testerId
     *
     * @return $this
     */
    public function setTesterId($testerId)
    {
        $this->container['testerId'] = $testerId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


