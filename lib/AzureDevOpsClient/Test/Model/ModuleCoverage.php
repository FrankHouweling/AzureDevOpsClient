<?php
/**
 * ModuleCoverage
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * ModuleCoverage Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModuleCoverage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModuleCoverage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'blockCount' => 'int',
        'blockData' => 'string[]',
        'fileUrl' => 'string',
        'functions' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FunctionCoverage[]',
        'name' => 'string',
        'signature' => 'string',
        'signatureAge' => 'int',
        'statistics' => '\AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\CoverageStatistics'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'blockCount' => 'int32',
        'blockData' => 'byte',
        'fileUrl' => null,
        'functions' => null,
        'name' => null,
        'signature' => 'uuid',
        'signatureAge' => 'int32',
        'statistics' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blockCount' => 'blockCount',
        'blockData' => 'blockData',
        'fileUrl' => 'fileUrl',
        'functions' => 'functions',
        'name' => 'name',
        'signature' => 'signature',
        'signatureAge' => 'signatureAge',
        'statistics' => 'statistics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blockCount' => 'setBlockCount',
        'blockData' => 'setBlockData',
        'fileUrl' => 'setFileUrl',
        'functions' => 'setFunctions',
        'name' => 'setName',
        'signature' => 'setSignature',
        'signatureAge' => 'setSignatureAge',
        'statistics' => 'setStatistics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blockCount' => 'getBlockCount',
        'blockData' => 'getBlockData',
        'fileUrl' => 'getFileUrl',
        'functions' => 'getFunctions',
        'name' => 'getName',
        'signature' => 'getSignature',
        'signatureAge' => 'getSignatureAge',
        'statistics' => 'getStatistics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blockCount'] = isset($data['blockCount']) ? $data['blockCount'] : null;
        $this->container['blockData'] = isset($data['blockData']) ? $data['blockData'] : null;
        $this->container['fileUrl'] = isset($data['fileUrl']) ? $data['fileUrl'] : null;
        $this->container['functions'] = isset($data['functions']) ? $data['functions'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['signatureAge'] = isset($data['signatureAge']) ? $data['signatureAge'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blockCount
     *
     * @return int
     */
    public function getBlockCount()
    {
        return $this->container['blockCount'];
    }

    /**
     * Sets blockCount
     *
     * @param int $blockCount blockCount
     *
     * @return $this
     */
    public function setBlockCount($blockCount)
    {
        $this->container['blockCount'] = $blockCount;

        return $this;
    }

    /**
     * Gets blockData
     *
     * @return string[]
     */
    public function getBlockData()
    {
        return $this->container['blockData'];
    }

    /**
     * Sets blockData
     *
     * @param string[] $blockData blockData
     *
     * @return $this
     */
    public function setBlockData($blockData)
    {
        $this->container['blockData'] = $blockData;

        return $this;
    }

    /**
     * Gets fileUrl
     *
     * @return string
     */
    public function getFileUrl()
    {
        return $this->container['fileUrl'];
    }

    /**
     * Sets fileUrl
     *
     * @param string $fileUrl Code Coverage File Url
     *
     * @return $this
     */
    public function setFileUrl($fileUrl)
    {
        $this->container['fileUrl'] = $fileUrl;

        return $this;
    }

    /**
     * Gets functions
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FunctionCoverage[]
     */
    public function getFunctions()
    {
        return $this->container['functions'];
    }

    /**
     * Sets functions
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\FunctionCoverage[] $functions functions
     *
     * @return $this
     */
    public function setFunctions($functions)
    {
        $this->container['functions'] = $functions;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signatureAge
     *
     * @return int
     */
    public function getSignatureAge()
    {
        return $this->container['signatureAge'];
    }

    /**
     * Sets signatureAge
     *
     * @param int $signatureAge signatureAge
     *
     * @return $this
     */
    public function setSignatureAge($signatureAge)
    {
        $this->container['signatureAge'] = $signatureAge;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\CoverageStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model\CoverageStatistics $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


