<?php
/**
 * TestCaseReference2
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Test\AzureDevOpsClient\Test\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Test\ObjectSerializer;

/**
 * TestCaseReference2 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestCaseReference2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestCaseReference2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'areaId' => 'int',
        'automatedTestId' => 'string',
        'automatedTestName' => 'string',
        'automatedTestNameHash' => 'string[]',
        'automatedTestStorage' => 'string',
        'automatedTestStorageHash' => 'string[]',
        'automatedTestType' => 'string',
        'configurationId' => 'int',
        'createdBy' => 'string',
        'creationDate' => '\DateTime',
        'lastRefTestRunDate' => '\DateTime',
        'owner' => 'string',
        'priority' => 'string',
        'projectId' => 'string',
        'testCaseId' => 'int',
        'testCaseRefId' => 'int',
        'testCaseRevision' => 'int',
        'testCaseTitle' => 'string',
        'testPointId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'areaId' => 'int32',
        'automatedTestId' => null,
        'automatedTestName' => null,
        'automatedTestNameHash' => 'byte',
        'automatedTestStorage' => null,
        'automatedTestStorageHash' => 'byte',
        'automatedTestType' => null,
        'configurationId' => 'int32',
        'createdBy' => 'uuid',
        'creationDate' => 'date-time',
        'lastRefTestRunDate' => 'date-time',
        'owner' => null,
        'priority' => 'byte',
        'projectId' => 'uuid',
        'testCaseId' => 'int32',
        'testCaseRefId' => 'int32',
        'testCaseRevision' => 'int32',
        'testCaseTitle' => null,
        'testPointId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'areaId' => 'areaId',
        'automatedTestId' => 'automatedTestId',
        'automatedTestName' => 'automatedTestName',
        'automatedTestNameHash' => 'automatedTestNameHash',
        'automatedTestStorage' => 'automatedTestStorage',
        'automatedTestStorageHash' => 'automatedTestStorageHash',
        'automatedTestType' => 'automatedTestType',
        'configurationId' => 'configurationId',
        'createdBy' => 'createdBy',
        'creationDate' => 'creationDate',
        'lastRefTestRunDate' => 'lastRefTestRunDate',
        'owner' => 'owner',
        'priority' => 'priority',
        'projectId' => 'projectId',
        'testCaseId' => 'testCaseId',
        'testCaseRefId' => 'testCaseRefId',
        'testCaseRevision' => 'testCaseRevision',
        'testCaseTitle' => 'testCaseTitle',
        'testPointId' => 'testPointId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'areaId' => 'setAreaId',
        'automatedTestId' => 'setAutomatedTestId',
        'automatedTestName' => 'setAutomatedTestName',
        'automatedTestNameHash' => 'setAutomatedTestNameHash',
        'automatedTestStorage' => 'setAutomatedTestStorage',
        'automatedTestStorageHash' => 'setAutomatedTestStorageHash',
        'automatedTestType' => 'setAutomatedTestType',
        'configurationId' => 'setConfigurationId',
        'createdBy' => 'setCreatedBy',
        'creationDate' => 'setCreationDate',
        'lastRefTestRunDate' => 'setLastRefTestRunDate',
        'owner' => 'setOwner',
        'priority' => 'setPriority',
        'projectId' => 'setProjectId',
        'testCaseId' => 'setTestCaseId',
        'testCaseRefId' => 'setTestCaseRefId',
        'testCaseRevision' => 'setTestCaseRevision',
        'testCaseTitle' => 'setTestCaseTitle',
        'testPointId' => 'setTestPointId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'areaId' => 'getAreaId',
        'automatedTestId' => 'getAutomatedTestId',
        'automatedTestName' => 'getAutomatedTestName',
        'automatedTestNameHash' => 'getAutomatedTestNameHash',
        'automatedTestStorage' => 'getAutomatedTestStorage',
        'automatedTestStorageHash' => 'getAutomatedTestStorageHash',
        'automatedTestType' => 'getAutomatedTestType',
        'configurationId' => 'getConfigurationId',
        'createdBy' => 'getCreatedBy',
        'creationDate' => 'getCreationDate',
        'lastRefTestRunDate' => 'getLastRefTestRunDate',
        'owner' => 'getOwner',
        'priority' => 'getPriority',
        'projectId' => 'getProjectId',
        'testCaseId' => 'getTestCaseId',
        'testCaseRefId' => 'getTestCaseRefId',
        'testCaseRevision' => 'getTestCaseRevision',
        'testCaseTitle' => 'getTestCaseTitle',
        'testPointId' => 'getTestPointId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['areaId'] = isset($data['areaId']) ? $data['areaId'] : null;
        $this->container['automatedTestId'] = isset($data['automatedTestId']) ? $data['automatedTestId'] : null;
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['automatedTestNameHash'] = isset($data['automatedTestNameHash']) ? $data['automatedTestNameHash'] : null;
        $this->container['automatedTestStorage'] = isset($data['automatedTestStorage']) ? $data['automatedTestStorage'] : null;
        $this->container['automatedTestStorageHash'] = isset($data['automatedTestStorageHash']) ? $data['automatedTestStorageHash'] : null;
        $this->container['automatedTestType'] = isset($data['automatedTestType']) ? $data['automatedTestType'] : null;
        $this->container['configurationId'] = isset($data['configurationId']) ? $data['configurationId'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['lastRefTestRunDate'] = isset($data['lastRefTestRunDate']) ? $data['lastRefTestRunDate'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['testCaseId'] = isset($data['testCaseId']) ? $data['testCaseId'] : null;
        $this->container['testCaseRefId'] = isset($data['testCaseRefId']) ? $data['testCaseRefId'] : null;
        $this->container['testCaseRevision'] = isset($data['testCaseRevision']) ? $data['testCaseRevision'] : null;
        $this->container['testCaseTitle'] = isset($data['testCaseTitle']) ? $data['testCaseTitle'] : null;
        $this->container['testPointId'] = isset($data['testPointId']) ? $data['testPointId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['priority']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['priority'])) {
            $invalidProperties[] = "invalid value for 'priority', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets areaId
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['areaId'];
    }

    /**
     * Sets areaId
     *
     * @param int $areaId areaId
     *
     * @return $this
     */
    public function setAreaId($areaId)
    {
        $this->container['areaId'] = $areaId;

        return $this;
    }

    /**
     * Gets automatedTestId
     *
     * @return string
     */
    public function getAutomatedTestId()
    {
        return $this->container['automatedTestId'];
    }

    /**
     * Sets automatedTestId
     *
     * @param string $automatedTestId automatedTestId
     *
     * @return $this
     */
    public function setAutomatedTestId($automatedTestId)
    {
        $this->container['automatedTestId'] = $automatedTestId;

        return $this;
    }

    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName automatedTestName
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets automatedTestNameHash
     *
     * @return string[]
     */
    public function getAutomatedTestNameHash()
    {
        return $this->container['automatedTestNameHash'];
    }

    /**
     * Sets automatedTestNameHash
     *
     * @param string[] $automatedTestNameHash automatedTestNameHash
     *
     * @return $this
     */
    public function setAutomatedTestNameHash($automatedTestNameHash)
    {
        $this->container['automatedTestNameHash'] = $automatedTestNameHash;

        return $this;
    }

    /**
     * Gets automatedTestStorage
     *
     * @return string
     */
    public function getAutomatedTestStorage()
    {
        return $this->container['automatedTestStorage'];
    }

    /**
     * Sets automatedTestStorage
     *
     * @param string $automatedTestStorage automatedTestStorage
     *
     * @return $this
     */
    public function setAutomatedTestStorage($automatedTestStorage)
    {
        $this->container['automatedTestStorage'] = $automatedTestStorage;

        return $this;
    }

    /**
     * Gets automatedTestStorageHash
     *
     * @return string[]
     */
    public function getAutomatedTestStorageHash()
    {
        return $this->container['automatedTestStorageHash'];
    }

    /**
     * Sets automatedTestStorageHash
     *
     * @param string[] $automatedTestStorageHash automatedTestStorageHash
     *
     * @return $this
     */
    public function setAutomatedTestStorageHash($automatedTestStorageHash)
    {
        $this->container['automatedTestStorageHash'] = $automatedTestStorageHash;

        return $this;
    }

    /**
     * Gets automatedTestType
     *
     * @return string
     */
    public function getAutomatedTestType()
    {
        return $this->container['automatedTestType'];
    }

    /**
     * Sets automatedTestType
     *
     * @param string $automatedTestType automatedTestType
     *
     * @return $this
     */
    public function setAutomatedTestType($automatedTestType)
    {
        $this->container['automatedTestType'] = $automatedTestType;

        return $this;
    }

    /**
     * Gets configurationId
     *
     * @return int
     */
    public function getConfigurationId()
    {
        return $this->container['configurationId'];
    }

    /**
     * Sets configurationId
     *
     * @param int $configurationId configurationId
     *
     * @return $this
     */
    public function setConfigurationId($configurationId)
    {
        $this->container['configurationId'] = $configurationId;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets lastRefTestRunDate
     *
     * @return \DateTime
     */
    public function getLastRefTestRunDate()
    {
        return $this->container['lastRefTestRunDate'];
    }

    /**
     * Sets lastRefTestRunDate
     *
     * @param \DateTime $lastRefTestRunDate lastRefTestRunDate
     *
     * @return $this
     */
    public function setLastRefTestRunDate($lastRefTestRunDate)
    {
        $this->container['lastRefTestRunDate'] = $lastRefTestRunDate;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $priority))) {
            throw new \InvalidArgumentException("invalid value for $priority when calling TestCaseReference2., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets testCaseId
     *
     * @return int
     */
    public function getTestCaseId()
    {
        return $this->container['testCaseId'];
    }

    /**
     * Sets testCaseId
     *
     * @param int $testCaseId testCaseId
     *
     * @return $this
     */
    public function setTestCaseId($testCaseId)
    {
        $this->container['testCaseId'] = $testCaseId;

        return $this;
    }

    /**
     * Gets testCaseRefId
     *
     * @return int
     */
    public function getTestCaseRefId()
    {
        return $this->container['testCaseRefId'];
    }

    /**
     * Sets testCaseRefId
     *
     * @param int $testCaseRefId testCaseRefId
     *
     * @return $this
     */
    public function setTestCaseRefId($testCaseRefId)
    {
        $this->container['testCaseRefId'] = $testCaseRefId;

        return $this;
    }

    /**
     * Gets testCaseRevision
     *
     * @return int
     */
    public function getTestCaseRevision()
    {
        return $this->container['testCaseRevision'];
    }

    /**
     * Sets testCaseRevision
     *
     * @param int $testCaseRevision testCaseRevision
     *
     * @return $this
     */
    public function setTestCaseRevision($testCaseRevision)
    {
        $this->container['testCaseRevision'] = $testCaseRevision;

        return $this;
    }

    /**
     * Gets testCaseTitle
     *
     * @return string
     */
    public function getTestCaseTitle()
    {
        return $this->container['testCaseTitle'];
    }

    /**
     * Sets testCaseTitle
     *
     * @param string $testCaseTitle testCaseTitle
     *
     * @return $this
     */
    public function setTestCaseTitle($testCaseTitle)
    {
        $this->container['testCaseTitle'] = $testCaseTitle;

        return $this;
    }

    /**
     * Gets testPointId
     *
     * @return int
     */
    public function getTestPointId()
    {
        return $this->container['testPointId'];
    }

    /**
     * Sets testPointId
     *
     * @param int $testPointId testPointId
     *
     * @return $this
     */
    public function setTestPointId($testPointId)
    {
        $this->container['testPointId'] = $testPointId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


