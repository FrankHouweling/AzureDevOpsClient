<?php
/**
 * WorkItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\Wit\ApiException;
use FrankHouweling\AzureDevOpsClient\Wit\Configuration;
use FrankHouweling\AzureDevOpsClient\Wit\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemsApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation workItemsCreate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the work item (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type of the work item to create (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem
     */
    public function workItemsCreate($organization, $body, $project, $type, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        list($response) = $this->workItemsCreateWithHttpInfo($organization, $body, $project, $type, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);
        return $response;
    }

    /**
     * Operation workItemsCreateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the work item (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type of the work item to create (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsCreateWithHttpInfo($organization, $body, $project, $type, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsCreateRequest($organization, $body, $project, $type, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsCreateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the work item (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type of the work item to create (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsCreateAsync($organization, $body, $project, $type, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        return $this->workItemsCreateAsyncWithHttpInfo($organization, $body, $project, $type, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the work item (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type of the work item to create (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsCreateAsyncWithHttpInfo($organization, $body, $project, $type, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsCreateRequest($organization, $body, $project, $type, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsCreate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the work item (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type of the work item to create (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsCreateRequest($organization, $body, $project, $type, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling workItemsCreate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsCreate'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling workItemsCreate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsCreate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems/${type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($validateOnly !== null) {
            $queryParams['validateOnly'] = ObjectSerializer::toQueryValue($validateOnly);
        }
        // query params
        if ($bypassRules !== null) {
            $queryParams['bypassRules'] = ObjectSerializer::toQueryValue($bypassRules);
        }
        // query params
        if ($suppressNotifications !== null) {
            $queryParams['suppressNotifications'] = ObjectSerializer::toQueryValue($suppressNotifications);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsDelete
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the work item to be deleted (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $destroy Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemDelete
     */
    public function workItemsDelete($organization, $id, $project, $apiVersion, $destroy = null)
    {
        list($response) = $this->workItemsDeleteWithHttpInfo($organization, $id, $project, $apiVersion, $destroy);
        return $response;
    }

    /**
     * Operation workItemsDeleteWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the work item to be deleted (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $destroy Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemDelete, HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsDeleteWithHttpInfo($organization, $id, $project, $apiVersion, $destroy = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemDelete';
        $request = $this->workItemsDeleteRequest($organization, $id, $project, $apiVersion, $destroy);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemDelete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsDeleteAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the work item to be deleted (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $destroy Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsDeleteAsync($organization, $id, $project, $apiVersion, $destroy = null)
    {
        return $this->workItemsDeleteAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $destroy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the work item to be deleted (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $destroy Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsDeleteAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $destroy = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemDelete';
        $request = $this->workItemsDeleteRequest($organization, $id, $project, $apiVersion, $destroy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsDelete'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the work item to be deleted (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $destroy Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsDeleteRequest($organization, $id, $project, $apiVersion, $destroy = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsDelete'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling workItemsDelete'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsDelete'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsDelete'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($destroy !== null) {
            $queryParams['destroy'] = ObjectSerializer::toQueryValue($destroy);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsGetWorkItem
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id The work item id (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem
     */
    public function workItemsGetWorkItem($organization, $id, $project, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        list($response) = $this->workItemsGetWorkItemWithHttpInfo($organization, $id, $project, $apiVersion, $fields, $asOf, $expand);
        return $response;
    }

    /**
     * Operation workItemsGetWorkItemWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id The work item id (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsGetWorkItemWithHttpInfo($organization, $id, $project, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsGetWorkItemRequest($organization, $id, $project, $apiVersion, $fields, $asOf, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsGetWorkItemAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id The work item id (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemAsync($organization, $id, $project, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        return $this->workItemsGetWorkItemAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $fields, $asOf, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsGetWorkItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id The work item id (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsGetWorkItemRequest($organization, $id, $project, $apiVersion, $fields, $asOf, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsGetWorkItem'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id The work item id (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsGetWorkItemRequest($organization, $id, $project, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsGetWorkItem'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling workItemsGetWorkItem'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsGetWorkItem'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsGetWorkItem'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($asOf !== null) {
            $queryParams['asOf'] = ObjectSerializer::toQueryValue($asOf);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsGetWorkItemTemplate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem
     */
    public function workItemsGetWorkItemTemplate($organization, $project, $type, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        list($response) = $this->workItemsGetWorkItemTemplateWithHttpInfo($organization, $project, $type, $apiVersion, $fields, $asOf, $expand);
        return $response;
    }

    /**
     * Operation workItemsGetWorkItemTemplateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsGetWorkItemTemplateWithHttpInfo($organization, $project, $type, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsGetWorkItemTemplateRequest($organization, $project, $type, $apiVersion, $fields, $asOf, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsGetWorkItemTemplateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemTemplateAsync($organization, $project, $type, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        return $this->workItemsGetWorkItemTemplateAsyncWithHttpInfo($organization, $project, $type, $apiVersion, $fields, $asOf, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsGetWorkItemTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemTemplateAsyncWithHttpInfo($organization, $project, $type, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsGetWorkItemTemplateRequest($organization, $project, $type, $apiVersion, $fields, $asOf, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsGetWorkItemTemplate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $type The work item type name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsGetWorkItemTemplateRequest($organization, $project, $type, $apiVersion, $fields = null, $asOf = null, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsGetWorkItemTemplate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsGetWorkItemTemplate'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling workItemsGetWorkItemTemplate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsGetWorkItemTemplate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems/${type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($asOf !== null) {
            $queryParams['asOf'] = ObjectSerializer::toQueryValue($asOf);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsGetWorkItemsBatch
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemBatchGetRequest $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]
     */
    public function workItemsGetWorkItemsBatch($organization, $body, $project, $apiVersion)
    {
        list($response) = $this->workItemsGetWorkItemsBatchWithHttpInfo($organization, $body, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation workItemsGetWorkItemsBatchWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemBatchGetRequest $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsGetWorkItemsBatchWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]';
        $request = $this->workItemsGetWorkItemsBatchRequest($organization, $body, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsGetWorkItemsBatchAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemBatchGetRequest $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemsBatchAsync($organization, $body, $project, $apiVersion)
    {
        return $this->workItemsGetWorkItemsBatchAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsGetWorkItemsBatchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemBatchGetRequest $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsGetWorkItemsBatchAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]';
        $request = $this->workItemsGetWorkItemsBatchRequest($organization, $body, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsGetWorkItemsBatch'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemBatchGetRequest $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsGetWorkItemsBatchRequest($organization, $body, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsGetWorkItemsBatch'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling workItemsGetWorkItemsBatch'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsGetWorkItemsBatch'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsGetWorkItemsBatch'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitemsbatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsList
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $ids The comma-separated list of requested work item ids. (Maximum 200 ids allowed). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     * @param  string $errorPolicy The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]
     */
    public function workItemsList($organization, $ids, $project, $apiVersion, $fields = null, $asOf = null, $expand = null, $errorPolicy = null)
    {
        list($response) = $this->workItemsListWithHttpInfo($organization, $ids, $project, $apiVersion, $fields, $asOf, $expand, $errorPolicy);
        return $response;
    }

    /**
     * Operation workItemsListWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $ids The comma-separated list of requested work item ids. (Maximum 200 ids allowed). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     * @param  string $errorPolicy The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsListWithHttpInfo($organization, $ids, $project, $apiVersion, $fields = null, $asOf = null, $expand = null, $errorPolicy = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]';
        $request = $this->workItemsListRequest($organization, $ids, $project, $apiVersion, $fields, $asOf, $expand, $errorPolicy);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsListAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $ids The comma-separated list of requested work item ids. (Maximum 200 ids allowed). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     * @param  string $errorPolicy The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsListAsync($organization, $ids, $project, $apiVersion, $fields = null, $asOf = null, $expand = null, $errorPolicy = null)
    {
        return $this->workItemsListAsyncWithHttpInfo($organization, $ids, $project, $apiVersion, $fields, $asOf, $expand, $errorPolicy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $ids The comma-separated list of requested work item ids. (Maximum 200 ids allowed). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     * @param  string $errorPolicy The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsListAsyncWithHttpInfo($organization, $ids, $project, $apiVersion, $fields = null, $asOf = null, $expand = null, $errorPolicy = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem[]';
        $request = $this->workItemsListRequest($organization, $ids, $project, $apiVersion, $fields, $asOf, $expand, $errorPolicy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsList'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $ids The comma-separated list of requested work item ids. (Maximum 200 ids allowed). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  string $fields Comma-separated list of requested fields (optional)
     * @param  \DateTime $asOf AsOf UTC date time string (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     * @param  string $errorPolicy The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsListRequest($organization, $ids, $project, $apiVersion, $fields = null, $asOf = null, $expand = null, $errorPolicy = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsList'
            );
        }
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling workItemsList'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsList'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsList'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($asOf !== null) {
            $queryParams['asOf'] = ObjectSerializer::toQueryValue($asOf);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($errorPolicy !== null) {
            $queryParams['errorPolicy'] = ObjectSerializer::toQueryValue($errorPolicy);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workItemsUpdate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the update (required)
     * @param  int $id The id of the work item to update (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem
     */
    public function workItemsUpdate($organization, $body, $id, $project, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        list($response) = $this->workItemsUpdateWithHttpInfo($organization, $body, $id, $project, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);
        return $response;
    }

    /**
     * Operation workItemsUpdateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the update (required)
     * @param  int $id The id of the work item to update (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Wit\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function workItemsUpdateWithHttpInfo($organization, $body, $id, $project, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsUpdateRequest($organization, $body, $id, $project, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workItemsUpdateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the update (required)
     * @param  int $id The id of the work item to update (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsUpdateAsync($organization, $body, $id, $project, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        return $this->workItemsUpdateAsyncWithHttpInfo($organization, $body, $id, $project, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workItemsUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the update (required)
     * @param  int $id The id of the work item to update (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workItemsUpdateAsyncWithHttpInfo($organization, $body, $id, $project, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItem';
        $request = $this->workItemsUpdateRequest($organization, $body, $id, $project, $apiVersion, $validateOnly, $bypassRules, $suppressNotifications, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workItemsUpdate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Wit\Model\JsonPatchDocument $body The JSON Patch document representing the update (required)
     * @param  int $id The id of the work item to update (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  bool $validateOnly Indicate if you only want to validate the changes without saving the work item (optional)
     * @param  bool $bypassRules Do not enforce the work item type rules on this update (optional)
     * @param  bool $suppressNotifications Do not fire any notifications for this change (optional)
     * @param  string $expand The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function workItemsUpdateRequest($organization, $body, $id, $project, $apiVersion, $validateOnly = null, $bypassRules = null, $suppressNotifications = null, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling workItemsUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling workItemsUpdate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling workItemsUpdate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling workItemsUpdate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling workItemsUpdate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wit/workitems/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($validateOnly !== null) {
            $queryParams['validateOnly'] = ObjectSerializer::toQueryValue($validateOnly);
        }
        // query params
        if ($bypassRules !== null) {
            $queryParams['bypassRules'] = ObjectSerializer::toQueryValue($bypassRules);
        }
        // query params
        if ($suppressNotifications !== null) {
            $queryParams['suppressNotifications'] = ObjectSerializer::toQueryValue($suppressNotifications);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
