<?php
/**
 * WorkItemField
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemField Class Doc Comment
 *
 * @category Class
 * @description Describes a field on a work item and it&#39;s properties specific to that work item type.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkItemField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks',
        'url' => 'string',
        'canSortBy' => 'bool',
        'description' => 'string',
        'isDeleted' => 'bool',
        'isIdentity' => 'bool',
        'isPicklist' => 'bool',
        'isPicklistSuggested' => 'bool',
        'isQueryable' => 'bool',
        'name' => 'string',
        'picklistId' => 'string',
        'readOnly' => 'bool',
        'referenceName' => 'string',
        'supportedOperations' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation[]',
        'type' => 'string',
        'usage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'url' => null,
        'canSortBy' => null,
        'description' => null,
        'isDeleted' => null,
        'isIdentity' => null,
        'isPicklist' => null,
        'isPicklistSuggested' => null,
        'isQueryable' => null,
        'name' => null,
        'picklistId' => 'uuid',
        'readOnly' => null,
        'referenceName' => null,
        'supportedOperations' => null,
        'type' => null,
        'usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'url' => 'url',
        'canSortBy' => 'canSortBy',
        'description' => 'description',
        'isDeleted' => 'isDeleted',
        'isIdentity' => 'isIdentity',
        'isPicklist' => 'isPicklist',
        'isPicklistSuggested' => 'isPicklistSuggested',
        'isQueryable' => 'isQueryable',
        'name' => 'name',
        'picklistId' => 'picklistId',
        'readOnly' => 'readOnly',
        'referenceName' => 'referenceName',
        'supportedOperations' => 'supportedOperations',
        'type' => 'type',
        'usage' => 'usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'url' => 'setUrl',
        'canSortBy' => 'setCanSortBy',
        'description' => 'setDescription',
        'isDeleted' => 'setIsDeleted',
        'isIdentity' => 'setIsIdentity',
        'isPicklist' => 'setIsPicklist',
        'isPicklistSuggested' => 'setIsPicklistSuggested',
        'isQueryable' => 'setIsQueryable',
        'name' => 'setName',
        'picklistId' => 'setPicklistId',
        'readOnly' => 'setReadOnly',
        'referenceName' => 'setReferenceName',
        'supportedOperations' => 'setSupportedOperations',
        'type' => 'setType',
        'usage' => 'setUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'url' => 'getUrl',
        'canSortBy' => 'getCanSortBy',
        'description' => 'getDescription',
        'isDeleted' => 'getIsDeleted',
        'isIdentity' => 'getIsIdentity',
        'isPicklist' => 'getIsPicklist',
        'isPicklistSuggested' => 'getIsPicklistSuggested',
        'isQueryable' => 'getIsQueryable',
        'name' => 'getName',
        'picklistId' => 'getPicklistId',
        'readOnly' => 'getReadOnly',
        'referenceName' => 'getReferenceName',
        'supportedOperations' => 'getSupportedOperations',
        'type' => 'getType',
        'usage' => 'getUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_STRING = 'string';
    const TYPE_INTEGER = 'integer';
    const TYPE_DATE_TIME = 'dateTime';
    const TYPE_PLAIN_TEXT = 'plainText';
    const TYPE_HTML = 'html';
    const TYPE_TREE_PATH = 'treePath';
    const TYPE_HISTORY = 'history';
    const TYPE_DOUBLE = 'double';
    const TYPE_GUID = 'guid';
    const TYPE_BOOLEAN = 'boolean';
    const TYPE_IDENTITY = 'identity';
    const TYPE_PICKLIST_STRING = 'picklistString';
    const TYPE_PICKLIST_INTEGER = 'picklistInteger';
    const TYPE_PICKLIST_DOUBLE = 'picklistDouble';
    const USAGE_NONE = 'none';
    const USAGE_WORK_ITEM = 'workItem';
    const USAGE_WORK_ITEM_LINK = 'workItemLink';
    const USAGE_TREE = 'tree';
    const USAGE_WORK_ITEM_TYPE_EXTENSION = 'workItemTypeExtension';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STRING,
            self::TYPE_INTEGER,
            self::TYPE_DATE_TIME,
            self::TYPE_PLAIN_TEXT,
            self::TYPE_HTML,
            self::TYPE_TREE_PATH,
            self::TYPE_HISTORY,
            self::TYPE_DOUBLE,
            self::TYPE_GUID,
            self::TYPE_BOOLEAN,
            self::TYPE_IDENTITY,
            self::TYPE_PICKLIST_STRING,
            self::TYPE_PICKLIST_INTEGER,
            self::TYPE_PICKLIST_DOUBLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageAllowableValues()
    {
        return [
            self::USAGE_NONE,
            self::USAGE_WORK_ITEM,
            self::USAGE_WORK_ITEM_LINK,
            self::USAGE_TREE,
            self::USAGE_WORK_ITEM_TYPE_EXTENSION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['canSortBy'] = isset($data['canSortBy']) ? $data['canSortBy'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['isIdentity'] = isset($data['isIdentity']) ? $data['isIdentity'] : null;
        $this->container['isPicklist'] = isset($data['isPicklist']) ? $data['isPicklist'] : null;
        $this->container['isPicklistSuggested'] = isset($data['isPicklistSuggested']) ? $data['isPicklistSuggested'] : null;
        $this->container['isQueryable'] = isset($data['isQueryable']) ? $data['isQueryable'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['picklistId'] = isset($data['picklistId']) ? $data['picklistId'] : null;
        $this->container['readOnly'] = isset($data['readOnly']) ? $data['readOnly'] : null;
        $this->container['referenceName'] = isset($data['referenceName']) ? $data['referenceName'] : null;
        $this->container['supportedOperations'] = isset($data['supportedOperations']) ? $data['supportedOperations'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($this->container['usage']) && !in_array($this->container['usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks $links Link references to related REST resources.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets canSortBy
     *
     * @return bool
     */
    public function getCanSortBy()
    {
        return $this->container['canSortBy'];
    }

    /**
     * Sets canSortBy
     *
     * @param bool $canSortBy Indicates whether the field is sortable in server queries.
     *
     * @return $this
     */
    public function setCanSortBy($canSortBy)
    {
        $this->container['canSortBy'] = $canSortBy;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the field.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted Indicates whether this field is deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets isIdentity
     *
     * @return bool
     */
    public function getIsIdentity()
    {
        return $this->container['isIdentity'];
    }

    /**
     * Sets isIdentity
     *
     * @param bool $isIdentity Indicates whether this field is an identity field.
     *
     * @return $this
     */
    public function setIsIdentity($isIdentity)
    {
        $this->container['isIdentity'] = $isIdentity;

        return $this;
    }

    /**
     * Gets isPicklist
     *
     * @return bool
     */
    public function getIsPicklist()
    {
        return $this->container['isPicklist'];
    }

    /**
     * Sets isPicklist
     *
     * @param bool $isPicklist Indicates whether this instance is picklist.
     *
     * @return $this
     */
    public function setIsPicklist($isPicklist)
    {
        $this->container['isPicklist'] = $isPicklist;

        return $this;
    }

    /**
     * Gets isPicklistSuggested
     *
     * @return bool
     */
    public function getIsPicklistSuggested()
    {
        return $this->container['isPicklistSuggested'];
    }

    /**
     * Sets isPicklistSuggested
     *
     * @param bool $isPicklistSuggested Indicates whether this instance is a suggested picklist .
     *
     * @return $this
     */
    public function setIsPicklistSuggested($isPicklistSuggested)
    {
        $this->container['isPicklistSuggested'] = $isPicklistSuggested;

        return $this;
    }

    /**
     * Gets isQueryable
     *
     * @return bool
     */
    public function getIsQueryable()
    {
        return $this->container['isQueryable'];
    }

    /**
     * Sets isQueryable
     *
     * @param bool $isQueryable Indicates whether the field can be queried in the server.
     *
     * @return $this
     */
    public function setIsQueryable($isQueryable)
    {
        $this->container['isQueryable'] = $isQueryable;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the field.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets picklistId
     *
     * @return string
     */
    public function getPicklistId()
    {
        return $this->container['picklistId'];
    }

    /**
     * Sets picklistId
     *
     * @param string $picklistId If this field is picklist, the identifier of the picklist associated, otherwise null
     *
     * @return $this
     */
    public function setPicklistId($picklistId)
    {
        $this->container['picklistId'] = $picklistId;

        return $this;
    }

    /**
     * Gets readOnly
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['readOnly'];
    }

    /**
     * Sets readOnly
     *
     * @param bool $readOnly Indicates whether the field is [read only].
     *
     * @return $this
     */
    public function setReadOnly($readOnly)
    {
        $this->container['readOnly'] = $readOnly;

        return $this;
    }

    /**
     * Gets referenceName
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['referenceName'];
    }

    /**
     * Sets referenceName
     *
     * @param string $referenceName The reference name of the field.
     *
     * @return $this
     */
    public function setReferenceName($referenceName)
    {
        $this->container['referenceName'] = $referenceName;

        return $this;
    }

    /**
     * Gets supportedOperations
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation[]
     */
    public function getSupportedOperations()
    {
        return $this->container['supportedOperations'];
    }

    /**
     * Sets supportedOperations
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation[] $supportedOperations The supported operations on this field.
     *
     * @return $this
     */
    public function setSupportedOperations($supportedOperations)
    {
        $this->container['supportedOperations'] = $supportedOperations;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the field.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string $usage The usage of the field.
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($usage) && !in_array($usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage'] = $usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


