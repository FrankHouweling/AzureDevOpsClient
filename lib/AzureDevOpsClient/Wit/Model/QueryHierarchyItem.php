<?php
/**
 * QueryHierarchyItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * QueryHierarchyItem Class Doc Comment
 *
 * @category Class
 * @description Represents an item in the work item query hierarchy. This can be either a query or a folder.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryHierarchyItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryHierarchyItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks',
        'url' => 'string',
        'children' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\QueryHierarchyItem[]',
        'clauses' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause',
        'columns' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[]',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference',
        'createdDate' => '\DateTime',
        'filterOptions' => 'string',
        'hasChildren' => 'bool',
        'id' => 'string',
        'isDeleted' => 'bool',
        'isFolder' => 'bool',
        'isInvalidSyntax' => 'bool',
        'isPublic' => 'bool',
        'lastExecutedBy' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference',
        'lastExecutedDate' => '\DateTime',
        'lastModifiedBy' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference',
        'lastModifiedDate' => '\DateTime',
        'linkClauses' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause',
        'name' => 'string',
        'path' => 'string',
        'queryRecursionOption' => 'string',
        'queryType' => 'string',
        'sortColumns' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[]',
        'sourceClauses' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause',
        'targetClauses' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause',
        'wiql' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'url' => null,
        'children' => null,
        'clauses' => null,
        'columns' => null,
        'createdBy' => null,
        'createdDate' => 'date-time',
        'filterOptions' => null,
        'hasChildren' => null,
        'id' => 'uuid',
        'isDeleted' => null,
        'isFolder' => null,
        'isInvalidSyntax' => null,
        'isPublic' => null,
        'lastExecutedBy' => null,
        'lastExecutedDate' => 'date-time',
        'lastModifiedBy' => null,
        'lastModifiedDate' => 'date-time',
        'linkClauses' => null,
        'name' => null,
        'path' => null,
        'queryRecursionOption' => null,
        'queryType' => null,
        'sortColumns' => null,
        'sourceClauses' => null,
        'targetClauses' => null,
        'wiql' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'url' => 'url',
        'children' => 'children',
        'clauses' => 'clauses',
        'columns' => 'columns',
        'createdBy' => 'createdBy',
        'createdDate' => 'createdDate',
        'filterOptions' => 'filterOptions',
        'hasChildren' => 'hasChildren',
        'id' => 'id',
        'isDeleted' => 'isDeleted',
        'isFolder' => 'isFolder',
        'isInvalidSyntax' => 'isInvalidSyntax',
        'isPublic' => 'isPublic',
        'lastExecutedBy' => 'lastExecutedBy',
        'lastExecutedDate' => 'lastExecutedDate',
        'lastModifiedBy' => 'lastModifiedBy',
        'lastModifiedDate' => 'lastModifiedDate',
        'linkClauses' => 'linkClauses',
        'name' => 'name',
        'path' => 'path',
        'queryRecursionOption' => 'queryRecursionOption',
        'queryType' => 'queryType',
        'sortColumns' => 'sortColumns',
        'sourceClauses' => 'sourceClauses',
        'targetClauses' => 'targetClauses',
        'wiql' => 'wiql'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'url' => 'setUrl',
        'children' => 'setChildren',
        'clauses' => 'setClauses',
        'columns' => 'setColumns',
        'createdBy' => 'setCreatedBy',
        'createdDate' => 'setCreatedDate',
        'filterOptions' => 'setFilterOptions',
        'hasChildren' => 'setHasChildren',
        'id' => 'setId',
        'isDeleted' => 'setIsDeleted',
        'isFolder' => 'setIsFolder',
        'isInvalidSyntax' => 'setIsInvalidSyntax',
        'isPublic' => 'setIsPublic',
        'lastExecutedBy' => 'setLastExecutedBy',
        'lastExecutedDate' => 'setLastExecutedDate',
        'lastModifiedBy' => 'setLastModifiedBy',
        'lastModifiedDate' => 'setLastModifiedDate',
        'linkClauses' => 'setLinkClauses',
        'name' => 'setName',
        'path' => 'setPath',
        'queryRecursionOption' => 'setQueryRecursionOption',
        'queryType' => 'setQueryType',
        'sortColumns' => 'setSortColumns',
        'sourceClauses' => 'setSourceClauses',
        'targetClauses' => 'setTargetClauses',
        'wiql' => 'setWiql'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'url' => 'getUrl',
        'children' => 'getChildren',
        'clauses' => 'getClauses',
        'columns' => 'getColumns',
        'createdBy' => 'getCreatedBy',
        'createdDate' => 'getCreatedDate',
        'filterOptions' => 'getFilterOptions',
        'hasChildren' => 'getHasChildren',
        'id' => 'getId',
        'isDeleted' => 'getIsDeleted',
        'isFolder' => 'getIsFolder',
        'isInvalidSyntax' => 'getIsInvalidSyntax',
        'isPublic' => 'getIsPublic',
        'lastExecutedBy' => 'getLastExecutedBy',
        'lastExecutedDate' => 'getLastExecutedDate',
        'lastModifiedBy' => 'getLastModifiedBy',
        'lastModifiedDate' => 'getLastModifiedDate',
        'linkClauses' => 'getLinkClauses',
        'name' => 'getName',
        'path' => 'getPath',
        'queryRecursionOption' => 'getQueryRecursionOption',
        'queryType' => 'getQueryType',
        'sortColumns' => 'getSortColumns',
        'sourceClauses' => 'getSourceClauses',
        'targetClauses' => 'getTargetClauses',
        'wiql' => 'getWiql'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FILTER_OPTIONS_WORK_ITEMS = 'workItems';
    const FILTER_OPTIONS_LINKS_ONE_HOP_MUST_CONTAIN = 'linksOneHopMustContain';
    const FILTER_OPTIONS_LINKS_ONE_HOP_MAY_CONTAIN = 'linksOneHopMayContain';
    const FILTER_OPTIONS_LINKS_ONE_HOP_DOES_NOT_CONTAIN = 'linksOneHopDoesNotContain';
    const FILTER_OPTIONS_LINKS_RECURSIVE_MUST_CONTAIN = 'linksRecursiveMustContain';
    const FILTER_OPTIONS_LINKS_RECURSIVE_MAY_CONTAIN = 'linksRecursiveMayContain';
    const FILTER_OPTIONS_LINKS_RECURSIVE_DOES_NOT_CONTAIN = 'linksRecursiveDoesNotContain';
    const QUERY_RECURSION_OPTION_PARENT_FIRST = 'parentFirst';
    const QUERY_RECURSION_OPTION_CHILD_FIRST = 'childFirst';
    const QUERY_TYPE_FLAT = 'flat';
    const QUERY_TYPE_TREE = 'tree';
    const QUERY_TYPE_ONE_HOP = 'oneHop';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterOptionsAllowableValues()
    {
        return [
            self::FILTER_OPTIONS_WORK_ITEMS,
            self::FILTER_OPTIONS_LINKS_ONE_HOP_MUST_CONTAIN,
            self::FILTER_OPTIONS_LINKS_ONE_HOP_MAY_CONTAIN,
            self::FILTER_OPTIONS_LINKS_ONE_HOP_DOES_NOT_CONTAIN,
            self::FILTER_OPTIONS_LINKS_RECURSIVE_MUST_CONTAIN,
            self::FILTER_OPTIONS_LINKS_RECURSIVE_MAY_CONTAIN,
            self::FILTER_OPTIONS_LINKS_RECURSIVE_DOES_NOT_CONTAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryRecursionOptionAllowableValues()
    {
        return [
            self::QUERY_RECURSION_OPTION_PARENT_FIRST,
            self::QUERY_RECURSION_OPTION_CHILD_FIRST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryTypeAllowableValues()
    {
        return [
            self::QUERY_TYPE_FLAT,
            self::QUERY_TYPE_TREE,
            self::QUERY_TYPE_ONE_HOP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['clauses'] = isset($data['clauses']) ? $data['clauses'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['filterOptions'] = isset($data['filterOptions']) ? $data['filterOptions'] : null;
        $this->container['hasChildren'] = isset($data['hasChildren']) ? $data['hasChildren'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['isFolder'] = isset($data['isFolder']) ? $data['isFolder'] : null;
        $this->container['isInvalidSyntax'] = isset($data['isInvalidSyntax']) ? $data['isInvalidSyntax'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['lastExecutedBy'] = isset($data['lastExecutedBy']) ? $data['lastExecutedBy'] : null;
        $this->container['lastExecutedDate'] = isset($data['lastExecutedDate']) ? $data['lastExecutedDate'] : null;
        $this->container['lastModifiedBy'] = isset($data['lastModifiedBy']) ? $data['lastModifiedBy'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['linkClauses'] = isset($data['linkClauses']) ? $data['linkClauses'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['queryRecursionOption'] = isset($data['queryRecursionOption']) ? $data['queryRecursionOption'] : null;
        $this->container['queryType'] = isset($data['queryType']) ? $data['queryType'] : null;
        $this->container['sortColumns'] = isset($data['sortColumns']) ? $data['sortColumns'] : null;
        $this->container['sourceClauses'] = isset($data['sourceClauses']) ? $data['sourceClauses'] : null;
        $this->container['targetClauses'] = isset($data['targetClauses']) ? $data['targetClauses'] : null;
        $this->container['wiql'] = isset($data['wiql']) ? $data['wiql'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFilterOptionsAllowableValues();
        if (!is_null($this->container['filterOptions']) && !in_array($this->container['filterOptions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filterOptions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueryRecursionOptionAllowableValues();
        if (!is_null($this->container['queryRecursionOption']) && !in_array($this->container['queryRecursionOption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryRecursionOption', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($this->container['queryType']) && !in_array($this->container['queryType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks $links Link references to related REST resources.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\QueryHierarchyItem[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\QueryHierarchyItem[] $children The child query items inside a query folder.
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets clauses
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause
     */
    public function getClauses()
    {
        return $this->container['clauses'];
    }

    /**
     * Sets clauses
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause $clauses The clauses for a flat query.
     *
     * @return $this
     */
    public function setClauses($clauses)
    {
        $this->container['clauses'] = $clauses;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[] $columns The columns of the query.
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference $createdBy The identity who created the query item.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate When the query item was created.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets filterOptions
     *
     * @return string
     */
    public function getFilterOptions()
    {
        return $this->container['filterOptions'];
    }

    /**
     * Sets filterOptions
     *
     * @param string $filterOptions The link query mode.
     *
     * @return $this
     */
    public function setFilterOptions($filterOptions)
    {
        $allowedValues = $this->getFilterOptionsAllowableValues();
        if (!is_null($filterOptions) && !in_array($filterOptions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filterOptions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filterOptions'] = $filterOptions;

        return $this;
    }

    /**
     * Gets hasChildren
     *
     * @return bool
     */
    public function getHasChildren()
    {
        return $this->container['hasChildren'];
    }

    /**
     * Sets hasChildren
     *
     * @param bool $hasChildren If this is a query folder, indicates if it contains any children.
     *
     * @return $this
     */
    public function setHasChildren($hasChildren)
    {
        $this->container['hasChildren'] = $hasChildren;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the query item.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted Indicates if this query item is deleted. Setting this to false on a deleted query item will undelete it. Undeleting a query or folder will not bring back the permission changes that were previously applied to it.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets isFolder
     *
     * @return bool
     */
    public function getIsFolder()
    {
        return $this->container['isFolder'];
    }

    /**
     * Sets isFolder
     *
     * @param bool $isFolder Indicates if this is a query folder or a query.
     *
     * @return $this
     */
    public function setIsFolder($isFolder)
    {
        $this->container['isFolder'] = $isFolder;

        return $this;
    }

    /**
     * Gets isInvalidSyntax
     *
     * @return bool
     */
    public function getIsInvalidSyntax()
    {
        return $this->container['isInvalidSyntax'];
    }

    /**
     * Sets isInvalidSyntax
     *
     * @param bool $isInvalidSyntax Indicates if the WIQL of this query is invalid. This could be due to invalid syntax or a no longer valid area/iteration path.
     *
     * @return $this
     */
    public function setIsInvalidSyntax($isInvalidSyntax)
    {
        $this->container['isInvalidSyntax'] = $isInvalidSyntax;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool $isPublic Indicates if this query item is public or private.
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets lastExecutedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference
     */
    public function getLastExecutedBy()
    {
        return $this->container['lastExecutedBy'];
    }

    /**
     * Sets lastExecutedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference $lastExecutedBy The identity who last ran the query.
     *
     * @return $this
     */
    public function setLastExecutedBy($lastExecutedBy)
    {
        $this->container['lastExecutedBy'] = $lastExecutedBy;

        return $this;
    }

    /**
     * Gets lastExecutedDate
     *
     * @return \DateTime
     */
    public function getLastExecutedDate()
    {
        return $this->container['lastExecutedDate'];
    }

    /**
     * Sets lastExecutedDate
     *
     * @param \DateTime $lastExecutedDate When the query was last run.
     *
     * @return $this
     */
    public function setLastExecutedDate($lastExecutedDate)
    {
        $this->container['lastExecutedDate'] = $lastExecutedDate;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference
     */
    public function getLastModifiedBy()
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference $lastModifiedBy The identity who last modified the query item.
     *
     * @return $this
     */
    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \DateTime $lastModifiedDate When the query item was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets linkClauses
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause
     */
    public function getLinkClauses()
    {
        return $this->container['linkClauses'];
    }

    /**
     * Sets linkClauses
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause $linkClauses The link query clause.
     *
     * @return $this
     */
    public function setLinkClauses($linkClauses)
    {
        $this->container['linkClauses'] = $linkClauses;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the query item.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The path of the query item.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets queryRecursionOption
     *
     * @return string
     */
    public function getQueryRecursionOption()
    {
        return $this->container['queryRecursionOption'];
    }

    /**
     * Sets queryRecursionOption
     *
     * @param string $queryRecursionOption The recursion option for use in a tree query.
     *
     * @return $this
     */
    public function setQueryRecursionOption($queryRecursionOption)
    {
        $allowedValues = $this->getQueryRecursionOptionAllowableValues();
        if (!is_null($queryRecursionOption) && !in_array($queryRecursionOption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryRecursionOption', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryRecursionOption'] = $queryRecursionOption;

        return $this;
    }

    /**
     * Gets queryType
     *
     * @return string
     */
    public function getQueryType()
    {
        return $this->container['queryType'];
    }

    /**
     * Sets queryType
     *
     * @param string $queryType The type of query.
     *
     * @return $this
     */
    public function setQueryType($queryType)
    {
        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($queryType) && !in_array($queryType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryType'] = $queryType;

        return $this;
    }

    /**
     * Gets sortColumns
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[]
     */
    public function getSortColumns()
    {
        return $this->container['sortColumns'];
    }

    /**
     * Sets sortColumns
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[] $sortColumns The sort columns of the query.
     *
     * @return $this
     */
    public function setSortColumns($sortColumns)
    {
        $this->container['sortColumns'] = $sortColumns;

        return $this;
    }

    /**
     * Gets sourceClauses
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause
     */
    public function getSourceClauses()
    {
        return $this->container['sourceClauses'];
    }

    /**
     * Sets sourceClauses
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause $sourceClauses The source clauses in a tree or one-hop link query.
     *
     * @return $this
     */
    public function setSourceClauses($sourceClauses)
    {
        $this->container['sourceClauses'] = $sourceClauses;

        return $this;
    }

    /**
     * Gets targetClauses
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause
     */
    public function getTargetClauses()
    {
        return $this->container['targetClauses'];
    }

    /**
     * Sets targetClauses
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause $targetClauses The target clauses in a tree or one-hop link query.
     *
     * @return $this
     */
    public function setTargetClauses($targetClauses)
    {
        $this->container['targetClauses'] = $targetClauses;

        return $this;
    }

    /**
     * Gets wiql
     *
     * @return string
     */
    public function getWiql()
    {
        return $this->container['wiql'];
    }

    /**
     * Sets wiql
     *
     * @param string $wiql The WIQL text of the query
     *
     * @return $this
     */
    public function setWiql($wiql)
    {
        $this->container['wiql'] = $wiql;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


