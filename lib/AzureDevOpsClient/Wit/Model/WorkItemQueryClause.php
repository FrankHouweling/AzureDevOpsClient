<?php
/**
 * WorkItemQueryClause
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemQueryClause Class Doc Comment
 *
 * @category Class
 * @description Represents a clause in a work item query. This shows the structure of a work item query.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemQueryClause implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkItemQueryClause';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clauses' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause[]',
        'field' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference',
        'fieldValue' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference',
        'isFieldValue' => 'bool',
        'logicalOperator' => 'string',
        'operator' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clauses' => null,
        'field' => null,
        'fieldValue' => null,
        'isFieldValue' => null,
        'logicalOperator' => null,
        'operator' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clauses' => 'clauses',
        'field' => 'field',
        'fieldValue' => 'fieldValue',
        'isFieldValue' => 'isFieldValue',
        'logicalOperator' => 'logicalOperator',
        'operator' => 'operator',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clauses' => 'setClauses',
        'field' => 'setField',
        'fieldValue' => 'setFieldValue',
        'isFieldValue' => 'setIsFieldValue',
        'logicalOperator' => 'setLogicalOperator',
        'operator' => 'setOperator',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clauses' => 'getClauses',
        'field' => 'getField',
        'fieldValue' => 'getFieldValue',
        'isFieldValue' => 'getIsFieldValue',
        'logicalOperator' => 'getLogicalOperator',
        'operator' => 'getOperator',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOGICAL_OPERATOR_NONE = 'none';
    const LOGICAL_OPERATOR__AND = 'and';
    const LOGICAL_OPERATOR__OR = 'or';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogicalOperatorAllowableValues()
    {
        return [
            self::LOGICAL_OPERATOR_NONE,
            self::LOGICAL_OPERATOR__AND,
            self::LOGICAL_OPERATOR__OR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clauses'] = isset($data['clauses']) ? $data['clauses'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['fieldValue'] = isset($data['fieldValue']) ? $data['fieldValue'] : null;
        $this->container['isFieldValue'] = isset($data['isFieldValue']) ? $data['isFieldValue'] : null;
        $this->container['logicalOperator'] = isset($data['logicalOperator']) ? $data['logicalOperator'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLogicalOperatorAllowableValues();
        if (!is_null($this->container['logicalOperator']) && !in_array($this->container['logicalOperator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'logicalOperator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clauses
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause[]
     */
    public function getClauses()
    {
        return $this->container['clauses'];
    }

    /**
     * Sets clauses
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQueryClause[] $clauses Child clauses if the current clause is a logical operator
     *
     * @return $this
     */
    public function setClauses($clauses)
    {
        $this->container['clauses'] = $clauses;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference $field Field associated with condition
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets fieldValue
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference
     */
    public function getFieldValue()
    {
        return $this->container['fieldValue'];
    }

    /**
     * Sets fieldValue
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference $fieldValue Right side of the condition when a field to field comparison
     *
     * @return $this
     */
    public function setFieldValue($fieldValue)
    {
        $this->container['fieldValue'] = $fieldValue;

        return $this;
    }

    /**
     * Gets isFieldValue
     *
     * @return bool
     */
    public function getIsFieldValue()
    {
        return $this->container['isFieldValue'];
    }

    /**
     * Sets isFieldValue
     *
     * @param bool $isFieldValue Determines if this is a field to field comparison
     *
     * @return $this
     */
    public function setIsFieldValue($isFieldValue)
    {
        $this->container['isFieldValue'] = $isFieldValue;

        return $this;
    }

    /**
     * Gets logicalOperator
     *
     * @return string
     */
    public function getLogicalOperator()
    {
        return $this->container['logicalOperator'];
    }

    /**
     * Sets logicalOperator
     *
     * @param string $logicalOperator Logical operator separating the condition clause
     *
     * @return $this
     */
    public function setLogicalOperator($logicalOperator)
    {
        $allowedValues = $this->getLogicalOperatorAllowableValues();
        if (!is_null($logicalOperator) && !in_array($logicalOperator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'logicalOperator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['logicalOperator'] = $logicalOperator;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldOperation $operator The field operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value Right side of the condition when a field to value comparison
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


