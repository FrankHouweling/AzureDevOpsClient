<?php
/**
 * WorkItemUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemUpdate Class Doc Comment
 *
 * @category Class
 * @description Describes an update to a work item.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkItemUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks',
        'url' => 'string',
        'fields' => 'map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldUpdate]',
        'id' => 'int',
        'relations' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemRelationUpdates',
        'rev' => 'int',
        'revisedBy' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference',
        'revisedDate' => '\DateTime',
        'workItemId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'url' => null,
        'fields' => null,
        'id' => 'int32',
        'relations' => null,
        'rev' => 'int32',
        'revisedBy' => null,
        'revisedDate' => 'date-time',
        'workItemId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'url' => 'url',
        'fields' => 'fields',
        'id' => 'id',
        'relations' => 'relations',
        'rev' => 'rev',
        'revisedBy' => 'revisedBy',
        'revisedDate' => 'revisedDate',
        'workItemId' => 'workItemId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'url' => 'setUrl',
        'fields' => 'setFields',
        'id' => 'setId',
        'relations' => 'setRelations',
        'rev' => 'setRev',
        'revisedBy' => 'setRevisedBy',
        'revisedDate' => 'setRevisedDate',
        'workItemId' => 'setWorkItemId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'url' => 'getUrl',
        'fields' => 'getFields',
        'id' => 'getId',
        'relations' => 'getRelations',
        'rev' => 'getRev',
        'revisedBy' => 'getRevisedBy',
        'revisedDate' => 'getRevisedDate',
        'workItemId' => 'getWorkItemId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['relations'] = isset($data['relations']) ? $data['relations'] : null;
        $this->container['rev'] = isset($data['rev']) ? $data['rev'] : null;
        $this->container['revisedBy'] = isset($data['revisedBy']) ? $data['revisedBy'] : null;
        $this->container['revisedDate'] = isset($data['revisedDate']) ? $data['revisedDate'] : null;
        $this->container['workItemId'] = isset($data['workItemId']) ? $data['workItemId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks $links Link references to related REST resources.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldUpdate]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldUpdate] $fields List of updates to fields.
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of update.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets relations
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemRelationUpdates
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemRelationUpdates $relations List of updates to relations.
     *
     * @return $this
     */
    public function setRelations($relations)
    {
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets rev
     *
     * @return int
     */
    public function getRev()
    {
        return $this->container['rev'];
    }

    /**
     * Sets rev
     *
     * @param int $rev The revision number of work item update.
     *
     * @return $this
     */
    public function setRev($rev)
    {
        $this->container['rev'] = $rev;

        return $this;
    }

    /**
     * Gets revisedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference
     */
    public function getRevisedBy()
    {
        return $this->container['revisedBy'];
    }

    /**
     * Sets revisedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityReference $revisedBy Identity for the work item update.
     *
     * @return $this
     */
    public function setRevisedBy($revisedBy)
    {
        $this->container['revisedBy'] = $revisedBy;

        return $this;
    }

    /**
     * Gets revisedDate
     *
     * @return \DateTime
     */
    public function getRevisedDate()
    {
        return $this->container['revisedDate'];
    }

    /**
     * Sets revisedDate
     *
     * @param \DateTime $revisedDate The work item updates revision date.
     *
     * @return $this
     */
    public function setRevisedDate($revisedDate)
    {
        $this->container['revisedDate'] = $revisedDate;

        return $this;
    }

    /**
     * Gets workItemId
     *
     * @return int
     */
    public function getWorkItemId()
    {
        return $this->container['workItemId'];
    }

    /**
     * Sets workItemId
     *
     * @param int $workItemId The work item ID.
     *
     * @return $this
     */
    public function setWorkItemId($workItemId)
    {
        $this->container['workItemId'] = $workItemId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


