<?php
/**
 * AccountRecentActivityWorkItemModel2
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * AccountRecentActivityWorkItemModel2 Class Doc Comment
 *
 * @category Class
 * @description Represents Work Item Recent Activity
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountRecentActivityWorkItemModel2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountRecentActivityWorkItemModel2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activityDate' => '\DateTime',
        'activityType' => 'string',
        'changedDate' => '\DateTime',
        'id' => 'int',
        'identityId' => 'string',
        'state' => 'string',
        'teamProject' => 'string',
        'title' => 'string',
        'workItemType' => 'string',
        'assignedTo' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activityDate' => 'date-time',
        'activityType' => null,
        'changedDate' => 'date-time',
        'id' => 'int32',
        'identityId' => 'uuid',
        'state' => null,
        'teamProject' => null,
        'title' => null,
        'workItemType' => null,
        'assignedTo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityDate' => 'activityDate',
        'activityType' => 'activityType',
        'changedDate' => 'changedDate',
        'id' => 'id',
        'identityId' => 'identityId',
        'state' => 'state',
        'teamProject' => 'teamProject',
        'title' => 'title',
        'workItemType' => 'workItemType',
        'assignedTo' => 'assignedTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityDate' => 'setActivityDate',
        'activityType' => 'setActivityType',
        'changedDate' => 'setChangedDate',
        'id' => 'setId',
        'identityId' => 'setIdentityId',
        'state' => 'setState',
        'teamProject' => 'setTeamProject',
        'title' => 'setTitle',
        'workItemType' => 'setWorkItemType',
        'assignedTo' => 'setAssignedTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityDate' => 'getActivityDate',
        'activityType' => 'getActivityType',
        'changedDate' => 'getChangedDate',
        'id' => 'getId',
        'identityId' => 'getIdentityId',
        'state' => 'getState',
        'teamProject' => 'getTeamProject',
        'title' => 'getTitle',
        'workItemType' => 'getWorkItemType',
        'assignedTo' => 'getAssignedTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVITY_TYPE_VISITED = 'visited';
    const ACTIVITY_TYPE_EDITED = 'edited';
    const ACTIVITY_TYPE_DELETED = 'deleted';
    const ACTIVITY_TYPE_RESTORED = 'restored';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityTypeAllowableValues()
    {
        return [
            self::ACTIVITY_TYPE_VISITED,
            self::ACTIVITY_TYPE_EDITED,
            self::ACTIVITY_TYPE_DELETED,
            self::ACTIVITY_TYPE_RESTORED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityDate'] = isset($data['activityDate']) ? $data['activityDate'] : null;
        $this->container['activityType'] = isset($data['activityType']) ? $data['activityType'] : null;
        $this->container['changedDate'] = isset($data['changedDate']) ? $data['changedDate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identityId'] = isset($data['identityId']) ? $data['identityId'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['teamProject'] = isset($data['teamProject']) ? $data['teamProject'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['workItemType'] = isset($data['workItemType']) ? $data['workItemType'] : null;
        $this->container['assignedTo'] = isset($data['assignedTo']) ? $data['assignedTo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActivityTypeAllowableValues();
        if (!is_null($this->container['activityType']) && !in_array($this->container['activityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityDate
     *
     * @return \DateTime
     */
    public function getActivityDate()
    {
        return $this->container['activityDate'];
    }

    /**
     * Sets activityDate
     *
     * @param \DateTime $activityDate Date of the last Activity by the user
     *
     * @return $this
     */
    public function setActivityDate($activityDate)
    {
        $this->container['activityDate'] = $activityDate;

        return $this;
    }

    /**
     * Gets activityType
     *
     * @return string
     */
    public function getActivityType()
    {
        return $this->container['activityType'];
    }

    /**
     * Sets activityType
     *
     * @param string $activityType Type of the activity
     *
     * @return $this
     */
    public function setActivityType($activityType)
    {
        $allowedValues = $this->getActivityTypeAllowableValues();
        if (!is_null($activityType) && !in_array($activityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activityType'] = $activityType;

        return $this;
    }

    /**
     * Gets changedDate
     *
     * @return \DateTime
     */
    public function getChangedDate()
    {
        return $this->container['changedDate'];
    }

    /**
     * Sets changedDate
     *
     * @param \DateTime $changedDate Last changed date of the work item
     *
     * @return $this
     */
    public function setChangedDate($changedDate)
    {
        $this->container['changedDate'] = $changedDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Work Item Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identityId
     *
     * @return string
     */
    public function getIdentityId()
    {
        return $this->container['identityId'];
    }

    /**
     * Sets identityId
     *
     * @param string $identityId TeamFoundationId of the user this activity belongs to
     *
     * @return $this
     */
    public function setIdentityId($identityId)
    {
        $this->container['identityId'] = $identityId;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the work item
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets teamProject
     *
     * @return string
     */
    public function getTeamProject()
    {
        return $this->container['teamProject'];
    }

    /**
     * Sets teamProject
     *
     * @param string $teamProject Team project the work item belongs to
     *
     * @return $this
     */
    public function setTeamProject($teamProject)
    {
        $this->container['teamProject'] = $teamProject;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the work item
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets workItemType
     *
     * @return string
     */
    public function getWorkItemType()
    {
        return $this->container['workItemType'];
    }

    /**
     * Sets workItemType
     *
     * @param string $workItemType Type of Work Item
     *
     * @return $this
     */
    public function setWorkItemType($workItemType)
    {
        $this->container['workItemType'] = $workItemType;

        return $this;
    }

    /**
     * Gets assignedTo
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityRef
     */
    public function getAssignedTo()
    {
        return $this->container['assignedTo'];
    }

    /**
     * Sets assignedTo
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\IdentityRef $assignedTo Assigned To
     *
     * @return $this
     */
    public function setAssignedTo($assignedTo)
    {
        $this->container['assignedTo'] = $assignedTo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


