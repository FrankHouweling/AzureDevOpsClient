<?php
/**
 * WorkItemType
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemType Class Doc Comment
 *
 * @category Class
 * @description Describes a work item type.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkItemType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks',
        'url' => 'string',
        'color' => 'string',
        'description' => 'string',
        'fieldInstances' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[]',
        'fields' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[]',
        'icon' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemIcon',
        'isDisabled' => 'bool',
        'name' => 'string',
        'referenceName' => 'string',
        'states' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateColor[]',
        'transitions' => 'map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateTransition[]]',
        'xmlForm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'url' => null,
        'color' => null,
        'description' => null,
        'fieldInstances' => null,
        'fields' => null,
        'icon' => null,
        'isDisabled' => null,
        'name' => null,
        'referenceName' => null,
        'states' => null,
        'transitions' => null,
        'xmlForm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'url' => 'url',
        'color' => 'color',
        'description' => 'description',
        'fieldInstances' => 'fieldInstances',
        'fields' => 'fields',
        'icon' => 'icon',
        'isDisabled' => 'isDisabled',
        'name' => 'name',
        'referenceName' => 'referenceName',
        'states' => 'states',
        'transitions' => 'transitions',
        'xmlForm' => 'xmlForm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'url' => 'setUrl',
        'color' => 'setColor',
        'description' => 'setDescription',
        'fieldInstances' => 'setFieldInstances',
        'fields' => 'setFields',
        'icon' => 'setIcon',
        'isDisabled' => 'setIsDisabled',
        'name' => 'setName',
        'referenceName' => 'setReferenceName',
        'states' => 'setStates',
        'transitions' => 'setTransitions',
        'xmlForm' => 'setXmlForm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'url' => 'getUrl',
        'color' => 'getColor',
        'description' => 'getDescription',
        'fieldInstances' => 'getFieldInstances',
        'fields' => 'getFields',
        'icon' => 'getIcon',
        'isDisabled' => 'getIsDisabled',
        'name' => 'getName',
        'referenceName' => 'getReferenceName',
        'states' => 'getStates',
        'transitions' => 'getTransitions',
        'xmlForm' => 'getXmlForm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['fieldInstances'] = isset($data['fieldInstances']) ? $data['fieldInstances'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['isDisabled'] = isset($data['isDisabled']) ? $data['isDisabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['referenceName'] = isset($data['referenceName']) ? $data['referenceName'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
        $this->container['transitions'] = isset($data['transitions']) ? $data['transitions'] : null;
        $this->container['xmlForm'] = isset($data['xmlForm']) ? $data['xmlForm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\ReferenceLinks $links Link references to related REST resources.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The color.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the work item type.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fieldInstances
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[]
     */
    public function getFieldInstances()
    {
        return $this->container['fieldInstances'];
    }

    /**
     * Sets fieldInstances
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[] $fieldInstances The fields that exist on the work item type.
     *
     * @return $this
     */
    public function setFieldInstances($fieldInstances)
    {
        $this->container['fieldInstances'] = $fieldInstances;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemTypeFieldInstance[] $fields The fields that exist on the work item type.
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemIcon
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemIcon $icon The icon of the work item type.
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets isDisabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['isDisabled'];
    }

    /**
     * Sets isDisabled
     *
     * @param bool $isDisabled True if work item type is disabled
     *
     * @return $this
     */
    public function setIsDisabled($isDisabled)
    {
        $this->container['isDisabled'] = $isDisabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets the name of the work item type.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets referenceName
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['referenceName'];
    }

    /**
     * Sets referenceName
     *
     * @param string $referenceName The reference name of the work item type.
     *
     * @return $this
     */
    public function setReferenceName($referenceName)
    {
        $this->container['referenceName'] = $referenceName;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateColor[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateColor[] $states Gets state information for the work item type.
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets transitions
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateTransition[]]
     */
    public function getTransitions()
    {
        return $this->container['transitions'];
    }

    /**
     * Sets transitions
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemStateTransition[]] $transitions Gets the various state transition mappings in the work item type.
     *
     * @return $this
     */
    public function setTransitions($transitions)
    {
        $this->container['transitions'] = $transitions;

        return $this;
    }

    /**
     * Gets xmlForm
     *
     * @return string
     */
    public function getXmlForm()
    {
        return $this->container['xmlForm'];
    }

    /**
     * Sets xmlForm
     *
     * @param string $xmlForm The XML form.
     *
     * @return $this
     */
    public function setXmlForm($xmlForm)
    {
        $this->container['xmlForm'] = $xmlForm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


