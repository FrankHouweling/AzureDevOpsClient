<?php
/**
 * WorkItemQueryResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wit\ObjectSerializer;

/**
 * WorkItemQueryResult Class Doc Comment
 *
 * @category Class
 * @description The result of a work item query.
 * @package  FrankHouweling\AzureDevOpsClient\Wit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemQueryResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkItemQueryResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asOf' => '\DateTime',
        'columns' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[]',
        'queryResultType' => 'string',
        'queryType' => 'string',
        'sortColumns' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[]',
        'workItemRelations' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemLink[]',
        'workItems' => '\FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asOf' => 'date-time',
        'columns' => null,
        'queryResultType' => null,
        'queryType' => null,
        'sortColumns' => null,
        'workItemRelations' => null,
        'workItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asOf' => 'asOf',
        'columns' => 'columns',
        'queryResultType' => 'queryResultType',
        'queryType' => 'queryType',
        'sortColumns' => 'sortColumns',
        'workItemRelations' => 'workItemRelations',
        'workItems' => 'workItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asOf' => 'setAsOf',
        'columns' => 'setColumns',
        'queryResultType' => 'setQueryResultType',
        'queryType' => 'setQueryType',
        'sortColumns' => 'setSortColumns',
        'workItemRelations' => 'setWorkItemRelations',
        'workItems' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asOf' => 'getAsOf',
        'columns' => 'getColumns',
        'queryResultType' => 'getQueryResultType',
        'queryType' => 'getQueryType',
        'sortColumns' => 'getSortColumns',
        'workItemRelations' => 'getWorkItemRelations',
        'workItems' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const QUERY_RESULT_TYPE_WORK_ITEM = 'workItem';
    const QUERY_RESULT_TYPE_WORK_ITEM_LINK = 'workItemLink';
    const QUERY_TYPE_FLAT = 'flat';
    const QUERY_TYPE_TREE = 'tree';
    const QUERY_TYPE_ONE_HOP = 'oneHop';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryResultTypeAllowableValues()
    {
        return [
            self::QUERY_RESULT_TYPE_WORK_ITEM,
            self::QUERY_RESULT_TYPE_WORK_ITEM_LINK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryTypeAllowableValues()
    {
        return [
            self::QUERY_TYPE_FLAT,
            self::QUERY_TYPE_TREE,
            self::QUERY_TYPE_ONE_HOP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asOf'] = isset($data['asOf']) ? $data['asOf'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['queryResultType'] = isset($data['queryResultType']) ? $data['queryResultType'] : null;
        $this->container['queryType'] = isset($data['queryType']) ? $data['queryType'] : null;
        $this->container['sortColumns'] = isset($data['sortColumns']) ? $data['sortColumns'] : null;
        $this->container['workItemRelations'] = isset($data['workItemRelations']) ? $data['workItemRelations'] : null;
        $this->container['workItems'] = isset($data['workItems']) ? $data['workItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQueryResultTypeAllowableValues();
        if (!is_null($this->container['queryResultType']) && !in_array($this->container['queryResultType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryResultType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($this->container['queryType']) && !in_array($this->container['queryType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asOf
     *
     * @return \DateTime
     */
    public function getAsOf()
    {
        return $this->container['asOf'];
    }

    /**
     * Sets asOf
     *
     * @param \DateTime $asOf The date the query was run in the context of.
     *
     * @return $this
     */
    public function setAsOf($asOf)
    {
        $this->container['asOf'] = $asOf;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemFieldReference[] $columns The columns of the query.
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets queryResultType
     *
     * @return string
     */
    public function getQueryResultType()
    {
        return $this->container['queryResultType'];
    }

    /**
     * Sets queryResultType
     *
     * @param string $queryResultType The result type
     *
     * @return $this
     */
    public function setQueryResultType($queryResultType)
    {
        $allowedValues = $this->getQueryResultTypeAllowableValues();
        if (!is_null($queryResultType) && !in_array($queryResultType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryResultType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryResultType'] = $queryResultType;

        return $this;
    }

    /**
     * Gets queryType
     *
     * @return string
     */
    public function getQueryType()
    {
        return $this->container['queryType'];
    }

    /**
     * Sets queryType
     *
     * @param string $queryType The type of the query
     *
     * @return $this
     */
    public function setQueryType($queryType)
    {
        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($queryType) && !in_array($queryType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryType'] = $queryType;

        return $this;
    }

    /**
     * Gets sortColumns
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[]
     */
    public function getSortColumns()
    {
        return $this->container['sortColumns'];
    }

    /**
     * Sets sortColumns
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemQuerySortColumn[] $sortColumns The sort columns of the query.
     *
     * @return $this
     */
    public function setSortColumns($sortColumns)
    {
        $this->container['sortColumns'] = $sortColumns;

        return $this;
    }

    /**
     * Gets workItemRelations
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemLink[]
     */
    public function getWorkItemRelations()
    {
        return $this->container['workItemRelations'];
    }

    /**
     * Sets workItemRelations
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemLink[] $workItemRelations The work item links returned by the query.
     *
     * @return $this
     */
    public function setWorkItemRelations($workItemRelations)
    {
        $this->container['workItemRelations'] = $workItemRelations;

        return $this;
    }

    /**
     * Gets workItems
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemReference[]
     */
    public function getWorkItems()
    {
        return $this->container['workItems'];
    }

    /**
     * Sets workItems
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wit\Model\WorkItemReference[] $workItems The work items returned by the query.
     *
     * @return $this
     */
    public function setWorkItems($workItems)
    {
        $this->container['workItems'] = $workItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


