<?php
/**
 * WidgetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Dashboard
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dashboard
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Dashboard\ObjectSerializer;

/**
 * WidgetResponse Class Doc Comment
 *
 * @category Class
 * @description Response from RestAPI when saving and editing Widget
 * @package  AzureDevOpsClient\Dashboard
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WidgetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks',
        'allowedSizes' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize[]',
        'areSettingsBlockedForUser' => 'bool',
        'artifactId' => 'string',
        'configurationContributionId' => 'string',
        'configurationContributionRelativeId' => 'string',
        'contentUri' => 'string',
        'contributionId' => 'string',
        'dashboard' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\Dashboard',
        'eTag' => 'string',
        'id' => 'string',
        'isEnabled' => 'bool',
        'isNameConfigurable' => 'bool',
        'lightboxOptions' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\LightboxOptions',
        'loadingImageUrl' => 'string',
        'name' => 'string',
        'position' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetPosition',
        'settings' => 'string',
        'settingsVersion' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\SemanticVersion',
        'size' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize',
        'typeId' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'allowedSizes' => null,
        'areSettingsBlockedForUser' => null,
        'artifactId' => null,
        'configurationContributionId' => null,
        'configurationContributionRelativeId' => null,
        'contentUri' => null,
        'contributionId' => null,
        'dashboard' => null,
        'eTag' => null,
        'id' => 'uuid',
        'isEnabled' => null,
        'isNameConfigurable' => null,
        'lightboxOptions' => null,
        'loadingImageUrl' => null,
        'name' => null,
        'position' => null,
        'settings' => null,
        'settingsVersion' => null,
        'size' => null,
        'typeId' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'allowedSizes' => 'allowedSizes',
        'areSettingsBlockedForUser' => 'areSettingsBlockedForUser',
        'artifactId' => 'artifactId',
        'configurationContributionId' => 'configurationContributionId',
        'configurationContributionRelativeId' => 'configurationContributionRelativeId',
        'contentUri' => 'contentUri',
        'contributionId' => 'contributionId',
        'dashboard' => 'dashboard',
        'eTag' => 'eTag',
        'id' => 'id',
        'isEnabled' => 'isEnabled',
        'isNameConfigurable' => 'isNameConfigurable',
        'lightboxOptions' => 'lightboxOptions',
        'loadingImageUrl' => 'loadingImageUrl',
        'name' => 'name',
        'position' => 'position',
        'settings' => 'settings',
        'settingsVersion' => 'settingsVersion',
        'size' => 'size',
        'typeId' => 'typeId',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'allowedSizes' => 'setAllowedSizes',
        'areSettingsBlockedForUser' => 'setAreSettingsBlockedForUser',
        'artifactId' => 'setArtifactId',
        'configurationContributionId' => 'setConfigurationContributionId',
        'configurationContributionRelativeId' => 'setConfigurationContributionRelativeId',
        'contentUri' => 'setContentUri',
        'contributionId' => 'setContributionId',
        'dashboard' => 'setDashboard',
        'eTag' => 'setETag',
        'id' => 'setId',
        'isEnabled' => 'setIsEnabled',
        'isNameConfigurable' => 'setIsNameConfigurable',
        'lightboxOptions' => 'setLightboxOptions',
        'loadingImageUrl' => 'setLoadingImageUrl',
        'name' => 'setName',
        'position' => 'setPosition',
        'settings' => 'setSettings',
        'settingsVersion' => 'setSettingsVersion',
        'size' => 'setSize',
        'typeId' => 'setTypeId',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'allowedSizes' => 'getAllowedSizes',
        'areSettingsBlockedForUser' => 'getAreSettingsBlockedForUser',
        'artifactId' => 'getArtifactId',
        'configurationContributionId' => 'getConfigurationContributionId',
        'configurationContributionRelativeId' => 'getConfigurationContributionRelativeId',
        'contentUri' => 'getContentUri',
        'contributionId' => 'getContributionId',
        'dashboard' => 'getDashboard',
        'eTag' => 'getETag',
        'id' => 'getId',
        'isEnabled' => 'getIsEnabled',
        'isNameConfigurable' => 'getIsNameConfigurable',
        'lightboxOptions' => 'getLightboxOptions',
        'loadingImageUrl' => 'getLoadingImageUrl',
        'name' => 'getName',
        'position' => 'getPosition',
        'settings' => 'getSettings',
        'settingsVersion' => 'getSettingsVersion',
        'size' => 'getSize',
        'typeId' => 'getTypeId',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['allowedSizes'] = isset($data['allowedSizes']) ? $data['allowedSizes'] : null;
        $this->container['areSettingsBlockedForUser'] = isset($data['areSettingsBlockedForUser']) ? $data['areSettingsBlockedForUser'] : null;
        $this->container['artifactId'] = isset($data['artifactId']) ? $data['artifactId'] : null;
        $this->container['configurationContributionId'] = isset($data['configurationContributionId']) ? $data['configurationContributionId'] : null;
        $this->container['configurationContributionRelativeId'] = isset($data['configurationContributionRelativeId']) ? $data['configurationContributionRelativeId'] : null;
        $this->container['contentUri'] = isset($data['contentUri']) ? $data['contentUri'] : null;
        $this->container['contributionId'] = isset($data['contributionId']) ? $data['contributionId'] : null;
        $this->container['dashboard'] = isset($data['dashboard']) ? $data['dashboard'] : null;
        $this->container['eTag'] = isset($data['eTag']) ? $data['eTag'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isEnabled'] = isset($data['isEnabled']) ? $data['isEnabled'] : null;
        $this->container['isNameConfigurable'] = isset($data['isNameConfigurable']) ? $data['isNameConfigurable'] : null;
        $this->container['lightboxOptions'] = isset($data['lightboxOptions']) ? $data['lightboxOptions'] : null;
        $this->container['loadingImageUrl'] = isset($data['loadingImageUrl']) ? $data['loadingImageUrl'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['settingsVersion'] = isset($data['settingsVersion']) ? $data['settingsVersion'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets allowedSizes
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize[]
     */
    public function getAllowedSizes()
    {
        return $this->container['allowedSizes'];
    }

    /**
     * Sets allowedSizes
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize[] $allowedSizes Refers to the allowed sizes for the widget. This gets populated when user wants to configure the widget
     *
     * @return $this
     */
    public function setAllowedSizes($allowedSizes)
    {
        $this->container['allowedSizes'] = $allowedSizes;

        return $this;
    }

    /**
     * Gets areSettingsBlockedForUser
     *
     * @return bool
     */
    public function getAreSettingsBlockedForUser()
    {
        return $this->container['areSettingsBlockedForUser'];
    }

    /**
     * Sets areSettingsBlockedForUser
     *
     * @param bool $areSettingsBlockedForUser Read-Only Property from Dashboard Service. Indicates if settings are blocked for the current user.
     *
     * @return $this
     */
    public function setAreSettingsBlockedForUser($areSettingsBlockedForUser)
    {
        $this->container['areSettingsBlockedForUser'] = $areSettingsBlockedForUser;

        return $this;
    }

    /**
     * Gets artifactId
     *
     * @return string
     */
    public function getArtifactId()
    {
        return $this->container['artifactId'];
    }

    /**
     * Sets artifactId
     *
     * @param string $artifactId Refers to unique identifier of a feature artifact. Used for pinning+unpinning a specific artifact.
     *
     * @return $this
     */
    public function setArtifactId($artifactId)
    {
        $this->container['artifactId'] = $artifactId;

        return $this;
    }

    /**
     * Gets configurationContributionId
     *
     * @return string
     */
    public function getConfigurationContributionId()
    {
        return $this->container['configurationContributionId'];
    }

    /**
     * Sets configurationContributionId
     *
     * @param string $configurationContributionId configurationContributionId
     *
     * @return $this
     */
    public function setConfigurationContributionId($configurationContributionId)
    {
        $this->container['configurationContributionId'] = $configurationContributionId;

        return $this;
    }

    /**
     * Gets configurationContributionRelativeId
     *
     * @return string
     */
    public function getConfigurationContributionRelativeId()
    {
        return $this->container['configurationContributionRelativeId'];
    }

    /**
     * Sets configurationContributionRelativeId
     *
     * @param string $configurationContributionRelativeId configurationContributionRelativeId
     *
     * @return $this
     */
    public function setConfigurationContributionRelativeId($configurationContributionRelativeId)
    {
        $this->container['configurationContributionRelativeId'] = $configurationContributionRelativeId;

        return $this;
    }

    /**
     * Gets contentUri
     *
     * @return string
     */
    public function getContentUri()
    {
        return $this->container['contentUri'];
    }

    /**
     * Sets contentUri
     *
     * @param string $contentUri contentUri
     *
     * @return $this
     */
    public function setContentUri($contentUri)
    {
        $this->container['contentUri'] = $contentUri;

        return $this;
    }

    /**
     * Gets contributionId
     *
     * @return string
     */
    public function getContributionId()
    {
        return $this->container['contributionId'];
    }

    /**
     * Sets contributionId
     *
     * @param string $contributionId The id of the underlying contribution defining the supplied Widget Configuration.
     *
     * @return $this
     */
    public function setContributionId($contributionId)
    {
        $this->container['contributionId'] = $contributionId;

        return $this;
    }

    /**
     * Gets dashboard
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\Dashboard
     */
    public function getDashboard()
    {
        return $this->container['dashboard'];
    }

    /**
     * Sets dashboard
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\Dashboard $dashboard Optional partial dashboard content, to support exchanging dashboard-level version ETag for widget-level APIs
     *
     * @return $this
     */
    public function setDashboard($dashboard)
    {
        $this->container['dashboard'] = $dashboard;

        return $this;
    }

    /**
     * Gets eTag
     *
     * @return string
     */
    public function getETag()
    {
        return $this->container['eTag'];
    }

    /**
     * Sets eTag
     *
     * @param string $eTag eTag
     *
     * @return $this
     */
    public function setETag($eTag)
    {
        $this->container['eTag'] = $eTag;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool $isEnabled isEnabled
     *
     * @return $this
     */
    public function setIsEnabled($isEnabled)
    {
        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets isNameConfigurable
     *
     * @return bool
     */
    public function getIsNameConfigurable()
    {
        return $this->container['isNameConfigurable'];
    }

    /**
     * Sets isNameConfigurable
     *
     * @param bool $isNameConfigurable isNameConfigurable
     *
     * @return $this
     */
    public function setIsNameConfigurable($isNameConfigurable)
    {
        $this->container['isNameConfigurable'] = $isNameConfigurable;

        return $this;
    }

    /**
     * Gets lightboxOptions
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\LightboxOptions
     */
    public function getLightboxOptions()
    {
        return $this->container['lightboxOptions'];
    }

    /**
     * Sets lightboxOptions
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\LightboxOptions $lightboxOptions lightboxOptions
     *
     * @return $this
     */
    public function setLightboxOptions($lightboxOptions)
    {
        $this->container['lightboxOptions'] = $lightboxOptions;

        return $this;
    }

    /**
     * Gets loadingImageUrl
     *
     * @return string
     */
    public function getLoadingImageUrl()
    {
        return $this->container['loadingImageUrl'];
    }

    /**
     * Sets loadingImageUrl
     *
     * @param string $loadingImageUrl loadingImageUrl
     *
     * @return $this
     */
    public function setLoadingImageUrl($loadingImageUrl)
    {
        $this->container['loadingImageUrl'] = $loadingImageUrl;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetPosition
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetPosition $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return string
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param string $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets settingsVersion
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\SemanticVersion
     */
    public function getSettingsVersion()
    {
        return $this->container['settingsVersion'];
    }

    /**
     * Sets settingsVersion
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\SemanticVersion $settingsVersion settingsVersion
     *
     * @return $this
     */
    public function setSettingsVersion($settingsVersion)
    {
        $this->container['settingsVersion'] = $settingsVersion;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\WidgetSize $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return string
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param string $typeId typeId
     *
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


