<?php
/**
 * DashboardGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Dashboard
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dashboard
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Dashboard\ObjectSerializer;

/**
 * DashboardGroup Class Doc Comment
 *
 * @category Class
 * @description Describes a list of dashboards associated to an owner. Currently, teams own dashboard groups.
 * @package  AzureDevOpsClient\Dashboard
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DashboardGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DashboardGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks',
        'dashboardEntries' => '\AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\DashboardGroupEntry[]',
        'permission' => 'string',
        'teamDashboardPermission' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'dashboardEntries' => null,
        'permission' => null,
        'teamDashboardPermission' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'dashboardEntries' => 'dashboardEntries',
        'permission' => 'permission',
        'teamDashboardPermission' => 'teamDashboardPermission',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'dashboardEntries' => 'setDashboardEntries',
        'permission' => 'setPermission',
        'teamDashboardPermission' => 'setTeamDashboardPermission',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'dashboardEntries' => 'getDashboardEntries',
        'permission' => 'getPermission',
        'teamDashboardPermission' => 'getTeamDashboardPermission',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PERMISSION_NONE = 'none';
    const PERMISSION_EDIT = 'edit';
    const PERMISSION_MANAGE = 'manage';
    const PERMISSION_MANAGE_PERMISSIONS = 'managePermissions';
    const TEAM_DASHBOARD_PERMISSION_NONE = 'none';
    const TEAM_DASHBOARD_PERMISSION_READ = 'read';
    const TEAM_DASHBOARD_PERMISSION_CREATE = 'create';
    const TEAM_DASHBOARD_PERMISSION_EDIT = 'edit';
    const TEAM_DASHBOARD_PERMISSION_DELETE = 'delete';
    const TEAM_DASHBOARD_PERMISSION_MANAGE_PERMISSIONS = 'managePermissions';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionAllowableValues()
    {
        return [
            self::PERMISSION_NONE,
            self::PERMISSION_EDIT,
            self::PERMISSION_MANAGE,
            self::PERMISSION_MANAGE_PERMISSIONS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTeamDashboardPermissionAllowableValues()
    {
        return [
            self::TEAM_DASHBOARD_PERMISSION_NONE,
            self::TEAM_DASHBOARD_PERMISSION_READ,
            self::TEAM_DASHBOARD_PERMISSION_CREATE,
            self::TEAM_DASHBOARD_PERMISSION_EDIT,
            self::TEAM_DASHBOARD_PERMISSION_DELETE,
            self::TEAM_DASHBOARD_PERMISSION_MANAGE_PERMISSIONS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['dashboardEntries'] = isset($data['dashboardEntries']) ? $data['dashboardEntries'] : null;
        $this->container['permission'] = isset($data['permission']) ? $data['permission'] : null;
        $this->container['teamDashboardPermission'] = isset($data['teamDashboardPermission']) ? $data['teamDashboardPermission'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPermissionAllowableValues();
        if (!is_null($this->container['permission']) && !in_array($this->container['permission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'permission', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTeamDashboardPermissionAllowableValues();
        if (!is_null($this->container['teamDashboardPermission']) && !in_array($this->container['teamDashboardPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'teamDashboardPermission', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets dashboardEntries
     *
     * @return \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\DashboardGroupEntry[]
     */
    public function getDashboardEntries()
    {
        return $this->container['dashboardEntries'];
    }

    /**
     * Sets dashboardEntries
     *
     * @param \AzureDevOpsClient\Dashboard\AzureDevOpsClient\Dashboard\Model\DashboardGroupEntry[] $dashboardEntries A list of Dashboards held by the Dashboard Group
     *
     * @return $this
     */
    public function setDashboardEntries($dashboardEntries)
    {
        $this->container['dashboardEntries'] = $dashboardEntries;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return string
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param string $permission Deprecated: The old permission model describing the level of permissions for the current team. Pre-M125.
     *
     * @return $this
     */
    public function setPermission($permission)
    {
        $allowedValues = $this->getPermissionAllowableValues();
        if (!is_null($permission) && !in_array($permission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permission', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets teamDashboardPermission
     *
     * @return string
     */
    public function getTeamDashboardPermission()
    {
        return $this->container['teamDashboardPermission'];
    }

    /**
     * Sets teamDashboardPermission
     *
     * @param string $teamDashboardPermission A permissions bit mask describing the security permissions of the current team for dashboards. When this permission is the value None, use GroupMemberPermission. Permissions are evaluated based on the presence of a value other than None, else the GroupMemberPermission will be saved.
     *
     * @return $this
     */
    public function setTeamDashboardPermission($teamDashboardPermission)
    {
        $allowedValues = $this->getTeamDashboardPermissionAllowableValues();
        if (!is_null($teamDashboardPermission) && !in_array($teamDashboardPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'teamDashboardPermission', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['teamDashboardPermission'] = $teamDashboardPermission;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


