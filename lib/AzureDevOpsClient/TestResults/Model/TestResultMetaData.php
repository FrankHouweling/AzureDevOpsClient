<?php
/**
 * TestResultMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * TestResultMetaData Class Doc Comment
 *
 * @category Class
 * @description Represents a Meta Data of a test result.
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestResultMetaData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestResultMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automatedTestName' => 'string',
        'automatedTestStorage' => 'string',
        'flakyIdentifiers' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestFlakyIdentifier[]',
        'owner' => 'string',
        'priority' => 'int',
        'testCaseReferenceId' => 'int',
        'testCaseTitle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automatedTestName' => null,
        'automatedTestStorage' => null,
        'flakyIdentifiers' => null,
        'owner' => null,
        'priority' => 'int32',
        'testCaseReferenceId' => 'int32',
        'testCaseTitle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatedTestName' => 'automatedTestName',
        'automatedTestStorage' => 'automatedTestStorage',
        'flakyIdentifiers' => 'flakyIdentifiers',
        'owner' => 'owner',
        'priority' => 'priority',
        'testCaseReferenceId' => 'testCaseReferenceId',
        'testCaseTitle' => 'testCaseTitle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatedTestName' => 'setAutomatedTestName',
        'automatedTestStorage' => 'setAutomatedTestStorage',
        'flakyIdentifiers' => 'setFlakyIdentifiers',
        'owner' => 'setOwner',
        'priority' => 'setPriority',
        'testCaseReferenceId' => 'setTestCaseReferenceId',
        'testCaseTitle' => 'setTestCaseTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatedTestName' => 'getAutomatedTestName',
        'automatedTestStorage' => 'getAutomatedTestStorage',
        'flakyIdentifiers' => 'getFlakyIdentifiers',
        'owner' => 'getOwner',
        'priority' => 'getPriority',
        'testCaseReferenceId' => 'getTestCaseReferenceId',
        'testCaseTitle' => 'getTestCaseTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['automatedTestStorage'] = isset($data['automatedTestStorage']) ? $data['automatedTestStorage'] : null;
        $this->container['flakyIdentifiers'] = isset($data['flakyIdentifiers']) ? $data['flakyIdentifiers'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['testCaseReferenceId'] = isset($data['testCaseReferenceId']) ? $data['testCaseReferenceId'] : null;
        $this->container['testCaseTitle'] = isset($data['testCaseTitle']) ? $data['testCaseTitle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName AutomatedTestName of test result.
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets automatedTestStorage
     *
     * @return string
     */
    public function getAutomatedTestStorage()
    {
        return $this->container['automatedTestStorage'];
    }

    /**
     * Sets automatedTestStorage
     *
     * @param string $automatedTestStorage AutomatedTestStorage of test result.
     *
     * @return $this
     */
    public function setAutomatedTestStorage($automatedTestStorage)
    {
        $this->container['automatedTestStorage'] = $automatedTestStorage;

        return $this;
    }

    /**
     * Gets flakyIdentifiers
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestFlakyIdentifier[]
     */
    public function getFlakyIdentifiers()
    {
        return $this->container['flakyIdentifiers'];
    }

    /**
     * Sets flakyIdentifiers
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestFlakyIdentifier[] $flakyIdentifiers List of Flaky Identifier for TestCaseReferenceId
     *
     * @return $this
     */
    public function setFlakyIdentifiers($flakyIdentifiers)
    {
        $this->container['flakyIdentifiers'] = $flakyIdentifiers;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Owner of test result.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Priority of test result.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets testCaseReferenceId
     *
     * @return int
     */
    public function getTestCaseReferenceId()
    {
        return $this->container['testCaseReferenceId'];
    }

    /**
     * Sets testCaseReferenceId
     *
     * @param int $testCaseReferenceId ID of TestCaseReference.
     *
     * @return $this
     */
    public function setTestCaseReferenceId($testCaseReferenceId)
    {
        $this->container['testCaseReferenceId'] = $testCaseReferenceId;

        return $this;
    }

    /**
     * Gets testCaseTitle
     *
     * @return string
     */
    public function getTestCaseTitle()
    {
        return $this->container['testCaseTitle'];
    }

    /**
     * Sets testCaseTitle
     *
     * @param string $testCaseTitle TestCaseTitle of test result.
     *
     * @return $this
     */
    public function setTestCaseTitle($testCaseTitle)
    {
        $this->container['testCaseTitle'] = $testCaseTitle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


