<?php
/**
 * TestSubResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * TestSubResult Class Doc Comment
 *
 * @category Class
 * @description Represents a sub result of a test result.
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestSubResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestSubResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comment' => 'string',
        'completedDate' => '\DateTime',
        'computerName' => 'string',
        'configuration' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'customFields' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[]',
        'displayName' => 'string',
        'durationInMs' => 'int',
        'errorMessage' => 'string',
        'id' => 'int',
        'lastUpdatedDate' => '\DateTime',
        'outcome' => 'string',
        'parentId' => 'int',
        'resultGroupType' => 'string',
        'sequenceId' => 'int',
        'stackTrace' => 'string',
        'startedDate' => '\DateTime',
        'subResults' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\TestSubResult[]',
        'testResult' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\TestCaseResultIdentifier',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comment' => null,
        'completedDate' => 'date-time',
        'computerName' => null,
        'configuration' => null,
        'customFields' => null,
        'displayName' => null,
        'durationInMs' => 'int64',
        'errorMessage' => null,
        'id' => 'int32',
        'lastUpdatedDate' => 'date-time',
        'outcome' => null,
        'parentId' => 'int32',
        'resultGroupType' => null,
        'sequenceId' => 'int32',
        'stackTrace' => null,
        'startedDate' => 'date-time',
        'subResults' => null,
        'testResult' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'completedDate' => 'completedDate',
        'computerName' => 'computerName',
        'configuration' => 'configuration',
        'customFields' => 'customFields',
        'displayName' => 'displayName',
        'durationInMs' => 'durationInMs',
        'errorMessage' => 'errorMessage',
        'id' => 'id',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'outcome' => 'outcome',
        'parentId' => 'parentId',
        'resultGroupType' => 'resultGroupType',
        'sequenceId' => 'sequenceId',
        'stackTrace' => 'stackTrace',
        'startedDate' => 'startedDate',
        'subResults' => 'subResults',
        'testResult' => 'testResult',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'completedDate' => 'setCompletedDate',
        'computerName' => 'setComputerName',
        'configuration' => 'setConfiguration',
        'customFields' => 'setCustomFields',
        'displayName' => 'setDisplayName',
        'durationInMs' => 'setDurationInMs',
        'errorMessage' => 'setErrorMessage',
        'id' => 'setId',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'outcome' => 'setOutcome',
        'parentId' => 'setParentId',
        'resultGroupType' => 'setResultGroupType',
        'sequenceId' => 'setSequenceId',
        'stackTrace' => 'setStackTrace',
        'startedDate' => 'setStartedDate',
        'subResults' => 'setSubResults',
        'testResult' => 'setTestResult',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'completedDate' => 'getCompletedDate',
        'computerName' => 'getComputerName',
        'configuration' => 'getConfiguration',
        'customFields' => 'getCustomFields',
        'displayName' => 'getDisplayName',
        'durationInMs' => 'getDurationInMs',
        'errorMessage' => 'getErrorMessage',
        'id' => 'getId',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'outcome' => 'getOutcome',
        'parentId' => 'getParentId',
        'resultGroupType' => 'getResultGroupType',
        'sequenceId' => 'getSequenceId',
        'stackTrace' => 'getStackTrace',
        'startedDate' => 'getStartedDate',
        'subResults' => 'getSubResults',
        'testResult' => 'getTestResult',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_GROUP_TYPE_NONE = 'none';
    const RESULT_GROUP_TYPE_RERUN = 'rerun';
    const RESULT_GROUP_TYPE_DATA_DRIVEN = 'dataDriven';
    const RESULT_GROUP_TYPE_ORDERED_TEST = 'orderedTest';
    const RESULT_GROUP_TYPE_GENERIC = 'generic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultGroupTypeAllowableValues()
    {
        return [
            self::RESULT_GROUP_TYPE_NONE,
            self::RESULT_GROUP_TYPE_RERUN,
            self::RESULT_GROUP_TYPE_DATA_DRIVEN,
            self::RESULT_GROUP_TYPE_ORDERED_TEST,
            self::RESULT_GROUP_TYPE_GENERIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['completedDate'] = isset($data['completedDate']) ? $data['completedDate'] : null;
        $this->container['computerName'] = isset($data['computerName']) ? $data['computerName'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['durationInMs'] = isset($data['durationInMs']) ? $data['durationInMs'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['resultGroupType'] = isset($data['resultGroupType']) ? $data['resultGroupType'] : null;
        $this->container['sequenceId'] = isset($data['sequenceId']) ? $data['sequenceId'] : null;
        $this->container['stackTrace'] = isset($data['stackTrace']) ? $data['stackTrace'] : null;
        $this->container['startedDate'] = isset($data['startedDate']) ? $data['startedDate'] : null;
        $this->container['subResults'] = isset($data['subResults']) ? $data['subResults'] : null;
        $this->container['testResult'] = isset($data['testResult']) ? $data['testResult'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($this->container['resultGroupType']) && !in_array($this->container['resultGroupType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resultGroupType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment in sub result.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets completedDate
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param \DateTime $completedDate Time when test execution completed.
     *
     * @return $this
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets computerName
     *
     * @return string
     */
    public function getComputerName()
    {
        return $this->container['computerName'];
    }

    /**
     * Sets computerName
     *
     * @param string $computerName Machine where test executed.
     *
     * @return $this
     */
    public function setComputerName($computerName)
    {
        $this->container['computerName'] = $computerName;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $configuration Reference to test configuration.
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[] $customFields Additional properties of sub result.
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Name of sub result.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets durationInMs
     *
     * @return int
     */
    public function getDurationInMs()
    {
        return $this->container['durationInMs'];
    }

    /**
     * Sets durationInMs
     *
     * @param int $durationInMs Duration of test execution.
     *
     * @return $this
     */
    public function setDurationInMs($durationInMs)
    {
        $this->container['durationInMs'] = $durationInMs;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Error message in sub result.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of sub result.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate Time when result last updated.
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome Outcome of sub result.
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId Immediate parent ID of sub result.
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets resultGroupType
     *
     * @return string
     */
    public function getResultGroupType()
    {
        return $this->container['resultGroupType'];
    }

    /**
     * Sets resultGroupType
     *
     * @param string $resultGroupType Hierarchy type of the result, default value of None means its leaf node.
     *
     * @return $this
     */
    public function setResultGroupType($resultGroupType)
    {
        $allowedValues = $this->getResultGroupTypeAllowableValues();
        if (!is_null($resultGroupType) && !in_array($resultGroupType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resultGroupType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resultGroupType'] = $resultGroupType;

        return $this;
    }

    /**
     * Gets sequenceId
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->container['sequenceId'];
    }

    /**
     * Sets sequenceId
     *
     * @param int $sequenceId Index number of sub result.
     *
     * @return $this
     */
    public function setSequenceId($sequenceId)
    {
        $this->container['sequenceId'] = $sequenceId;

        return $this;
    }

    /**
     * Gets stackTrace
     *
     * @return string
     */
    public function getStackTrace()
    {
        return $this->container['stackTrace'];
    }

    /**
     * Sets stackTrace
     *
     * @param string $stackTrace Stacktrace.
     *
     * @return $this
     */
    public function setStackTrace($stackTrace)
    {
        $this->container['stackTrace'] = $stackTrace;

        return $this;
    }

    /**
     * Gets startedDate
     *
     * @return \DateTime
     */
    public function getStartedDate()
    {
        return $this->container['startedDate'];
    }

    /**
     * Sets startedDate
     *
     * @param \DateTime $startedDate Time when test execution started.
     *
     * @return $this
     */
    public function setStartedDate($startedDate)
    {
        $this->container['startedDate'] = $startedDate;

        return $this;
    }

    /**
     * Gets subResults
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestSubResult[]
     */
    public function getSubResults()
    {
        return $this->container['subResults'];
    }

    /**
     * Sets subResults
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestSubResult[] $subResults List of sub results inside a sub result, if ResultGroupType is not None, it holds corresponding type sub results.
     *
     * @return $this
     */
    public function setSubResults($subResults)
    {
        $this->container['subResults'] = $subResults;

        return $this;
    }

    /**
     * Gets testResult
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestCaseResultIdentifier
     */
    public function getTestResult()
    {
        return $this->container['testResult'];
    }

    /**
     * Sets testResult
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestCaseResultIdentifier $testResult Reference to test result.
     *
     * @return $this
     */
    public function setTestResult($testResult)
    {
        $this->container['testResult'] = $testResult;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url of sub result.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


