<?php
/**
 * ResultsFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * ResultsFilter Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResultsFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultsFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automatedTestName' => 'string',
        'branch' => 'string',
        'executedIn' => 'string',
        'groupBy' => 'string',
        'maxCompleteDate' => '\DateTime',
        'resultsCount' => 'int',
        'testCaseId' => 'int',
        'testCaseReferenceIds' => 'int[]',
        'testPlanId' => 'int',
        'testPointIds' => 'int[]',
        'testResultsContext' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\TestResultsContext',
        'trendDays' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automatedTestName' => null,
        'branch' => null,
        'executedIn' => null,
        'groupBy' => null,
        'maxCompleteDate' => 'date-time',
        'resultsCount' => 'int32',
        'testCaseId' => 'int32',
        'testCaseReferenceIds' => 'int32',
        'testPlanId' => 'int32',
        'testPointIds' => 'int32',
        'testResultsContext' => null,
        'trendDays' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatedTestName' => 'automatedTestName',
        'branch' => 'branch',
        'executedIn' => 'executedIn',
        'groupBy' => 'groupBy',
        'maxCompleteDate' => 'maxCompleteDate',
        'resultsCount' => 'resultsCount',
        'testCaseId' => 'testCaseId',
        'testCaseReferenceIds' => 'testCaseReferenceIds',
        'testPlanId' => 'testPlanId',
        'testPointIds' => 'testPointIds',
        'testResultsContext' => 'testResultsContext',
        'trendDays' => 'trendDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatedTestName' => 'setAutomatedTestName',
        'branch' => 'setBranch',
        'executedIn' => 'setExecutedIn',
        'groupBy' => 'setGroupBy',
        'maxCompleteDate' => 'setMaxCompleteDate',
        'resultsCount' => 'setResultsCount',
        'testCaseId' => 'setTestCaseId',
        'testCaseReferenceIds' => 'setTestCaseReferenceIds',
        'testPlanId' => 'setTestPlanId',
        'testPointIds' => 'setTestPointIds',
        'testResultsContext' => 'setTestResultsContext',
        'trendDays' => 'setTrendDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatedTestName' => 'getAutomatedTestName',
        'branch' => 'getBranch',
        'executedIn' => 'getExecutedIn',
        'groupBy' => 'getGroupBy',
        'maxCompleteDate' => 'getMaxCompleteDate',
        'resultsCount' => 'getResultsCount',
        'testCaseId' => 'getTestCaseId',
        'testCaseReferenceIds' => 'getTestCaseReferenceIds',
        'testPlanId' => 'getTestPlanId',
        'testPointIds' => 'getTestPointIds',
        'testResultsContext' => 'getTestResultsContext',
        'trendDays' => 'getTrendDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXECUTED_IN_ANY = 'any';
    const EXECUTED_IN_TCM = 'tcm';
    const EXECUTED_IN_TFS = 'tfs';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExecutedInAllowableValues()
    {
        return [
            self::EXECUTED_IN_ANY,
            self::EXECUTED_IN_TCM,
            self::EXECUTED_IN_TFS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatedTestName'] = isset($data['automatedTestName']) ? $data['automatedTestName'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['executedIn'] = isset($data['executedIn']) ? $data['executedIn'] : null;
        $this->container['groupBy'] = isset($data['groupBy']) ? $data['groupBy'] : null;
        $this->container['maxCompleteDate'] = isset($data['maxCompleteDate']) ? $data['maxCompleteDate'] : null;
        $this->container['resultsCount'] = isset($data['resultsCount']) ? $data['resultsCount'] : null;
        $this->container['testCaseId'] = isset($data['testCaseId']) ? $data['testCaseId'] : null;
        $this->container['testCaseReferenceIds'] = isset($data['testCaseReferenceIds']) ? $data['testCaseReferenceIds'] : null;
        $this->container['testPlanId'] = isset($data['testPlanId']) ? $data['testPlanId'] : null;
        $this->container['testPointIds'] = isset($data['testPointIds']) ? $data['testPointIds'] : null;
        $this->container['testResultsContext'] = isset($data['testResultsContext']) ? $data['testResultsContext'] : null;
        $this->container['trendDays'] = isset($data['trendDays']) ? $data['trendDays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExecutedInAllowableValues();
        if (!is_null($this->container['executedIn']) && !in_array($this->container['executedIn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'executedIn', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatedTestName
     *
     * @return string
     */
    public function getAutomatedTestName()
    {
        return $this->container['automatedTestName'];
    }

    /**
     * Sets automatedTestName
     *
     * @param string $automatedTestName automatedTestName
     *
     * @return $this
     */
    public function setAutomatedTestName($automatedTestName)
    {
        $this->container['automatedTestName'] = $automatedTestName;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets executedIn
     *
     * @return string
     */
    public function getExecutedIn()
    {
        return $this->container['executedIn'];
    }

    /**
     * Sets executedIn
     *
     * @param string $executedIn executedIn
     *
     * @return $this
     */
    public function setExecutedIn($executedIn)
    {
        $allowedValues = $this->getExecutedInAllowableValues();
        if (!is_null($executedIn) && !in_array($executedIn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'executedIn', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['executedIn'] = $executedIn;

        return $this;
    }

    /**
     * Gets groupBy
     *
     * @return string
     */
    public function getGroupBy()
    {
        return $this->container['groupBy'];
    }

    /**
     * Sets groupBy
     *
     * @param string $groupBy groupBy
     *
     * @return $this
     */
    public function setGroupBy($groupBy)
    {
        $this->container['groupBy'] = $groupBy;

        return $this;
    }

    /**
     * Gets maxCompleteDate
     *
     * @return \DateTime
     */
    public function getMaxCompleteDate()
    {
        return $this->container['maxCompleteDate'];
    }

    /**
     * Sets maxCompleteDate
     *
     * @param \DateTime $maxCompleteDate maxCompleteDate
     *
     * @return $this
     */
    public function setMaxCompleteDate($maxCompleteDate)
    {
        $this->container['maxCompleteDate'] = $maxCompleteDate;

        return $this;
    }

    /**
     * Gets resultsCount
     *
     * @return int
     */
    public function getResultsCount()
    {
        return $this->container['resultsCount'];
    }

    /**
     * Sets resultsCount
     *
     * @param int $resultsCount resultsCount
     *
     * @return $this
     */
    public function setResultsCount($resultsCount)
    {
        $this->container['resultsCount'] = $resultsCount;

        return $this;
    }

    /**
     * Gets testCaseId
     *
     * @return int
     */
    public function getTestCaseId()
    {
        return $this->container['testCaseId'];
    }

    /**
     * Sets testCaseId
     *
     * @param int $testCaseId testCaseId
     *
     * @return $this
     */
    public function setTestCaseId($testCaseId)
    {
        $this->container['testCaseId'] = $testCaseId;

        return $this;
    }

    /**
     * Gets testCaseReferenceIds
     *
     * @return int[]
     */
    public function getTestCaseReferenceIds()
    {
        return $this->container['testCaseReferenceIds'];
    }

    /**
     * Sets testCaseReferenceIds
     *
     * @param int[] $testCaseReferenceIds testCaseReferenceIds
     *
     * @return $this
     */
    public function setTestCaseReferenceIds($testCaseReferenceIds)
    {
        $this->container['testCaseReferenceIds'] = $testCaseReferenceIds;

        return $this;
    }

    /**
     * Gets testPlanId
     *
     * @return int
     */
    public function getTestPlanId()
    {
        return $this->container['testPlanId'];
    }

    /**
     * Sets testPlanId
     *
     * @param int $testPlanId testPlanId
     *
     * @return $this
     */
    public function setTestPlanId($testPlanId)
    {
        $this->container['testPlanId'] = $testPlanId;

        return $this;
    }

    /**
     * Gets testPointIds
     *
     * @return int[]
     */
    public function getTestPointIds()
    {
        return $this->container['testPointIds'];
    }

    /**
     * Sets testPointIds
     *
     * @param int[] $testPointIds testPointIds
     *
     * @return $this
     */
    public function setTestPointIds($testPointIds)
    {
        $this->container['testPointIds'] = $testPointIds;

        return $this;
    }

    /**
     * Gets testResultsContext
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestResultsContext
     */
    public function getTestResultsContext()
    {
        return $this->container['testResultsContext'];
    }

    /**
     * Sets testResultsContext
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestResultsContext $testResultsContext testResultsContext
     *
     * @return $this
     */
    public function setTestResultsContext($testResultsContext)
    {
        $this->container['testResultsContext'] = $testResultsContext;

        return $this;
    }

    /**
     * Gets trendDays
     *
     * @return int
     */
    public function getTrendDays()
    {
        return $this->container['trendDays'];
    }

    /**
     * Sets trendDays
     *
     * @param int $trendDays trendDays
     *
     * @return $this
     */
    public function setTrendDays($trendDays)
    {
        $this->container['trendDays'] = $trendDays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


