<?php
/**
 * BuildConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * BuildConfiguration Class Doc Comment
 *
 * @category Class
 * @description BuildConfiguration Details.
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branchName' => 'string',
        'buildDefinitionId' => 'int',
        'buildSystem' => 'string',
        'creationDate' => '\DateTime',
        'flavor' => 'string',
        'id' => 'int',
        'number' => 'string',
        'platform' => 'string',
        'project' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'repositoryGuid' => 'string',
        'repositoryType' => 'string',
        'sourceVersion' => 'string',
        'targetBranchName' => 'string',
        'uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branchName' => null,
        'buildDefinitionId' => 'int32',
        'buildSystem' => null,
        'creationDate' => 'date-time',
        'flavor' => null,
        'id' => 'int32',
        'number' => null,
        'platform' => null,
        'project' => null,
        'repositoryGuid' => null,
        'repositoryType' => null,
        'sourceVersion' => null,
        'targetBranchName' => null,
        'uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branchName' => 'branchName',
        'buildDefinitionId' => 'buildDefinitionId',
        'buildSystem' => 'buildSystem',
        'creationDate' => 'creationDate',
        'flavor' => 'flavor',
        'id' => 'id',
        'number' => 'number',
        'platform' => 'platform',
        'project' => 'project',
        'repositoryGuid' => 'repositoryGuid',
        'repositoryType' => 'repositoryType',
        'sourceVersion' => 'sourceVersion',
        'targetBranchName' => 'targetBranchName',
        'uri' => 'uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branchName' => 'setBranchName',
        'buildDefinitionId' => 'setBuildDefinitionId',
        'buildSystem' => 'setBuildSystem',
        'creationDate' => 'setCreationDate',
        'flavor' => 'setFlavor',
        'id' => 'setId',
        'number' => 'setNumber',
        'platform' => 'setPlatform',
        'project' => 'setProject',
        'repositoryGuid' => 'setRepositoryGuid',
        'repositoryType' => 'setRepositoryType',
        'sourceVersion' => 'setSourceVersion',
        'targetBranchName' => 'setTargetBranchName',
        'uri' => 'setUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branchName' => 'getBranchName',
        'buildDefinitionId' => 'getBuildDefinitionId',
        'buildSystem' => 'getBuildSystem',
        'creationDate' => 'getCreationDate',
        'flavor' => 'getFlavor',
        'id' => 'getId',
        'number' => 'getNumber',
        'platform' => 'getPlatform',
        'project' => 'getProject',
        'repositoryGuid' => 'getRepositoryGuid',
        'repositoryType' => 'getRepositoryType',
        'sourceVersion' => 'getSourceVersion',
        'targetBranchName' => 'getTargetBranchName',
        'uri' => 'getUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branchName'] = isset($data['branchName']) ? $data['branchName'] : null;
        $this->container['buildDefinitionId'] = isset($data['buildDefinitionId']) ? $data['buildDefinitionId'] : null;
        $this->container['buildSystem'] = isset($data['buildSystem']) ? $data['buildSystem'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['flavor'] = isset($data['flavor']) ? $data['flavor'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['repositoryGuid'] = isset($data['repositoryGuid']) ? $data['repositoryGuid'] : null;
        $this->container['repositoryType'] = isset($data['repositoryType']) ? $data['repositoryType'] : null;
        $this->container['sourceVersion'] = isset($data['sourceVersion']) ? $data['sourceVersion'] : null;
        $this->container['targetBranchName'] = isset($data['targetBranchName']) ? $data['targetBranchName'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName Branch name for which build is generated.
     *
     * @return $this
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets buildDefinitionId
     *
     * @return int
     */
    public function getBuildDefinitionId()
    {
        return $this->container['buildDefinitionId'];
    }

    /**
     * Sets buildDefinitionId
     *
     * @param int $buildDefinitionId BuildDefinitionId for build.
     *
     * @return $this
     */
    public function setBuildDefinitionId($buildDefinitionId)
    {
        $this->container['buildDefinitionId'] = $buildDefinitionId;

        return $this;
    }

    /**
     * Gets buildSystem
     *
     * @return string
     */
    public function getBuildSystem()
    {
        return $this->container['buildSystem'];
    }

    /**
     * Sets buildSystem
     *
     * @param string $buildSystem Build system.
     *
     * @return $this
     */
    public function setBuildSystem($buildSystem)
    {
        $this->container['buildSystem'] = $buildSystem;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate Build Creation Date.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets flavor
     *
     * @return string
     */
    public function getFlavor()
    {
        return $this->container['flavor'];
    }

    /**
     * Sets flavor
     *
     * @param string $flavor Build flavor (eg Build/Release).
     *
     * @return $this
     */
    public function setFlavor($flavor)
    {
        $this->container['flavor'] = $flavor;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id BuildConfiguration Id.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Build Number.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform BuildConfiguration Platform.
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $project Project associated with this BuildConfiguration.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets repositoryGuid
     *
     * @return string
     */
    public function getRepositoryGuid()
    {
        return $this->container['repositoryGuid'];
    }

    /**
     * Sets repositoryGuid
     *
     * @param string $repositoryGuid Repository Guid for the Build.
     *
     * @return $this
     */
    public function setRepositoryGuid($repositoryGuid)
    {
        $this->container['repositoryGuid'] = $repositoryGuid;

        return $this;
    }

    /**
     * Gets repositoryType
     *
     * @return string
     */
    public function getRepositoryType()
    {
        return $this->container['repositoryType'];
    }

    /**
     * Sets repositoryType
     *
     * @param string $repositoryType Repository Type (eg. TFSGit).
     *
     * @return $this
     */
    public function setRepositoryType($repositoryType)
    {
        $this->container['repositoryType'] = $repositoryType;

        return $this;
    }

    /**
     * Gets sourceVersion
     *
     * @return string
     */
    public function getSourceVersion()
    {
        return $this->container['sourceVersion'];
    }

    /**
     * Sets sourceVersion
     *
     * @param string $sourceVersion Source Version(/first commit) for the build was triggered.
     *
     * @return $this
     */
    public function setSourceVersion($sourceVersion)
    {
        $this->container['sourceVersion'] = $sourceVersion;

        return $this;
    }

    /**
     * Gets targetBranchName
     *
     * @return string
     */
    public function getTargetBranchName()
    {
        return $this->container['targetBranchName'];
    }

    /**
     * Sets targetBranchName
     *
     * @param string $targetBranchName Target BranchName.
     *
     * @return $this
     */
    public function setTargetBranchName($targetBranchName)
    {
        $this->container['targetBranchName'] = $targetBranchName;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri Build Uri.
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


