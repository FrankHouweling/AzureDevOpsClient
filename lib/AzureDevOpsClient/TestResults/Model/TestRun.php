<?php
/**
 * TestRun
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * TestRun Class Doc Comment
 *
 * @category Class
 * @description Test run details.
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestRun implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestRun';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'buildConfiguration' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\BuildConfiguration',
        'comment' => 'string',
        'completedDate' => '\DateTime',
        'controller' => 'string',
        'createdDate' => '\DateTime',
        'customFields' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\CustomTestField[]',
        'dropLocation' => 'string',
        'dtlAutEnvironment' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'dtlEnvironment' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'dtlEnvironmentCreationDetails' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails',
        'dueDate' => '\DateTime',
        'errorMessage' => 'string',
        'filter' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunFilter',
        'id' => 'int',
        'incompleteTests' => 'int',
        'isAutomated' => 'bool',
        'iteration' => 'string',
        'lastUpdatedBy' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef',
        'lastUpdatedDate' => '\DateTime',
        'name' => 'string',
        'notApplicableTests' => 'int',
        'owner' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef',
        'passedTests' => 'int',
        'phase' => 'string',
        'pipelineReference' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference',
        'plan' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'postProcessState' => 'string',
        'project' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'release' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ReleaseReference',
        'releaseEnvironmentUri' => 'string',
        'releaseUri' => 'string',
        'revision' => 'int',
        'runStatistics' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunStatistic[]',
        'startedDate' => '\DateTime',
        'state' => 'string',
        'substate' => 'string',
        'tags' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestTag[]',
        'testEnvironment' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestEnvironment',
        'testMessageLogId' => 'int',
        'testSettings' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'totalTests' => 'int',
        'unanalyzedTests' => 'int',
        'url' => 'string',
        'webAccessUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build' => null,
        'buildConfiguration' => null,
        'comment' => null,
        'completedDate' => 'date-time',
        'controller' => null,
        'createdDate' => 'date-time',
        'customFields' => null,
        'dropLocation' => null,
        'dtlAutEnvironment' => null,
        'dtlEnvironment' => null,
        'dtlEnvironmentCreationDetails' => null,
        'dueDate' => 'date-time',
        'errorMessage' => null,
        'filter' => null,
        'id' => 'int32',
        'incompleteTests' => 'int32',
        'isAutomated' => null,
        'iteration' => null,
        'lastUpdatedBy' => null,
        'lastUpdatedDate' => 'date-time',
        'name' => null,
        'notApplicableTests' => 'int32',
        'owner' => null,
        'passedTests' => 'int32',
        'phase' => null,
        'pipelineReference' => null,
        'plan' => null,
        'postProcessState' => null,
        'project' => null,
        'release' => null,
        'releaseEnvironmentUri' => null,
        'releaseUri' => null,
        'revision' => 'int32',
        'runStatistics' => null,
        'startedDate' => 'date-time',
        'state' => null,
        'substate' => null,
        'tags' => null,
        'testEnvironment' => null,
        'testMessageLogId' => 'int32',
        'testSettings' => null,
        'totalTests' => 'int32',
        'unanalyzedTests' => 'int32',
        'url' => null,
        'webAccessUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build' => 'build',
        'buildConfiguration' => 'buildConfiguration',
        'comment' => 'comment',
        'completedDate' => 'completedDate',
        'controller' => 'controller',
        'createdDate' => 'createdDate',
        'customFields' => 'customFields',
        'dropLocation' => 'dropLocation',
        'dtlAutEnvironment' => 'dtlAutEnvironment',
        'dtlEnvironment' => 'dtlEnvironment',
        'dtlEnvironmentCreationDetails' => 'dtlEnvironmentCreationDetails',
        'dueDate' => 'dueDate',
        'errorMessage' => 'errorMessage',
        'filter' => 'filter',
        'id' => 'id',
        'incompleteTests' => 'incompleteTests',
        'isAutomated' => 'isAutomated',
        'iteration' => 'iteration',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'name' => 'name',
        'notApplicableTests' => 'notApplicableTests',
        'owner' => 'owner',
        'passedTests' => 'passedTests',
        'phase' => 'phase',
        'pipelineReference' => 'pipelineReference',
        'plan' => 'plan',
        'postProcessState' => 'postProcessState',
        'project' => 'project',
        'release' => 'release',
        'releaseEnvironmentUri' => 'releaseEnvironmentUri',
        'releaseUri' => 'releaseUri',
        'revision' => 'revision',
        'runStatistics' => 'runStatistics',
        'startedDate' => 'startedDate',
        'state' => 'state',
        'substate' => 'substate',
        'tags' => 'tags',
        'testEnvironment' => 'testEnvironment',
        'testMessageLogId' => 'testMessageLogId',
        'testSettings' => 'testSettings',
        'totalTests' => 'totalTests',
        'unanalyzedTests' => 'unanalyzedTests',
        'url' => 'url',
        'webAccessUrl' => 'webAccessUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build' => 'setBuild',
        'buildConfiguration' => 'setBuildConfiguration',
        'comment' => 'setComment',
        'completedDate' => 'setCompletedDate',
        'controller' => 'setController',
        'createdDate' => 'setCreatedDate',
        'customFields' => 'setCustomFields',
        'dropLocation' => 'setDropLocation',
        'dtlAutEnvironment' => 'setDtlAutEnvironment',
        'dtlEnvironment' => 'setDtlEnvironment',
        'dtlEnvironmentCreationDetails' => 'setDtlEnvironmentCreationDetails',
        'dueDate' => 'setDueDate',
        'errorMessage' => 'setErrorMessage',
        'filter' => 'setFilter',
        'id' => 'setId',
        'incompleteTests' => 'setIncompleteTests',
        'isAutomated' => 'setIsAutomated',
        'iteration' => 'setIteration',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'name' => 'setName',
        'notApplicableTests' => 'setNotApplicableTests',
        'owner' => 'setOwner',
        'passedTests' => 'setPassedTests',
        'phase' => 'setPhase',
        'pipelineReference' => 'setPipelineReference',
        'plan' => 'setPlan',
        'postProcessState' => 'setPostProcessState',
        'project' => 'setProject',
        'release' => 'setRelease',
        'releaseEnvironmentUri' => 'setReleaseEnvironmentUri',
        'releaseUri' => 'setReleaseUri',
        'revision' => 'setRevision',
        'runStatistics' => 'setRunStatistics',
        'startedDate' => 'setStartedDate',
        'state' => 'setState',
        'substate' => 'setSubstate',
        'tags' => 'setTags',
        'testEnvironment' => 'setTestEnvironment',
        'testMessageLogId' => 'setTestMessageLogId',
        'testSettings' => 'setTestSettings',
        'totalTests' => 'setTotalTests',
        'unanalyzedTests' => 'setUnanalyzedTests',
        'url' => 'setUrl',
        'webAccessUrl' => 'setWebAccessUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build' => 'getBuild',
        'buildConfiguration' => 'getBuildConfiguration',
        'comment' => 'getComment',
        'completedDate' => 'getCompletedDate',
        'controller' => 'getController',
        'createdDate' => 'getCreatedDate',
        'customFields' => 'getCustomFields',
        'dropLocation' => 'getDropLocation',
        'dtlAutEnvironment' => 'getDtlAutEnvironment',
        'dtlEnvironment' => 'getDtlEnvironment',
        'dtlEnvironmentCreationDetails' => 'getDtlEnvironmentCreationDetails',
        'dueDate' => 'getDueDate',
        'errorMessage' => 'getErrorMessage',
        'filter' => 'getFilter',
        'id' => 'getId',
        'incompleteTests' => 'getIncompleteTests',
        'isAutomated' => 'getIsAutomated',
        'iteration' => 'getIteration',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'name' => 'getName',
        'notApplicableTests' => 'getNotApplicableTests',
        'owner' => 'getOwner',
        'passedTests' => 'getPassedTests',
        'phase' => 'getPhase',
        'pipelineReference' => 'getPipelineReference',
        'plan' => 'getPlan',
        'postProcessState' => 'getPostProcessState',
        'project' => 'getProject',
        'release' => 'getRelease',
        'releaseEnvironmentUri' => 'getReleaseEnvironmentUri',
        'releaseUri' => 'getReleaseUri',
        'revision' => 'getRevision',
        'runStatistics' => 'getRunStatistics',
        'startedDate' => 'getStartedDate',
        'state' => 'getState',
        'substate' => 'getSubstate',
        'tags' => 'getTags',
        'testEnvironment' => 'getTestEnvironment',
        'testMessageLogId' => 'getTestMessageLogId',
        'testSettings' => 'getTestSettings',
        'totalTests' => 'getTotalTests',
        'unanalyzedTests' => 'getUnanalyzedTests',
        'url' => 'getUrl',
        'webAccessUrl' => 'getWebAccessUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSTATE_NONE = 'none';
    const SUBSTATE_CREATING_ENVIRONMENT = 'creatingEnvironment';
    const SUBSTATE_RUNNING_TESTS = 'runningTests';
    const SUBSTATE_CANCELED_BY_USER = 'canceledByUser';
    const SUBSTATE_ABORTED_BY_SYSTEM = 'abortedBySystem';
    const SUBSTATE_TIMED_OUT = 'timedOut';
    const SUBSTATE_PENDING_ANALYSIS = 'pendingAnalysis';
    const SUBSTATE_ANALYZED = 'analyzed';
    const SUBSTATE_CANCELLATION_IN_PROGRESS = 'cancellationInProgress';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubstateAllowableValues()
    {
        return [
            self::SUBSTATE_NONE,
            self::SUBSTATE_CREATING_ENVIRONMENT,
            self::SUBSTATE_RUNNING_TESTS,
            self::SUBSTATE_CANCELED_BY_USER,
            self::SUBSTATE_ABORTED_BY_SYSTEM,
            self::SUBSTATE_TIMED_OUT,
            self::SUBSTATE_PENDING_ANALYSIS,
            self::SUBSTATE_ANALYZED,
            self::SUBSTATE_CANCELLATION_IN_PROGRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildConfiguration'] = isset($data['buildConfiguration']) ? $data['buildConfiguration'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['completedDate'] = isset($data['completedDate']) ? $data['completedDate'] : null;
        $this->container['controller'] = isset($data['controller']) ? $data['controller'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['dropLocation'] = isset($data['dropLocation']) ? $data['dropLocation'] : null;
        $this->container['dtlAutEnvironment'] = isset($data['dtlAutEnvironment']) ? $data['dtlAutEnvironment'] : null;
        $this->container['dtlEnvironment'] = isset($data['dtlEnvironment']) ? $data['dtlEnvironment'] : null;
        $this->container['dtlEnvironmentCreationDetails'] = isset($data['dtlEnvironmentCreationDetails']) ? $data['dtlEnvironmentCreationDetails'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['incompleteTests'] = isset($data['incompleteTests']) ? $data['incompleteTests'] : null;
        $this->container['isAutomated'] = isset($data['isAutomated']) ? $data['isAutomated'] : null;
        $this->container['iteration'] = isset($data['iteration']) ? $data['iteration'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notApplicableTests'] = isset($data['notApplicableTests']) ? $data['notApplicableTests'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['passedTests'] = isset($data['passedTests']) ? $data['passedTests'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['pipelineReference'] = isset($data['pipelineReference']) ? $data['pipelineReference'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['postProcessState'] = isset($data['postProcessState']) ? $data['postProcessState'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['releaseEnvironmentUri'] = isset($data['releaseEnvironmentUri']) ? $data['releaseEnvironmentUri'] : null;
        $this->container['releaseUri'] = isset($data['releaseUri']) ? $data['releaseUri'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['runStatistics'] = isset($data['runStatistics']) ? $data['runStatistics'] : null;
        $this->container['startedDate'] = isset($data['startedDate']) ? $data['startedDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['substate'] = isset($data['substate']) ? $data['substate'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['testEnvironment'] = isset($data['testEnvironment']) ? $data['testEnvironment'] : null;
        $this->container['testMessageLogId'] = isset($data['testMessageLogId']) ? $data['testMessageLogId'] : null;
        $this->container['testSettings'] = isset($data['testSettings']) ? $data['testSettings'] : null;
        $this->container['totalTests'] = isset($data['totalTests']) ? $data['totalTests'] : null;
        $this->container['unanalyzedTests'] = isset($data['unanalyzedTests']) ? $data['unanalyzedTests'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['webAccessUrl'] = isset($data['webAccessUrl']) ? $data['webAccessUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubstateAllowableValues();
        if (!is_null($this->container['substate']) && !in_array($this->container['substate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'substate', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets build
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $build Build associated with this test run.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildConfiguration
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\BuildConfiguration
     */
    public function getBuildConfiguration()
    {
        return $this->container['buildConfiguration'];
    }

    /**
     * Sets buildConfiguration
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\BuildConfiguration $buildConfiguration Build configuration details associated with this test run.
     *
     * @return $this
     */
    public function setBuildConfiguration($buildConfiguration)
    {
        $this->container['buildConfiguration'] = $buildConfiguration;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comments entered by those analyzing the run.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets completedDate
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param \DateTime $completedDate Completed date time of the run.
     *
     * @return $this
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets controller
     *
     * @return string
     */
    public function getController()
    {
        return $this->container['controller'];
    }

    /**
     * Sets controller
     *
     * @param string $controller Test Run Controller.
     *
     * @return $this
     */
    public function setController($controller)
    {
        $this->container['controller'] = $controller;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Test Run CreatedDate.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\CustomTestField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\CustomTestField[] $customFields List of Custom Fields for TestRun.
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets dropLocation
     *
     * @return string
     */
    public function getDropLocation()
    {
        return $this->container['dropLocation'];
    }

    /**
     * Sets dropLocation
     *
     * @param string $dropLocation Drop Location for the test Run.
     *
     * @return $this
     */
    public function setDropLocation($dropLocation)
    {
        $this->container['dropLocation'] = $dropLocation;

        return $this;
    }

    /**
     * Gets dtlAutEnvironment
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getDtlAutEnvironment()
    {
        return $this->container['dtlAutEnvironment'];
    }

    /**
     * Sets dtlAutEnvironment
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $dtlAutEnvironment dtlAutEnvironment
     *
     * @return $this
     */
    public function setDtlAutEnvironment($dtlAutEnvironment)
    {
        $this->container['dtlAutEnvironment'] = $dtlAutEnvironment;

        return $this;
    }

    /**
     * Gets dtlEnvironment
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getDtlEnvironment()
    {
        return $this->container['dtlEnvironment'];
    }

    /**
     * Sets dtlEnvironment
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $dtlEnvironment dtlEnvironment
     *
     * @return $this
     */
    public function setDtlEnvironment($dtlEnvironment)
    {
        $this->container['dtlEnvironment'] = $dtlEnvironment;

        return $this;
    }

    /**
     * Gets dtlEnvironmentCreationDetails
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails
     */
    public function getDtlEnvironmentCreationDetails()
    {
        return $this->container['dtlEnvironmentCreationDetails'];
    }

    /**
     * Sets dtlEnvironmentCreationDetails
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails $dtlEnvironmentCreationDetails dtlEnvironmentCreationDetails
     *
     * @return $this
     */
    public function setDtlEnvironmentCreationDetails($dtlEnvironmentCreationDetails)
    {
        $this->container['dtlEnvironmentCreationDetails'] = $dtlEnvironmentCreationDetails;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime $dueDate Due date and time for test run.
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Error message associated with the run.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunFilter $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the test run.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets incompleteTests
     *
     * @return int
     */
    public function getIncompleteTests()
    {
        return $this->container['incompleteTests'];
    }

    /**
     * Sets incompleteTests
     *
     * @param int $incompleteTests Number of Incomplete Tests.
     *
     * @return $this
     */
    public function setIncompleteTests($incompleteTests)
    {
        $this->container['incompleteTests'] = $incompleteTests;

        return $this;
    }

    /**
     * Gets isAutomated
     *
     * @return bool
     */
    public function getIsAutomated()
    {
        return $this->container['isAutomated'];
    }

    /**
     * Sets isAutomated
     *
     * @param bool $isAutomated true if test run is automated, false otherwise.
     *
     * @return $this
     */
    public function setIsAutomated($isAutomated)
    {
        $this->container['isAutomated'] = $isAutomated;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return string
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param string $iteration The iteration to which the run belongs.
     *
     * @return $this
     */
    public function setIteration($iteration)
    {
        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef $lastUpdatedBy Team foundation ID of the last updated the test run.
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate Last updated date and time
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the test run.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notApplicableTests
     *
     * @return int
     */
    public function getNotApplicableTests()
    {
        return $this->container['notApplicableTests'];
    }

    /**
     * Sets notApplicableTests
     *
     * @param int $notApplicableTests Number of Not Applicable Tests.
     *
     * @return $this
     */
    public function setNotApplicableTests($notApplicableTests)
    {
        $this->container['notApplicableTests'] = $notApplicableTests;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\IdentityRef $owner Team Foundation ID of the owner of the runs.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets passedTests
     *
     * @return int
     */
    public function getPassedTests()
    {
        return $this->container['passedTests'];
    }

    /**
     * Sets passedTests
     *
     * @param int $passedTests Number of passed tests in the run
     *
     * @return $this
     */
    public function setPassedTests($passedTests)
    {
        $this->container['passedTests'] = $passedTests;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase Phase/State for the testRun.
     *
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets pipelineReference
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference
     */
    public function getPipelineReference()
    {
        return $this->container['pipelineReference'];
    }

    /**
     * Sets pipelineReference
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference $pipelineReference Reference of the pipeline to which this test run belongs.
     *
     * @return $this
     */
    public function setPipelineReference($pipelineReference)
    {
        $this->container['pipelineReference'] = $pipelineReference;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $plan Test plan associated with this test run.
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets postProcessState
     *
     * @return string
     */
    public function getPostProcessState()
    {
        return $this->container['postProcessState'];
    }

    /**
     * Sets postProcessState
     *
     * @param string $postProcessState Post Process State.
     *
     * @return $this
     */
    public function setPostProcessState($postProcessState)
    {
        $this->container['postProcessState'] = $postProcessState;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $project Project associated with this run.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ReleaseReference
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ReleaseReference $release Release Reference for the Test Run.
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets releaseEnvironmentUri
     *
     * @return string
     */
    public function getReleaseEnvironmentUri()
    {
        return $this->container['releaseEnvironmentUri'];
    }

    /**
     * Sets releaseEnvironmentUri
     *
     * @param string $releaseEnvironmentUri Release Environment Uri for TestRun.
     *
     * @return $this
     */
    public function setReleaseEnvironmentUri($releaseEnvironmentUri)
    {
        $this->container['releaseEnvironmentUri'] = $releaseEnvironmentUri;

        return $this;
    }

    /**
     * Gets releaseUri
     *
     * @return string
     */
    public function getReleaseUri()
    {
        return $this->container['releaseUri'];
    }

    /**
     * Sets releaseUri
     *
     * @param string $releaseUri Release Uri for TestRun.
     *
     * @return $this
     */
    public function setReleaseUri($releaseUri)
    {
        $this->container['releaseUri'] = $releaseUri;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets runStatistics
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunStatistic[]
     */
    public function getRunStatistics()
    {
        return $this->container['runStatistics'];
    }

    /**
     * Sets runStatistics
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunStatistic[] $runStatistics RunSummary by outcome.
     *
     * @return $this
     */
    public function setRunStatistics($runStatistics)
    {
        $this->container['runStatistics'] = $runStatistics;

        return $this;
    }

    /**
     * Gets startedDate
     *
     * @return \DateTime
     */
    public function getStartedDate()
    {
        return $this->container['startedDate'];
    }

    /**
     * Sets startedDate
     *
     * @param \DateTime $startedDate Start date time of the run.
     *
     * @return $this
     */
    public function setStartedDate($startedDate)
    {
        $this->container['startedDate'] = $startedDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets substate
     *
     * @return string
     */
    public function getSubstate()
    {
        return $this->container['substate'];
    }

    /**
     * Sets substate
     *
     * @param string $substate TestRun Substate.
     *
     * @return $this
     */
    public function setSubstate($substate)
    {
        $allowedValues = $this->getSubstateAllowableValues();
        if (!is_null($substate) && !in_array($substate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'substate', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['substate'] = $substate;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestTag[] $tags Tags attached with this test run.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets testEnvironment
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestEnvironment
     */
    public function getTestEnvironment()
    {
        return $this->container['testEnvironment'];
    }

    /**
     * Sets testEnvironment
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\TestEnvironment $testEnvironment Test environment associated with the run.
     *
     * @return $this
     */
    public function setTestEnvironment($testEnvironment)
    {
        $this->container['testEnvironment'] = $testEnvironment;

        return $this;
    }

    /**
     * Gets testMessageLogId
     *
     * @return int
     */
    public function getTestMessageLogId()
    {
        return $this->container['testMessageLogId'];
    }

    /**
     * Sets testMessageLogId
     *
     * @param int $testMessageLogId testMessageLogId
     *
     * @return $this
     */
    public function setTestMessageLogId($testMessageLogId)
    {
        $this->container['testMessageLogId'] = $testMessageLogId;

        return $this;
    }

    /**
     * Gets testSettings
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getTestSettings()
    {
        return $this->container['testSettings'];
    }

    /**
     * Sets testSettings
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ShallowReference $testSettings testSettings
     *
     * @return $this
     */
    public function setTestSettings($testSettings)
    {
        $this->container['testSettings'] = $testSettings;

        return $this;
    }

    /**
     * Gets totalTests
     *
     * @return int
     */
    public function getTotalTests()
    {
        return $this->container['totalTests'];
    }

    /**
     * Sets totalTests
     *
     * @param int $totalTests Total tests in the run
     *
     * @return $this
     */
    public function setTotalTests($totalTests)
    {
        $this->container['totalTests'] = $totalTests;

        return $this;
    }

    /**
     * Gets unanalyzedTests
     *
     * @return int
     */
    public function getUnanalyzedTests()
    {
        return $this->container['unanalyzedTests'];
    }

    /**
     * Sets unanalyzedTests
     *
     * @param int $unanalyzedTests Number of failed tests in the run.
     *
     * @return $this
     */
    public function setUnanalyzedTests($unanalyzedTests)
    {
        $this->container['unanalyzedTests'] = $unanalyzedTests;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url of the test run
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets webAccessUrl
     *
     * @return string
     */
    public function getWebAccessUrl()
    {
        return $this->container['webAccessUrl'];
    }

    /**
     * Sets webAccessUrl
     *
     * @param string $webAccessUrl Web Access Url for TestRun.
     *
     * @return $this
     */
    public function setWebAccessUrl($webAccessUrl)
    {
        $this->container['webAccessUrl'] = $webAccessUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


