<?php
/**
 * RunCreateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * RunCreateModel Class Doc Comment
 *
 * @category Class
 * @description Test run create details.
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RunCreateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RunCreateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automated' => 'bool',
        'build' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'buildDropLocation' => 'string',
        'buildFlavor' => 'string',
        'buildPlatform' => 'string',
        'buildReference' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\BuildConfiguration',
        'comment' => 'string',
        'completeDate' => 'string',
        'configurationIds' => 'int[]',
        'controller' => 'string',
        'customTestFields' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[]',
        'dtlAutEnvironment' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'dtlTestEnvironment' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'dueDate' => 'string',
        'environmentDetails' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails',
        'errorMessage' => 'string',
        'filter' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\RunFilter',
        'iteration' => 'string',
        'name' => 'string',
        'owner' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\IdentityRef',
        'pipelineReference' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\PipelineReference',
        'plan' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'pointIds' => 'int[]',
        'releaseEnvironmentUri' => 'string',
        'releaseReference' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ReleaseReference',
        'releaseUri' => 'string',
        'runSummary' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\RunSummaryModel[]',
        'runTimeout' => 'string',
        'sourceWorkflow' => 'string',
        'startDate' => 'string',
        'state' => 'string',
        'tags' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\TestTag[]',
        'testConfigurationsMapping' => 'string',
        'testEnvironmentId' => 'string',
        'testSettings' => '\FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automated' => null,
        'build' => null,
        'buildDropLocation' => null,
        'buildFlavor' => null,
        'buildPlatform' => null,
        'buildReference' => null,
        'comment' => null,
        'completeDate' => null,
        'configurationIds' => 'int32',
        'controller' => null,
        'customTestFields' => null,
        'dtlAutEnvironment' => null,
        'dtlTestEnvironment' => null,
        'dueDate' => null,
        'environmentDetails' => null,
        'errorMessage' => null,
        'filter' => null,
        'iteration' => null,
        'name' => null,
        'owner' => null,
        'pipelineReference' => null,
        'plan' => null,
        'pointIds' => 'int32',
        'releaseEnvironmentUri' => null,
        'releaseReference' => null,
        'releaseUri' => null,
        'runSummary' => null,
        'runTimeout' => 'TimeSpan',
        'sourceWorkflow' => null,
        'startDate' => null,
        'state' => null,
        'tags' => null,
        'testConfigurationsMapping' => null,
        'testEnvironmentId' => null,
        'testSettings' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automated' => 'automated',
        'build' => 'build',
        'buildDropLocation' => 'buildDropLocation',
        'buildFlavor' => 'buildFlavor',
        'buildPlatform' => 'buildPlatform',
        'buildReference' => 'buildReference',
        'comment' => 'comment',
        'completeDate' => 'completeDate',
        'configurationIds' => 'configurationIds',
        'controller' => 'controller',
        'customTestFields' => 'customTestFields',
        'dtlAutEnvironment' => 'dtlAutEnvironment',
        'dtlTestEnvironment' => 'dtlTestEnvironment',
        'dueDate' => 'dueDate',
        'environmentDetails' => 'environmentDetails',
        'errorMessage' => 'errorMessage',
        'filter' => 'filter',
        'iteration' => 'iteration',
        'name' => 'name',
        'owner' => 'owner',
        'pipelineReference' => 'pipelineReference',
        'plan' => 'plan',
        'pointIds' => 'pointIds',
        'releaseEnvironmentUri' => 'releaseEnvironmentUri',
        'releaseReference' => 'releaseReference',
        'releaseUri' => 'releaseUri',
        'runSummary' => 'runSummary',
        'runTimeout' => 'runTimeout',
        'sourceWorkflow' => 'sourceWorkflow',
        'startDate' => 'startDate',
        'state' => 'state',
        'tags' => 'tags',
        'testConfigurationsMapping' => 'testConfigurationsMapping',
        'testEnvironmentId' => 'testEnvironmentId',
        'testSettings' => 'testSettings',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automated' => 'setAutomated',
        'build' => 'setBuild',
        'buildDropLocation' => 'setBuildDropLocation',
        'buildFlavor' => 'setBuildFlavor',
        'buildPlatform' => 'setBuildPlatform',
        'buildReference' => 'setBuildReference',
        'comment' => 'setComment',
        'completeDate' => 'setCompleteDate',
        'configurationIds' => 'setConfigurationIds',
        'controller' => 'setController',
        'customTestFields' => 'setCustomTestFields',
        'dtlAutEnvironment' => 'setDtlAutEnvironment',
        'dtlTestEnvironment' => 'setDtlTestEnvironment',
        'dueDate' => 'setDueDate',
        'environmentDetails' => 'setEnvironmentDetails',
        'errorMessage' => 'setErrorMessage',
        'filter' => 'setFilter',
        'iteration' => 'setIteration',
        'name' => 'setName',
        'owner' => 'setOwner',
        'pipelineReference' => 'setPipelineReference',
        'plan' => 'setPlan',
        'pointIds' => 'setPointIds',
        'releaseEnvironmentUri' => 'setReleaseEnvironmentUri',
        'releaseReference' => 'setReleaseReference',
        'releaseUri' => 'setReleaseUri',
        'runSummary' => 'setRunSummary',
        'runTimeout' => 'setRunTimeout',
        'sourceWorkflow' => 'setSourceWorkflow',
        'startDate' => 'setStartDate',
        'state' => 'setState',
        'tags' => 'setTags',
        'testConfigurationsMapping' => 'setTestConfigurationsMapping',
        'testEnvironmentId' => 'setTestEnvironmentId',
        'testSettings' => 'setTestSettings',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automated' => 'getAutomated',
        'build' => 'getBuild',
        'buildDropLocation' => 'getBuildDropLocation',
        'buildFlavor' => 'getBuildFlavor',
        'buildPlatform' => 'getBuildPlatform',
        'buildReference' => 'getBuildReference',
        'comment' => 'getComment',
        'completeDate' => 'getCompleteDate',
        'configurationIds' => 'getConfigurationIds',
        'controller' => 'getController',
        'customTestFields' => 'getCustomTestFields',
        'dtlAutEnvironment' => 'getDtlAutEnvironment',
        'dtlTestEnvironment' => 'getDtlTestEnvironment',
        'dueDate' => 'getDueDate',
        'environmentDetails' => 'getEnvironmentDetails',
        'errorMessage' => 'getErrorMessage',
        'filter' => 'getFilter',
        'iteration' => 'getIteration',
        'name' => 'getName',
        'owner' => 'getOwner',
        'pipelineReference' => 'getPipelineReference',
        'plan' => 'getPlan',
        'pointIds' => 'getPointIds',
        'releaseEnvironmentUri' => 'getReleaseEnvironmentUri',
        'releaseReference' => 'getReleaseReference',
        'releaseUri' => 'getReleaseUri',
        'runSummary' => 'getRunSummary',
        'runTimeout' => 'getRunTimeout',
        'sourceWorkflow' => 'getSourceWorkflow',
        'startDate' => 'getStartDate',
        'state' => 'getState',
        'tags' => 'getTags',
        'testConfigurationsMapping' => 'getTestConfigurationsMapping',
        'testEnvironmentId' => 'getTestEnvironmentId',
        'testSettings' => 'getTestSettings',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automated'] = isset($data['automated']) ? $data['automated'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildDropLocation'] = isset($data['buildDropLocation']) ? $data['buildDropLocation'] : null;
        $this->container['buildFlavor'] = isset($data['buildFlavor']) ? $data['buildFlavor'] : null;
        $this->container['buildPlatform'] = isset($data['buildPlatform']) ? $data['buildPlatform'] : null;
        $this->container['buildReference'] = isset($data['buildReference']) ? $data['buildReference'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['completeDate'] = isset($data['completeDate']) ? $data['completeDate'] : null;
        $this->container['configurationIds'] = isset($data['configurationIds']) ? $data['configurationIds'] : null;
        $this->container['controller'] = isset($data['controller']) ? $data['controller'] : null;
        $this->container['customTestFields'] = isset($data['customTestFields']) ? $data['customTestFields'] : null;
        $this->container['dtlAutEnvironment'] = isset($data['dtlAutEnvironment']) ? $data['dtlAutEnvironment'] : null;
        $this->container['dtlTestEnvironment'] = isset($data['dtlTestEnvironment']) ? $data['dtlTestEnvironment'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['environmentDetails'] = isset($data['environmentDetails']) ? $data['environmentDetails'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['iteration'] = isset($data['iteration']) ? $data['iteration'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['pipelineReference'] = isset($data['pipelineReference']) ? $data['pipelineReference'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['pointIds'] = isset($data['pointIds']) ? $data['pointIds'] : null;
        $this->container['releaseEnvironmentUri'] = isset($data['releaseEnvironmentUri']) ? $data['releaseEnvironmentUri'] : null;
        $this->container['releaseReference'] = isset($data['releaseReference']) ? $data['releaseReference'] : null;
        $this->container['releaseUri'] = isset($data['releaseUri']) ? $data['releaseUri'] : null;
        $this->container['runSummary'] = isset($data['runSummary']) ? $data['runSummary'] : null;
        $this->container['runTimeout'] = isset($data['runTimeout']) ? $data['runTimeout'] : null;
        $this->container['sourceWorkflow'] = isset($data['sourceWorkflow']) ? $data['sourceWorkflow'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['testConfigurationsMapping'] = isset($data['testConfigurationsMapping']) ? $data['testConfigurationsMapping'] : null;
        $this->container['testEnvironmentId'] = isset($data['testEnvironmentId']) ? $data['testEnvironmentId'] : null;
        $this->container['testSettings'] = isset($data['testSettings']) ? $data['testSettings'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automated
     *
     * @return bool
     */
    public function getAutomated()
    {
        return $this->container['automated'];
    }

    /**
     * Sets automated
     *
     * @param bool $automated true if test run is automated, false otherwise. By default it will be false.
     *
     * @return $this
     */
    public function setAutomated($automated)
    {
        $this->container['automated'] = $automated;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $build An abstracted reference to the build that it belongs.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildDropLocation
     *
     * @return string
     */
    public function getBuildDropLocation()
    {
        return $this->container['buildDropLocation'];
    }

    /**
     * Sets buildDropLocation
     *
     * @param string $buildDropLocation Drop location of the build used for test run.
     *
     * @return $this
     */
    public function setBuildDropLocation($buildDropLocation)
    {
        $this->container['buildDropLocation'] = $buildDropLocation;

        return $this;
    }

    /**
     * Gets buildFlavor
     *
     * @return string
     */
    public function getBuildFlavor()
    {
        return $this->container['buildFlavor'];
    }

    /**
     * Sets buildFlavor
     *
     * @param string $buildFlavor Flavor of the build used for test run. (E.g: Release, Debug)
     *
     * @return $this
     */
    public function setBuildFlavor($buildFlavor)
    {
        $this->container['buildFlavor'] = $buildFlavor;

        return $this;
    }

    /**
     * Gets buildPlatform
     *
     * @return string
     */
    public function getBuildPlatform()
    {
        return $this->container['buildPlatform'];
    }

    /**
     * Sets buildPlatform
     *
     * @param string $buildPlatform Platform of the build used for test run. (E.g.: x86, amd64)
     *
     * @return $this
     */
    public function setBuildPlatform($buildPlatform)
    {
        $this->container['buildPlatform'] = $buildPlatform;

        return $this;
    }

    /**
     * Gets buildReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\BuildConfiguration
     */
    public function getBuildReference()
    {
        return $this->container['buildReference'];
    }

    /**
     * Sets buildReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\BuildConfiguration $buildReference BuildReference of the test run.
     *
     * @return $this
     */
    public function setBuildReference($buildReference)
    {
        $this->container['buildReference'] = $buildReference;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comments entered by those analyzing the run.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets completeDate
     *
     * @return string
     */
    public function getCompleteDate()
    {
        return $this->container['completeDate'];
    }

    /**
     * Sets completeDate
     *
     * @param string $completeDate Completed date time of the run.
     *
     * @return $this
     */
    public function setCompleteDate($completeDate)
    {
        $this->container['completeDate'] = $completeDate;

        return $this;
    }

    /**
     * Gets configurationIds
     *
     * @return int[]
     */
    public function getConfigurationIds()
    {
        return $this->container['configurationIds'];
    }

    /**
     * Sets configurationIds
     *
     * @param int[] $configurationIds IDs of the test configurations associated with the run.
     *
     * @return $this
     */
    public function setConfigurationIds($configurationIds)
    {
        $this->container['configurationIds'] = $configurationIds;

        return $this;
    }

    /**
     * Gets controller
     *
     * @return string
     */
    public function getController()
    {
        return $this->container['controller'];
    }

    /**
     * Sets controller
     *
     * @param string $controller Name of the test controller used for automated run.
     *
     * @return $this
     */
    public function setController($controller)
    {
        $this->container['controller'] = $controller;

        return $this;
    }

    /**
     * Gets customTestFields
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[]
     */
    public function getCustomTestFields()
    {
        return $this->container['customTestFields'];
    }

    /**
     * Sets customTestFields
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\CustomTestField[] $customTestFields Additional properties of test Run.
     *
     * @return $this
     */
    public function setCustomTestFields($customTestFields)
    {
        $this->container['customTestFields'] = $customTestFields;

        return $this;
    }

    /**
     * Gets dtlAutEnvironment
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getDtlAutEnvironment()
    {
        return $this->container['dtlAutEnvironment'];
    }

    /**
     * Sets dtlAutEnvironment
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $dtlAutEnvironment An abstracted reference to DtlAutEnvironment.
     *
     * @return $this
     */
    public function setDtlAutEnvironment($dtlAutEnvironment)
    {
        $this->container['dtlAutEnvironment'] = $dtlAutEnvironment;

        return $this;
    }

    /**
     * Gets dtlTestEnvironment
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getDtlTestEnvironment()
    {
        return $this->container['dtlTestEnvironment'];
    }

    /**
     * Sets dtlTestEnvironment
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $dtlTestEnvironment An abstracted reference to DtlTestEnvironment.
     *
     * @return $this
     */
    public function setDtlTestEnvironment($dtlTestEnvironment)
    {
        $this->container['dtlTestEnvironment'] = $dtlTestEnvironment;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param string $dueDate Due date and time for test run.
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets environmentDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails
     */
    public function getEnvironmentDetails()
    {
        return $this->container['environmentDetails'];
    }

    /**
     * Sets environmentDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\DtlEnvironmentDetails $environmentDetails environmentDetails
     *
     * @return $this
     */
    public function setEnvironmentDetails($environmentDetails)
    {
        $this->container['environmentDetails'] = $environmentDetails;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Error message associated with the run.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\RunFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\RunFilter $filter Filter used for discovering the Run.
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return string
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param string $iteration The iteration in which to create the run. Root iteration of the team project will be default
     *
     * @return $this
     */
    public function setIteration($iteration)
    {
        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the test run.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\IdentityRef
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\IdentityRef $owner Display name of the owner of the run.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets pipelineReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\PipelineReference
     */
    public function getPipelineReference()
    {
        return $this->container['pipelineReference'];
    }

    /**
     * Sets pipelineReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\PipelineReference $pipelineReference Reference of the pipeline to which this test run belongs. PipelineReference.PipelineId should be equal to RunCreateModel.Build.Id
     *
     * @return $this
     */
    public function setPipelineReference($pipelineReference)
    {
        $this->container['pipelineReference'] = $pipelineReference;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $plan An abstracted reference to the plan that it belongs.
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets pointIds
     *
     * @return int[]
     */
    public function getPointIds()
    {
        return $this->container['pointIds'];
    }

    /**
     * Sets pointIds
     *
     * @param int[] $pointIds IDs of the test points to use in the run.
     *
     * @return $this
     */
    public function setPointIds($pointIds)
    {
        $this->container['pointIds'] = $pointIds;

        return $this;
    }

    /**
     * Gets releaseEnvironmentUri
     *
     * @return string
     */
    public function getReleaseEnvironmentUri()
    {
        return $this->container['releaseEnvironmentUri'];
    }

    /**
     * Sets releaseEnvironmentUri
     *
     * @param string $releaseEnvironmentUri URI of release environment associated with the run.
     *
     * @return $this
     */
    public function setReleaseEnvironmentUri($releaseEnvironmentUri)
    {
        $this->container['releaseEnvironmentUri'] = $releaseEnvironmentUri;

        return $this;
    }

    /**
     * Gets releaseReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ReleaseReference
     */
    public function getReleaseReference()
    {
        return $this->container['releaseReference'];
    }

    /**
     * Sets releaseReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ReleaseReference $releaseReference Reference to release associated with test run.
     *
     * @return $this
     */
    public function setReleaseReference($releaseReference)
    {
        $this->container['releaseReference'] = $releaseReference;

        return $this;
    }

    /**
     * Gets releaseUri
     *
     * @return string
     */
    public function getReleaseUri()
    {
        return $this->container['releaseUri'];
    }

    /**
     * Sets releaseUri
     *
     * @param string $releaseUri URI of release associated with the run.
     *
     * @return $this
     */
    public function setReleaseUri($releaseUri)
    {
        $this->container['releaseUri'] = $releaseUri;

        return $this;
    }

    /**
     * Gets runSummary
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\RunSummaryModel[]
     */
    public function getRunSummary()
    {
        return $this->container['runSummary'];
    }

    /**
     * Sets runSummary
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\RunSummaryModel[] $runSummary Run summary for run Type = NoConfigRun.
     *
     * @return $this
     */
    public function setRunSummary($runSummary)
    {
        $this->container['runSummary'] = $runSummary;

        return $this;
    }

    /**
     * Gets runTimeout
     *
     * @return string
     */
    public function getRunTimeout()
    {
        return $this->container['runTimeout'];
    }

    /**
     * Sets runTimeout
     *
     * @param string $runTimeout Timespan till the run times out.
     *
     * @return $this
     */
    public function setRunTimeout($runTimeout)
    {
        $this->container['runTimeout'] = $runTimeout;

        return $this;
    }

    /**
     * Gets sourceWorkflow
     *
     * @return string
     */
    public function getSourceWorkflow()
    {
        return $this->container['sourceWorkflow'];
    }

    /**
     * Sets sourceWorkflow
     *
     * @param string $sourceWorkflow SourceWorkFlow(CI/CD) of the test run.
     *
     * @return $this
     */
    public function setSourceWorkflow($sourceWorkflow)
    {
        $this->container['sourceWorkflow'] = $sourceWorkflow;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate Start date time of the run.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\TestTag[] $tags Tags to attach with the test run, maximum of 5 tags can be added to run.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets testConfigurationsMapping
     *
     * @return string
     */
    public function getTestConfigurationsMapping()
    {
        return $this->container['testConfigurationsMapping'];
    }

    /**
     * Sets testConfigurationsMapping
     *
     * @param string $testConfigurationsMapping TestConfigurationMapping of the test run.
     *
     * @return $this
     */
    public function setTestConfigurationsMapping($testConfigurationsMapping)
    {
        $this->container['testConfigurationsMapping'] = $testConfigurationsMapping;

        return $this;
    }

    /**
     * Gets testEnvironmentId
     *
     * @return string
     */
    public function getTestEnvironmentId()
    {
        return $this->container['testEnvironmentId'];
    }

    /**
     * Sets testEnvironmentId
     *
     * @param string $testEnvironmentId ID of the test environment associated with the run.
     *
     * @return $this
     */
    public function setTestEnvironmentId($testEnvironmentId)
    {
        $this->container['testEnvironmentId'] = $testEnvironmentId;

        return $this;
    }

    /**
     * Gets testSettings
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference
     */
    public function getTestSettings()
    {
        return $this->container['testSettings'];
    }

    /**
     * Sets testSettings
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestResults\Model\ShallowReference $testSettings An abstracted reference to the test settings resource.
     *
     * @return $this
     */
    public function setTestSettings($testSettings)
    {
        $this->container['testSettings'] = $testSettings;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the run(RunType) Valid Values : (Unspecified, Normal, Blocking, Web, MtrRunInitiatedFromWeb, RunWithDtlEnv, NoConfigRun)
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


