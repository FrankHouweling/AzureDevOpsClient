<?php
/**
 * PipelineTestMetrics
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * PipelineTestMetrics Class Doc Comment
 *
 * @category Class
 * @description Test summary of a pipeline instance.
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PipelineTestMetrics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PipelineTestMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currentContext' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference',
        'resultsAnalysis' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultsAnalysis',
        'resultSummary' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultSummary',
        'runSummary' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunSummary',
        'summaryAtChild' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineTestMetrics[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currentContext' => null,
        'resultsAnalysis' => null,
        'resultSummary' => null,
        'runSummary' => null,
        'summaryAtChild' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currentContext' => 'currentContext',
        'resultsAnalysis' => 'resultsAnalysis',
        'resultSummary' => 'resultSummary',
        'runSummary' => 'runSummary',
        'summaryAtChild' => 'summaryAtChild'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currentContext' => 'setCurrentContext',
        'resultsAnalysis' => 'setResultsAnalysis',
        'resultSummary' => 'setResultSummary',
        'runSummary' => 'setRunSummary',
        'summaryAtChild' => 'setSummaryAtChild'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currentContext' => 'getCurrentContext',
        'resultsAnalysis' => 'getResultsAnalysis',
        'resultSummary' => 'getResultSummary',
        'runSummary' => 'getRunSummary',
        'summaryAtChild' => 'getSummaryAtChild'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currentContext'] = isset($data['currentContext']) ? $data['currentContext'] : null;
        $this->container['resultsAnalysis'] = isset($data['resultsAnalysis']) ? $data['resultsAnalysis'] : null;
        $this->container['resultSummary'] = isset($data['resultSummary']) ? $data['resultSummary'] : null;
        $this->container['runSummary'] = isset($data['runSummary']) ? $data['runSummary'] : null;
        $this->container['summaryAtChild'] = isset($data['summaryAtChild']) ? $data['summaryAtChild'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currentContext
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference
     */
    public function getCurrentContext()
    {
        return $this->container['currentContext'];
    }

    /**
     * Sets currentContext
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineReference $currentContext Reference of Pipeline instance for which test summary is calculated.
     *
     * @return $this
     */
    public function setCurrentContext($currentContext)
    {
        $this->container['currentContext'] = $currentContext;

        return $this;
    }

    /**
     * Gets resultsAnalysis
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultsAnalysis
     */
    public function getResultsAnalysis()
    {
        return $this->container['resultsAnalysis'];
    }

    /**
     * Sets resultsAnalysis
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultsAnalysis $resultsAnalysis This is the return value for metric ResultsAnalysis Results insights which include failure analysis, increase/decrease in results count analysis.
     *
     * @return $this
     */
    public function setResultsAnalysis($resultsAnalysis)
    {
        $this->container['resultsAnalysis'] = $resultsAnalysis;

        return $this;
    }

    /**
     * Gets resultSummary
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultSummary
     */
    public function getResultSummary()
    {
        return $this->container['resultSummary'];
    }

    /**
     * Sets resultSummary
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\ResultSummary $resultSummary This is the return value for metric ResultSummary Results summary based on results outcome.
     *
     * @return $this
     */
    public function setResultSummary($resultSummary)
    {
        $this->container['resultSummary'] = $resultSummary;

        return $this;
    }

    /**
     * Gets runSummary
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunSummary
     */
    public function getRunSummary()
    {
        return $this->container['runSummary'];
    }

    /**
     * Sets runSummary
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\RunSummary $runSummary This is the return value for metric RunSummary Run summary.
     *
     * @return $this
     */
    public function setRunSummary($runSummary)
    {
        $this->container['runSummary'] = $runSummary;

        return $this;
    }

    /**
     * Gets summaryAtChild
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineTestMetrics[]
     */
    public function getSummaryAtChild()
    {
        return $this->container['summaryAtChild'];
    }

    /**
     * Sets summaryAtChild
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\PipelineTestMetrics[] $summaryAtChild Summary at child node.
     *
     * @return $this
     */
    public function setSummaryAtChild($summaryAtChild)
    {
        $this->container['summaryAtChild'] = $summaryAtChild;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


