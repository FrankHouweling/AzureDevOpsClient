<?php
/**
 * FlakySettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * FlakySettings Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlakySettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlakySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'flakyDetection' => '\AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\FlakyDetection',
        'flakyInSummaryReport' => 'bool',
        'isFlakyBugCreated' => 'bool',
        'manualMarkUnmarkFlaky' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'flakyDetection' => null,
        'flakyInSummaryReport' => null,
        'isFlakyBugCreated' => null,
        'manualMarkUnmarkFlaky' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flakyDetection' => 'flakyDetection',
        'flakyInSummaryReport' => 'flakyInSummaryReport',
        'isFlakyBugCreated' => 'isFlakyBugCreated',
        'manualMarkUnmarkFlaky' => 'manualMarkUnmarkFlaky'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flakyDetection' => 'setFlakyDetection',
        'flakyInSummaryReport' => 'setFlakyInSummaryReport',
        'isFlakyBugCreated' => 'setIsFlakyBugCreated',
        'manualMarkUnmarkFlaky' => 'setManualMarkUnmarkFlaky'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flakyDetection' => 'getFlakyDetection',
        'flakyInSummaryReport' => 'getFlakyInSummaryReport',
        'isFlakyBugCreated' => 'getIsFlakyBugCreated',
        'manualMarkUnmarkFlaky' => 'getManualMarkUnmarkFlaky'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flakyDetection'] = isset($data['flakyDetection']) ? $data['flakyDetection'] : null;
        $this->container['flakyInSummaryReport'] = isset($data['flakyInSummaryReport']) ? $data['flakyInSummaryReport'] : null;
        $this->container['isFlakyBugCreated'] = isset($data['isFlakyBugCreated']) ? $data['isFlakyBugCreated'] : null;
        $this->container['manualMarkUnmarkFlaky'] = isset($data['manualMarkUnmarkFlaky']) ? $data['manualMarkUnmarkFlaky'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flakyDetection
     *
     * @return \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\FlakyDetection
     */
    public function getFlakyDetection()
    {
        return $this->container['flakyDetection'];
    }

    /**
     * Sets flakyDetection
     *
     * @param \AzureDevOpsClient\TestResults\AzureDevOpsClient\TestResults\Model\FlakyDetection $flakyDetection FlakyDetection defines types of detection.
     *
     * @return $this
     */
    public function setFlakyDetection($flakyDetection)
    {
        $this->container['flakyDetection'] = $flakyDetection;

        return $this;
    }

    /**
     * Gets flakyInSummaryReport
     *
     * @return bool
     */
    public function getFlakyInSummaryReport()
    {
        return $this->container['flakyInSummaryReport'];
    }

    /**
     * Sets flakyInSummaryReport
     *
     * @param bool $flakyInSummaryReport FlakyInSummaryReport defines flaky data should show in summary report or not.
     *
     * @return $this
     */
    public function setFlakyInSummaryReport($flakyInSummaryReport)
    {
        $this->container['flakyInSummaryReport'] = $flakyInSummaryReport;

        return $this;
    }

    /**
     * Gets isFlakyBugCreated
     *
     * @return bool
     */
    public function getIsFlakyBugCreated()
    {
        return $this->container['isFlakyBugCreated'];
    }

    /**
     * Sets isFlakyBugCreated
     *
     * @param bool $isFlakyBugCreated IsFlakyBugCreated defines if there is any bug that has been created with flaky testresult.
     *
     * @return $this
     */
    public function setIsFlakyBugCreated($isFlakyBugCreated)
    {
        $this->container['isFlakyBugCreated'] = $isFlakyBugCreated;

        return $this;
    }

    /**
     * Gets manualMarkUnmarkFlaky
     *
     * @return bool
     */
    public function getManualMarkUnmarkFlaky()
    {
        return $this->container['manualMarkUnmarkFlaky'];
    }

    /**
     * Sets manualMarkUnmarkFlaky
     *
     * @param bool $manualMarkUnmarkFlaky ManualMarkUnmarkFlaky defines manual marking unmarking of flaky testcase.
     *
     * @return $this
     */
    public function setManualMarkUnmarkFlaky($manualMarkUnmarkFlaky)
    {
        $this->container['manualMarkUnmarkFlaky'] = $manualMarkUnmarkFlaky;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


