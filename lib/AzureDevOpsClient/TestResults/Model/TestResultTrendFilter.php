<?php
/**
 * TestResultTrendFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * TestResultTrendFilter Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestResultTrendFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestResultTrendFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branchNames' => 'string[]',
        'buildCount' => 'int',
        'definitionIds' => 'int[]',
        'envDefinitionIds' => 'int[]',
        'maxCompleteDate' => '\DateTime',
        'publishContext' => 'string',
        'testRunTitles' => 'string[]',
        'trendDays' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branchNames' => null,
        'buildCount' => 'int32',
        'definitionIds' => 'int32',
        'envDefinitionIds' => 'int32',
        'maxCompleteDate' => 'date-time',
        'publishContext' => null,
        'testRunTitles' => null,
        'trendDays' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branchNames' => 'branchNames',
        'buildCount' => 'buildCount',
        'definitionIds' => 'definitionIds',
        'envDefinitionIds' => 'envDefinitionIds',
        'maxCompleteDate' => 'maxCompleteDate',
        'publishContext' => 'publishContext',
        'testRunTitles' => 'testRunTitles',
        'trendDays' => 'trendDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branchNames' => 'setBranchNames',
        'buildCount' => 'setBuildCount',
        'definitionIds' => 'setDefinitionIds',
        'envDefinitionIds' => 'setEnvDefinitionIds',
        'maxCompleteDate' => 'setMaxCompleteDate',
        'publishContext' => 'setPublishContext',
        'testRunTitles' => 'setTestRunTitles',
        'trendDays' => 'setTrendDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branchNames' => 'getBranchNames',
        'buildCount' => 'getBuildCount',
        'definitionIds' => 'getDefinitionIds',
        'envDefinitionIds' => 'getEnvDefinitionIds',
        'maxCompleteDate' => 'getMaxCompleteDate',
        'publishContext' => 'getPublishContext',
        'testRunTitles' => 'getTestRunTitles',
        'trendDays' => 'getTrendDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branchNames'] = isset($data['branchNames']) ? $data['branchNames'] : null;
        $this->container['buildCount'] = isset($data['buildCount']) ? $data['buildCount'] : null;
        $this->container['definitionIds'] = isset($data['definitionIds']) ? $data['definitionIds'] : null;
        $this->container['envDefinitionIds'] = isset($data['envDefinitionIds']) ? $data['envDefinitionIds'] : null;
        $this->container['maxCompleteDate'] = isset($data['maxCompleteDate']) ? $data['maxCompleteDate'] : null;
        $this->container['publishContext'] = isset($data['publishContext']) ? $data['publishContext'] : null;
        $this->container['testRunTitles'] = isset($data['testRunTitles']) ? $data['testRunTitles'] : null;
        $this->container['trendDays'] = isset($data['trendDays']) ? $data['trendDays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branchNames
     *
     * @return string[]
     */
    public function getBranchNames()
    {
        return $this->container['branchNames'];
    }

    /**
     * Sets branchNames
     *
     * @param string[] $branchNames branchNames
     *
     * @return $this
     */
    public function setBranchNames($branchNames)
    {
        $this->container['branchNames'] = $branchNames;

        return $this;
    }

    /**
     * Gets buildCount
     *
     * @return int
     */
    public function getBuildCount()
    {
        return $this->container['buildCount'];
    }

    /**
     * Sets buildCount
     *
     * @param int $buildCount buildCount
     *
     * @return $this
     */
    public function setBuildCount($buildCount)
    {
        $this->container['buildCount'] = $buildCount;

        return $this;
    }

    /**
     * Gets definitionIds
     *
     * @return int[]
     */
    public function getDefinitionIds()
    {
        return $this->container['definitionIds'];
    }

    /**
     * Sets definitionIds
     *
     * @param int[] $definitionIds definitionIds
     *
     * @return $this
     */
    public function setDefinitionIds($definitionIds)
    {
        $this->container['definitionIds'] = $definitionIds;

        return $this;
    }

    /**
     * Gets envDefinitionIds
     *
     * @return int[]
     */
    public function getEnvDefinitionIds()
    {
        return $this->container['envDefinitionIds'];
    }

    /**
     * Sets envDefinitionIds
     *
     * @param int[] $envDefinitionIds envDefinitionIds
     *
     * @return $this
     */
    public function setEnvDefinitionIds($envDefinitionIds)
    {
        $this->container['envDefinitionIds'] = $envDefinitionIds;

        return $this;
    }

    /**
     * Gets maxCompleteDate
     *
     * @return \DateTime
     */
    public function getMaxCompleteDate()
    {
        return $this->container['maxCompleteDate'];
    }

    /**
     * Sets maxCompleteDate
     *
     * @param \DateTime $maxCompleteDate maxCompleteDate
     *
     * @return $this
     */
    public function setMaxCompleteDate($maxCompleteDate)
    {
        $this->container['maxCompleteDate'] = $maxCompleteDate;

        return $this;
    }

    /**
     * Gets publishContext
     *
     * @return string
     */
    public function getPublishContext()
    {
        return $this->container['publishContext'];
    }

    /**
     * Sets publishContext
     *
     * @param string $publishContext publishContext
     *
     * @return $this
     */
    public function setPublishContext($publishContext)
    {
        $this->container['publishContext'] = $publishContext;

        return $this;
    }

    /**
     * Gets testRunTitles
     *
     * @return string[]
     */
    public function getTestRunTitles()
    {
        return $this->container['testRunTitles'];
    }

    /**
     * Sets testRunTitles
     *
     * @param string[] $testRunTitles testRunTitles
     *
     * @return $this
     */
    public function setTestRunTitles($testRunTitles)
    {
        $this->container['testRunTitles'] = $testRunTitles;

        return $this;
    }

    /**
     * Gets trendDays
     *
     * @return int
     */
    public function getTrendDays()
    {
        return $this->container['trendDays'];
    }

    /**
     * Sets trendDays
     *
     * @param int $trendDays trendDays
     *
     * @return $this
     */
    public function setTrendDays($trendDays)
    {
        $this->container['trendDays'] = $trendDays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


