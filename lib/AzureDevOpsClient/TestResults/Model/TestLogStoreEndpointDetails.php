<?php
/**
 * TestLogStoreEndpointDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestResults
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestResults\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestResults\ObjectSerializer;

/**
 * TestLogStoreEndpointDetails Class Doc Comment
 *
 * @category Class
 * @description Represents Test Log store endpoint details.
 * @package  FrankHouweling\AzureDevOpsClient\TestResults
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestLogStoreEndpointDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestLogStoreEndpointDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endpointSASUri' => 'string',
        'endpointType' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endpointSASUri' => null,
        'endpointType' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpointSASUri' => 'endpointSASUri',
        'endpointType' => 'endpointType',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpointSASUri' => 'setEndpointSASUri',
        'endpointType' => 'setEndpointType',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpointSASUri' => 'getEndpointSASUri',
        'endpointType' => 'getEndpointType',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENDPOINT_TYPE_ROOT = 'root';
    const ENDPOINT_TYPE_FILE = 'file';
    const STATUS_SUCCESS = 'success';
    const STATUS_FAILED = 'failed';
    const STATUS_FILE_ALREADY_EXISTS = 'fileAlreadyExists';
    const STATUS_INVALID_INPUT = 'invalidInput';
    const STATUS_INVALID_FILE_NAME = 'invalidFileName';
    const STATUS_INVALID_CONTAINER = 'invalidContainer';
    const STATUS_TRANSFER_FAILED = 'transferFailed';
    const STATUS_FEATURE_DISABLED = 'featureDisabled';
    const STATUS_BUILD_DOES_NOT_EXIST = 'buildDoesNotExist';
    const STATUS_RUN_DOES_NOT_EXIST = 'runDoesNotExist';
    const STATUS_CONTAINER_NOT_CREATED = 'containerNotCreated';
    const STATUS_API_NOT_SUPPORTED = 'apiNotSupported';
    const STATUS_FILE_SIZE_EXCEEDS = 'fileSizeExceeds';
    const STATUS_CONTAINER_NOT_FOUND = 'containerNotFound';
    const STATUS_FILE_NOT_FOUND = 'fileNotFound';
    const STATUS_DIRECTORY_NOT_FOUND = 'directoryNotFound';
    const STATUS_STORAGE_CAPACITY_EXCEEDED = 'storageCapacityExceeded';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndpointTypeAllowableValues()
    {
        return [
            self::ENDPOINT_TYPE_ROOT,
            self::ENDPOINT_TYPE_FILE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCESS,
            self::STATUS_FAILED,
            self::STATUS_FILE_ALREADY_EXISTS,
            self::STATUS_INVALID_INPUT,
            self::STATUS_INVALID_FILE_NAME,
            self::STATUS_INVALID_CONTAINER,
            self::STATUS_TRANSFER_FAILED,
            self::STATUS_FEATURE_DISABLED,
            self::STATUS_BUILD_DOES_NOT_EXIST,
            self::STATUS_RUN_DOES_NOT_EXIST,
            self::STATUS_CONTAINER_NOT_CREATED,
            self::STATUS_API_NOT_SUPPORTED,
            self::STATUS_FILE_SIZE_EXCEEDS,
            self::STATUS_CONTAINER_NOT_FOUND,
            self::STATUS_FILE_NOT_FOUND,
            self::STATUS_DIRECTORY_NOT_FOUND,
            self::STATUS_STORAGE_CAPACITY_EXCEEDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endpointSASUri'] = isset($data['endpointSASUri']) ? $data['endpointSASUri'] : null;
        $this->container['endpointType'] = isset($data['endpointType']) ? $data['endpointType'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!is_null($this->container['endpointType']) && !in_array($this->container['endpointType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'endpointType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpointSASUri
     *
     * @return string
     */
    public function getEndpointSASUri()
    {
        return $this->container['endpointSASUri'];
    }

    /**
     * Sets endpointSASUri
     *
     * @param string $endpointSASUri Test log store connection Uri.
     *
     * @return $this
     */
    public function setEndpointSASUri($endpointSASUri)
    {
        $this->container['endpointSASUri'] = $endpointSASUri;

        return $this;
    }

    /**
     * Gets endpointType
     *
     * @return string
     */
    public function getEndpointType()
    {
        return $this->container['endpointType'];
    }

    /**
     * Sets endpointType
     *
     * @param string $endpointType Test log store endpoint type.
     *
     * @return $this
     */
    public function setEndpointType($endpointType)
    {
        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!is_null($endpointType) && !in_array($endpointType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'endpointType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['endpointType'] = $endpointType;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Test log store status code
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


