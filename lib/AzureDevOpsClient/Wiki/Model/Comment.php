<?php
/**
 * Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wiki
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Wiki\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Wiki\ObjectSerializer;

/**
 * Comment Class Doc Comment
 *
 * @category Class
 * @description Comment on an artifact like Work Item or Wiki, etc.
 * @package  FrankHouweling\AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Comment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Comment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'artifactId' => 'string',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef',
        'createdDate' => '\DateTime',
        'id' => 'int',
        'isDeleted' => 'bool',
        'mentions' => '\FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentMention[]',
        'modifiedBy' => '\FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef',
        'modifiedDate' => '\DateTime',
        'parentId' => 'int',
        'reactions' => '\FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentReaction[]',
        'renderedText' => 'string',
        'replies' => '\FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentList',
        'state' => 'string',
        'text' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'artifactId' => null,
        'createdBy' => null,
        'createdDate' => 'date-time',
        'id' => 'int32',
        'isDeleted' => null,
        'mentions' => null,
        'modifiedBy' => null,
        'modifiedDate' => 'date-time',
        'parentId' => 'int32',
        'reactions' => null,
        'renderedText' => null,
        'replies' => null,
        'state' => null,
        'text' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'artifactId' => 'artifactId',
        'createdBy' => 'createdBy',
        'createdDate' => 'createdDate',
        'id' => 'id',
        'isDeleted' => 'isDeleted',
        'mentions' => 'mentions',
        'modifiedBy' => 'modifiedBy',
        'modifiedDate' => 'modifiedDate',
        'parentId' => 'parentId',
        'reactions' => 'reactions',
        'renderedText' => 'renderedText',
        'replies' => 'replies',
        'state' => 'state',
        'text' => 'text',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'artifactId' => 'setArtifactId',
        'createdBy' => 'setCreatedBy',
        'createdDate' => 'setCreatedDate',
        'id' => 'setId',
        'isDeleted' => 'setIsDeleted',
        'mentions' => 'setMentions',
        'modifiedBy' => 'setModifiedBy',
        'modifiedDate' => 'setModifiedDate',
        'parentId' => 'setParentId',
        'reactions' => 'setReactions',
        'renderedText' => 'setRenderedText',
        'replies' => 'setReplies',
        'state' => 'setState',
        'text' => 'setText',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'artifactId' => 'getArtifactId',
        'createdBy' => 'getCreatedBy',
        'createdDate' => 'getCreatedDate',
        'id' => 'getId',
        'isDeleted' => 'getIsDeleted',
        'mentions' => 'getMentions',
        'modifiedBy' => 'getModifiedBy',
        'modifiedDate' => 'getModifiedDate',
        'parentId' => 'getParentId',
        'reactions' => 'getReactions',
        'renderedText' => 'getRenderedText',
        'replies' => 'getReplies',
        'state' => 'getState',
        'text' => 'getText',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_RESOLVED = 'resolved';
    const STATE_CLOSED = 'closed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_RESOLVED,
            self::STATE_CLOSED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['artifactId'] = isset($data['artifactId']) ? $data['artifactId'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['mentions'] = isset($data['mentions']) ? $data['mentions'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['modifiedDate'] = isset($data['modifiedDate']) ? $data['modifiedDate'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['reactions'] = isset($data['reactions']) ? $data['reactions'] : null;
        $this->container['renderedText'] = isset($data['renderedText']) ? $data['renderedText'] : null;
        $this->container['replies'] = isset($data['replies']) ? $data['replies'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets artifactId
     *
     * @return string
     */
    public function getArtifactId()
    {
        return $this->container['artifactId'];
    }

    /**
     * Sets artifactId
     *
     * @param string $artifactId The id of the artifact this comment belongs to
     *
     * @return $this
     */
    public function setArtifactId($artifactId)
    {
        $this->container['artifactId'] = $artifactId;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef $createdBy IdentityRef of the creator of the comment.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate The creation date of the comment.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id assigned to the comment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted Indicates if the comment has been deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentMention[]
     */
    public function getMentions()
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentMention[] $mentions The mentions of the comment.
     *
     * @return $this
     */
    public function setMentions($mentions)
    {
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wiki\Model\IdentityRef $modifiedBy IdentityRef of the user who last modified the comment.
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime $modifiedDate The last modification date of the comment.
     *
     * @return $this
     */
    public function setModifiedDate($modifiedDate)
    {
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId The comment id of the parent comment, if any
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentReaction[]
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentReaction[] $reactions The reactions on the comment.
     *
     * @return $this
     */
    public function setReactions($reactions)
    {
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets renderedText
     *
     * @return string
     */
    public function getRenderedText()
    {
        return $this->container['renderedText'];
    }

    /**
     * Sets renderedText
     *
     * @param string $renderedText The rendered text of the comment
     *
     * @return $this
     */
    public function setRenderedText($renderedText)
    {
        $this->container['renderedText'] = $renderedText;

        return $this;
    }

    /**
     * Gets replies
     *
     * @return \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentList
     */
    public function getReplies()
    {
        return $this->container['replies'];
    }

    /**
     * Sets replies
     *
     * @param \FrankHouweling\AzureDevOpsClient\Wiki\Model\CommentList $replies Replies for this comment
     *
     * @return $this
     */
    public function setReplies($replies)
    {
        $this->container['replies'] = $replies;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Indicates the current state of the comment
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The plaintext/markdown version of the comment
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version The current version of the comment
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


