<?php
/**
 * WikiPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wiki
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Wiki\ObjectSerializer;

/**
 * WikiPage Class Doc Comment
 *
 * @category Class
 * @description Defines a page in a wiki.
 * @package  AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WikiPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WikiPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content' => 'string',
        'gitItemPath' => 'string',
        'id' => 'int',
        'isNonConformant' => 'bool',
        'isParentPage' => 'bool',
        'order' => 'int',
        'path' => 'string',
        'remoteUrl' => 'string',
        'subPages' => '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage[]',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content' => null,
        'gitItemPath' => null,
        'id' => 'int32',
        'isNonConformant' => null,
        'isParentPage' => null,
        'order' => 'int32',
        'path' => null,
        'remoteUrl' => null,
        'subPages' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'gitItemPath' => 'gitItemPath',
        'id' => 'id',
        'isNonConformant' => 'isNonConformant',
        'isParentPage' => 'isParentPage',
        'order' => 'order',
        'path' => 'path',
        'remoteUrl' => 'remoteUrl',
        'subPages' => 'subPages',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'gitItemPath' => 'setGitItemPath',
        'id' => 'setId',
        'isNonConformant' => 'setIsNonConformant',
        'isParentPage' => 'setIsParentPage',
        'order' => 'setOrder',
        'path' => 'setPath',
        'remoteUrl' => 'setRemoteUrl',
        'subPages' => 'setSubPages',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'gitItemPath' => 'getGitItemPath',
        'id' => 'getId',
        'isNonConformant' => 'getIsNonConformant',
        'isParentPage' => 'getIsParentPage',
        'order' => 'getOrder',
        'path' => 'getPath',
        'remoteUrl' => 'getRemoteUrl',
        'subPages' => 'getSubPages',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['gitItemPath'] = isset($data['gitItemPath']) ? $data['gitItemPath'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isNonConformant'] = isset($data['isNonConformant']) ? $data['isNonConformant'] : null;
        $this->container['isParentPage'] = isset($data['isParentPage']) ? $data['isParentPage'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['remoteUrl'] = isset($data['remoteUrl']) ? $data['remoteUrl'] : null;
        $this->container['subPages'] = isset($data['subPages']) ? $data['subPages'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Content of the wiki page.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets gitItemPath
     *
     * @return string
     */
    public function getGitItemPath()
    {
        return $this->container['gitItemPath'];
    }

    /**
     * Sets gitItemPath
     *
     * @param string $gitItemPath Path of the git item corresponding to the wiki page stored in the backing Git repository.
     *
     * @return $this
     */
    public function setGitItemPath($gitItemPath)
    {
        $this->container['gitItemPath'] = $gitItemPath;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id When present, permanent identifier for the wiki page
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isNonConformant
     *
     * @return bool
     */
    public function getIsNonConformant()
    {
        return $this->container['isNonConformant'];
    }

    /**
     * Sets isNonConformant
     *
     * @param bool $isNonConformant True if a page is non-conforming, i.e. 1) if the name doesn't match page naming standards. 2) if the page does not have a valid entry in the appropriate order file.
     *
     * @return $this
     */
    public function setIsNonConformant($isNonConformant)
    {
        $this->container['isNonConformant'] = $isNonConformant;

        return $this;
    }

    /**
     * Gets isParentPage
     *
     * @return bool
     */
    public function getIsParentPage()
    {
        return $this->container['isParentPage'];
    }

    /**
     * Sets isParentPage
     *
     * @param bool $isParentPage True if this page has subpages under its path.
     *
     * @return $this
     */
    public function setIsParentPage($isParentPage)
    {
        $this->container['isParentPage'] = $isParentPage;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order Order of the wiki page, relative to other pages in the same hierarchy level.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Path of the wiki page.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets remoteUrl
     *
     * @return string
     */
    public function getRemoteUrl()
    {
        return $this->container['remoteUrl'];
    }

    /**
     * Sets remoteUrl
     *
     * @param string $remoteUrl Remote web url to the wiki page.
     *
     * @return $this
     */
    public function setRemoteUrl($remoteUrl)
    {
        $this->container['remoteUrl'] = $remoteUrl;

        return $this;
    }

    /**
     * Gets subPages
     *
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage[]
     */
    public function getSubPages()
    {
        return $this->container['subPages'];
    }

    /**
     * Sets subPages
     *
     * @param \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage[] $subPages List of subpages of the current page.
     *
     * @return $this
     */
    public function setSubPages($subPages)
    {
        $this->container['subPages'] = $subPages;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url REST url for this wiki page.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


