<?php
/**
 * PagesApi
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wiki
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AzureDevOpsClient\Wiki\ApiException;
use AzureDevOpsClient\Wiki\Configuration;
use AzureDevOpsClient\Wiki\HeaderSelector;
use AzureDevOpsClient\Wiki\ObjectSerializer;

/**
 * PagesApi Class Doc Comment
 *
 * @category Class
 * @package  AzureDevOpsClient\Wiki
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pagesCreateOrUpdate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki create or update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesCreateOrUpdate($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        list($response) = $this->pagesCreateOrUpdateWithHttpInfo($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);
        return $response;
    }

    /**
     * Operation pagesCreateOrUpdateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki create or update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesCreateOrUpdateWithHttpInfo($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesCreateOrUpdateRequest($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesCreateOrUpdateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki create or update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesCreateOrUpdateAsync($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        return $this->pagesCreateOrUpdateAsyncWithHttpInfo($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesCreateOrUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki create or update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesCreateOrUpdateAsyncWithHttpInfo($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesCreateOrUpdateRequest($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesCreateOrUpdate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki create or update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesCreateOrUpdateRequest($organization, $body, $project, $wikiIdentifier, $path, $version, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling pagesCreateOrUpdate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesCreateOrUpdate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            $queryParams['path'] = ObjectSerializer::toQueryValue($path);
        }
        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }
        // query params
        if ($versionDescriptorVersion !== null) {
            $queryParams['versionDescriptor.version'] = ObjectSerializer::toQueryValue($versionDescriptorVersion);
        }
        // query params
        if ($versionDescriptorVersionOptions !== null) {
            $queryParams['versionDescriptor.versionOptions'] = ObjectSerializer::toQueryValue($versionDescriptorVersionOptions);
        }
        // query params
        if ($versionDescriptorVersionType !== null) {
            $queryParams['versionDescriptor.versionType'] = ObjectSerializer::toQueryValue($versionDescriptorVersionType);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }
        // header params
        if ($version !== null) {
            $headerParams['Version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagesDeletePage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesDeletePage($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        list($response) = $this->pagesDeletePageWithHttpInfo($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);
        return $response;
    }

    /**
     * Operation pagesDeletePageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesDeletePageWithHttpInfo($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesDeletePageRequest($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesDeletePageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesDeletePageAsync($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        return $this->pagesDeletePageAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesDeletePageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesDeletePageAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesDeletePageRequest($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesDeletePage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $path Wiki page path. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesDeletePageRequest($organization, $project, $wikiIdentifier, $path, $apiVersion, $comment = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesDeletePage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesDeletePage'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesDeletePage'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling pagesDeletePage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesDeletePage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            $queryParams['path'] = ObjectSerializer::toQueryValue($path);
        }
        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }
        // query params
        if ($versionDescriptorVersion !== null) {
            $queryParams['versionDescriptor.version'] = ObjectSerializer::toQueryValue($versionDescriptorVersion);
        }
        // query params
        if ($versionDescriptorVersionOptions !== null) {
            $queryParams['versionDescriptor.versionOptions'] = ObjectSerializer::toQueryValue($versionDescriptorVersionOptions);
        }
        // query params
        if ($versionDescriptorVersionType !== null) {
            $queryParams['versionDescriptor.versionType'] = ObjectSerializer::toQueryValue($versionDescriptorVersionType);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagesDeletePageById
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesDeletePageById($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment = null)
    {
        list($response) = $this->pagesDeletePageByIdWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment);
        return $response;
    }

    /**
     * Operation pagesDeletePageByIdWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesDeletePageByIdWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesDeletePageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesDeletePageByIdAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesDeletePageByIdAsync($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment = null)
    {
        return $this->pagesDeletePageByIdAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesDeletePageByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesDeletePageByIdAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesDeletePageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesDeletePageById'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with this page delete. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesDeletePageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $comment = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesDeletePageById'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesDeletePageById'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesDeletePageById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pagesDeletePageById'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesDeletePageById'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagesGetPage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $path Wiki page path. (optional)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesGetPage($organization, $project, $wikiIdentifier, $apiVersion, $path = null, $recursionLevel = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null, $includeContent = null)
    {
        list($response) = $this->pagesGetPageWithHttpInfo($organization, $project, $wikiIdentifier, $apiVersion, $path, $recursionLevel, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType, $includeContent);
        return $response;
    }

    /**
     * Operation pagesGetPageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $path Wiki page path. (optional)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesGetPageWithHttpInfo($organization, $project, $wikiIdentifier, $apiVersion, $path = null, $recursionLevel = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null, $includeContent = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesGetPageRequest($organization, $project, $wikiIdentifier, $apiVersion, $path, $recursionLevel, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType, $includeContent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesGetPageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $path Wiki page path. (optional)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesGetPageAsync($organization, $project, $wikiIdentifier, $apiVersion, $path = null, $recursionLevel = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null, $includeContent = null)
    {
        return $this->pagesGetPageAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $apiVersion, $path, $recursionLevel, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType, $includeContent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesGetPageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $path Wiki page path. (optional)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesGetPageAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $apiVersion, $path = null, $recursionLevel = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null, $includeContent = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesGetPageRequest($organization, $project, $wikiIdentifier, $apiVersion, $path, $recursionLevel, $versionDescriptorVersion, $versionDescriptorVersionOptions, $versionDescriptorVersionType, $includeContent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesGetPage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $path Wiki page path. (optional)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  string $versionDescriptorVersion Version string identifier (name of tag/branch, SHA1 of commit) (optional)
     * @param  string $versionDescriptorVersionOptions Version options - Specify additional modifiers to version (e.g Previous) (optional)
     * @param  string $versionDescriptorVersionType Version type (branch, tag, or commit). Determines how Id is interpreted (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesGetPageRequest($organization, $project, $wikiIdentifier, $apiVersion, $path = null, $recursionLevel = null, $versionDescriptorVersion = null, $versionDescriptorVersionOptions = null, $versionDescriptorVersionType = null, $includeContent = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesGetPage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesGetPage'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesGetPage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesGetPage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            $queryParams['path'] = ObjectSerializer::toQueryValue($path);
        }
        // query params
        if ($recursionLevel !== null) {
            $queryParams['recursionLevel'] = ObjectSerializer::toQueryValue($recursionLevel);
        }
        // query params
        if ($versionDescriptorVersion !== null) {
            $queryParams['versionDescriptor.version'] = ObjectSerializer::toQueryValue($versionDescriptorVersion);
        }
        // query params
        if ($versionDescriptorVersionOptions !== null) {
            $queryParams['versionDescriptor.versionOptions'] = ObjectSerializer::toQueryValue($versionDescriptorVersionOptions);
        }
        // query params
        if ($versionDescriptorVersionType !== null) {
            $queryParams['versionDescriptor.versionType'] = ObjectSerializer::toQueryValue($versionDescriptorVersionType);
        }
        // query params
        if ($includeContent !== null) {
            $queryParams['includeContent'] = ObjectSerializer::toQueryValue($includeContent);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagesGetPageById
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name.. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesGetPageById($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel = null, $includeContent = null)
    {
        list($response) = $this->pagesGetPageByIdWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel, $includeContent);
        return $response;
    }

    /**
     * Operation pagesGetPageByIdWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name.. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesGetPageByIdWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel = null, $includeContent = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesGetPageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel, $includeContent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesGetPageByIdAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name.. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesGetPageByIdAsync($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel = null, $includeContent = null)
    {
        return $this->pagesGetPageByIdAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel, $includeContent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesGetPageByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name.. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesGetPageByIdAsyncWithHttpInfo($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel = null, $includeContent = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesGetPageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel, $includeContent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesGetPageById'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name.. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $recursionLevel Recursion level for subpages retrieval. Defaults to &#x60;None&#x60; (Optional). (optional)
     * @param  bool $includeContent True to include the content of the page in the response for Json content type. Defaults to false (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesGetPageByIdRequest($organization, $project, $wikiIdentifier, $id, $apiVersion, $recursionLevel = null, $includeContent = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesGetPageById'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesGetPageById'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesGetPageById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pagesGetPageById'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesGetPageById'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($recursionLevel !== null) {
            $queryParams['recursionLevel'] = ObjectSerializer::toQueryValue($recursionLevel);
        }
        // query params
        if ($includeContent !== null) {
            $queryParams['includeContent'] = ObjectSerializer::toQueryValue($includeContent);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagesUpdate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage
     */
    public function pagesUpdate($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment = null)
    {
        list($response) = $this->pagesUpdateWithHttpInfo($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment);
        return $response;
    }

    /**
     * Operation pagesUpdateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     *
     * @throws \AzureDevOpsClient\Wiki\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagesUpdateWithHttpInfo($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesUpdateRequest($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagesUpdateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesUpdateAsync($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment = null)
    {
        return $this->pagesUpdateAsyncWithHttpInfo($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagesUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagesUpdateAsyncWithHttpInfo($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment = null)
    {
        $returnType = '\AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPage';
        $request = $this->pagesUpdateRequest($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagesUpdate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Wiki\AzureDevOpsClient\Wiki\Model\WikiPageCreateOrUpdateParameters $body Wiki update operation parameters. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $wikiIdentifier Wiki ID or wiki name. (required)
     * @param  int $id Wiki page ID. (required)
     * @param  string $version Version of the page on which the change is to be made. Mandatory for &#x60;Edit&#x60; scenario. To be populated in the If-Match header of the request. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $comment Comment to be associated with the page operation. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagesUpdateRequest($organization, $body, $project, $wikiIdentifier, $id, $version, $apiVersion, $comment = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling pagesUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pagesUpdate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling pagesUpdate'
            );
        }
        // verify the required parameter 'wikiIdentifier' is set
        if ($wikiIdentifier === null || (is_array($wikiIdentifier) && count($wikiIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wikiIdentifier when calling pagesUpdate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pagesUpdate'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling pagesUpdate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling pagesUpdate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }
        // header params
        if ($version !== null) {
            $headerParams['Version'] = ObjectSerializer::toHeaderValue($version);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($wikiIdentifier !== null) {
            $resourcePath = str_replace(
                '{' . 'wikiIdentifier' . '}',
                ObjectSerializer::toPathValue($wikiIdentifier),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
