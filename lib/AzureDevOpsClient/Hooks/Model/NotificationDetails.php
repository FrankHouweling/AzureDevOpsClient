<?php
/**
 * NotificationDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * NotificationDetails Class Doc Comment
 *
 * @category Class
 * @description Defines the data contract of notification details.
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completedDate' => '\DateTime',
        'consumerActionId' => 'string',
        'consumerId' => 'string',
        'consumerInputs' => 'map[string,string]',
        'dequeuedDate' => '\DateTime',
        'errorDetail' => 'string',
        'errorMessage' => 'string',
        'event' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\Event',
        'eventType' => 'string',
        'processedDate' => '\DateTime',
        'publisherId' => 'string',
        'publisherInputs' => 'map[string,string]',
        'queuedDate' => '\DateTime',
        'request' => 'string',
        'requestAttempts' => 'int',
        'requestDuration' => 'double',
        'response' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'completedDate' => 'date-time',
        'consumerActionId' => null,
        'consumerId' => null,
        'consumerInputs' => null,
        'dequeuedDate' => 'date-time',
        'errorDetail' => null,
        'errorMessage' => null,
        'event' => null,
        'eventType' => null,
        'processedDate' => 'date-time',
        'publisherId' => null,
        'publisherInputs' => null,
        'queuedDate' => 'date-time',
        'request' => null,
        'requestAttempts' => 'int32',
        'requestDuration' => 'double',
        'response' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completedDate' => 'completedDate',
        'consumerActionId' => 'consumerActionId',
        'consumerId' => 'consumerId',
        'consumerInputs' => 'consumerInputs',
        'dequeuedDate' => 'dequeuedDate',
        'errorDetail' => 'errorDetail',
        'errorMessage' => 'errorMessage',
        'event' => 'event',
        'eventType' => 'eventType',
        'processedDate' => 'processedDate',
        'publisherId' => 'publisherId',
        'publisherInputs' => 'publisherInputs',
        'queuedDate' => 'queuedDate',
        'request' => 'request',
        'requestAttempts' => 'requestAttempts',
        'requestDuration' => 'requestDuration',
        'response' => 'response'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completedDate' => 'setCompletedDate',
        'consumerActionId' => 'setConsumerActionId',
        'consumerId' => 'setConsumerId',
        'consumerInputs' => 'setConsumerInputs',
        'dequeuedDate' => 'setDequeuedDate',
        'errorDetail' => 'setErrorDetail',
        'errorMessage' => 'setErrorMessage',
        'event' => 'setEvent',
        'eventType' => 'setEventType',
        'processedDate' => 'setProcessedDate',
        'publisherId' => 'setPublisherId',
        'publisherInputs' => 'setPublisherInputs',
        'queuedDate' => 'setQueuedDate',
        'request' => 'setRequest',
        'requestAttempts' => 'setRequestAttempts',
        'requestDuration' => 'setRequestDuration',
        'response' => 'setResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completedDate' => 'getCompletedDate',
        'consumerActionId' => 'getConsumerActionId',
        'consumerId' => 'getConsumerId',
        'consumerInputs' => 'getConsumerInputs',
        'dequeuedDate' => 'getDequeuedDate',
        'errorDetail' => 'getErrorDetail',
        'errorMessage' => 'getErrorMessage',
        'event' => 'getEvent',
        'eventType' => 'getEventType',
        'processedDate' => 'getProcessedDate',
        'publisherId' => 'getPublisherId',
        'publisherInputs' => 'getPublisherInputs',
        'queuedDate' => 'getQueuedDate',
        'request' => 'getRequest',
        'requestAttempts' => 'getRequestAttempts',
        'requestDuration' => 'getRequestDuration',
        'response' => 'getResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completedDate'] = isset($data['completedDate']) ? $data['completedDate'] : null;
        $this->container['consumerActionId'] = isset($data['consumerActionId']) ? $data['consumerActionId'] : null;
        $this->container['consumerId'] = isset($data['consumerId']) ? $data['consumerId'] : null;
        $this->container['consumerInputs'] = isset($data['consumerInputs']) ? $data['consumerInputs'] : null;
        $this->container['dequeuedDate'] = isset($data['dequeuedDate']) ? $data['dequeuedDate'] : null;
        $this->container['errorDetail'] = isset($data['errorDetail']) ? $data['errorDetail'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['eventType'] = isset($data['eventType']) ? $data['eventType'] : null;
        $this->container['processedDate'] = isset($data['processedDate']) ? $data['processedDate'] : null;
        $this->container['publisherId'] = isset($data['publisherId']) ? $data['publisherId'] : null;
        $this->container['publisherInputs'] = isset($data['publisherInputs']) ? $data['publisherInputs'] : null;
        $this->container['queuedDate'] = isset($data['queuedDate']) ? $data['queuedDate'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['requestAttempts'] = isset($data['requestAttempts']) ? $data['requestAttempts'] : null;
        $this->container['requestDuration'] = isset($data['requestDuration']) ? $data['requestDuration'] : null;
        $this->container['response'] = isset($data['response']) ? $data['response'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completedDate
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completedDate'];
    }

    /**
     * Sets completedDate
     *
     * @param \DateTime $completedDate Gets or sets the time that this notification was completed (response received from the consumer)
     *
     * @return $this
     */
    public function setCompletedDate($completedDate)
    {
        $this->container['completedDate'] = $completedDate;

        return $this;
    }

    /**
     * Gets consumerActionId
     *
     * @return string
     */
    public function getConsumerActionId()
    {
        return $this->container['consumerActionId'];
    }

    /**
     * Sets consumerActionId
     *
     * @param string $consumerActionId Gets or sets this notification detail's consumer action identifier.
     *
     * @return $this
     */
    public function setConsumerActionId($consumerActionId)
    {
        $this->container['consumerActionId'] = $consumerActionId;

        return $this;
    }

    /**
     * Gets consumerId
     *
     * @return string
     */
    public function getConsumerId()
    {
        return $this->container['consumerId'];
    }

    /**
     * Sets consumerId
     *
     * @param string $consumerId Gets or sets this notification detail's consumer identifier.
     *
     * @return $this
     */
    public function setConsumerId($consumerId)
    {
        $this->container['consumerId'] = $consumerId;

        return $this;
    }

    /**
     * Gets consumerInputs
     *
     * @return map[string,string]
     */
    public function getConsumerInputs()
    {
        return $this->container['consumerInputs'];
    }

    /**
     * Sets consumerInputs
     *
     * @param map[string,string] $consumerInputs Gets or sets this notification detail's consumer inputs.
     *
     * @return $this
     */
    public function setConsumerInputs($consumerInputs)
    {
        $this->container['consumerInputs'] = $consumerInputs;

        return $this;
    }

    /**
     * Gets dequeuedDate
     *
     * @return \DateTime
     */
    public function getDequeuedDate()
    {
        return $this->container['dequeuedDate'];
    }

    /**
     * Sets dequeuedDate
     *
     * @param \DateTime $dequeuedDate Gets or sets the time that this notification was dequeued for processing
     *
     * @return $this
     */
    public function setDequeuedDate($dequeuedDate)
    {
        $this->container['dequeuedDate'] = $dequeuedDate;

        return $this;
    }

    /**
     * Gets errorDetail
     *
     * @return string
     */
    public function getErrorDetail()
    {
        return $this->container['errorDetail'];
    }

    /**
     * Sets errorDetail
     *
     * @param string $errorDetail Gets or sets this notification detail's error detail.
     *
     * @return $this
     */
    public function setErrorDetail($errorDetail)
    {
        $this->container['errorDetail'] = $errorDetail;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Gets or sets this notification detail's error message.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\Event
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\Event $event Gets or sets this notification detail's event content.
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string $eventType Gets or sets this notification detail's event type.
     *
     * @return $this
     */
    public function setEventType($eventType)
    {
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets processedDate
     *
     * @return \DateTime
     */
    public function getProcessedDate()
    {
        return $this->container['processedDate'];
    }

    /**
     * Sets processedDate
     *
     * @param \DateTime $processedDate Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)
     *
     * @return $this
     */
    public function setProcessedDate($processedDate)
    {
        $this->container['processedDate'] = $processedDate;

        return $this;
    }

    /**
     * Gets publisherId
     *
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisherId'];
    }

    /**
     * Sets publisherId
     *
     * @param string $publisherId Gets or sets this notification detail's publisher identifier.
     *
     * @return $this
     */
    public function setPublisherId($publisherId)
    {
        $this->container['publisherId'] = $publisherId;

        return $this;
    }

    /**
     * Gets publisherInputs
     *
     * @return map[string,string]
     */
    public function getPublisherInputs()
    {
        return $this->container['publisherInputs'];
    }

    /**
     * Sets publisherInputs
     *
     * @param map[string,string] $publisherInputs Gets or sets this notification detail's publisher inputs.
     *
     * @return $this
     */
    public function setPublisherInputs($publisherInputs)
    {
        $this->container['publisherInputs'] = $publisherInputs;

        return $this;
    }

    /**
     * Gets queuedDate
     *
     * @return \DateTime
     */
    public function getQueuedDate()
    {
        return $this->container['queuedDate'];
    }

    /**
     * Sets queuedDate
     *
     * @param \DateTime $queuedDate Gets or sets the time that this notification was queued (created)
     *
     * @return $this
     */
    public function setQueuedDate($queuedDate)
    {
        $this->container['queuedDate'] = $queuedDate;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string $request Gets or sets this notification detail's request.
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets requestAttempts
     *
     * @return int
     */
    public function getRequestAttempts()
    {
        return $this->container['requestAttempts'];
    }

    /**
     * Sets requestAttempts
     *
     * @param int $requestAttempts Number of requests attempted to be sent to the consumer
     *
     * @return $this
     */
    public function setRequestAttempts($requestAttempts)
    {
        $this->container['requestAttempts'] = $requestAttempts;

        return $this;
    }

    /**
     * Gets requestDuration
     *
     * @return double
     */
    public function getRequestDuration()
    {
        return $this->container['requestDuration'];
    }

    /**
     * Sets requestDuration
     *
     * @param double $requestDuration Duration of the request to the consumer in seconds
     *
     * @return $this
     */
    public function setRequestDuration($requestDuration)
    {
        $this->container['requestDuration'] = $requestDuration;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response Gets or sets this notification detail's response.
     *
     * @return $this
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


