<?php
/**
 * ConsumerAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * ConsumerAction Class Doc Comment
 *
 * @category Class
 * @description Defines the data contract of a consumer action.
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsumerAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConsumerAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks',
        'allowResourceVersionOverride' => 'bool',
        'consumerId' => 'string',
        'description' => 'string',
        'id' => 'string',
        'inputDescriptors' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[]',
        'name' => 'string',
        'supportedEventTypes' => 'string[]',
        'supportedResourceVersions' => 'map[string,string[]]',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'allowResourceVersionOverride' => null,
        'consumerId' => null,
        'description' => null,
        'id' => null,
        'inputDescriptors' => null,
        'name' => null,
        'supportedEventTypes' => null,
        'supportedResourceVersions' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'allowResourceVersionOverride' => 'allowResourceVersionOverride',
        'consumerId' => 'consumerId',
        'description' => 'description',
        'id' => 'id',
        'inputDescriptors' => 'inputDescriptors',
        'name' => 'name',
        'supportedEventTypes' => 'supportedEventTypes',
        'supportedResourceVersions' => 'supportedResourceVersions',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'allowResourceVersionOverride' => 'setAllowResourceVersionOverride',
        'consumerId' => 'setConsumerId',
        'description' => 'setDescription',
        'id' => 'setId',
        'inputDescriptors' => 'setInputDescriptors',
        'name' => 'setName',
        'supportedEventTypes' => 'setSupportedEventTypes',
        'supportedResourceVersions' => 'setSupportedResourceVersions',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'allowResourceVersionOverride' => 'getAllowResourceVersionOverride',
        'consumerId' => 'getConsumerId',
        'description' => 'getDescription',
        'id' => 'getId',
        'inputDescriptors' => 'getInputDescriptors',
        'name' => 'getName',
        'supportedEventTypes' => 'getSupportedEventTypes',
        'supportedResourceVersions' => 'getSupportedResourceVersions',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['allowResourceVersionOverride'] = isset($data['allowResourceVersionOverride']) ? $data['allowResourceVersionOverride'] : null;
        $this->container['consumerId'] = isset($data['consumerId']) ? $data['consumerId'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inputDescriptors'] = isset($data['inputDescriptors']) ? $data['inputDescriptors'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['supportedEventTypes'] = isset($data['supportedEventTypes']) ? $data['supportedEventTypes'] : null;
        $this->container['supportedResourceVersions'] = isset($data['supportedResourceVersions']) ? $data['supportedResourceVersions'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks $links Reference Links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets allowResourceVersionOverride
     *
     * @return bool
     */
    public function getAllowResourceVersionOverride()
    {
        return $this->container['allowResourceVersionOverride'];
    }

    /**
     * Sets allowResourceVersionOverride
     *
     * @param bool $allowResourceVersionOverride Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.
     *
     * @return $this
     */
    public function setAllowResourceVersionOverride($allowResourceVersionOverride)
    {
        $this->container['allowResourceVersionOverride'] = $allowResourceVersionOverride;

        return $this;
    }

    /**
     * Gets consumerId
     *
     * @return string
     */
    public function getConsumerId()
    {
        return $this->container['consumerId'];
    }

    /**
     * Sets consumerId
     *
     * @param string $consumerId Gets or sets the identifier of the consumer to which this action belongs.
     *
     * @return $this
     */
    public function setConsumerId($consumerId)
    {
        $this->container['consumerId'] = $consumerId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Gets or sets this action's localized description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets or sets this action's identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inputDescriptors
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[]
     */
    public function getInputDescriptors()
    {
        return $this->container['inputDescriptors'];
    }

    /**
     * Sets inputDescriptors
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[] $inputDescriptors Gets or sets this action's input descriptors.
     *
     * @return $this
     */
    public function setInputDescriptors($inputDescriptors)
    {
        $this->container['inputDescriptors'] = $inputDescriptors;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets or sets this action's localized name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets supportedEventTypes
     *
     * @return string[]
     */
    public function getSupportedEventTypes()
    {
        return $this->container['supportedEventTypes'];
    }

    /**
     * Sets supportedEventTypes
     *
     * @param string[] $supportedEventTypes Gets or sets this action's supported event identifiers.
     *
     * @return $this
     */
    public function setSupportedEventTypes($supportedEventTypes)
    {
        $this->container['supportedEventTypes'] = $supportedEventTypes;

        return $this;
    }

    /**
     * Gets supportedResourceVersions
     *
     * @return map[string,string[]]
     */
    public function getSupportedResourceVersions()
    {
        return $this->container['supportedResourceVersions'];
    }

    /**
     * Sets supportedResourceVersions
     *
     * @param map[string,string[]] $supportedResourceVersions Gets or sets this action's supported resource versions.
     *
     * @return $this
     */
    public function setSupportedResourceVersions($supportedResourceVersions)
    {
        $this->container['supportedResourceVersions'] = $supportedResourceVersions;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The url for this resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


