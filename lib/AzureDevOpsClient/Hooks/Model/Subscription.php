<?php
/**
 * Subscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * Subscription Class Doc Comment
 *
 * @category Class
 * @description Encapsulates an event subscription.
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Subscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks',
        'actionDescription' => 'string',
        'consumerActionId' => 'string',
        'consumerId' => 'string',
        'consumerInputs' => 'map[string,string]',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef',
        'createdDate' => '\DateTime',
        'eventDescription' => 'string',
        'eventType' => 'string',
        'id' => 'string',
        'modifiedBy' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef',
        'modifiedDate' => '\DateTime',
        'probationRetries' => 'string',
        'publisherId' => 'string',
        'publisherInputs' => 'map[string,string]',
        'resourceVersion' => 'string',
        'status' => 'string',
        'subscriber' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'actionDescription' => null,
        'consumerActionId' => null,
        'consumerId' => null,
        'consumerInputs' => null,
        'createdBy' => null,
        'createdDate' => 'date-time',
        'eventDescription' => null,
        'eventType' => null,
        'id' => 'uuid',
        'modifiedBy' => null,
        'modifiedDate' => 'date-time',
        'probationRetries' => 'byte',
        'publisherId' => null,
        'publisherInputs' => null,
        'resourceVersion' => null,
        'status' => null,
        'subscriber' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'actionDescription' => 'actionDescription',
        'consumerActionId' => 'consumerActionId',
        'consumerId' => 'consumerId',
        'consumerInputs' => 'consumerInputs',
        'createdBy' => 'createdBy',
        'createdDate' => 'createdDate',
        'eventDescription' => 'eventDescription',
        'eventType' => 'eventType',
        'id' => 'id',
        'modifiedBy' => 'modifiedBy',
        'modifiedDate' => 'modifiedDate',
        'probationRetries' => 'probationRetries',
        'publisherId' => 'publisherId',
        'publisherInputs' => 'publisherInputs',
        'resourceVersion' => 'resourceVersion',
        'status' => 'status',
        'subscriber' => 'subscriber',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'actionDescription' => 'setActionDescription',
        'consumerActionId' => 'setConsumerActionId',
        'consumerId' => 'setConsumerId',
        'consumerInputs' => 'setConsumerInputs',
        'createdBy' => 'setCreatedBy',
        'createdDate' => 'setCreatedDate',
        'eventDescription' => 'setEventDescription',
        'eventType' => 'setEventType',
        'id' => 'setId',
        'modifiedBy' => 'setModifiedBy',
        'modifiedDate' => 'setModifiedDate',
        'probationRetries' => 'setProbationRetries',
        'publisherId' => 'setPublisherId',
        'publisherInputs' => 'setPublisherInputs',
        'resourceVersion' => 'setResourceVersion',
        'status' => 'setStatus',
        'subscriber' => 'setSubscriber',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'actionDescription' => 'getActionDescription',
        'consumerActionId' => 'getConsumerActionId',
        'consumerId' => 'getConsumerId',
        'consumerInputs' => 'getConsumerInputs',
        'createdBy' => 'getCreatedBy',
        'createdDate' => 'getCreatedDate',
        'eventDescription' => 'getEventDescription',
        'eventType' => 'getEventType',
        'id' => 'getId',
        'modifiedBy' => 'getModifiedBy',
        'modifiedDate' => 'getModifiedDate',
        'probationRetries' => 'getProbationRetries',
        'publisherId' => 'getPublisherId',
        'publisherInputs' => 'getPublisherInputs',
        'resourceVersion' => 'getResourceVersion',
        'status' => 'getStatus',
        'subscriber' => 'getSubscriber',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ENABLED = 'enabled';
    const STATUS_ON_PROBATION = 'onProbation';
    const STATUS_DISABLED_BY_USER = 'disabledByUser';
    const STATUS_DISABLED_BY_SYSTEM = 'disabledBySystem';
    const STATUS_DISABLED_BY_INACTIVE_IDENTITY = 'disabledByInactiveIdentity';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLED,
            self::STATUS_ON_PROBATION,
            self::STATUS_DISABLED_BY_USER,
            self::STATUS_DISABLED_BY_SYSTEM,
            self::STATUS_DISABLED_BY_INACTIVE_IDENTITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['actionDescription'] = isset($data['actionDescription']) ? $data['actionDescription'] : null;
        $this->container['consumerActionId'] = isset($data['consumerActionId']) ? $data['consumerActionId'] : null;
        $this->container['consumerId'] = isset($data['consumerId']) ? $data['consumerId'] : null;
        $this->container['consumerInputs'] = isset($data['consumerInputs']) ? $data['consumerInputs'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['eventDescription'] = isset($data['eventDescription']) ? $data['eventDescription'] : null;
        $this->container['eventType'] = isset($data['eventType']) ? $data['eventType'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['modifiedDate'] = isset($data['modifiedDate']) ? $data['modifiedDate'] : null;
        $this->container['probationRetries'] = isset($data['probationRetries']) ? $data['probationRetries'] : null;
        $this->container['publisherId'] = isset($data['publisherId']) ? $data['publisherId'] : null;
        $this->container['publisherInputs'] = isset($data['publisherInputs']) ? $data['publisherInputs'] : null;
        $this->container['resourceVersion'] = isset($data['resourceVersion']) ? $data['resourceVersion'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriber'] = isset($data['subscriber']) ? $data['subscriber'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['probationRetries']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['probationRetries'])) {
            $invalidProperties[] = "invalid value for 'probationRetries', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks $links Reference Links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets actionDescription
     *
     * @return string
     */
    public function getActionDescription()
    {
        return $this->container['actionDescription'];
    }

    /**
     * Sets actionDescription
     *
     * @param string $actionDescription actionDescription
     *
     * @return $this
     */
    public function setActionDescription($actionDescription)
    {
        $this->container['actionDescription'] = $actionDescription;

        return $this;
    }

    /**
     * Gets consumerActionId
     *
     * @return string
     */
    public function getConsumerActionId()
    {
        return $this->container['consumerActionId'];
    }

    /**
     * Sets consumerActionId
     *
     * @param string $consumerActionId consumerActionId
     *
     * @return $this
     */
    public function setConsumerActionId($consumerActionId)
    {
        $this->container['consumerActionId'] = $consumerActionId;

        return $this;
    }

    /**
     * Gets consumerId
     *
     * @return string
     */
    public function getConsumerId()
    {
        return $this->container['consumerId'];
    }

    /**
     * Sets consumerId
     *
     * @param string $consumerId consumerId
     *
     * @return $this
     */
    public function setConsumerId($consumerId)
    {
        $this->container['consumerId'] = $consumerId;

        return $this;
    }

    /**
     * Gets consumerInputs
     *
     * @return map[string,string]
     */
    public function getConsumerInputs()
    {
        return $this->container['consumerInputs'];
    }

    /**
     * Sets consumerInputs
     *
     * @param map[string,string] $consumerInputs Consumer input values
     *
     * @return $this
     */
    public function setConsumerInputs($consumerInputs)
    {
        $this->container['consumerInputs'] = $consumerInputs;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets eventDescription
     *
     * @return string
     */
    public function getEventDescription()
    {
        return $this->container['eventDescription'];
    }

    /**
     * Sets eventDescription
     *
     * @param string $eventDescription eventDescription
     *
     * @return $this
     */
    public function setEventDescription($eventDescription)
    {
        $this->container['eventDescription'] = $eventDescription;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string $eventType eventType
     *
     * @return $this
     */
    public function setEventType($eventType)
    {
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef $modifiedBy modifiedBy
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime $modifiedDate modifiedDate
     *
     * @return $this
     */
    public function setModifiedDate($modifiedDate)
    {
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets probationRetries
     *
     * @return string
     */
    public function getProbationRetries()
    {
        return $this->container['probationRetries'];
    }

    /**
     * Sets probationRetries
     *
     * @param string $probationRetries probationRetries
     *
     * @return $this
     */
    public function setProbationRetries($probationRetries)
    {

        if (!is_null($probationRetries) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $probationRetries))) {
            throw new \InvalidArgumentException("invalid value for $probationRetries when calling Subscription., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['probationRetries'] = $probationRetries;

        return $this;
    }

    /**
     * Gets publisherId
     *
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisherId'];
    }

    /**
     * Sets publisherId
     *
     * @param string $publisherId publisherId
     *
     * @return $this
     */
    public function setPublisherId($publisherId)
    {
        $this->container['publisherId'] = $publisherId;

        return $this;
    }

    /**
     * Gets publisherInputs
     *
     * @return map[string,string]
     */
    public function getPublisherInputs()
    {
        return $this->container['publisherInputs'];
    }

    /**
     * Sets publisherInputs
     *
     * @param map[string,string] $publisherInputs Publisher input values
     *
     * @return $this
     */
    public function setPublisherInputs($publisherInputs)
    {
        $this->container['publisherInputs'] = $publisherInputs;

        return $this;
    }

    /**
     * Gets resourceVersion
     *
     * @return string
     */
    public function getResourceVersion()
    {
        return $this->container['resourceVersion'];
    }

    /**
     * Sets resourceVersion
     *
     * @param string $resourceVersion resourceVersion
     *
     * @return $this
     */
    public function setResourceVersion($resourceVersion)
    {
        $this->container['resourceVersion'] = $resourceVersion;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriber
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef
     */
    public function getSubscriber()
    {
        return $this->container['subscriber'];
    }

    /**
     * Sets subscriber
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\IdentityRef $subscriber subscriber
     *
     * @return $this
     */
    public function setSubscriber($subscriber)
    {
        $this->container['subscriber'] = $subscriber;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


