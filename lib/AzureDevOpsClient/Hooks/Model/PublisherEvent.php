<?php
/**
 * PublisherEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * PublisherEvent Class Doc Comment
 *
 * @category Class
 * @description Wrapper around an event which is being published
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublisherEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublisherEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diagnostics' => 'map[string,string]',
        'event' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\Event',
        'isFilteredEvent' => 'bool',
        'notificationData' => 'map[string,string]',
        'otherResourceVersions' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\VersionedResource[]',
        'publisherInputFilters' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\InputFilter[]',
        'subscription' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diagnostics' => null,
        'event' => null,
        'isFilteredEvent' => null,
        'notificationData' => null,
        'otherResourceVersions' => null,
        'publisherInputFilters' => null,
        'subscription' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diagnostics' => 'diagnostics',
        'event' => 'event',
        'isFilteredEvent' => 'isFilteredEvent',
        'notificationData' => 'notificationData',
        'otherResourceVersions' => 'otherResourceVersions',
        'publisherInputFilters' => 'publisherInputFilters',
        'subscription' => 'subscription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diagnostics' => 'setDiagnostics',
        'event' => 'setEvent',
        'isFilteredEvent' => 'setIsFilteredEvent',
        'notificationData' => 'setNotificationData',
        'otherResourceVersions' => 'setOtherResourceVersions',
        'publisherInputFilters' => 'setPublisherInputFilters',
        'subscription' => 'setSubscription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diagnostics' => 'getDiagnostics',
        'event' => 'getEvent',
        'isFilteredEvent' => 'getIsFilteredEvent',
        'notificationData' => 'getNotificationData',
        'otherResourceVersions' => 'getOtherResourceVersions',
        'publisherInputFilters' => 'getPublisherInputFilters',
        'subscription' => 'getSubscription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diagnostics'] = isset($data['diagnostics']) ? $data['diagnostics'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['isFilteredEvent'] = isset($data['isFilteredEvent']) ? $data['isFilteredEvent'] : null;
        $this->container['notificationData'] = isset($data['notificationData']) ? $data['notificationData'] : null;
        $this->container['otherResourceVersions'] = isset($data['otherResourceVersions']) ? $data['otherResourceVersions'] : null;
        $this->container['publisherInputFilters'] = isset($data['publisherInputFilters']) ? $data['publisherInputFilters'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diagnostics
     *
     * @return map[string,string]
     */
    public function getDiagnostics()
    {
        return $this->container['diagnostics'];
    }

    /**
     * Sets diagnostics
     *
     * @param map[string,string] $diagnostics Add key/value pairs which will be stored with a published notification in the SH service DB.  This key/value pairs are for diagnostic purposes only and will have not effect on the delivery of a notification.
     *
     * @return $this
     */
    public function setDiagnostics($diagnostics)
    {
        $this->container['diagnostics'] = $diagnostics;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\Event
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\Event $event The event being published
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets isFilteredEvent
     *
     * @return bool
     */
    public function getIsFilteredEvent()
    {
        return $this->container['isFilteredEvent'];
    }

    /**
     * Sets isFilteredEvent
     *
     * @param bool $isFilteredEvent Gets or sets flag for filtered events
     *
     * @return $this
     */
    public function setIsFilteredEvent($isFilteredEvent)
    {
        $this->container['isFilteredEvent'] = $isFilteredEvent;

        return $this;
    }

    /**
     * Gets notificationData
     *
     * @return map[string,string]
     */
    public function getNotificationData()
    {
        return $this->container['notificationData'];
    }

    /**
     * Sets notificationData
     *
     * @param map[string,string] $notificationData Additional data that needs to be sent as part of notification to complement the Resource data in the Event
     *
     * @return $this
     */
    public function setNotificationData($notificationData)
    {
        $this->container['notificationData'] = $notificationData;

        return $this;
    }

    /**
     * Gets otherResourceVersions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\VersionedResource[]
     */
    public function getOtherResourceVersions()
    {
        return $this->container['otherResourceVersions'];
    }

    /**
     * Sets otherResourceVersions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\VersionedResource[] $otherResourceVersions Gets or sets the array of older supported resource versions.
     *
     * @return $this
     */
    public function setOtherResourceVersions($otherResourceVersions)
    {
        $this->container['otherResourceVersions'] = $otherResourceVersions;

        return $this;
    }

    /**
     * Gets publisherInputFilters
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputFilter[]
     */
    public function getPublisherInputFilters()
    {
        return $this->container['publisherInputFilters'];
    }

    /**
     * Sets publisherInputFilters
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputFilter[] $publisherInputFilters Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event
     *
     * @return $this
     */
    public function setPublisherInputFilters($publisherInputFilters)
    {
        $this->container['publisherInputFilters'] = $publisherInputFilters;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription $subscription Gets or sets matched hooks subscription which caused this event.
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


