<?php
/**
 * Consumer
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * Consumer Class Doc Comment
 *
 * @category Class
 * @description Defines the data contract of a consumer.
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Consumer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Consumer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks',
        'actions' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\ConsumerAction[]',
        'authenticationType' => 'string',
        'description' => 'string',
        'externalConfiguration' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\ExternalConfigurationDescriptor',
        'id' => 'string',
        'imageUrl' => 'string',
        'informationUrl' => 'string',
        'inputDescriptors' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[]',
        'name' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'actions' => null,
        'authenticationType' => null,
        'description' => null,
        'externalConfiguration' => null,
        'id' => null,
        'imageUrl' => null,
        'informationUrl' => null,
        'inputDescriptors' => null,
        'name' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'actions' => 'actions',
        'authenticationType' => 'authenticationType',
        'description' => 'description',
        'externalConfiguration' => 'externalConfiguration',
        'id' => 'id',
        'imageUrl' => 'imageUrl',
        'informationUrl' => 'informationUrl',
        'inputDescriptors' => 'inputDescriptors',
        'name' => 'name',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'actions' => 'setActions',
        'authenticationType' => 'setAuthenticationType',
        'description' => 'setDescription',
        'externalConfiguration' => 'setExternalConfiguration',
        'id' => 'setId',
        'imageUrl' => 'setImageUrl',
        'informationUrl' => 'setInformationUrl',
        'inputDescriptors' => 'setInputDescriptors',
        'name' => 'setName',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'actions' => 'getActions',
        'authenticationType' => 'getAuthenticationType',
        'description' => 'getDescription',
        'externalConfiguration' => 'getExternalConfiguration',
        'id' => 'getId',
        'imageUrl' => 'getImageUrl',
        'informationUrl' => 'getInformationUrl',
        'inputDescriptors' => 'getInputDescriptors',
        'name' => 'getName',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_TYPE_NONE = 'none';
    const AUTHENTICATION_TYPE_O_AUTH = 'oAuth';
    const AUTHENTICATION_TYPE_EXTERNAL = 'external';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_NONE,
            self::AUTHENTICATION_TYPE_O_AUTH,
            self::AUTHENTICATION_TYPE_EXTERNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['authenticationType'] = isset($data['authenticationType']) ? $data['authenticationType'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['externalConfiguration'] = isset($data['externalConfiguration']) ? $data['externalConfiguration'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imageUrl'] = isset($data['imageUrl']) ? $data['imageUrl'] : null;
        $this->container['informationUrl'] = isset($data['informationUrl']) ? $data['informationUrl'] : null;
        $this->container['inputDescriptors'] = isset($data['inputDescriptors']) ? $data['inputDescriptors'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($this->container['authenticationType']) && !in_array($this->container['authenticationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authenticationType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\ReferenceLinks $links Reference Links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\ConsumerAction[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\ConsumerAction[] $actions Gets this consumer's actions.
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets authenticationType
     *
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authenticationType'];
    }

    /**
     * Sets authenticationType
     *
     * @param string $authenticationType Gets or sets this consumer's authentication type.
     *
     * @return $this
     */
    public function setAuthenticationType($authenticationType)
    {
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($authenticationType) && !in_array($authenticationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authenticationType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authenticationType'] = $authenticationType;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Gets or sets this consumer's localized description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets externalConfiguration
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\ExternalConfigurationDescriptor
     */
    public function getExternalConfiguration()
    {
        return $this->container['externalConfiguration'];
    }

    /**
     * Sets externalConfiguration
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\ExternalConfigurationDescriptor $externalConfiguration Non-null only if subscriptions for this consumer are configured externally.
     *
     * @return $this
     */
    public function setExternalConfiguration($externalConfiguration)
    {
        $this->container['externalConfiguration'] = $externalConfiguration;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets or sets this consumer's identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string $imageUrl Gets or sets this consumer's image URL, if any.
     *
     * @return $this
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets informationUrl
     *
     * @return string
     */
    public function getInformationUrl()
    {
        return $this->container['informationUrl'];
    }

    /**
     * Sets informationUrl
     *
     * @param string $informationUrl Gets or sets this consumer's information URL, if any.
     *
     * @return $this
     */
    public function setInformationUrl($informationUrl)
    {
        $this->container['informationUrl'] = $informationUrl;

        return $this;
    }

    /**
     * Gets inputDescriptors
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[]
     */
    public function getInputDescriptors()
    {
        return $this->container['inputDescriptors'];
    }

    /**
     * Sets inputDescriptors
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\InputDescriptor[] $inputDescriptors Gets or sets this consumer's input descriptors.
     *
     * @return $this
     */
    public function setInputDescriptors($inputDescriptors)
    {
        $this->container['inputDescriptors'] = $inputDescriptors;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets or sets this consumer's localized name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The url for this resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


