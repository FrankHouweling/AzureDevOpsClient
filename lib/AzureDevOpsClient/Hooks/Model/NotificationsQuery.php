<?php
/**
 * NotificationsQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceHooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Hooks\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Hooks\ObjectSerializer;

/**
 * NotificationsQuery Class Doc Comment
 *
 * @category Class
 * @description Defines a query for service hook notifications.
 * @package  FrankHouweling\AzureDevOpsClient\Hooks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationsQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationsQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'associatedSubscriptions' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription[]',
        'includeDetails' => 'bool',
        'maxCreatedDate' => '\DateTime',
        'maxResults' => 'int',
        'maxResultsPerSubscription' => 'int',
        'minCreatedDate' => '\DateTime',
        'publisherId' => 'string',
        'results' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\Notification[]',
        'resultType' => 'string',
        'status' => 'string',
        'subscriptionIds' => 'string[]',
        'summary' => '\FrankHouweling\AzureDevOpsClient\Hooks\Model\NotificationSummary[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'associatedSubscriptions' => null,
        'includeDetails' => null,
        'maxCreatedDate' => 'date-time',
        'maxResults' => 'int32',
        'maxResultsPerSubscription' => 'int32',
        'minCreatedDate' => 'date-time',
        'publisherId' => null,
        'results' => null,
        'resultType' => null,
        'status' => null,
        'subscriptionIds' => 'uuid',
        'summary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'associatedSubscriptions' => 'associatedSubscriptions',
        'includeDetails' => 'includeDetails',
        'maxCreatedDate' => 'maxCreatedDate',
        'maxResults' => 'maxResults',
        'maxResultsPerSubscription' => 'maxResultsPerSubscription',
        'minCreatedDate' => 'minCreatedDate',
        'publisherId' => 'publisherId',
        'results' => 'results',
        'resultType' => 'resultType',
        'status' => 'status',
        'subscriptionIds' => 'subscriptionIds',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'associatedSubscriptions' => 'setAssociatedSubscriptions',
        'includeDetails' => 'setIncludeDetails',
        'maxCreatedDate' => 'setMaxCreatedDate',
        'maxResults' => 'setMaxResults',
        'maxResultsPerSubscription' => 'setMaxResultsPerSubscription',
        'minCreatedDate' => 'setMinCreatedDate',
        'publisherId' => 'setPublisherId',
        'results' => 'setResults',
        'resultType' => 'setResultType',
        'status' => 'setStatus',
        'subscriptionIds' => 'setSubscriptionIds',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'associatedSubscriptions' => 'getAssociatedSubscriptions',
        'includeDetails' => 'getIncludeDetails',
        'maxCreatedDate' => 'getMaxCreatedDate',
        'maxResults' => 'getMaxResults',
        'maxResultsPerSubscription' => 'getMaxResultsPerSubscription',
        'minCreatedDate' => 'getMinCreatedDate',
        'publisherId' => 'getPublisherId',
        'results' => 'getResults',
        'resultType' => 'getResultType',
        'status' => 'getStatus',
        'subscriptionIds' => 'getSubscriptionIds',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_TYPE_PENDING = 'pending';
    const RESULT_TYPE_SUCCEEDED = 'succeeded';
    const RESULT_TYPE_FAILED = 'failed';
    const RESULT_TYPE_FILTERED = 'filtered';
    const STATUS_QUEUED = 'queued';
    const STATUS_PROCESSING = 'processing';
    const STATUS_REQUEST_IN_PROGRESS = 'requestInProgress';
    const STATUS_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultTypeAllowableValues()
    {
        return [
            self::RESULT_TYPE_PENDING,
            self::RESULT_TYPE_SUCCEEDED,
            self::RESULT_TYPE_FAILED,
            self::RESULT_TYPE_FILTERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_PROCESSING,
            self::STATUS_REQUEST_IN_PROGRESS,
            self::STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['associatedSubscriptions'] = isset($data['associatedSubscriptions']) ? $data['associatedSubscriptions'] : null;
        $this->container['includeDetails'] = isset($data['includeDetails']) ? $data['includeDetails'] : null;
        $this->container['maxCreatedDate'] = isset($data['maxCreatedDate']) ? $data['maxCreatedDate'] : null;
        $this->container['maxResults'] = isset($data['maxResults']) ? $data['maxResults'] : null;
        $this->container['maxResultsPerSubscription'] = isset($data['maxResultsPerSubscription']) ? $data['maxResultsPerSubscription'] : null;
        $this->container['minCreatedDate'] = isset($data['minCreatedDate']) ? $data['minCreatedDate'] : null;
        $this->container['publisherId'] = isset($data['publisherId']) ? $data['publisherId'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['resultType'] = isset($data['resultType']) ? $data['resultType'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriptionIds'] = isset($data['subscriptionIds']) ? $data['subscriptionIds'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($this->container['resultType']) && !in_array($this->container['resultType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resultType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets associatedSubscriptions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription[]
     */
    public function getAssociatedSubscriptions()
    {
        return $this->container['associatedSubscriptions'];
    }

    /**
     * Sets associatedSubscriptions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\Subscription[] $associatedSubscriptions The subscriptions associated with the notifications returned from the query
     *
     * @return $this
     */
    public function setAssociatedSubscriptions($associatedSubscriptions)
    {
        $this->container['associatedSubscriptions'] = $associatedSubscriptions;

        return $this;
    }

    /**
     * Gets includeDetails
     *
     * @return bool
     */
    public function getIncludeDetails()
    {
        return $this->container['includeDetails'];
    }

    /**
     * Sets includeDetails
     *
     * @param bool $includeDetails If true, we will return all notification history for the query provided; otherwise, the summary is returned.
     *
     * @return $this
     */
    public function setIncludeDetails($includeDetails)
    {
        $this->container['includeDetails'] = $includeDetails;

        return $this;
    }

    /**
     * Gets maxCreatedDate
     *
     * @return \DateTime
     */
    public function getMaxCreatedDate()
    {
        return $this->container['maxCreatedDate'];
    }

    /**
     * Sets maxCreatedDate
     *
     * @param \DateTime $maxCreatedDate Optional maximum date at which the notification was created
     *
     * @return $this
     */
    public function setMaxCreatedDate($maxCreatedDate)
    {
        $this->container['maxCreatedDate'] = $maxCreatedDate;

        return $this;
    }

    /**
     * Gets maxResults
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['maxResults'];
    }

    /**
     * Sets maxResults
     *
     * @param int $maxResults Optional maximum number of overall results to include
     *
     * @return $this
     */
    public function setMaxResults($maxResults)
    {
        $this->container['maxResults'] = $maxResults;

        return $this;
    }

    /**
     * Gets maxResultsPerSubscription
     *
     * @return int
     */
    public function getMaxResultsPerSubscription()
    {
        return $this->container['maxResultsPerSubscription'];
    }

    /**
     * Sets maxResultsPerSubscription
     *
     * @param int $maxResultsPerSubscription Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.
     *
     * @return $this
     */
    public function setMaxResultsPerSubscription($maxResultsPerSubscription)
    {
        $this->container['maxResultsPerSubscription'] = $maxResultsPerSubscription;

        return $this;
    }

    /**
     * Gets minCreatedDate
     *
     * @return \DateTime
     */
    public function getMinCreatedDate()
    {
        return $this->container['minCreatedDate'];
    }

    /**
     * Sets minCreatedDate
     *
     * @param \DateTime $minCreatedDate Optional minimum date at which the notification was created
     *
     * @return $this
     */
    public function setMinCreatedDate($minCreatedDate)
    {
        $this->container['minCreatedDate'] = $minCreatedDate;

        return $this;
    }

    /**
     * Gets publisherId
     *
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisherId'];
    }

    /**
     * Sets publisherId
     *
     * @param string $publisherId Optional publisher id to restrict the results to
     *
     * @return $this
     */
    public function setPublisherId($publisherId)
    {
        $this->container['publisherId'] = $publisherId;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\Notification[]
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\Notification[] $results Results from the query
     *
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets resultType
     *
     * @return string
     */
    public function getResultType()
    {
        return $this->container['resultType'];
    }

    /**
     * Sets resultType
     *
     * @param string $resultType Optional notification result type to filter results to
     *
     * @return $this
     */
    public function setResultType($resultType)
    {
        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($resultType) && !in_array($resultType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resultType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resultType'] = $resultType;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Optional notification status to filter results to
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriptionIds
     *
     * @return string[]
     */
    public function getSubscriptionIds()
    {
        return $this->container['subscriptionIds'];
    }

    /**
     * Sets subscriptionIds
     *
     * @param string[] $subscriptionIds Optional list of subscription ids to restrict the results to
     *
     * @return $this
     */
    public function setSubscriptionIds($subscriptionIds)
    {
        $this->container['subscriptionIds'] = $subscriptionIds;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \FrankHouweling\AzureDevOpsClient\Hooks\Model\NotificationSummary[]
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \FrankHouweling\AzureDevOpsClient\Hooks\Model\NotificationSummary[] $summary Summary of notifications - the count of each result type (success, fail, ..).
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


