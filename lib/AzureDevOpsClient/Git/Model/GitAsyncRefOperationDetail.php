<?php
/**
 * GitAsyncRefOperationDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitAsyncRefOperationDetail Class Doc Comment
 *
 * @category Class
 * @description Information about the progress of a cherry pick or revert operation.
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitAsyncRefOperationDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitAsyncRefOperationDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conflict' => 'bool',
        'currentCommitId' => 'string',
        'failureMessage' => 'string',
        'progress' => 'double',
        'status' => 'string',
        'timedout' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conflict' => null,
        'currentCommitId' => null,
        'failureMessage' => null,
        'progress' => 'double',
        'status' => null,
        'timedout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conflict' => 'conflict',
        'currentCommitId' => 'currentCommitId',
        'failureMessage' => 'failureMessage',
        'progress' => 'progress',
        'status' => 'status',
        'timedout' => 'timedout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conflict' => 'setConflict',
        'currentCommitId' => 'setCurrentCommitId',
        'failureMessage' => 'setFailureMessage',
        'progress' => 'setProgress',
        'status' => 'setStatus',
        'timedout' => 'setTimedout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conflict' => 'getConflict',
        'currentCommitId' => 'getCurrentCommitId',
        'failureMessage' => 'getFailureMessage',
        'progress' => 'getProgress',
        'status' => 'getStatus',
        'timedout' => 'getTimedout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_NONE = 'none';
    const STATUS_INVALID_REF_NAME = 'invalidRefName';
    const STATUS_REF_NAME_CONFLICT = 'refNameConflict';
    const STATUS_CREATE_BRANCH_PERMISSION_REQUIRED = 'createBranchPermissionRequired';
    const STATUS_WRITE_PERMISSION_REQUIRED = 'writePermissionRequired';
    const STATUS_TARGET_BRANCH_DELETED = 'targetBranchDeleted';
    const STATUS_GIT_OBJECT_TOO_LARGE = 'gitObjectTooLarge';
    const STATUS_OPERATION_INDENTITY_NOT_FOUND = 'operationIndentityNotFound';
    const STATUS_ASYNC_OPERATION_NOT_FOUND = 'asyncOperationNotFound';
    const STATUS_OTHER = 'other';
    const STATUS_EMPTY_COMMITTER_SIGNATURE = 'emptyCommitterSignature';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_INVALID_REF_NAME,
            self::STATUS_REF_NAME_CONFLICT,
            self::STATUS_CREATE_BRANCH_PERMISSION_REQUIRED,
            self::STATUS_WRITE_PERMISSION_REQUIRED,
            self::STATUS_TARGET_BRANCH_DELETED,
            self::STATUS_GIT_OBJECT_TOO_LARGE,
            self::STATUS_OPERATION_INDENTITY_NOT_FOUND,
            self::STATUS_ASYNC_OPERATION_NOT_FOUND,
            self::STATUS_OTHER,
            self::STATUS_EMPTY_COMMITTER_SIGNATURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conflict'] = isset($data['conflict']) ? $data['conflict'] : null;
        $this->container['currentCommitId'] = isset($data['currentCommitId']) ? $data['currentCommitId'] : null;
        $this->container['failureMessage'] = isset($data['failureMessage']) ? $data['failureMessage'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['timedout'] = isset($data['timedout']) ? $data['timedout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conflict
     *
     * @return bool
     */
    public function getConflict()
    {
        return $this->container['conflict'];
    }

    /**
     * Sets conflict
     *
     * @param bool $conflict Indicates if there was a conflict generated when trying to cherry pick or revert the changes.
     *
     * @return $this
     */
    public function setConflict($conflict)
    {
        $this->container['conflict'] = $conflict;

        return $this;
    }

    /**
     * Gets currentCommitId
     *
     * @return string
     */
    public function getCurrentCommitId()
    {
        return $this->container['currentCommitId'];
    }

    /**
     * Sets currentCommitId
     *
     * @param string $currentCommitId The current commit from the list of commits that are being cherry picked or reverted.
     *
     * @return $this
     */
    public function setCurrentCommitId($currentCommitId)
    {
        $this->container['currentCommitId'] = $currentCommitId;

        return $this;
    }

    /**
     * Gets failureMessage
     *
     * @return string
     */
    public function getFailureMessage()
    {
        return $this->container['failureMessage'];
    }

    /**
     * Sets failureMessage
     *
     * @param string $failureMessage Detailed information about why the cherry pick or revert failed to complete.
     *
     * @return $this
     */
    public function setFailureMessage($failureMessage)
    {
        $this->container['failureMessage'] = $failureMessage;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return double
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param double $progress A number between 0 and 1 indicating the percent complete of the operation.
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Provides a status code that indicates the reason the cherry pick or revert failed.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timedout
     *
     * @return bool
     */
    public function getTimedout()
    {
        return $this->container['timedout'];
    }

    /**
     * Sets timedout
     *
     * @param bool $timedout Indicates if the operation went beyond the maximum time allowed for a cherry pick or revert operation.
     *
     * @return $this
     */
    public function setTimedout($timedout)
    {
        $this->container['timedout'] = $timedout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


