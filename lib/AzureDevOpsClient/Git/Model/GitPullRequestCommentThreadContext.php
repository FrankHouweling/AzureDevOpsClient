<?php
/**
 * GitPullRequestCommentThreadContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitPullRequestCommentThreadContext Class Doc Comment
 *
 * @category Class
 * @description Comment thread context contains details about what diffs were being viewed at the time of thread creation and whether or not the thread has been tracked from that original diff.
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitPullRequestCommentThreadContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitPullRequestCommentThreadContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'changeTrackingId' => 'int',
        'iterationContext' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentIterationContext',
        'trackingCriteria' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentTrackingCriteria'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'changeTrackingId' => 'int32',
        'iterationContext' => null,
        'trackingCriteria' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'changeTrackingId' => 'changeTrackingId',
        'iterationContext' => 'iterationContext',
        'trackingCriteria' => 'trackingCriteria'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'changeTrackingId' => 'setChangeTrackingId',
        'iterationContext' => 'setIterationContext',
        'trackingCriteria' => 'setTrackingCriteria'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'changeTrackingId' => 'getChangeTrackingId',
        'iterationContext' => 'getIterationContext',
        'trackingCriteria' => 'getTrackingCriteria'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['changeTrackingId'] = isset($data['changeTrackingId']) ? $data['changeTrackingId'] : null;
        $this->container['iterationContext'] = isset($data['iterationContext']) ? $data['iterationContext'] : null;
        $this->container['trackingCriteria'] = isset($data['trackingCriteria']) ? $data['trackingCriteria'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets changeTrackingId
     *
     * @return int
     */
    public function getChangeTrackingId()
    {
        return $this->container['changeTrackingId'];
    }

    /**
     * Sets changeTrackingId
     *
     * @param int $changeTrackingId Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.
     *
     * @return $this
     */
    public function setChangeTrackingId($changeTrackingId)
    {
        $this->container['changeTrackingId'] = $changeTrackingId;

        return $this;
    }

    /**
     * Gets iterationContext
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentIterationContext
     */
    public function getIterationContext()
    {
        return $this->container['iterationContext'];
    }

    /**
     * Sets iterationContext
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentIterationContext $iterationContext The iteration context being viewed when the thread was created.
     *
     * @return $this
     */
    public function setIterationContext($iterationContext)
    {
        $this->container['iterationContext'] = $iterationContext;

        return $this;
    }

    /**
     * Gets trackingCriteria
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentTrackingCriteria
     */
    public function getTrackingCriteria()
    {
        return $this->container['trackingCriteria'];
    }

    /**
     * Sets trackingCriteria
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentTrackingCriteria $trackingCriteria The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.
     *
     * @return $this
     */
    public function setTrackingCriteria($trackingCriteria)
    {
        $this->container['trackingCriteria'] = $trackingCriteria;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


