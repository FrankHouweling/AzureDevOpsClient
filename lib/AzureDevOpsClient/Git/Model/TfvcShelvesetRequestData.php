<?php
/**
 * TfvcShelvesetRequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * TfvcShelvesetRequestData Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TfvcShelvesetRequestData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TfvcShelvesetRequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'includeDetails' => 'bool',
        'includeLinks' => 'bool',
        'includeWorkItems' => 'bool',
        'maxChangeCount' => 'int',
        'maxCommentLength' => 'int',
        'name' => 'string',
        'owner' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'includeDetails' => null,
        'includeLinks' => null,
        'includeWorkItems' => null,
        'maxChangeCount' => 'int32',
        'maxCommentLength' => 'int32',
        'name' => null,
        'owner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'includeDetails' => 'includeDetails',
        'includeLinks' => 'includeLinks',
        'includeWorkItems' => 'includeWorkItems',
        'maxChangeCount' => 'maxChangeCount',
        'maxCommentLength' => 'maxCommentLength',
        'name' => 'name',
        'owner' => 'owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'includeDetails' => 'setIncludeDetails',
        'includeLinks' => 'setIncludeLinks',
        'includeWorkItems' => 'setIncludeWorkItems',
        'maxChangeCount' => 'setMaxChangeCount',
        'maxCommentLength' => 'setMaxCommentLength',
        'name' => 'setName',
        'owner' => 'setOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'includeDetails' => 'getIncludeDetails',
        'includeLinks' => 'getIncludeLinks',
        'includeWorkItems' => 'getIncludeWorkItems',
        'maxChangeCount' => 'getMaxChangeCount',
        'maxCommentLength' => 'getMaxCommentLength',
        'name' => 'getName',
        'owner' => 'getOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['includeDetails'] = isset($data['includeDetails']) ? $data['includeDetails'] : null;
        $this->container['includeLinks'] = isset($data['includeLinks']) ? $data['includeLinks'] : null;
        $this->container['includeWorkItems'] = isset($data['includeWorkItems']) ? $data['includeWorkItems'] : null;
        $this->container['maxChangeCount'] = isset($data['maxChangeCount']) ? $data['maxChangeCount'] : null;
        $this->container['maxCommentLength'] = isset($data['maxCommentLength']) ? $data['maxCommentLength'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets includeDetails
     *
     * @return bool
     */
    public function getIncludeDetails()
    {
        return $this->container['includeDetails'];
    }

    /**
     * Sets includeDetails
     *
     * @param bool $includeDetails Whether to include policyOverride and notes Only applies when requesting a single deep shelveset
     *
     * @return $this
     */
    public function setIncludeDetails($includeDetails)
    {
        $this->container['includeDetails'] = $includeDetails;

        return $this;
    }

    /**
     * Gets includeLinks
     *
     * @return bool
     */
    public function getIncludeLinks()
    {
        return $this->container['includeLinks'];
    }

    /**
     * Sets includeLinks
     *
     * @param bool $includeLinks Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.
     *
     * @return $this
     */
    public function setIncludeLinks($includeLinks)
    {
        $this->container['includeLinks'] = $includeLinks;

        return $this;
    }

    /**
     * Gets includeWorkItems
     *
     * @return bool
     */
    public function getIncludeWorkItems()
    {
        return $this->container['includeWorkItems'];
    }

    /**
     * Sets includeWorkItems
     *
     * @param bool $includeWorkItems Whether to include workItems
     *
     * @return $this
     */
    public function setIncludeWorkItems($includeWorkItems)
    {
        $this->container['includeWorkItems'] = $includeWorkItems;

        return $this;
    }

    /**
     * Gets maxChangeCount
     *
     * @return int
     */
    public function getMaxChangeCount()
    {
        return $this->container['maxChangeCount'];
    }

    /**
     * Sets maxChangeCount
     *
     * @param int $maxChangeCount Max number of changes to include
     *
     * @return $this
     */
    public function setMaxChangeCount($maxChangeCount)
    {
        $this->container['maxChangeCount'] = $maxChangeCount;

        return $this;
    }

    /**
     * Gets maxCommentLength
     *
     * @return int
     */
    public function getMaxCommentLength()
    {
        return $this->container['maxCommentLength'];
    }

    /**
     * Sets maxCommentLength
     *
     * @param int $maxCommentLength Max length of comment
     *
     * @return $this
     */
    public function setMaxCommentLength($maxCommentLength)
    {
        $this->container['maxCommentLength'] = $maxCommentLength;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Shelveset name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Owner's ID. Could be a name or a guid.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


