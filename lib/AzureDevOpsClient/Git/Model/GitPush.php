<?php
/**
 * GitPush
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitPush Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitPush implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitPush';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Git\Model\ReferenceLinks',
        'date' => '\DateTime',
        'pushedBy' => '\FrankHouweling\AzureDevOpsClient\Git\Model\IdentityRef',
        'pushId' => 'int',
        'url' => 'string',
        'commits' => '\FrankHouweling\AzureDevOpsClient\Git\Model\GitCommitRef[]',
        'refUpdates' => '\FrankHouweling\AzureDevOpsClient\Git\Model\GitRefUpdate[]',
        'repository' => '\FrankHouweling\AzureDevOpsClient\Git\Model\GitRepository'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'date' => 'date-time',
        'pushedBy' => null,
        'pushId' => 'int32',
        'url' => null,
        'commits' => null,
        'refUpdates' => null,
        'repository' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'date' => 'date',
        'pushedBy' => 'pushedBy',
        'pushId' => 'pushId',
        'url' => 'url',
        'commits' => 'commits',
        'refUpdates' => 'refUpdates',
        'repository' => 'repository'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'date' => 'setDate',
        'pushedBy' => 'setPushedBy',
        'pushId' => 'setPushId',
        'url' => 'setUrl',
        'commits' => 'setCommits',
        'refUpdates' => 'setRefUpdates',
        'repository' => 'setRepository'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'date' => 'getDate',
        'pushedBy' => 'getPushedBy',
        'pushId' => 'getPushId',
        'url' => 'getUrl',
        'commits' => 'getCommits',
        'refUpdates' => 'getRefUpdates',
        'repository' => 'getRepository'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['pushedBy'] = isset($data['pushedBy']) ? $data['pushedBy'] : null;
        $this->container['pushId'] = isset($data['pushId']) ? $data['pushId'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['commits'] = isset($data['commits']) ? $data['commits'] : null;
        $this->container['refUpdates'] = isset($data['refUpdates']) ? $data['refUpdates'] : null;
        $this->container['repository'] = isset($data['repository']) ? $data['repository'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets pushedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\IdentityRef
     */
    public function getPushedBy()
    {
        return $this->container['pushedBy'];
    }

    /**
     * Sets pushedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\IdentityRef $pushedBy pushedBy
     *
     * @return $this
     */
    public function setPushedBy($pushedBy)
    {
        $this->container['pushedBy'] = $pushedBy;

        return $this;
    }

    /**
     * Gets pushId
     *
     * @return int
     */
    public function getPushId()
    {
        return $this->container['pushId'];
    }

    /**
     * Sets pushId
     *
     * @param int $pushId pushId
     *
     * @return $this
     */
    public function setPushId($pushId)
    {
        $this->container['pushId'] = $pushId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\GitCommitRef[]
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\GitCommitRef[] $commits commits
     *
     * @return $this
     */
    public function setCommits($commits)
    {
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets refUpdates
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\GitRefUpdate[]
     */
    public function getRefUpdates()
    {
        return $this->container['refUpdates'];
    }

    /**
     * Sets refUpdates
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\GitRefUpdate[] $refUpdates refUpdates
     *
     * @return $this
     */
    public function setRefUpdates($refUpdates)
    {
        $this->container['refUpdates'] = $refUpdates;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\GitRepository
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\GitRepository $repository repository
     *
     * @return $this
     */
    public function setRepository($repository)
    {
        $this->container['repository'] = $repository;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


