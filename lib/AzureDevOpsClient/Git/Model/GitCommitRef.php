<?php
/**
 * GitCommitRef
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitCommitRef Class Doc Comment
 *
 * @category Class
 * @description Provides properties that describe a Git commit and associated metadata.
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitCommitRef implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitCommitRef';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks',
        'author' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate',
        'changeCounts' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ChangeCountDictionary',
        'changes' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitChange[]',
        'comment' => 'string',
        'commentTruncated' => 'bool',
        'commitId' => 'string',
        'committer' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate',
        'parents' => 'string[]',
        'push' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitPushRef',
        'remoteUrl' => 'string',
        'statuses' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitStatus[]',
        'url' => 'string',
        'workItems' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ResourceRef[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'author' => null,
        'changeCounts' => null,
        'changes' => null,
        'comment' => null,
        'commentTruncated' => null,
        'commitId' => null,
        'committer' => null,
        'parents' => null,
        'push' => null,
        'remoteUrl' => null,
        'statuses' => null,
        'url' => null,
        'workItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'author' => 'author',
        'changeCounts' => 'changeCounts',
        'changes' => 'changes',
        'comment' => 'comment',
        'commentTruncated' => 'commentTruncated',
        'commitId' => 'commitId',
        'committer' => 'committer',
        'parents' => 'parents',
        'push' => 'push',
        'remoteUrl' => 'remoteUrl',
        'statuses' => 'statuses',
        'url' => 'url',
        'workItems' => 'workItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'author' => 'setAuthor',
        'changeCounts' => 'setChangeCounts',
        'changes' => 'setChanges',
        'comment' => 'setComment',
        'commentTruncated' => 'setCommentTruncated',
        'commitId' => 'setCommitId',
        'committer' => 'setCommitter',
        'parents' => 'setParents',
        'push' => 'setPush',
        'remoteUrl' => 'setRemoteUrl',
        'statuses' => 'setStatuses',
        'url' => 'setUrl',
        'workItems' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'author' => 'getAuthor',
        'changeCounts' => 'getChangeCounts',
        'changes' => 'getChanges',
        'comment' => 'getComment',
        'commentTruncated' => 'getCommentTruncated',
        'commitId' => 'getCommitId',
        'committer' => 'getCommitter',
        'parents' => 'getParents',
        'push' => 'getPush',
        'remoteUrl' => 'getRemoteUrl',
        'statuses' => 'getStatuses',
        'url' => 'getUrl',
        'workItems' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['changeCounts'] = isset($data['changeCounts']) ? $data['changeCounts'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['commentTruncated'] = isset($data['commentTruncated']) ? $data['commentTruncated'] : null;
        $this->container['commitId'] = isset($data['commitId']) ? $data['commitId'] : null;
        $this->container['committer'] = isset($data['committer']) ? $data['committer'] : null;
        $this->container['parents'] = isset($data['parents']) ? $data['parents'] : null;
        $this->container['push'] = isset($data['push']) ? $data['push'] : null;
        $this->container['remoteUrl'] = isset($data['remoteUrl']) ? $data['remoteUrl'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['workItems'] = isset($data['workItems']) ? $data['workItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks $links A collection of related REST reference links.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate $author Author of the commit.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets changeCounts
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ChangeCountDictionary
     */
    public function getChangeCounts()
    {
        return $this->container['changeCounts'];
    }

    /**
     * Sets changeCounts
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ChangeCountDictionary $changeCounts Counts of the types of changes (edits, deletes, etc.) included with the commit.
     *
     * @return $this
     */
    public function setChangeCounts($changeCounts)
    {
        $this->container['changeCounts'] = $changeCounts;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitChange[]
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitChange[] $changes An enumeration of the changes included with the commit.
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment or message of the commit.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets commentTruncated
     *
     * @return bool
     */
    public function getCommentTruncated()
    {
        return $this->container['commentTruncated'];
    }

    /**
     * Sets commentTruncated
     *
     * @param bool $commentTruncated Indicates if the comment is truncated from the full Git commit comment message.
     *
     * @return $this
     */
    public function setCommentTruncated($commentTruncated)
    {
        $this->container['commentTruncated'] = $commentTruncated;

        return $this;
    }

    /**
     * Gets commitId
     *
     * @return string
     */
    public function getCommitId()
    {
        return $this->container['commitId'];
    }

    /**
     * Sets commitId
     *
     * @param string $commitId ID (SHA-1) of the commit.
     *
     * @return $this
     */
    public function setCommitId($commitId)
    {
        $this->container['commitId'] = $commitId;

        return $this;
    }

    /**
     * Gets committer
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate
     */
    public function getCommitter()
    {
        return $this->container['committer'];
    }

    /**
     * Sets committer
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitUserDate $committer Committer of the commit.
     *
     * @return $this
     */
    public function setCommitter($committer)
    {
        $this->container['committer'] = $committer;

        return $this;
    }

    /**
     * Gets parents
     *
     * @return string[]
     */
    public function getParents()
    {
        return $this->container['parents'];
    }

    /**
     * Sets parents
     *
     * @param string[] $parents An enumeration of the parent commit IDs for this commit.
     *
     * @return $this
     */
    public function setParents($parents)
    {
        $this->container['parents'] = $parents;

        return $this;
    }

    /**
     * Gets push
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitPushRef
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitPushRef $push The push associated with this commit.
     *
     * @return $this
     */
    public function setPush($push)
    {
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets remoteUrl
     *
     * @return string
     */
    public function getRemoteUrl()
    {
        return $this->container['remoteUrl'];
    }

    /**
     * Sets remoteUrl
     *
     * @param string $remoteUrl Remote URL path to the commit.
     *
     * @return $this
     */
    public function setRemoteUrl($remoteUrl)
    {
        $this->container['remoteUrl'] = $remoteUrl;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitStatus[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitStatus[] $statuses A list of status metadata from services and extensions that may associate additional information to the commit.
     *
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url REST URL for this resource.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets workItems
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ResourceRef[]
     */
    public function getWorkItems()
    {
        return $this->container['workItems'];
    }

    /**
     * Sets workItems
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ResourceRef[] $workItems A list of workitems associated with this commit.
     *
     * @return $this
     */
    public function setWorkItems($workItems)
    {
        $this->container['workItems'] = $workItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


