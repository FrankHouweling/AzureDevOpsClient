<?php
/**
 * GitItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitItem Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks',
        'content' => 'string',
        'contentMetadata' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\FileContentMetadata',
        'isFolder' => 'bool',
        'isSymLink' => 'bool',
        'path' => 'string',
        'url' => 'string',
        'commitId' => 'string',
        'gitObjectType' => 'string',
        'latestProcessedChange' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitCommitRef',
        'objectId' => 'string',
        'originalObjectId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'content' => null,
        'contentMetadata' => null,
        'isFolder' => null,
        'isSymLink' => null,
        'path' => null,
        'url' => null,
        'commitId' => null,
        'gitObjectType' => null,
        'latestProcessedChange' => null,
        'objectId' => null,
        'originalObjectId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'content' => 'content',
        'contentMetadata' => 'contentMetadata',
        'isFolder' => 'isFolder',
        'isSymLink' => 'isSymLink',
        'path' => 'path',
        'url' => 'url',
        'commitId' => 'commitId',
        'gitObjectType' => 'gitObjectType',
        'latestProcessedChange' => 'latestProcessedChange',
        'objectId' => 'objectId',
        'originalObjectId' => 'originalObjectId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'content' => 'setContent',
        'contentMetadata' => 'setContentMetadata',
        'isFolder' => 'setIsFolder',
        'isSymLink' => 'setIsSymLink',
        'path' => 'setPath',
        'url' => 'setUrl',
        'commitId' => 'setCommitId',
        'gitObjectType' => 'setGitObjectType',
        'latestProcessedChange' => 'setLatestProcessedChange',
        'objectId' => 'setObjectId',
        'originalObjectId' => 'setOriginalObjectId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'content' => 'getContent',
        'contentMetadata' => 'getContentMetadata',
        'isFolder' => 'getIsFolder',
        'isSymLink' => 'getIsSymLink',
        'path' => 'getPath',
        'url' => 'getUrl',
        'commitId' => 'getCommitId',
        'gitObjectType' => 'getGitObjectType',
        'latestProcessedChange' => 'getLatestProcessedChange',
        'objectId' => 'getObjectId',
        'originalObjectId' => 'getOriginalObjectId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GIT_OBJECT_TYPE_BAD = 'bad';
    const GIT_OBJECT_TYPE_COMMIT = 'commit';
    const GIT_OBJECT_TYPE_TREE = 'tree';
    const GIT_OBJECT_TYPE_BLOB = 'blob';
    const GIT_OBJECT_TYPE_TAG = 'tag';
    const GIT_OBJECT_TYPE_EXT2 = 'ext2';
    const GIT_OBJECT_TYPE_OFS_DELTA = 'ofsDelta';
    const GIT_OBJECT_TYPE_REF_DELTA = 'refDelta';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGitObjectTypeAllowableValues()
    {
        return [
            self::GIT_OBJECT_TYPE_BAD,
            self::GIT_OBJECT_TYPE_COMMIT,
            self::GIT_OBJECT_TYPE_TREE,
            self::GIT_OBJECT_TYPE_BLOB,
            self::GIT_OBJECT_TYPE_TAG,
            self::GIT_OBJECT_TYPE_EXT2,
            self::GIT_OBJECT_TYPE_OFS_DELTA,
            self::GIT_OBJECT_TYPE_REF_DELTA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['contentMetadata'] = isset($data['contentMetadata']) ? $data['contentMetadata'] : null;
        $this->container['isFolder'] = isset($data['isFolder']) ? $data['isFolder'] : null;
        $this->container['isSymLink'] = isset($data['isSymLink']) ? $data['isSymLink'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['commitId'] = isset($data['commitId']) ? $data['commitId'] : null;
        $this->container['gitObjectType'] = isset($data['gitObjectType']) ? $data['gitObjectType'] : null;
        $this->container['latestProcessedChange'] = isset($data['latestProcessedChange']) ? $data['latestProcessedChange'] : null;
        $this->container['objectId'] = isset($data['objectId']) ? $data['objectId'] : null;
        $this->container['originalObjectId'] = isset($data['originalObjectId']) ? $data['originalObjectId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGitObjectTypeAllowableValues();
        if (!is_null($this->container['gitObjectType']) && !in_array($this->container['gitObjectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gitObjectType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets contentMetadata
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\FileContentMetadata
     */
    public function getContentMetadata()
    {
        return $this->container['contentMetadata'];
    }

    /**
     * Sets contentMetadata
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\FileContentMetadata $contentMetadata contentMetadata
     *
     * @return $this
     */
    public function setContentMetadata($contentMetadata)
    {
        $this->container['contentMetadata'] = $contentMetadata;

        return $this;
    }

    /**
     * Gets isFolder
     *
     * @return bool
     */
    public function getIsFolder()
    {
        return $this->container['isFolder'];
    }

    /**
     * Sets isFolder
     *
     * @param bool $isFolder isFolder
     *
     * @return $this
     */
    public function setIsFolder($isFolder)
    {
        $this->container['isFolder'] = $isFolder;

        return $this;
    }

    /**
     * Gets isSymLink
     *
     * @return bool
     */
    public function getIsSymLink()
    {
        return $this->container['isSymLink'];
    }

    /**
     * Sets isSymLink
     *
     * @param bool $isSymLink isSymLink
     *
     * @return $this
     */
    public function setIsSymLink($isSymLink)
    {
        $this->container['isSymLink'] = $isSymLink;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets commitId
     *
     * @return string
     */
    public function getCommitId()
    {
        return $this->container['commitId'];
    }

    /**
     * Sets commitId
     *
     * @param string $commitId SHA1 of commit item was fetched at
     *
     * @return $this
     */
    public function setCommitId($commitId)
    {
        $this->container['commitId'] = $commitId;

        return $this;
    }

    /**
     * Gets gitObjectType
     *
     * @return string
     */
    public function getGitObjectType()
    {
        return $this->container['gitObjectType'];
    }

    /**
     * Sets gitObjectType
     *
     * @param string $gitObjectType Type of object (Commit, Tree, Blob, Tag, ...)
     *
     * @return $this
     */
    public function setGitObjectType($gitObjectType)
    {
        $allowedValues = $this->getGitObjectTypeAllowableValues();
        if (!is_null($gitObjectType) && !in_array($gitObjectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gitObjectType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gitObjectType'] = $gitObjectType;

        return $this;
    }

    /**
     * Gets latestProcessedChange
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitCommitRef
     */
    public function getLatestProcessedChange()
    {
        return $this->container['latestProcessedChange'];
    }

    /**
     * Sets latestProcessedChange
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitCommitRef $latestProcessedChange Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached
     *
     * @return $this
     */
    public function setLatestProcessedChange($latestProcessedChange)
    {
        $this->container['latestProcessedChange'] = $latestProcessedChange;

        return $this;
    }

    /**
     * Gets objectId
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['objectId'];
    }

    /**
     * Sets objectId
     *
     * @param string $objectId Git object id
     *
     * @return $this
     */
    public function setObjectId($objectId)
    {
        $this->container['objectId'] = $objectId;

        return $this;
    }

    /**
     * Gets originalObjectId
     *
     * @return string
     */
    public function getOriginalObjectId()
    {
        return $this->container['originalObjectId'];
    }

    /**
     * Sets originalObjectId
     *
     * @param string $originalObjectId Git object id
     *
     * @return $this
     */
    public function setOriginalObjectId($originalObjectId)
    {
        $this->container['originalObjectId'] = $originalObjectId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


