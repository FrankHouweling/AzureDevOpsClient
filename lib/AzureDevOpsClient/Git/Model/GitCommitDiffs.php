<?php
/**
 * GitCommitDiffs
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitCommitDiffs Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitCommitDiffs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitCommitDiffs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aheadCount' => 'int',
        'allChangesIncluded' => 'bool',
        'baseCommit' => 'string',
        'behindCount' => 'int',
        'changeCounts' => 'map[string,int]',
        'changes' => '\FrankHouweling\AzureDevOpsClient\Git\Model\GitChange[]',
        'commonCommit' => 'string',
        'targetCommit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aheadCount' => 'int32',
        'allChangesIncluded' => null,
        'baseCommit' => null,
        'behindCount' => 'int32',
        'changeCounts' => 'int32',
        'changes' => null,
        'commonCommit' => null,
        'targetCommit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aheadCount' => 'aheadCount',
        'allChangesIncluded' => 'allChangesIncluded',
        'baseCommit' => 'baseCommit',
        'behindCount' => 'behindCount',
        'changeCounts' => 'changeCounts',
        'changes' => 'changes',
        'commonCommit' => 'commonCommit',
        'targetCommit' => 'targetCommit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aheadCount' => 'setAheadCount',
        'allChangesIncluded' => 'setAllChangesIncluded',
        'baseCommit' => 'setBaseCommit',
        'behindCount' => 'setBehindCount',
        'changeCounts' => 'setChangeCounts',
        'changes' => 'setChanges',
        'commonCommit' => 'setCommonCommit',
        'targetCommit' => 'setTargetCommit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aheadCount' => 'getAheadCount',
        'allChangesIncluded' => 'getAllChangesIncluded',
        'baseCommit' => 'getBaseCommit',
        'behindCount' => 'getBehindCount',
        'changeCounts' => 'getChangeCounts',
        'changes' => 'getChanges',
        'commonCommit' => 'getCommonCommit',
        'targetCommit' => 'getTargetCommit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aheadCount'] = isset($data['aheadCount']) ? $data['aheadCount'] : null;
        $this->container['allChangesIncluded'] = isset($data['allChangesIncluded']) ? $data['allChangesIncluded'] : null;
        $this->container['baseCommit'] = isset($data['baseCommit']) ? $data['baseCommit'] : null;
        $this->container['behindCount'] = isset($data['behindCount']) ? $data['behindCount'] : null;
        $this->container['changeCounts'] = isset($data['changeCounts']) ? $data['changeCounts'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['commonCommit'] = isset($data['commonCommit']) ? $data['commonCommit'] : null;
        $this->container['targetCommit'] = isset($data['targetCommit']) ? $data['targetCommit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aheadCount
     *
     * @return int
     */
    public function getAheadCount()
    {
        return $this->container['aheadCount'];
    }

    /**
     * Sets aheadCount
     *
     * @param int $aheadCount aheadCount
     *
     * @return $this
     */
    public function setAheadCount($aheadCount)
    {
        $this->container['aheadCount'] = $aheadCount;

        return $this;
    }

    /**
     * Gets allChangesIncluded
     *
     * @return bool
     */
    public function getAllChangesIncluded()
    {
        return $this->container['allChangesIncluded'];
    }

    /**
     * Sets allChangesIncluded
     *
     * @param bool $allChangesIncluded allChangesIncluded
     *
     * @return $this
     */
    public function setAllChangesIncluded($allChangesIncluded)
    {
        $this->container['allChangesIncluded'] = $allChangesIncluded;

        return $this;
    }

    /**
     * Gets baseCommit
     *
     * @return string
     */
    public function getBaseCommit()
    {
        return $this->container['baseCommit'];
    }

    /**
     * Sets baseCommit
     *
     * @param string $baseCommit baseCommit
     *
     * @return $this
     */
    public function setBaseCommit($baseCommit)
    {
        $this->container['baseCommit'] = $baseCommit;

        return $this;
    }

    /**
     * Gets behindCount
     *
     * @return int
     */
    public function getBehindCount()
    {
        return $this->container['behindCount'];
    }

    /**
     * Sets behindCount
     *
     * @param int $behindCount behindCount
     *
     * @return $this
     */
    public function setBehindCount($behindCount)
    {
        $this->container['behindCount'] = $behindCount;

        return $this;
    }

    /**
     * Gets changeCounts
     *
     * @return map[string,int]
     */
    public function getChangeCounts()
    {
        return $this->container['changeCounts'];
    }

    /**
     * Sets changeCounts
     *
     * @param map[string,int] $changeCounts changeCounts
     *
     * @return $this
     */
    public function setChangeCounts($changeCounts)
    {
        $this->container['changeCounts'] = $changeCounts;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\GitChange[]
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\GitChange[] $changes changes
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets commonCommit
     *
     * @return string
     */
    public function getCommonCommit()
    {
        return $this->container['commonCommit'];
    }

    /**
     * Sets commonCommit
     *
     * @param string $commonCommit commonCommit
     *
     * @return $this
     */
    public function setCommonCommit($commonCommit)
    {
        $this->container['commonCommit'] = $commonCommit;

        return $this;
    }

    /**
     * Gets targetCommit
     *
     * @return string
     */
    public function getTargetCommit()
    {
        return $this->container['targetCommit'];
    }

    /**
     * Sets targetCommit
     *
     * @param string $targetCommit targetCommit
     *
     * @return $this
     */
    public function setTargetCommit($targetCommit)
    {
        $this->container['targetCommit'] = $targetCommit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


