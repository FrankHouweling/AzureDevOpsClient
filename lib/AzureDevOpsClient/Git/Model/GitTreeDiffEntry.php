<?php
/**
 * GitTreeDiffEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitTreeDiffEntry Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitTreeDiffEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitTreeDiffEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseObjectId' => 'string',
        'changeType' => 'string',
        'objectType' => 'string',
        'path' => 'string',
        'targetObjectId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baseObjectId' => null,
        'changeType' => null,
        'objectType' => null,
        'path' => null,
        'targetObjectId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baseObjectId' => 'baseObjectId',
        'changeType' => 'changeType',
        'objectType' => 'objectType',
        'path' => 'path',
        'targetObjectId' => 'targetObjectId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baseObjectId' => 'setBaseObjectId',
        'changeType' => 'setChangeType',
        'objectType' => 'setObjectType',
        'path' => 'setPath',
        'targetObjectId' => 'setTargetObjectId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baseObjectId' => 'getBaseObjectId',
        'changeType' => 'getChangeType',
        'objectType' => 'getObjectType',
        'path' => 'getPath',
        'targetObjectId' => 'getTargetObjectId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHANGE_TYPE_NONE = 'none';
    const CHANGE_TYPE_ADD = 'add';
    const CHANGE_TYPE_EDIT = 'edit';
    const CHANGE_TYPE_ENCODING = 'encoding';
    const CHANGE_TYPE_RENAME = 'rename';
    const CHANGE_TYPE_DELETE = 'delete';
    const CHANGE_TYPE_UNDELETE = 'undelete';
    const CHANGE_TYPE_BRANCH = 'branch';
    const CHANGE_TYPE_MERGE = 'merge';
    const CHANGE_TYPE_LOCK = 'lock';
    const CHANGE_TYPE_ROLLBACK = 'rollback';
    const CHANGE_TYPE_SOURCE_RENAME = 'sourceRename';
    const CHANGE_TYPE_TARGET_RENAME = 'targetRename';
    const CHANGE_TYPE_PROPERTY = 'property';
    const CHANGE_TYPE_ALL = 'all';
    const OBJECT_TYPE_BAD = 'bad';
    const OBJECT_TYPE_COMMIT = 'commit';
    const OBJECT_TYPE_TREE = 'tree';
    const OBJECT_TYPE_BLOB = 'blob';
    const OBJECT_TYPE_TAG = 'tag';
    const OBJECT_TYPE_EXT2 = 'ext2';
    const OBJECT_TYPE_OFS_DELTA = 'ofsDelta';
    const OBJECT_TYPE_REF_DELTA = 'refDelta';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeTypeAllowableValues()
    {
        return [
            self::CHANGE_TYPE_NONE,
            self::CHANGE_TYPE_ADD,
            self::CHANGE_TYPE_EDIT,
            self::CHANGE_TYPE_ENCODING,
            self::CHANGE_TYPE_RENAME,
            self::CHANGE_TYPE_DELETE,
            self::CHANGE_TYPE_UNDELETE,
            self::CHANGE_TYPE_BRANCH,
            self::CHANGE_TYPE_MERGE,
            self::CHANGE_TYPE_LOCK,
            self::CHANGE_TYPE_ROLLBACK,
            self::CHANGE_TYPE_SOURCE_RENAME,
            self::CHANGE_TYPE_TARGET_RENAME,
            self::CHANGE_TYPE_PROPERTY,
            self::CHANGE_TYPE_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectTypeAllowableValues()
    {
        return [
            self::OBJECT_TYPE_BAD,
            self::OBJECT_TYPE_COMMIT,
            self::OBJECT_TYPE_TREE,
            self::OBJECT_TYPE_BLOB,
            self::OBJECT_TYPE_TAG,
            self::OBJECT_TYPE_EXT2,
            self::OBJECT_TYPE_OFS_DELTA,
            self::OBJECT_TYPE_REF_DELTA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseObjectId'] = isset($data['baseObjectId']) ? $data['baseObjectId'] : null;
        $this->container['changeType'] = isset($data['changeType']) ? $data['changeType'] : null;
        $this->container['objectType'] = isset($data['objectType']) ? $data['objectType'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['targetObjectId'] = isset($data['targetObjectId']) ? $data['targetObjectId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($this->container['changeType']) && !in_array($this->container['changeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'changeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getObjectTypeAllowableValues();
        if (!is_null($this->container['objectType']) && !in_array($this->container['objectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'objectType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baseObjectId
     *
     * @return string
     */
    public function getBaseObjectId()
    {
        return $this->container['baseObjectId'];
    }

    /**
     * Sets baseObjectId
     *
     * @param string $baseObjectId SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.
     *
     * @return $this
     */
    public function setBaseObjectId($baseObjectId)
    {
        $this->container['baseObjectId'] = $baseObjectId;

        return $this;
    }

    /**
     * Gets changeType
     *
     * @return string
     */
    public function getChangeType()
    {
        return $this->container['changeType'];
    }

    /**
     * Sets changeType
     *
     * @param string $changeType Type of change that affected this entry.
     *
     * @return $this
     */
    public function setChangeType($changeType)
    {
        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($changeType) && !in_array($changeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'changeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['changeType'] = $changeType;

        return $this;
    }

    /**
     * Gets objectType
     *
     * @return string
     */
    public function getObjectType()
    {
        return $this->container['objectType'];
    }

    /**
     * Sets objectType
     *
     * @param string $objectType Object type of the tree entry. Blob, Tree or Commit(\"submodule\")
     *
     * @return $this
     */
    public function setObjectType($objectType)
    {
        $allowedValues = $this->getObjectTypeAllowableValues();
        if (!is_null($objectType) && !in_array($objectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'objectType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['objectType'] = $objectType;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Relative path in base and target trees.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets targetObjectId
     *
     * @return string
     */
    public function getTargetObjectId()
    {
        return $this->container['targetObjectId'];
    }

    /**
     * Sets targetObjectId
     *
     * @param string $targetObjectId SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.
     *
     * @return $this
     */
    public function setTargetObjectId($targetObjectId)
    {
        $this->container['targetObjectId'] = $targetObjectId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


