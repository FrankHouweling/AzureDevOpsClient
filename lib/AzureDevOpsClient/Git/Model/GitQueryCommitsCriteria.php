<?php
/**
 * GitQueryCommitsCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Git\ObjectSerializer;

/**
 * GitQueryCommitsCriteria Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitQueryCommitsCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitQueryCommitsCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'skip' => 'int',
        'top' => 'int',
        'author' => 'string',
        'compareVersion' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor',
        'excludeDeletes' => 'bool',
        'fromCommitId' => 'string',
        'fromDate' => 'string',
        'historyMode' => 'string',
        'ids' => 'string[]',
        'includeLinks' => 'bool',
        'includePushData' => 'bool',
        'includeUserImageUrl' => 'bool',
        'includeWorkItems' => 'bool',
        'itemPath' => 'string',
        'itemVersion' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor',
        'showOldestCommitsFirst' => 'bool',
        'toCommitId' => 'string',
        'toDate' => 'string',
        'user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'skip' => 'int32',
        'top' => 'int32',
        'author' => null,
        'compareVersion' => null,
        'excludeDeletes' => null,
        'fromCommitId' => null,
        'fromDate' => null,
        'historyMode' => null,
        'ids' => null,
        'includeLinks' => null,
        'includePushData' => null,
        'includeUserImageUrl' => null,
        'includeWorkItems' => null,
        'itemPath' => null,
        'itemVersion' => null,
        'showOldestCommitsFirst' => null,
        'toCommitId' => null,
        'toDate' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skip' => '$skip',
        'top' => '$top',
        'author' => 'author',
        'compareVersion' => 'compareVersion',
        'excludeDeletes' => 'excludeDeletes',
        'fromCommitId' => 'fromCommitId',
        'fromDate' => 'fromDate',
        'historyMode' => 'historyMode',
        'ids' => 'ids',
        'includeLinks' => 'includeLinks',
        'includePushData' => 'includePushData',
        'includeUserImageUrl' => 'includeUserImageUrl',
        'includeWorkItems' => 'includeWorkItems',
        'itemPath' => 'itemPath',
        'itemVersion' => 'itemVersion',
        'showOldestCommitsFirst' => 'showOldestCommitsFirst',
        'toCommitId' => 'toCommitId',
        'toDate' => 'toDate',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skip' => 'setSkip',
        'top' => 'setTop',
        'author' => 'setAuthor',
        'compareVersion' => 'setCompareVersion',
        'excludeDeletes' => 'setExcludeDeletes',
        'fromCommitId' => 'setFromCommitId',
        'fromDate' => 'setFromDate',
        'historyMode' => 'setHistoryMode',
        'ids' => 'setIds',
        'includeLinks' => 'setIncludeLinks',
        'includePushData' => 'setIncludePushData',
        'includeUserImageUrl' => 'setIncludeUserImageUrl',
        'includeWorkItems' => 'setIncludeWorkItems',
        'itemPath' => 'setItemPath',
        'itemVersion' => 'setItemVersion',
        'showOldestCommitsFirst' => 'setShowOldestCommitsFirst',
        'toCommitId' => 'setToCommitId',
        'toDate' => 'setToDate',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skip' => 'getSkip',
        'top' => 'getTop',
        'author' => 'getAuthor',
        'compareVersion' => 'getCompareVersion',
        'excludeDeletes' => 'getExcludeDeletes',
        'fromCommitId' => 'getFromCommitId',
        'fromDate' => 'getFromDate',
        'historyMode' => 'getHistoryMode',
        'ids' => 'getIds',
        'includeLinks' => 'getIncludeLinks',
        'includePushData' => 'getIncludePushData',
        'includeUserImageUrl' => 'getIncludeUserImageUrl',
        'includeWorkItems' => 'getIncludeWorkItems',
        'itemPath' => 'getItemPath',
        'itemVersion' => 'getItemVersion',
        'showOldestCommitsFirst' => 'getShowOldestCommitsFirst',
        'toCommitId' => 'getToCommitId',
        'toDate' => 'getToDate',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HISTORY_MODE_SIMPLIFIED_HISTORY = 'simplifiedHistory';
    const HISTORY_MODE_FIRST_PARENT = 'firstParent';
    const HISTORY_MODE_FULL_HISTORY = 'fullHistory';
    const HISTORY_MODE_FULL_HISTORY_SIMPLIFY_MERGES = 'fullHistorySimplifyMerges';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHistoryModeAllowableValues()
    {
        return [
            self::HISTORY_MODE_SIMPLIFIED_HISTORY,
            self::HISTORY_MODE_FIRST_PARENT,
            self::HISTORY_MODE_FULL_HISTORY,
            self::HISTORY_MODE_FULL_HISTORY_SIMPLIFY_MERGES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
        $this->container['top'] = isset($data['top']) ? $data['top'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['compareVersion'] = isset($data['compareVersion']) ? $data['compareVersion'] : null;
        $this->container['excludeDeletes'] = isset($data['excludeDeletes']) ? $data['excludeDeletes'] : null;
        $this->container['fromCommitId'] = isset($data['fromCommitId']) ? $data['fromCommitId'] : null;
        $this->container['fromDate'] = isset($data['fromDate']) ? $data['fromDate'] : null;
        $this->container['historyMode'] = isset($data['historyMode']) ? $data['historyMode'] : null;
        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['includeLinks'] = isset($data['includeLinks']) ? $data['includeLinks'] : null;
        $this->container['includePushData'] = isset($data['includePushData']) ? $data['includePushData'] : null;
        $this->container['includeUserImageUrl'] = isset($data['includeUserImageUrl']) ? $data['includeUserImageUrl'] : null;
        $this->container['includeWorkItems'] = isset($data['includeWorkItems']) ? $data['includeWorkItems'] : null;
        $this->container['itemPath'] = isset($data['itemPath']) ? $data['itemPath'] : null;
        $this->container['itemVersion'] = isset($data['itemVersion']) ? $data['itemVersion'] : null;
        $this->container['showOldestCommitsFirst'] = isset($data['showOldestCommitsFirst']) ? $data['showOldestCommitsFirst'] : null;
        $this->container['toCommitId'] = isset($data['toCommitId']) ? $data['toCommitId'] : null;
        $this->container['toDate'] = isset($data['toDate']) ? $data['toDate'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHistoryModeAllowableValues();
        if (!is_null($this->container['historyMode']) && !in_array($this->container['historyMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'historyMode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skip
     *
     * @return int
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int $skip Number of entries to skip
     *
     * @return $this
     */
    public function setSkip($skip)
    {
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets top
     *
     * @return int
     */
    public function getTop()
    {
        return $this->container['top'];
    }

    /**
     * Sets top
     *
     * @param int $top Maximum number of entries to retrieve
     *
     * @return $this
     */
    public function setTop($top)
    {
        $this->container['top'] = $top;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author Alias or display name of the author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets compareVersion
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor
     */
    public function getCompareVersion()
    {
        return $this->container['compareVersion'];
    }

    /**
     * Sets compareVersion
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor $compareVersion Only applicable when ItemVersion specified. If provided, start walking history starting at this commit.
     *
     * @return $this
     */
    public function setCompareVersion($compareVersion)
    {
        $this->container['compareVersion'] = $compareVersion;

        return $this;
    }

    /**
     * Gets excludeDeletes
     *
     * @return bool
     */
    public function getExcludeDeletes()
    {
        return $this->container['excludeDeletes'];
    }

    /**
     * Sets excludeDeletes
     *
     * @param bool $excludeDeletes Only applies when an itemPath is specified. This determines whether to exclude delete entries of the specified path.
     *
     * @return $this
     */
    public function setExcludeDeletes($excludeDeletes)
    {
        $this->container['excludeDeletes'] = $excludeDeletes;

        return $this;
    }

    /**
     * Gets fromCommitId
     *
     * @return string
     */
    public function getFromCommitId()
    {
        return $this->container['fromCommitId'];
    }

    /**
     * Sets fromCommitId
     *
     * @param string $fromCommitId If provided, a lower bound for filtering commits alphabetically
     *
     * @return $this
     */
    public function setFromCommitId($fromCommitId)
    {
        $this->container['fromCommitId'] = $fromCommitId;

        return $this;
    }

    /**
     * Gets fromDate
     *
     * @return string
     */
    public function getFromDate()
    {
        return $this->container['fromDate'];
    }

    /**
     * Sets fromDate
     *
     * @param string $fromDate If provided, only include history entries created after this date (string)
     *
     * @return $this
     */
    public function setFromDate($fromDate)
    {
        $this->container['fromDate'] = $fromDate;

        return $this;
    }

    /**
     * Gets historyMode
     *
     * @return string
     */
    public function getHistoryMode()
    {
        return $this->container['historyMode'];
    }

    /**
     * Sets historyMode
     *
     * @param string $historyMode What Git history mode should be used. This only applies to the search criteria when Ids = null and an itemPath is specified.
     *
     * @return $this
     */
    public function setHistoryMode($historyMode)
    {
        $allowedValues = $this->getHistoryModeAllowableValues();
        if (!is_null($historyMode) && !in_array($historyMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'historyMode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['historyMode'] = $historyMode;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return string[]
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string[] $ids If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets includeLinks
     *
     * @return bool
     */
    public function getIncludeLinks()
    {
        return $this->container['includeLinks'];
    }

    /**
     * Sets includeLinks
     *
     * @param bool $includeLinks Whether to include the _links field on the shallow references
     *
     * @return $this
     */
    public function setIncludeLinks($includeLinks)
    {
        $this->container['includeLinks'] = $includeLinks;

        return $this;
    }

    /**
     * Gets includePushData
     *
     * @return bool
     */
    public function getIncludePushData()
    {
        return $this->container['includePushData'];
    }

    /**
     * Sets includePushData
     *
     * @param bool $includePushData Whether to include the push information
     *
     * @return $this
     */
    public function setIncludePushData($includePushData)
    {
        $this->container['includePushData'] = $includePushData;

        return $this;
    }

    /**
     * Gets includeUserImageUrl
     *
     * @return bool
     */
    public function getIncludeUserImageUrl()
    {
        return $this->container['includeUserImageUrl'];
    }

    /**
     * Sets includeUserImageUrl
     *
     * @param bool $includeUserImageUrl Whether to include the image Url for committers and authors
     *
     * @return $this
     */
    public function setIncludeUserImageUrl($includeUserImageUrl)
    {
        $this->container['includeUserImageUrl'] = $includeUserImageUrl;

        return $this;
    }

    /**
     * Gets includeWorkItems
     *
     * @return bool
     */
    public function getIncludeWorkItems()
    {
        return $this->container['includeWorkItems'];
    }

    /**
     * Sets includeWorkItems
     *
     * @param bool $includeWorkItems Whether to include linked work items
     *
     * @return $this
     */
    public function setIncludeWorkItems($includeWorkItems)
    {
        $this->container['includeWorkItems'] = $includeWorkItems;

        return $this;
    }

    /**
     * Gets itemPath
     *
     * @return string
     */
    public function getItemPath()
    {
        return $this->container['itemPath'];
    }

    /**
     * Sets itemPath
     *
     * @param string $itemPath Path of item to search under
     *
     * @return $this
     */
    public function setItemPath($itemPath)
    {
        $this->container['itemPath'] = $itemPath;

        return $this;
    }

    /**
     * Gets itemVersion
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor
     */
    public function getItemVersion()
    {
        return $this->container['itemVersion'];
    }

    /**
     * Sets itemVersion
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\GitVersionDescriptor $itemVersion If provided, identifies the commit or branch to search
     *
     * @return $this
     */
    public function setItemVersion($itemVersion)
    {
        $this->container['itemVersion'] = $itemVersion;

        return $this;
    }

    /**
     * Gets showOldestCommitsFirst
     *
     * @return bool
     */
    public function getShowOldestCommitsFirst()
    {
        return $this->container['showOldestCommitsFirst'];
    }

    /**
     * Sets showOldestCommitsFirst
     *
     * @param bool $showOldestCommitsFirst If enabled, this option will ignore the itemVersion and compareVersion parameters
     *
     * @return $this
     */
    public function setShowOldestCommitsFirst($showOldestCommitsFirst)
    {
        $this->container['showOldestCommitsFirst'] = $showOldestCommitsFirst;

        return $this;
    }

    /**
     * Gets toCommitId
     *
     * @return string
     */
    public function getToCommitId()
    {
        return $this->container['toCommitId'];
    }

    /**
     * Sets toCommitId
     *
     * @param string $toCommitId If provided, an upper bound for filtering commits alphabetically
     *
     * @return $this
     */
    public function setToCommitId($toCommitId)
    {
        $this->container['toCommitId'] = $toCommitId;

        return $this;
    }

    /**
     * Gets toDate
     *
     * @return string
     */
    public function getToDate()
    {
        return $this->container['toDate'];
    }

    /**
     * Sets toDate
     *
     * @param string $toDate If provided, only include history entries created before this date (string)
     *
     * @return $this
     */
    public function setToDate($toDate)
    {
        $this->container['toDate'] = $toDate;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user Alias or display name of the committer
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


