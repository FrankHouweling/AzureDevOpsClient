<?php
/**
 * CommentTrackingCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Git\ObjectSerializer;

/**
 * CommentTrackingCriteria Class Doc Comment
 *
 * @category Class
 * @description Comment tracking criteria is used to identify which iteration context the thread has been tracked to (if any) along with some detail about the original position and filename.
 * @package  FrankHouweling\AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentTrackingCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommentTrackingCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'firstComparingIteration' => 'int',
        'origFilePath' => 'string',
        'origLeftFileEnd' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition',
        'origLeftFileStart' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition',
        'origRightFileEnd' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition',
        'origRightFileStart' => '\FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition',
        'secondComparingIteration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'firstComparingIteration' => 'int32',
        'origFilePath' => null,
        'origLeftFileEnd' => null,
        'origLeftFileStart' => null,
        'origRightFileEnd' => null,
        'origRightFileStart' => null,
        'secondComparingIteration' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstComparingIteration' => 'firstComparingIteration',
        'origFilePath' => 'origFilePath',
        'origLeftFileEnd' => 'origLeftFileEnd',
        'origLeftFileStart' => 'origLeftFileStart',
        'origRightFileEnd' => 'origRightFileEnd',
        'origRightFileStart' => 'origRightFileStart',
        'secondComparingIteration' => 'secondComparingIteration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firstComparingIteration' => 'setFirstComparingIteration',
        'origFilePath' => 'setOrigFilePath',
        'origLeftFileEnd' => 'setOrigLeftFileEnd',
        'origLeftFileStart' => 'setOrigLeftFileStart',
        'origRightFileEnd' => 'setOrigRightFileEnd',
        'origRightFileStart' => 'setOrigRightFileStart',
        'secondComparingIteration' => 'setSecondComparingIteration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firstComparingIteration' => 'getFirstComparingIteration',
        'origFilePath' => 'getOrigFilePath',
        'origLeftFileEnd' => 'getOrigLeftFileEnd',
        'origLeftFileStart' => 'getOrigLeftFileStart',
        'origRightFileEnd' => 'getOrigRightFileEnd',
        'origRightFileStart' => 'getOrigRightFileStart',
        'secondComparingIteration' => 'getSecondComparingIteration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['firstComparingIteration'] = isset($data['firstComparingIteration']) ? $data['firstComparingIteration'] : null;
        $this->container['origFilePath'] = isset($data['origFilePath']) ? $data['origFilePath'] : null;
        $this->container['origLeftFileEnd'] = isset($data['origLeftFileEnd']) ? $data['origLeftFileEnd'] : null;
        $this->container['origLeftFileStart'] = isset($data['origLeftFileStart']) ? $data['origLeftFileStart'] : null;
        $this->container['origRightFileEnd'] = isset($data['origRightFileEnd']) ? $data['origRightFileEnd'] : null;
        $this->container['origRightFileStart'] = isset($data['origRightFileStart']) ? $data['origRightFileStart'] : null;
        $this->container['secondComparingIteration'] = isset($data['secondComparingIteration']) ? $data['secondComparingIteration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstComparingIteration
     *
     * @return int
     */
    public function getFirstComparingIteration()
    {
        return $this->container['firstComparingIteration'];
    }

    /**
     * Sets firstComparingIteration
     *
     * @param int $firstComparingIteration The iteration of the file on the left side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
     *
     * @return $this
     */
    public function setFirstComparingIteration($firstComparingIteration)
    {
        $this->container['firstComparingIteration'] = $firstComparingIteration;

        return $this;
    }

    /**
     * Gets origFilePath
     *
     * @return string
     */
    public function getOrigFilePath()
    {
        return $this->container['origFilePath'];
    }

    /**
     * Sets origFilePath
     *
     * @param string $origFilePath Original filepath the thread was created on before tracking. This will be different than the current thread filepath if the file in question was renamed in a later iteration.
     *
     * @return $this
     */
    public function setOrigFilePath($origFilePath)
    {
        $this->container['origFilePath'] = $origFilePath;

        return $this;
    }

    /**
     * Gets origLeftFileEnd
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition
     */
    public function getOrigLeftFileEnd()
    {
        return $this->container['origLeftFileEnd'];
    }

    /**
     * Sets origLeftFileEnd
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition $origLeftFileEnd Original position of last character of the thread's span in left file.
     *
     * @return $this
     */
    public function setOrigLeftFileEnd($origLeftFileEnd)
    {
        $this->container['origLeftFileEnd'] = $origLeftFileEnd;

        return $this;
    }

    /**
     * Gets origLeftFileStart
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition
     */
    public function getOrigLeftFileStart()
    {
        return $this->container['origLeftFileStart'];
    }

    /**
     * Sets origLeftFileStart
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition $origLeftFileStart Original position of first character of the thread's span in left file.
     *
     * @return $this
     */
    public function setOrigLeftFileStart($origLeftFileStart)
    {
        $this->container['origLeftFileStart'] = $origLeftFileStart;

        return $this;
    }

    /**
     * Gets origRightFileEnd
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition
     */
    public function getOrigRightFileEnd()
    {
        return $this->container['origRightFileEnd'];
    }

    /**
     * Sets origRightFileEnd
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition $origRightFileEnd Original position of last character of the thread's span in right file.
     *
     * @return $this
     */
    public function setOrigRightFileEnd($origRightFileEnd)
    {
        $this->container['origRightFileEnd'] = $origRightFileEnd;

        return $this;
    }

    /**
     * Gets origRightFileStart
     *
     * @return \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition
     */
    public function getOrigRightFileStart()
    {
        return $this->container['origRightFileStart'];
    }

    /**
     * Sets origRightFileStart
     *
     * @param \FrankHouweling\AzureDevOpsClient\Git\Model\CommentPosition $origRightFileStart Original position of first character of the thread's span in right file.
     *
     * @return $this
     */
    public function setOrigRightFileStart($origRightFileStart)
    {
        $this->container['origRightFileStart'] = $origRightFileStart;

        return $this;
    }

    /**
     * Gets secondComparingIteration
     *
     * @return int
     */
    public function getSecondComparingIteration()
    {
        return $this->container['secondComparingIteration'];
    }

    /**
     * Sets secondComparingIteration
     *
     * @param int $secondComparingIteration The iteration of the file on the right side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
     *
     * @return $this
     */
    public function setSecondComparingIteration($secondComparingIteration)
    {
        $this->container['secondComparingIteration'] = $secondComparingIteration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


