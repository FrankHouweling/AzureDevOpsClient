<?php
/**
 * Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Git\ObjectSerializer;

/**
 * Comment Class Doc Comment
 *
 * @category Class
 * @description Represents a comment which is one of potentially many in a comment thread.
 * @package  AzureDevOpsClient\Git
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Comment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Comment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks',
        'author' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef',
        'commentType' => 'string',
        'content' => 'string',
        'id' => 'int',
        'isDeleted' => 'bool',
        'lastContentUpdatedDate' => '\DateTime',
        'lastUpdatedDate' => '\DateTime',
        'parentCommentId' => 'int',
        'publishedDate' => '\DateTime',
        'usersLiked' => '\AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'author' => null,
        'commentType' => null,
        'content' => null,
        'id' => 'int16',
        'isDeleted' => null,
        'lastContentUpdatedDate' => 'date-time',
        'lastUpdatedDate' => 'date-time',
        'parentCommentId' => 'int16',
        'publishedDate' => 'date-time',
        'usersLiked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'author' => 'author',
        'commentType' => 'commentType',
        'content' => 'content',
        'id' => 'id',
        'isDeleted' => 'isDeleted',
        'lastContentUpdatedDate' => 'lastContentUpdatedDate',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'parentCommentId' => 'parentCommentId',
        'publishedDate' => 'publishedDate',
        'usersLiked' => 'usersLiked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'author' => 'setAuthor',
        'commentType' => 'setCommentType',
        'content' => 'setContent',
        'id' => 'setId',
        'isDeleted' => 'setIsDeleted',
        'lastContentUpdatedDate' => 'setLastContentUpdatedDate',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'parentCommentId' => 'setParentCommentId',
        'publishedDate' => 'setPublishedDate',
        'usersLiked' => 'setUsersLiked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'author' => 'getAuthor',
        'commentType' => 'getCommentType',
        'content' => 'getContent',
        'id' => 'getId',
        'isDeleted' => 'getIsDeleted',
        'lastContentUpdatedDate' => 'getLastContentUpdatedDate',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'parentCommentId' => 'getParentCommentId',
        'publishedDate' => 'getPublishedDate',
        'usersLiked' => 'getUsersLiked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COMMENT_TYPE_UNKNOWN = 'unknown';
    const COMMENT_TYPE_TEXT = 'text';
    const COMMENT_TYPE_CODE_CHANGE = 'codeChange';
    const COMMENT_TYPE_SYSTEM = 'system';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommentTypeAllowableValues()
    {
        return [
            self::COMMENT_TYPE_UNKNOWN,
            self::COMMENT_TYPE_TEXT,
            self::COMMENT_TYPE_CODE_CHANGE,
            self::COMMENT_TYPE_SYSTEM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['commentType'] = isset($data['commentType']) ? $data['commentType'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['lastContentUpdatedDate'] = isset($data['lastContentUpdatedDate']) ? $data['lastContentUpdatedDate'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['parentCommentId'] = isset($data['parentCommentId']) ? $data['parentCommentId'] : null;
        $this->container['publishedDate'] = isset($data['publishedDate']) ? $data['publishedDate'] : null;
        $this->container['usersLiked'] = isset($data['usersLiked']) ? $data['usersLiked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCommentTypeAllowableValues();
        if (!is_null($this->container['commentType']) && !in_array($this->container['commentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'commentType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\ReferenceLinks $links Links to other related objects.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef $author The author of the comment.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets commentType
     *
     * @return string
     */
    public function getCommentType()
    {
        return $this->container['commentType'];
    }

    /**
     * Sets commentType
     *
     * @param string $commentType The comment type at the time of creation.
     *
     * @return $this
     */
    public function setCommentType($commentType)
    {
        $allowedValues = $this->getCommentTypeAllowableValues();
        if (!is_null($commentType) && !in_array($commentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'commentType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['commentType'] = $commentType;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content The comment content.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The comment ID. IDs start at 1 and are unique to a pull request.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted Whether or not this comment was soft-deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets lastContentUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastContentUpdatedDate()
    {
        return $this->container['lastContentUpdatedDate'];
    }

    /**
     * Sets lastContentUpdatedDate
     *
     * @param \DateTime $lastContentUpdatedDate The date the comment's content was last updated.
     *
     * @return $this
     */
    public function setLastContentUpdatedDate($lastContentUpdatedDate)
    {
        $this->container['lastContentUpdatedDate'] = $lastContentUpdatedDate;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate The date the comment was last updated.
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets parentCommentId
     *
     * @return int
     */
    public function getParentCommentId()
    {
        return $this->container['parentCommentId'];
    }

    /**
     * Sets parentCommentId
     *
     * @param int $parentCommentId The ID of the parent comment. This is used for replies.
     *
     * @return $this
     */
    public function setParentCommentId($parentCommentId)
    {
        $this->container['parentCommentId'] = $parentCommentId;

        return $this;
    }

    /**
     * Gets publishedDate
     *
     * @return \DateTime
     */
    public function getPublishedDate()
    {
        return $this->container['publishedDate'];
    }

    /**
     * Sets publishedDate
     *
     * @param \DateTime $publishedDate The date the comment was first published.
     *
     * @return $this
     */
    public function setPublishedDate($publishedDate)
    {
        $this->container['publishedDate'] = $publishedDate;

        return $this;
    }

    /**
     * Gets usersLiked
     *
     * @return \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef[]
     */
    public function getUsersLiked()
    {
        return $this->container['usersLiked'];
    }

    /**
     * Sets usersLiked
     *
     * @param \AzureDevOpsClient\Git\AzureDevOpsClient\Git\Model\IdentityRef[] $usersLiked A list of the users who have liked this comment.
     *
     * @return $this
     */
    public function setUsersLiked($usersLiked)
    {
        $this->container['usersLiked'] = $usersLiked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


