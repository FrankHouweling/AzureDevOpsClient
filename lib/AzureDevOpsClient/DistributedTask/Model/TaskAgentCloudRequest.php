<?php
/**
 * TaskAgentCloudRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskAgentCloudRequest Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskAgentCloudRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskAgentCloudRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentReference',
        'agentCloudId' => 'int',
        'agentConnectedTime' => '\DateTime',
        'agentData' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject',
        'agentSpecification' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject',
        'pool' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference',
        'provisionedTime' => '\DateTime',
        'provisionRequestTime' => '\DateTime',
        'releaseRequestTime' => '\DateTime',
        'requestId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent' => null,
        'agentCloudId' => 'int32',
        'agentConnectedTime' => 'date-time',
        'agentData' => null,
        'agentSpecification' => null,
        'pool' => null,
        'provisionedTime' => 'date-time',
        'provisionRequestTime' => 'date-time',
        'releaseRequestTime' => 'date-time',
        'requestId' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent' => 'agent',
        'agentCloudId' => 'agentCloudId',
        'agentConnectedTime' => 'agentConnectedTime',
        'agentData' => 'agentData',
        'agentSpecification' => 'agentSpecification',
        'pool' => 'pool',
        'provisionedTime' => 'provisionedTime',
        'provisionRequestTime' => 'provisionRequestTime',
        'releaseRequestTime' => 'releaseRequestTime',
        'requestId' => 'requestId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent' => 'setAgent',
        'agentCloudId' => 'setAgentCloudId',
        'agentConnectedTime' => 'setAgentConnectedTime',
        'agentData' => 'setAgentData',
        'agentSpecification' => 'setAgentSpecification',
        'pool' => 'setPool',
        'provisionedTime' => 'setProvisionedTime',
        'provisionRequestTime' => 'setProvisionRequestTime',
        'releaseRequestTime' => 'setReleaseRequestTime',
        'requestId' => 'setRequestId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent' => 'getAgent',
        'agentCloudId' => 'getAgentCloudId',
        'agentConnectedTime' => 'getAgentConnectedTime',
        'agentData' => 'getAgentData',
        'agentSpecification' => 'getAgentSpecification',
        'pool' => 'getPool',
        'provisionedTime' => 'getProvisionedTime',
        'provisionRequestTime' => 'getProvisionRequestTime',
        'releaseRequestTime' => 'getReleaseRequestTime',
        'requestId' => 'getRequestId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['agentCloudId'] = isset($data['agentCloudId']) ? $data['agentCloudId'] : null;
        $this->container['agentConnectedTime'] = isset($data['agentConnectedTime']) ? $data['agentConnectedTime'] : null;
        $this->container['agentData'] = isset($data['agentData']) ? $data['agentData'] : null;
        $this->container['agentSpecification'] = isset($data['agentSpecification']) ? $data['agentSpecification'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['provisionedTime'] = isset($data['provisionedTime']) ? $data['provisionedTime'] : null;
        $this->container['provisionRequestTime'] = isset($data['provisionRequestTime']) ? $data['provisionRequestTime'] : null;
        $this->container['releaseRequestTime'] = isset($data['releaseRequestTime']) ? $data['releaseRequestTime'] : null;
        $this->container['requestId'] = isset($data['requestId']) ? $data['requestId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentReference
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentReference $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets agentCloudId
     *
     * @return int
     */
    public function getAgentCloudId()
    {
        return $this->container['agentCloudId'];
    }

    /**
     * Sets agentCloudId
     *
     * @param int $agentCloudId agentCloudId
     *
     * @return $this
     */
    public function setAgentCloudId($agentCloudId)
    {
        $this->container['agentCloudId'] = $agentCloudId;

        return $this;
    }

    /**
     * Gets agentConnectedTime
     *
     * @return \DateTime
     */
    public function getAgentConnectedTime()
    {
        return $this->container['agentConnectedTime'];
    }

    /**
     * Sets agentConnectedTime
     *
     * @param \DateTime $agentConnectedTime agentConnectedTime
     *
     * @return $this
     */
    public function setAgentConnectedTime($agentConnectedTime)
    {
        $this->container['agentConnectedTime'] = $agentConnectedTime;

        return $this;
    }

    /**
     * Gets agentData
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject
     */
    public function getAgentData()
    {
        return $this->container['agentData'];
    }

    /**
     * Sets agentData
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject $agentData agentData
     *
     * @return $this
     */
    public function setAgentData($agentData)
    {
        $this->container['agentData'] = $agentData;

        return $this;
    }

    /**
     * Gets agentSpecification
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject
     */
    public function getAgentSpecification()
    {
        return $this->container['agentSpecification'];
    }

    /**
     * Sets agentSpecification
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject $agentSpecification agentSpecification
     *
     * @return $this
     */
    public function setAgentSpecification($agentSpecification)
    {
        $this->container['agentSpecification'] = $agentSpecification;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference $pool pool
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets provisionedTime
     *
     * @return \DateTime
     */
    public function getProvisionedTime()
    {
        return $this->container['provisionedTime'];
    }

    /**
     * Sets provisionedTime
     *
     * @param \DateTime $provisionedTime provisionedTime
     *
     * @return $this
     */
    public function setProvisionedTime($provisionedTime)
    {
        $this->container['provisionedTime'] = $provisionedTime;

        return $this;
    }

    /**
     * Gets provisionRequestTime
     *
     * @return \DateTime
     */
    public function getProvisionRequestTime()
    {
        return $this->container['provisionRequestTime'];
    }

    /**
     * Sets provisionRequestTime
     *
     * @param \DateTime $provisionRequestTime provisionRequestTime
     *
     * @return $this
     */
    public function setProvisionRequestTime($provisionRequestTime)
    {
        $this->container['provisionRequestTime'] = $provisionRequestTime;

        return $this;
    }

    /**
     * Gets releaseRequestTime
     *
     * @return \DateTime
     */
    public function getReleaseRequestTime()
    {
        return $this->container['releaseRequestTime'];
    }

    /**
     * Sets releaseRequestTime
     *
     * @param \DateTime $releaseRequestTime releaseRequestTime
     *
     * @return $this
     */
    public function setReleaseRequestTime($releaseRequestTime)
    {
        $this->container['releaseRequestTime'] = $releaseRequestTime;

        return $this;
    }

    /**
     * Gets requestId
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param string $requestId requestId
     *
     * @return $this
     */
    public function setRequestId($requestId)
    {
        $this->container['requestId'] = $requestId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


