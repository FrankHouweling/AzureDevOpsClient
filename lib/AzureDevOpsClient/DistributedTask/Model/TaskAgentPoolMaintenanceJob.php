<?php
/**
 * TaskAgentPoolMaintenanceJob
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskAgentPoolMaintenanceJob Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskAgentPoolMaintenanceJob implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskAgentPoolMaintenanceJob';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definitionId' => 'int',
        'errorCount' => 'int',
        'finishTime' => '\DateTime',
        'jobId' => 'int',
        'logsDownloadUrl' => 'string',
        'orchestrationId' => 'string',
        'pool' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference',
        'queueTime' => '\DateTime',
        'requestedBy' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef',
        'result' => 'string',
        'startTime' => '\DateTime',
        'status' => 'string',
        'targetAgents' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceJobTargetAgent[]',
        'warningCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definitionId' => 'int32',
        'errorCount' => 'int32',
        'finishTime' => 'date-time',
        'jobId' => 'int32',
        'logsDownloadUrl' => null,
        'orchestrationId' => 'uuid',
        'pool' => null,
        'queueTime' => 'date-time',
        'requestedBy' => null,
        'result' => null,
        'startTime' => 'date-time',
        'status' => null,
        'targetAgents' => null,
        'warningCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definitionId' => 'definitionId',
        'errorCount' => 'errorCount',
        'finishTime' => 'finishTime',
        'jobId' => 'jobId',
        'logsDownloadUrl' => 'logsDownloadUrl',
        'orchestrationId' => 'orchestrationId',
        'pool' => 'pool',
        'queueTime' => 'queueTime',
        'requestedBy' => 'requestedBy',
        'result' => 'result',
        'startTime' => 'startTime',
        'status' => 'status',
        'targetAgents' => 'targetAgents',
        'warningCount' => 'warningCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definitionId' => 'setDefinitionId',
        'errorCount' => 'setErrorCount',
        'finishTime' => 'setFinishTime',
        'jobId' => 'setJobId',
        'logsDownloadUrl' => 'setLogsDownloadUrl',
        'orchestrationId' => 'setOrchestrationId',
        'pool' => 'setPool',
        'queueTime' => 'setQueueTime',
        'requestedBy' => 'setRequestedBy',
        'result' => 'setResult',
        'startTime' => 'setStartTime',
        'status' => 'setStatus',
        'targetAgents' => 'setTargetAgents',
        'warningCount' => 'setWarningCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definitionId' => 'getDefinitionId',
        'errorCount' => 'getErrorCount',
        'finishTime' => 'getFinishTime',
        'jobId' => 'getJobId',
        'logsDownloadUrl' => 'getLogsDownloadUrl',
        'orchestrationId' => 'getOrchestrationId',
        'pool' => 'getPool',
        'queueTime' => 'getQueueTime',
        'requestedBy' => 'getRequestedBy',
        'result' => 'getResult',
        'startTime' => 'getStartTime',
        'status' => 'getStatus',
        'targetAgents' => 'getTargetAgents',
        'warningCount' => 'getWarningCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_SUCCEEDED = 'succeeded';
    const RESULT_FAILED = 'failed';
    const RESULT_CANCELED = 'canceled';
    const STATUS_IN_PROGRESS = 'inProgress';
    const STATUS_COMPLETED = 'completed';
    const STATUS_CANCELLING = 'cancelling';
    const STATUS_QUEUED = 'queued';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCEEDED,
            self::RESULT_FAILED,
            self::RESULT_CANCELED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLING,
            self::STATUS_QUEUED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definitionId'] = isset($data['definitionId']) ? $data['definitionId'] : null;
        $this->container['errorCount'] = isset($data['errorCount']) ? $data['errorCount'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['jobId'] = isset($data['jobId']) ? $data['jobId'] : null;
        $this->container['logsDownloadUrl'] = isset($data['logsDownloadUrl']) ? $data['logsDownloadUrl'] : null;
        $this->container['orchestrationId'] = isset($data['orchestrationId']) ? $data['orchestrationId'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['queueTime'] = isset($data['queueTime']) ? $data['queueTime'] : null;
        $this->container['requestedBy'] = isset($data['requestedBy']) ? $data['requestedBy'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['targetAgents'] = isset($data['targetAgents']) ? $data['targetAgents'] : null;
        $this->container['warningCount'] = isset($data['warningCount']) ? $data['warningCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definitionId
     *
     * @return int
     */
    public function getDefinitionId()
    {
        return $this->container['definitionId'];
    }

    /**
     * Sets definitionId
     *
     * @param int $definitionId The maintenance definition for the maintenance job
     *
     * @return $this
     */
    public function setDefinitionId($definitionId)
    {
        $this->container['definitionId'] = $definitionId;

        return $this;
    }

    /**
     * Gets errorCount
     *
     * @return int
     */
    public function getErrorCount()
    {
        return $this->container['errorCount'];
    }

    /**
     * Sets errorCount
     *
     * @param int $errorCount The total error counts during the maintenance job
     *
     * @return $this
     */
    public function setErrorCount($errorCount)
    {
        $this->container['errorCount'] = $errorCount;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return \DateTime
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param \DateTime $finishTime Time that the maintenance job was completed
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets jobId
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['jobId'];
    }

    /**
     * Sets jobId
     *
     * @param int $jobId Id of the maintenance job
     *
     * @return $this
     */
    public function setJobId($jobId)
    {
        $this->container['jobId'] = $jobId;

        return $this;
    }

    /**
     * Gets logsDownloadUrl
     *
     * @return string
     */
    public function getLogsDownloadUrl()
    {
        return $this->container['logsDownloadUrl'];
    }

    /**
     * Sets logsDownloadUrl
     *
     * @param string $logsDownloadUrl The log download url for the maintenance job
     *
     * @return $this
     */
    public function setLogsDownloadUrl($logsDownloadUrl)
    {
        $this->container['logsDownloadUrl'] = $logsDownloadUrl;

        return $this;
    }

    /**
     * Gets orchestrationId
     *
     * @return string
     */
    public function getOrchestrationId()
    {
        return $this->container['orchestrationId'];
    }

    /**
     * Sets orchestrationId
     *
     * @param string $orchestrationId Orchestration/Plan Id for the maintenance job
     *
     * @return $this
     */
    public function setOrchestrationId($orchestrationId)
    {
        $this->container['orchestrationId'] = $orchestrationId;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference $pool Pool reference for the maintenance job
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets queueTime
     *
     * @return \DateTime
     */
    public function getQueueTime()
    {
        return $this->container['queueTime'];
    }

    /**
     * Sets queueTime
     *
     * @param \DateTime $queueTime Time that the maintenance job was queued
     *
     * @return $this
     */
    public function setQueueTime($queueTime)
    {
        $this->container['queueTime'] = $queueTime;

        return $this;
    }

    /**
     * Gets requestedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef
     */
    public function getRequestedBy()
    {
        return $this->container['requestedBy'];
    }

    /**
     * Sets requestedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef $requestedBy The identity that queued the maintenance job
     *
     * @return $this
     */
    public function setRequestedBy($requestedBy)
    {
        $this->container['requestedBy'] = $requestedBy;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The maintenance job result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime Time that the maintenance job was started
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the maintenance job
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets targetAgents
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceJobTargetAgent[]
     */
    public function getTargetAgents()
    {
        return $this->container['targetAgents'];
    }

    /**
     * Sets targetAgents
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceJobTargetAgent[] $targetAgents targetAgents
     *
     * @return $this
     */
    public function setTargetAgents($targetAgents)
    {
        $this->container['targetAgents'] = $targetAgents;

        return $this;
    }

    /**
     * Gets warningCount
     *
     * @return int
     */
    public function getWarningCount()
    {
        return $this->container['warningCount'];
    }

    /**
     * Sets warningCount
     *
     * @param int $warningCount The total warning counts during the maintenance job
     *
     * @return $this
     */
    public function setWarningCount($warningCount)
    {
        $this->container['warningCount'] = $warningCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


