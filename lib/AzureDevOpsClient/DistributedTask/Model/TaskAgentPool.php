<?php
/**
 * TaskAgentPool
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskAgentPool Class Doc Comment
 *
 * @category Class
 * @description An organization-level grouping of agents.
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskAgentPool implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskAgentPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'isHosted' => 'bool',
        'isLegacy' => 'bool',
        'name' => 'string',
        'poolType' => 'string',
        'scope' => 'string',
        'size' => 'int',
        'agentCloudId' => 'int',
        'autoProvision' => 'bool',
        'autoSize' => 'bool',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef',
        'createdOn' => '\DateTime',
        'owner' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef',
        'properties' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection',
        'targetSize' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'isHosted' => null,
        'isLegacy' => null,
        'name' => null,
        'poolType' => null,
        'scope' => 'uuid',
        'size' => 'int32',
        'agentCloudId' => 'int32',
        'autoProvision' => null,
        'autoSize' => null,
        'createdBy' => null,
        'createdOn' => 'date-time',
        'owner' => null,
        'properties' => null,
        'targetSize' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'isHosted' => 'isHosted',
        'isLegacy' => 'isLegacy',
        'name' => 'name',
        'poolType' => 'poolType',
        'scope' => 'scope',
        'size' => 'size',
        'agentCloudId' => 'agentCloudId',
        'autoProvision' => 'autoProvision',
        'autoSize' => 'autoSize',
        'createdBy' => 'createdBy',
        'createdOn' => 'createdOn',
        'owner' => 'owner',
        'properties' => 'properties',
        'targetSize' => 'targetSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'isHosted' => 'setIsHosted',
        'isLegacy' => 'setIsLegacy',
        'name' => 'setName',
        'poolType' => 'setPoolType',
        'scope' => 'setScope',
        'size' => 'setSize',
        'agentCloudId' => 'setAgentCloudId',
        'autoProvision' => 'setAutoProvision',
        'autoSize' => 'setAutoSize',
        'createdBy' => 'setCreatedBy',
        'createdOn' => 'setCreatedOn',
        'owner' => 'setOwner',
        'properties' => 'setProperties',
        'targetSize' => 'setTargetSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'isHosted' => 'getIsHosted',
        'isLegacy' => 'getIsLegacy',
        'name' => 'getName',
        'poolType' => 'getPoolType',
        'scope' => 'getScope',
        'size' => 'getSize',
        'agentCloudId' => 'getAgentCloudId',
        'autoProvision' => 'getAutoProvision',
        'autoSize' => 'getAutoSize',
        'createdBy' => 'getCreatedBy',
        'createdOn' => 'getCreatedOn',
        'owner' => 'getOwner',
        'properties' => 'getProperties',
        'targetSize' => 'getTargetSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POOL_TYPE_AUTOMATION = 'automation';
    const POOL_TYPE_DEPLOYMENT = 'deployment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoolTypeAllowableValues()
    {
        return [
            self::POOL_TYPE_AUTOMATION,
            self::POOL_TYPE_DEPLOYMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isHosted'] = isset($data['isHosted']) ? $data['isHosted'] : null;
        $this->container['isLegacy'] = isset($data['isLegacy']) ? $data['isLegacy'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['poolType'] = isset($data['poolType']) ? $data['poolType'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['agentCloudId'] = isset($data['agentCloudId']) ? $data['agentCloudId'] : null;
        $this->container['autoProvision'] = isset($data['autoProvision']) ? $data['autoProvision'] : null;
        $this->container['autoSize'] = isset($data['autoSize']) ? $data['autoSize'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['targetSize'] = isset($data['targetSize']) ? $data['targetSize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPoolTypeAllowableValues();
        if (!is_null($this->container['poolType']) && !in_array($this->container['poolType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'poolType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isHosted
     *
     * @return bool
     */
    public function getIsHosted()
    {
        return $this->container['isHosted'];
    }

    /**
     * Sets isHosted
     *
     * @param bool $isHosted Gets or sets a value indicating whether or not this pool is managed by the service.
     *
     * @return $this
     */
    public function setIsHosted($isHosted)
    {
        $this->container['isHosted'] = $isHosted;

        return $this;
    }

    /**
     * Gets isLegacy
     *
     * @return bool
     */
    public function getIsLegacy()
    {
        return $this->container['isLegacy'];
    }

    /**
     * Sets isLegacy
     *
     * @param bool $isLegacy Determines whether the pool is legacy.
     *
     * @return $this
     */
    public function setIsLegacy($isLegacy)
    {
        $this->container['isLegacy'] = $isLegacy;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets poolType
     *
     * @return string
     */
    public function getPoolType()
    {
        return $this->container['poolType'];
    }

    /**
     * Sets poolType
     *
     * @param string $poolType Gets or sets the type of the pool
     *
     * @return $this
     */
    public function setPoolType($poolType)
    {
        $allowedValues = $this->getPoolTypeAllowableValues();
        if (!is_null($poolType) && !in_array($poolType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'poolType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poolType'] = $poolType;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Gets the current size of the pool.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets agentCloudId
     *
     * @return int
     */
    public function getAgentCloudId()
    {
        return $this->container['agentCloudId'];
    }

    /**
     * Sets agentCloudId
     *
     * @param int $agentCloudId The ID of the associated agent cloud.
     *
     * @return $this
     */
    public function setAgentCloudId($agentCloudId)
    {
        $this->container['agentCloudId'] = $agentCloudId;

        return $this;
    }

    /**
     * Gets autoProvision
     *
     * @return bool
     */
    public function getAutoProvision()
    {
        return $this->container['autoProvision'];
    }

    /**
     * Sets autoProvision
     *
     * @param bool $autoProvision Whether or not a queue should be automatically provisioned for each project collection.
     *
     * @return $this
     */
    public function setAutoProvision($autoProvision)
    {
        $this->container['autoProvision'] = $autoProvision;

        return $this;
    }

    /**
     * Gets autoSize
     *
     * @return bool
     */
    public function getAutoSize()
    {
        return $this->container['autoSize'];
    }

    /**
     * Sets autoSize
     *
     * @param bool $autoSize Whether or not the pool should autosize itself based on the Agent Cloud Provider settings.
     *
     * @return $this
     */
    public function setAutoSize($autoSize)
    {
        $this->container['autoSize'] = $autoSize;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef $createdBy Creator of the pool. The creator of the pool is automatically added into the administrators group for the pool on creation.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn The date/time of the pool creation.
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef $owner Owner or administrator of the pool.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets targetSize
     *
     * @return int
     */
    public function getTargetSize()
    {
        return $this->container['targetSize'];
    }

    /**
     * Sets targetSize
     *
     * @param int $targetSize Target parallelism.
     *
     * @return $this
     */
    public function setTargetSize($targetSize)
    {
        $this->container['targetSize'] = $targetSize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


