<?php
/**
 * TaskAgent
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskAgent Class Doc Comment
 *
 * @category Class
 * @description A task agent.
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskAgent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskAgent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ReferenceLinks',
        'accessPoint' => 'string',
        'enabled' => 'bool',
        'id' => 'int',
        'name' => 'string',
        'osDescription' => 'string',
        'provisioningState' => 'string',
        'status' => 'string',
        'version' => 'string',
        'assignedAgentCloudRequest' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentCloudRequest',
        'assignedRequest' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest',
        'authorization' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentAuthorization',
        'createdOn' => '\DateTime',
        'lastCompletedRequest' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest',
        'maxParallelism' => 'int',
        'pendingUpdate' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentUpdate',
        'properties' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection',
        'statusChangedOn' => '\DateTime',
        'systemCapabilities' => 'map[string,string]',
        'userCapabilities' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'accessPoint' => null,
        'enabled' => null,
        'id' => 'int32',
        'name' => null,
        'osDescription' => null,
        'provisioningState' => null,
        'status' => null,
        'version' => null,
        'assignedAgentCloudRequest' => null,
        'assignedRequest' => null,
        'authorization' => null,
        'createdOn' => 'date-time',
        'lastCompletedRequest' => null,
        'maxParallelism' => 'int32',
        'pendingUpdate' => null,
        'properties' => null,
        'statusChangedOn' => 'date-time',
        'systemCapabilities' => null,
        'userCapabilities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'accessPoint' => 'accessPoint',
        'enabled' => 'enabled',
        'id' => 'id',
        'name' => 'name',
        'osDescription' => 'osDescription',
        'provisioningState' => 'provisioningState',
        'status' => 'status',
        'version' => 'version',
        'assignedAgentCloudRequest' => 'assignedAgentCloudRequest',
        'assignedRequest' => 'assignedRequest',
        'authorization' => 'authorization',
        'createdOn' => 'createdOn',
        'lastCompletedRequest' => 'lastCompletedRequest',
        'maxParallelism' => 'maxParallelism',
        'pendingUpdate' => 'pendingUpdate',
        'properties' => 'properties',
        'statusChangedOn' => 'statusChangedOn',
        'systemCapabilities' => 'systemCapabilities',
        'userCapabilities' => 'userCapabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'accessPoint' => 'setAccessPoint',
        'enabled' => 'setEnabled',
        'id' => 'setId',
        'name' => 'setName',
        'osDescription' => 'setOsDescription',
        'provisioningState' => 'setProvisioningState',
        'status' => 'setStatus',
        'version' => 'setVersion',
        'assignedAgentCloudRequest' => 'setAssignedAgentCloudRequest',
        'assignedRequest' => 'setAssignedRequest',
        'authorization' => 'setAuthorization',
        'createdOn' => 'setCreatedOn',
        'lastCompletedRequest' => 'setLastCompletedRequest',
        'maxParallelism' => 'setMaxParallelism',
        'pendingUpdate' => 'setPendingUpdate',
        'properties' => 'setProperties',
        'statusChangedOn' => 'setStatusChangedOn',
        'systemCapabilities' => 'setSystemCapabilities',
        'userCapabilities' => 'setUserCapabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'accessPoint' => 'getAccessPoint',
        'enabled' => 'getEnabled',
        'id' => 'getId',
        'name' => 'getName',
        'osDescription' => 'getOsDescription',
        'provisioningState' => 'getProvisioningState',
        'status' => 'getStatus',
        'version' => 'getVersion',
        'assignedAgentCloudRequest' => 'getAssignedAgentCloudRequest',
        'assignedRequest' => 'getAssignedRequest',
        'authorization' => 'getAuthorization',
        'createdOn' => 'getCreatedOn',
        'lastCompletedRequest' => 'getLastCompletedRequest',
        'maxParallelism' => 'getMaxParallelism',
        'pendingUpdate' => 'getPendingUpdate',
        'properties' => 'getProperties',
        'statusChangedOn' => 'getStatusChangedOn',
        'systemCapabilities' => 'getSystemCapabilities',
        'userCapabilities' => 'getUserCapabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OFFLINE = 'offline';
    const STATUS_ONLINE = 'online';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OFFLINE,
            self::STATUS_ONLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['accessPoint'] = isset($data['accessPoint']) ? $data['accessPoint'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['osDescription'] = isset($data['osDescription']) ? $data['osDescription'] : null;
        $this->container['provisioningState'] = isset($data['provisioningState']) ? $data['provisioningState'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['assignedAgentCloudRequest'] = isset($data['assignedAgentCloudRequest']) ? $data['assignedAgentCloudRequest'] : null;
        $this->container['assignedRequest'] = isset($data['assignedRequest']) ? $data['assignedRequest'] : null;
        $this->container['authorization'] = isset($data['authorization']) ? $data['authorization'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['lastCompletedRequest'] = isset($data['lastCompletedRequest']) ? $data['lastCompletedRequest'] : null;
        $this->container['maxParallelism'] = isset($data['maxParallelism']) ? $data['maxParallelism'] : null;
        $this->container['pendingUpdate'] = isset($data['pendingUpdate']) ? $data['pendingUpdate'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['statusChangedOn'] = isset($data['statusChangedOn']) ? $data['statusChangedOn'] : null;
        $this->container['systemCapabilities'] = isset($data['systemCapabilities']) ? $data['systemCapabilities'] : null;
        $this->container['userCapabilities'] = isset($data['userCapabilities']) ? $data['userCapabilities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets accessPoint
     *
     * @return string
     */
    public function getAccessPoint()
    {
        return $this->container['accessPoint'];
    }

    /**
     * Sets accessPoint
     *
     * @param string $accessPoint This agent's access point.
     *
     * @return $this
     */
    public function setAccessPoint($accessPoint)
    {
        $this->container['accessPoint'] = $accessPoint;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether or not this agent should run jobs.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identifier of the agent.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the agent.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets osDescription
     *
     * @return string
     */
    public function getOsDescription()
    {
        return $this->container['osDescription'];
    }

    /**
     * Sets osDescription
     *
     * @param string $osDescription Agent OS.
     *
     * @return $this
     */
    public function setOsDescription($osDescription)
    {
        $this->container['osDescription'] = $osDescription;

        return $this;
    }

    /**
     * Gets provisioningState
     *
     * @return string
     */
    public function getProvisioningState()
    {
        return $this->container['provisioningState'];
    }

    /**
     * Sets provisioningState
     *
     * @param string $provisioningState Provisioning state of this agent.
     *
     * @return $this
     */
    public function setProvisioningState($provisioningState)
    {
        $this->container['provisioningState'] = $provisioningState;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Whether or not the agent is online.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Agent version.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets assignedAgentCloudRequest
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentCloudRequest
     */
    public function getAssignedAgentCloudRequest()
    {
        return $this->container['assignedAgentCloudRequest'];
    }

    /**
     * Sets assignedAgentCloudRequest
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentCloudRequest $assignedAgentCloudRequest The agent cloud request that's currently associated with this agent.
     *
     * @return $this
     */
    public function setAssignedAgentCloudRequest($assignedAgentCloudRequest)
    {
        $this->container['assignedAgentCloudRequest'] = $assignedAgentCloudRequest;

        return $this;
    }

    /**
     * Gets assignedRequest
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest
     */
    public function getAssignedRequest()
    {
        return $this->container['assignedRequest'];
    }

    /**
     * Sets assignedRequest
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest $assignedRequest The request which is currently assigned to this agent.
     *
     * @return $this
     */
    public function setAssignedRequest($assignedRequest)
    {
        $this->container['assignedRequest'] = $assignedRequest;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentAuthorization
     */
    public function getAuthorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentAuthorization $authorization Authorization information for this agent.
     *
     * @return $this
     */
    public function setAuthorization($authorization)
    {
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn Date on which this agent was created.
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets lastCompletedRequest
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest
     */
    public function getLastCompletedRequest()
    {
        return $this->container['lastCompletedRequest'];
    }

    /**
     * Sets lastCompletedRequest
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentJobRequest $lastCompletedRequest The last request which was completed by this agent.
     *
     * @return $this
     */
    public function setLastCompletedRequest($lastCompletedRequest)
    {
        $this->container['lastCompletedRequest'] = $lastCompletedRequest;

        return $this;
    }

    /**
     * Gets maxParallelism
     *
     * @return int
     */
    public function getMaxParallelism()
    {
        return $this->container['maxParallelism'];
    }

    /**
     * Sets maxParallelism
     *
     * @param int $maxParallelism Maximum job parallelism allowed for this agent.
     *
     * @return $this
     */
    public function setMaxParallelism($maxParallelism)
    {
        $this->container['maxParallelism'] = $maxParallelism;

        return $this;
    }

    /**
     * Gets pendingUpdate
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentUpdate
     */
    public function getPendingUpdate()
    {
        return $this->container['pendingUpdate'];
    }

    /**
     * Sets pendingUpdate
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentUpdate $pendingUpdate Pending update for this agent.
     *
     * @return $this
     */
    public function setPendingUpdate($pendingUpdate)
    {
        $this->container['pendingUpdate'] = $pendingUpdate;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets statusChangedOn
     *
     * @return \DateTime
     */
    public function getStatusChangedOn()
    {
        return $this->container['statusChangedOn'];
    }

    /**
     * Sets statusChangedOn
     *
     * @param \DateTime $statusChangedOn Date on which the last connectivity status change occurred.
     *
     * @return $this
     */
    public function setStatusChangedOn($statusChangedOn)
    {
        $this->container['statusChangedOn'] = $statusChangedOn;

        return $this;
    }

    /**
     * Gets systemCapabilities
     *
     * @return map[string,string]
     */
    public function getSystemCapabilities()
    {
        return $this->container['systemCapabilities'];
    }

    /**
     * Sets systemCapabilities
     *
     * @param map[string,string] $systemCapabilities systemCapabilities
     *
     * @return $this
     */
    public function setSystemCapabilities($systemCapabilities)
    {
        $this->container['systemCapabilities'] = $systemCapabilities;

        return $this;
    }

    /**
     * Gets userCapabilities
     *
     * @return map[string,string]
     */
    public function getUserCapabilities()
    {
        return $this->container['userCapabilities'];
    }

    /**
     * Sets userCapabilities
     *
     * @param map[string,string] $userCapabilities userCapabilities
     *
     * @return $this
     */
    public function setUserCapabilities($userCapabilities)
    {
        $this->container['userCapabilities'] = $userCapabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


