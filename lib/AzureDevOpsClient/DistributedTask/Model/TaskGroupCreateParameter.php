<?php
/**
 * TaskGroupCreateParameter
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskGroupCreateParameter Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskGroupCreateParameter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskGroupCreateParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'author' => 'string',
        'category' => 'string',
        'description' => 'string',
        'friendlyName' => 'string',
        'iconUrl' => 'string',
        'inputs' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[]',
        'instanceNameFormat' => 'string',
        'name' => 'string',
        'parentDefinitionId' => 'string',
        'runsOn' => 'string[]',
        'tasks' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[]',
        'version' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'author' => null,
        'category' => null,
        'description' => null,
        'friendlyName' => null,
        'iconUrl' => null,
        'inputs' => null,
        'instanceNameFormat' => null,
        'name' => null,
        'parentDefinitionId' => 'uuid',
        'runsOn' => null,
        'tasks' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'category' => 'category',
        'description' => 'description',
        'friendlyName' => 'friendlyName',
        'iconUrl' => 'iconUrl',
        'inputs' => 'inputs',
        'instanceNameFormat' => 'instanceNameFormat',
        'name' => 'name',
        'parentDefinitionId' => 'parentDefinitionId',
        'runsOn' => 'runsOn',
        'tasks' => 'tasks',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'friendlyName' => 'setFriendlyName',
        'iconUrl' => 'setIconUrl',
        'inputs' => 'setInputs',
        'instanceNameFormat' => 'setInstanceNameFormat',
        'name' => 'setName',
        'parentDefinitionId' => 'setParentDefinitionId',
        'runsOn' => 'setRunsOn',
        'tasks' => 'setTasks',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'friendlyName' => 'getFriendlyName',
        'iconUrl' => 'getIconUrl',
        'inputs' => 'getInputs',
        'instanceNameFormat' => 'getInstanceNameFormat',
        'name' => 'getName',
        'parentDefinitionId' => 'getParentDefinitionId',
        'runsOn' => 'getRunsOn',
        'tasks' => 'getTasks',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['friendlyName'] = isset($data['friendlyName']) ? $data['friendlyName'] : null;
        $this->container['iconUrl'] = isset($data['iconUrl']) ? $data['iconUrl'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['instanceNameFormat'] = isset($data['instanceNameFormat']) ? $data['instanceNameFormat'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parentDefinitionId'] = isset($data['parentDefinitionId']) ? $data['parentDefinitionId'] : null;
        $this->container['runsOn'] = isset($data['runsOn']) ? $data['runsOn'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author Sets author name of the task group.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Sets category of the task group.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Sets description of the task group.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets friendlyName
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->container['friendlyName'];
    }

    /**
     * Sets friendlyName
     *
     * @param string $friendlyName Sets friendly name of the task group.
     *
     * @return $this
     */
    public function setFriendlyName($friendlyName)
    {
        $this->container['friendlyName'] = $friendlyName;

        return $this;
    }

    /**
     * Gets iconUrl
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['iconUrl'];
    }

    /**
     * Sets iconUrl
     *
     * @param string $iconUrl Sets url icon of the task group.
     *
     * @return $this
     */
    public function setIconUrl($iconUrl)
    {
        $this->container['iconUrl'] = $iconUrl;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[]
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[] $inputs Sets input for the task group.
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets instanceNameFormat
     *
     * @return string
     */
    public function getInstanceNameFormat()
    {
        return $this->container['instanceNameFormat'];
    }

    /**
     * Sets instanceNameFormat
     *
     * @param string $instanceNameFormat Sets display name of the task group.
     *
     * @return $this
     */
    public function setInstanceNameFormat($instanceNameFormat)
    {
        $this->container['instanceNameFormat'] = $instanceNameFormat;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Sets name of the task group.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parentDefinitionId
     *
     * @return string
     */
    public function getParentDefinitionId()
    {
        return $this->container['parentDefinitionId'];
    }

    /**
     * Sets parentDefinitionId
     *
     * @param string $parentDefinitionId Sets parent task group Id. This is used while creating a draft task group.
     *
     * @return $this
     */
    public function setParentDefinitionId($parentDefinitionId)
    {
        $this->container['parentDefinitionId'] = $parentDefinitionId;

        return $this;
    }

    /**
     * Gets runsOn
     *
     * @return string[]
     */
    public function getRunsOn()
    {
        return $this->container['runsOn'];
    }

    /**
     * Sets runsOn
     *
     * @param string[] $runsOn Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
     *
     * @return $this
     */
    public function setRunsOn($runsOn)
    {
        $this->container['runsOn'] = $runsOn;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[] $tasks Sets tasks for the task group.
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion $version Sets version of the task group.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


