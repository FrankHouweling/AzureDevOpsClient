<?php
/**
 * TimelineRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TimelineRecord Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimelineRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimelineRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agentSpecification' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject',
        'attempt' => 'int',
        'changeId' => 'int',
        'currentOperation' => 'string',
        'details' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineReference',
        'errorCount' => 'int',
        'finishTime' => '\DateTime',
        'id' => 'string',
        'identifier' => 'string',
        'issues' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Issue[]',
        'lastModified' => '\DateTime',
        'location' => 'string',
        'log' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskLogReference',
        'name' => 'string',
        'order' => 'int',
        'parentId' => 'string',
        'percentComplete' => 'int',
        'previousAttempts' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineAttempt[]',
        'queueId' => 'int',
        'refName' => 'string',
        'result' => 'string',
        'resultCode' => 'string',
        'startTime' => '\DateTime',
        'state' => 'string',
        'task' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskReference',
        'type' => 'string',
        'variables' => 'map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\VariableValue]',
        'warningCount' => 'int',
        'workerName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agentSpecification' => null,
        'attempt' => 'int32',
        'changeId' => 'int32',
        'currentOperation' => null,
        'details' => null,
        'errorCount' => 'int32',
        'finishTime' => 'date-time',
        'id' => 'uuid',
        'identifier' => null,
        'issues' => null,
        'lastModified' => 'date-time',
        'location' => null,
        'log' => null,
        'name' => null,
        'order' => 'int32',
        'parentId' => 'uuid',
        'percentComplete' => 'int32',
        'previousAttempts' => null,
        'queueId' => 'int32',
        'refName' => null,
        'result' => null,
        'resultCode' => null,
        'startTime' => 'date-time',
        'state' => null,
        'task' => null,
        'type' => null,
        'variables' => null,
        'warningCount' => 'int32',
        'workerName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agentSpecification' => 'agentSpecification',
        'attempt' => 'attempt',
        'changeId' => 'changeId',
        'currentOperation' => 'currentOperation',
        'details' => 'details',
        'errorCount' => 'errorCount',
        'finishTime' => 'finishTime',
        'id' => 'id',
        'identifier' => 'identifier',
        'issues' => 'issues',
        'lastModified' => 'lastModified',
        'location' => 'location',
        'log' => 'log',
        'name' => 'name',
        'order' => 'order',
        'parentId' => 'parentId',
        'percentComplete' => 'percentComplete',
        'previousAttempts' => 'previousAttempts',
        'queueId' => 'queueId',
        'refName' => 'refName',
        'result' => 'result',
        'resultCode' => 'resultCode',
        'startTime' => 'startTime',
        'state' => 'state',
        'task' => 'task',
        'type' => 'type',
        'variables' => 'variables',
        'warningCount' => 'warningCount',
        'workerName' => 'workerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agentSpecification' => 'setAgentSpecification',
        'attempt' => 'setAttempt',
        'changeId' => 'setChangeId',
        'currentOperation' => 'setCurrentOperation',
        'details' => 'setDetails',
        'errorCount' => 'setErrorCount',
        'finishTime' => 'setFinishTime',
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'issues' => 'setIssues',
        'lastModified' => 'setLastModified',
        'location' => 'setLocation',
        'log' => 'setLog',
        'name' => 'setName',
        'order' => 'setOrder',
        'parentId' => 'setParentId',
        'percentComplete' => 'setPercentComplete',
        'previousAttempts' => 'setPreviousAttempts',
        'queueId' => 'setQueueId',
        'refName' => 'setRefName',
        'result' => 'setResult',
        'resultCode' => 'setResultCode',
        'startTime' => 'setStartTime',
        'state' => 'setState',
        'task' => 'setTask',
        'type' => 'setType',
        'variables' => 'setVariables',
        'warningCount' => 'setWarningCount',
        'workerName' => 'setWorkerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agentSpecification' => 'getAgentSpecification',
        'attempt' => 'getAttempt',
        'changeId' => 'getChangeId',
        'currentOperation' => 'getCurrentOperation',
        'details' => 'getDetails',
        'errorCount' => 'getErrorCount',
        'finishTime' => 'getFinishTime',
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'issues' => 'getIssues',
        'lastModified' => 'getLastModified',
        'location' => 'getLocation',
        'log' => 'getLog',
        'name' => 'getName',
        'order' => 'getOrder',
        'parentId' => 'getParentId',
        'percentComplete' => 'getPercentComplete',
        'previousAttempts' => 'getPreviousAttempts',
        'queueId' => 'getQueueId',
        'refName' => 'getRefName',
        'result' => 'getResult',
        'resultCode' => 'getResultCode',
        'startTime' => 'getStartTime',
        'state' => 'getState',
        'task' => 'getTask',
        'type' => 'getType',
        'variables' => 'getVariables',
        'warningCount' => 'getWarningCount',
        'workerName' => 'getWorkerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_SUCCEEDED = 'succeeded';
    const RESULT_SUCCEEDED_WITH_ISSUES = 'succeededWithIssues';
    const RESULT_FAILED = 'failed';
    const RESULT_CANCELED = 'canceled';
    const RESULT_SKIPPED = 'skipped';
    const RESULT_ABANDONED = 'abandoned';
    const STATE_PENDING = 'pending';
    const STATE_IN_PROGRESS = 'inProgress';
    const STATE_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCEEDED,
            self::RESULT_SUCCEEDED_WITH_ISSUES,
            self::RESULT_FAILED,
            self::RESULT_CANCELED,
            self::RESULT_SKIPPED,
            self::RESULT_ABANDONED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_IN_PROGRESS,
            self::STATE_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agentSpecification'] = isset($data['agentSpecification']) ? $data['agentSpecification'] : null;
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['changeId'] = isset($data['changeId']) ? $data['changeId'] : null;
        $this->container['currentOperation'] = isset($data['currentOperation']) ? $data['currentOperation'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['errorCount'] = isset($data['errorCount']) ? $data['errorCount'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['issues'] = isset($data['issues']) ? $data['issues'] : null;
        $this->container['lastModified'] = isset($data['lastModified']) ? $data['lastModified'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['log'] = isset($data['log']) ? $data['log'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['percentComplete'] = isset($data['percentComplete']) ? $data['percentComplete'] : null;
        $this->container['previousAttempts'] = isset($data['previousAttempts']) ? $data['previousAttempts'] : null;
        $this->container['queueId'] = isset($data['queueId']) ? $data['queueId'] : null;
        $this->container['refName'] = isset($data['refName']) ? $data['refName'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['resultCode'] = isset($data['resultCode']) ? $data['resultCode'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['task'] = isset($data['task']) ? $data['task'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['warningCount'] = isset($data['warningCount']) ? $data['warningCount'] : null;
        $this->container['workerName'] = isset($data['workerName']) ? $data['workerName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agentSpecification
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject
     */
    public function getAgentSpecification()
    {
        return $this->container['agentSpecification'];
    }

    /**
     * Sets agentSpecification
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject $agentSpecification agentSpecification
     *
     * @return $this
     */
    public function setAgentSpecification($agentSpecification)
    {
        $this->container['agentSpecification'] = $agentSpecification;

        return $this;
    }

    /**
     * Gets attempt
     *
     * @return int
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int $attempt attempt
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets changeId
     *
     * @return int
     */
    public function getChangeId()
    {
        return $this->container['changeId'];
    }

    /**
     * Sets changeId
     *
     * @param int $changeId changeId
     *
     * @return $this
     */
    public function setChangeId($changeId)
    {
        $this->container['changeId'] = $changeId;

        return $this;
    }

    /**
     * Gets currentOperation
     *
     * @return string
     */
    public function getCurrentOperation()
    {
        return $this->container['currentOperation'];
    }

    /**
     * Sets currentOperation
     *
     * @param string $currentOperation currentOperation
     *
     * @return $this
     */
    public function setCurrentOperation($currentOperation)
    {
        $this->container['currentOperation'] = $currentOperation;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineReference
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineReference $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets errorCount
     *
     * @return int
     */
    public function getErrorCount()
    {
        return $this->container['errorCount'];
    }

    /**
     * Sets errorCount
     *
     * @param int $errorCount errorCount
     *
     * @return $this
     */
    public function setErrorCount($errorCount)
    {
        $this->container['errorCount'] = $errorCount;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return \DateTime
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param \DateTime $finishTime finishTime
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Issue[]
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Issue[] $issues issues
     *
     * @return $this
     */
    public function setIssues($issues)
    {
        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param \DateTime $lastModified lastModified
     *
     * @return $this
     */
    public function setLastModified($lastModified)
    {
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets log
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskLogReference
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskLogReference $log log
     *
     * @return $this
     */
    public function setLog($log)
    {
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param string $parentId parentId
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets percentComplete
     *
     * @return int
     */
    public function getPercentComplete()
    {
        return $this->container['percentComplete'];
    }

    /**
     * Sets percentComplete
     *
     * @param int $percentComplete percentComplete
     *
     * @return $this
     */
    public function setPercentComplete($percentComplete)
    {
        $this->container['percentComplete'] = $percentComplete;

        return $this;
    }

    /**
     * Gets previousAttempts
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineAttempt[]
     */
    public function getPreviousAttempts()
    {
        return $this->container['previousAttempts'];
    }

    /**
     * Sets previousAttempts
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TimelineAttempt[] $previousAttempts previousAttempts
     *
     * @return $this
     */
    public function setPreviousAttempts($previousAttempts)
    {
        $this->container['previousAttempts'] = $previousAttempts;

        return $this;
    }

    /**
     * Gets queueId
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queueId'];
    }

    /**
     * Sets queueId
     *
     * @param int $queueId queueId
     *
     * @return $this
     */
    public function setQueueId($queueId)
    {
        $this->container['queueId'] = $queueId;

        return $this;
    }

    /**
     * Gets refName
     *
     * @return string
     */
    public function getRefName()
    {
        return $this->container['refName'];
    }

    /**
     * Sets refName
     *
     * @param string $refName refName
     *
     * @return $this
     */
    public function setRefName($refName)
    {
        $this->container['refName'] = $refName;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets resultCode
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode
     *
     * @param string $resultCode resultCode
     *
     * @return $this
     */
    public function setResultCode($resultCode)
    {
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime startTime
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets task
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskReference
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskReference $task task
     *
     * @return $this
     */
    public function setTask($task)
    {
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\VariableValue]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\VariableValue] $variables variables
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets warningCount
     *
     * @return int
     */
    public function getWarningCount()
    {
        return $this->container['warningCount'];
    }

    /**
     * Sets warningCount
     *
     * @param int $warningCount warningCount
     *
     * @return $this
     */
    public function setWarningCount($warningCount)
    {
        $this->container['warningCount'] = $warningCount;

        return $this;
    }

    /**
     * Gets workerName
     *
     * @return string
     */
    public function getWorkerName()
    {
        return $this->container['workerName'];
    }

    /**
     * Sets workerName
     *
     * @param string $workerName workerName
     *
     * @return $this
     */
    public function setWorkerName($workerName)
    {
        $this->container['workerName'] = $workerName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


