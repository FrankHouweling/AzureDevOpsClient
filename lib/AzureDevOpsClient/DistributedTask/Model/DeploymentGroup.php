<?php
/**
 * DeploymentGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * DeploymentGroup Class Doc Comment
 *
 * @category Class
 * @description Deployment group.
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeploymentGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'pool' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference',
        'project' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ProjectReference',
        'description' => 'string',
        'machineCount' => 'int',
        'machines' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DeploymentMachine[]',
        'machineTags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'pool' => null,
        'project' => null,
        'description' => null,
        'machineCount' => 'int32',
        'machines' => null,
        'machineTags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'pool' => 'pool',
        'project' => 'project',
        'description' => 'description',
        'machineCount' => 'machineCount',
        'machines' => 'machines',
        'machineTags' => 'machineTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'pool' => 'setPool',
        'project' => 'setProject',
        'description' => 'setDescription',
        'machineCount' => 'setMachineCount',
        'machines' => 'setMachines',
        'machineTags' => 'setMachineTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'pool' => 'getPool',
        'project' => 'getProject',
        'description' => 'getDescription',
        'machineCount' => 'getMachineCount',
        'machines' => 'getMachines',
        'machineTags' => 'getMachineTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['machineCount'] = isset($data['machineCount']) ? $data['machineCount'] : null;
        $this->container['machines'] = isset($data['machines']) ? $data['machines'] : null;
        $this->container['machineTags'] = isset($data['machineTags']) ? $data['machineTags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Deployment group identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the deployment group.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference $pool Deployment pool in which deployment agents are registered.
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ProjectReference $project Project to which the deployment group belongs.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the deployment group.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets machineCount
     *
     * @return int
     */
    public function getMachineCount()
    {
        return $this->container['machineCount'];
    }

    /**
     * Sets machineCount
     *
     * @param int $machineCount Number of deployment targets in the deployment group.
     *
     * @return $this
     */
    public function setMachineCount($machineCount)
    {
        $this->container['machineCount'] = $machineCount;

        return $this;
    }

    /**
     * Gets machines
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DeploymentMachine[]
     */
    public function getMachines()
    {
        return $this->container['machines'];
    }

    /**
     * Sets machines
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DeploymentMachine[] $machines List of deployment targets in the deployment group.
     *
     * @return $this
     */
    public function setMachines($machines)
    {
        $this->container['machines'] = $machines;

        return $this;
    }

    /**
     * Gets machineTags
     *
     * @return string[]
     */
    public function getMachineTags()
    {
        return $this->container['machineTags'];
    }

    /**
     * Sets machineTags
     *
     * @param string[] $machineTags List of unique tags across all deployment targets in the deployment group.
     *
     * @return $this
     */
    public function setMachineTags($machineTags)
    {
        $this->container['machineTags'] = $machineTags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


