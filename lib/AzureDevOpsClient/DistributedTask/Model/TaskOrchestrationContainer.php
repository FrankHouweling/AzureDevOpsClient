<?php
/**
 * TaskOrchestrationContainer
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskOrchestrationContainer Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskOrchestrationContainer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskOrchestrationContainer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemType' => 'string',
        'children' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationItem[]',
        'continueOnError' => 'bool',
        'data' => 'map[string,string]',
        'maxConcurrency' => 'int',
        'parallel' => 'bool',
        'rollback' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationContainer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'itemType' => null,
        'children' => null,
        'continueOnError' => null,
        'data' => null,
        'maxConcurrency' => 'int32',
        'parallel' => null,
        'rollback' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemType' => 'itemType',
        'children' => 'children',
        'continueOnError' => 'continueOnError',
        'data' => 'data',
        'maxConcurrency' => 'maxConcurrency',
        'parallel' => 'parallel',
        'rollback' => 'rollback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemType' => 'setItemType',
        'children' => 'setChildren',
        'continueOnError' => 'setContinueOnError',
        'data' => 'setData',
        'maxConcurrency' => 'setMaxConcurrency',
        'parallel' => 'setParallel',
        'rollback' => 'setRollback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemType' => 'getItemType',
        'children' => 'getChildren',
        'continueOnError' => 'getContinueOnError',
        'data' => 'getData',
        'maxConcurrency' => 'getMaxConcurrency',
        'parallel' => 'getParallel',
        'rollback' => 'getRollback'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ITEM_TYPE_CONTAINER = 'container';
    const ITEM_TYPE_JOB = 'job';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE_CONTAINER,
            self::ITEM_TYPE_JOB,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemType'] = isset($data['itemType']) ? $data['itemType'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['continueOnError'] = isset($data['continueOnError']) ? $data['continueOnError'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['maxConcurrency'] = isset($data['maxConcurrency']) ? $data['maxConcurrency'] : null;
        $this->container['parallel'] = isset($data['parallel']) ? $data['parallel'] : null;
        $this->container['rollback'] = isset($data['rollback']) ? $data['rollback'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['itemType']) && !in_array($this->container['itemType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'itemType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemType
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['itemType'];
    }

    /**
     * Sets itemType
     *
     * @param string $itemType itemType
     *
     * @return $this
     */
    public function setItemType($itemType)
    {
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($itemType) && !in_array($itemType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'itemType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['itemType'] = $itemType;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationItem[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationItem[] $children children
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets continueOnError
     *
     * @return bool
     */
    public function getContinueOnError()
    {
        return $this->container['continueOnError'];
    }

    /**
     * Sets continueOnError
     *
     * @param bool $continueOnError continueOnError
     *
     * @return $this
     */
    public function setContinueOnError($continueOnError)
    {
        $this->container['continueOnError'] = $continueOnError;

        return $this;
    }

    /**
     * Gets data
     *
     * @return map[string,string]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param map[string,string] $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets maxConcurrency
     *
     * @return int
     */
    public function getMaxConcurrency()
    {
        return $this->container['maxConcurrency'];
    }

    /**
     * Sets maxConcurrency
     *
     * @param int $maxConcurrency maxConcurrency
     *
     * @return $this
     */
    public function setMaxConcurrency($maxConcurrency)
    {
        $this->container['maxConcurrency'] = $maxConcurrency;

        return $this;
    }

    /**
     * Gets parallel
     *
     * @return bool
     */
    public function getParallel()
    {
        return $this->container['parallel'];
    }

    /**
     * Sets parallel
     *
     * @param bool $parallel parallel
     *
     * @return $this
     */
    public function setParallel($parallel)
    {
        $this->container['parallel'] = $parallel;

        return $this;
    }

    /**
     * Gets rollback
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationContainer
     */
    public function getRollback()
    {
        return $this->container['rollback'];
    }

    /**
     * Sets rollback
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationContainer $rollback rollback
     *
     * @return $this
     */
    public function setRollback($rollback)
    {
        $this->container['rollback'] = $rollback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


