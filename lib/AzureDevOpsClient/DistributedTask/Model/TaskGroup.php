<?php
/**
 * TaskGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskGroup Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agentExecution' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskExecution',
        'author' => 'string',
        'category' => 'string',
        'contentsUploaded' => 'bool',
        'contributionIdentifier' => 'string',
        'contributionVersion' => 'string',
        'dataSourceBindings' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DataSourceBinding[]',
        'definitionType' => 'string',
        'demands' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Demand[]',
        'deprecated' => 'bool',
        'description' => 'string',
        'disabled' => 'bool',
        'execution' => 'map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]',
        'friendlyName' => 'string',
        'groups' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupDefinition[]',
        'helpMarkDown' => 'string',
        'helpUrl' => 'string',
        'hostType' => 'string',
        'iconUrl' => 'string',
        'id' => 'string',
        'inputs' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[]',
        'instanceNameFormat' => 'string',
        'minimumAgentVersion' => 'string',
        'name' => 'string',
        'outputVariables' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOutputVariable[]',
        'packageLocation' => 'string',
        'packageType' => 'string',
        'postJobExecution' => 'map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]',
        'preJobExecution' => 'map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]',
        'preview' => 'bool',
        'releaseNotes' => 'string',
        'runsOn' => 'string[]',
        'satisfies' => 'string[]',
        'serverOwned' => 'bool',
        'showEnvironmentVariables' => 'bool',
        'sourceDefinitions' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskSourceDefinition[]',
        'sourceLocation' => 'string',
        'version' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion',
        'visibility' => 'string[]',
        'comment' => 'string',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef',
        'createdOn' => '\DateTime',
        'deleted' => 'bool',
        'modifiedBy' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef',
        'modifiedOn' => '\DateTime',
        'owner' => 'string',
        'parentDefinitionId' => 'string',
        'revision' => 'int',
        'tasks' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agentExecution' => null,
        'author' => null,
        'category' => null,
        'contentsUploaded' => null,
        'contributionIdentifier' => null,
        'contributionVersion' => null,
        'dataSourceBindings' => null,
        'definitionType' => null,
        'demands' => null,
        'deprecated' => null,
        'description' => null,
        'disabled' => null,
        'execution' => null,
        'friendlyName' => null,
        'groups' => null,
        'helpMarkDown' => null,
        'helpUrl' => null,
        'hostType' => null,
        'iconUrl' => null,
        'id' => 'uuid',
        'inputs' => null,
        'instanceNameFormat' => null,
        'minimumAgentVersion' => null,
        'name' => null,
        'outputVariables' => null,
        'packageLocation' => null,
        'packageType' => null,
        'postJobExecution' => null,
        'preJobExecution' => null,
        'preview' => null,
        'releaseNotes' => null,
        'runsOn' => null,
        'satisfies' => null,
        'serverOwned' => null,
        'showEnvironmentVariables' => null,
        'sourceDefinitions' => null,
        'sourceLocation' => null,
        'version' => null,
        'visibility' => null,
        'comment' => null,
        'createdBy' => null,
        'createdOn' => 'date-time',
        'deleted' => null,
        'modifiedBy' => null,
        'modifiedOn' => 'date-time',
        'owner' => null,
        'parentDefinitionId' => 'uuid',
        'revision' => 'int32',
        'tasks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agentExecution' => 'agentExecution',
        'author' => 'author',
        'category' => 'category',
        'contentsUploaded' => 'contentsUploaded',
        'contributionIdentifier' => 'contributionIdentifier',
        'contributionVersion' => 'contributionVersion',
        'dataSourceBindings' => 'dataSourceBindings',
        'definitionType' => 'definitionType',
        'demands' => 'demands',
        'deprecated' => 'deprecated',
        'description' => 'description',
        'disabled' => 'disabled',
        'execution' => 'execution',
        'friendlyName' => 'friendlyName',
        'groups' => 'groups',
        'helpMarkDown' => 'helpMarkDown',
        'helpUrl' => 'helpUrl',
        'hostType' => 'hostType',
        'iconUrl' => 'iconUrl',
        'id' => 'id',
        'inputs' => 'inputs',
        'instanceNameFormat' => 'instanceNameFormat',
        'minimumAgentVersion' => 'minimumAgentVersion',
        'name' => 'name',
        'outputVariables' => 'outputVariables',
        'packageLocation' => 'packageLocation',
        'packageType' => 'packageType',
        'postJobExecution' => 'postJobExecution',
        'preJobExecution' => 'preJobExecution',
        'preview' => 'preview',
        'releaseNotes' => 'releaseNotes',
        'runsOn' => 'runsOn',
        'satisfies' => 'satisfies',
        'serverOwned' => 'serverOwned',
        'showEnvironmentVariables' => 'showEnvironmentVariables',
        'sourceDefinitions' => 'sourceDefinitions',
        'sourceLocation' => 'sourceLocation',
        'version' => 'version',
        'visibility' => 'visibility',
        'comment' => 'comment',
        'createdBy' => 'createdBy',
        'createdOn' => 'createdOn',
        'deleted' => 'deleted',
        'modifiedBy' => 'modifiedBy',
        'modifiedOn' => 'modifiedOn',
        'owner' => 'owner',
        'parentDefinitionId' => 'parentDefinitionId',
        'revision' => 'revision',
        'tasks' => 'tasks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agentExecution' => 'setAgentExecution',
        'author' => 'setAuthor',
        'category' => 'setCategory',
        'contentsUploaded' => 'setContentsUploaded',
        'contributionIdentifier' => 'setContributionIdentifier',
        'contributionVersion' => 'setContributionVersion',
        'dataSourceBindings' => 'setDataSourceBindings',
        'definitionType' => 'setDefinitionType',
        'demands' => 'setDemands',
        'deprecated' => 'setDeprecated',
        'description' => 'setDescription',
        'disabled' => 'setDisabled',
        'execution' => 'setExecution',
        'friendlyName' => 'setFriendlyName',
        'groups' => 'setGroups',
        'helpMarkDown' => 'setHelpMarkDown',
        'helpUrl' => 'setHelpUrl',
        'hostType' => 'setHostType',
        'iconUrl' => 'setIconUrl',
        'id' => 'setId',
        'inputs' => 'setInputs',
        'instanceNameFormat' => 'setInstanceNameFormat',
        'minimumAgentVersion' => 'setMinimumAgentVersion',
        'name' => 'setName',
        'outputVariables' => 'setOutputVariables',
        'packageLocation' => 'setPackageLocation',
        'packageType' => 'setPackageType',
        'postJobExecution' => 'setPostJobExecution',
        'preJobExecution' => 'setPreJobExecution',
        'preview' => 'setPreview',
        'releaseNotes' => 'setReleaseNotes',
        'runsOn' => 'setRunsOn',
        'satisfies' => 'setSatisfies',
        'serverOwned' => 'setServerOwned',
        'showEnvironmentVariables' => 'setShowEnvironmentVariables',
        'sourceDefinitions' => 'setSourceDefinitions',
        'sourceLocation' => 'setSourceLocation',
        'version' => 'setVersion',
        'visibility' => 'setVisibility',
        'comment' => 'setComment',
        'createdBy' => 'setCreatedBy',
        'createdOn' => 'setCreatedOn',
        'deleted' => 'setDeleted',
        'modifiedBy' => 'setModifiedBy',
        'modifiedOn' => 'setModifiedOn',
        'owner' => 'setOwner',
        'parentDefinitionId' => 'setParentDefinitionId',
        'revision' => 'setRevision',
        'tasks' => 'setTasks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agentExecution' => 'getAgentExecution',
        'author' => 'getAuthor',
        'category' => 'getCategory',
        'contentsUploaded' => 'getContentsUploaded',
        'contributionIdentifier' => 'getContributionIdentifier',
        'contributionVersion' => 'getContributionVersion',
        'dataSourceBindings' => 'getDataSourceBindings',
        'definitionType' => 'getDefinitionType',
        'demands' => 'getDemands',
        'deprecated' => 'getDeprecated',
        'description' => 'getDescription',
        'disabled' => 'getDisabled',
        'execution' => 'getExecution',
        'friendlyName' => 'getFriendlyName',
        'groups' => 'getGroups',
        'helpMarkDown' => 'getHelpMarkDown',
        'helpUrl' => 'getHelpUrl',
        'hostType' => 'getHostType',
        'iconUrl' => 'getIconUrl',
        'id' => 'getId',
        'inputs' => 'getInputs',
        'instanceNameFormat' => 'getInstanceNameFormat',
        'minimumAgentVersion' => 'getMinimumAgentVersion',
        'name' => 'getName',
        'outputVariables' => 'getOutputVariables',
        'packageLocation' => 'getPackageLocation',
        'packageType' => 'getPackageType',
        'postJobExecution' => 'getPostJobExecution',
        'preJobExecution' => 'getPreJobExecution',
        'preview' => 'getPreview',
        'releaseNotes' => 'getReleaseNotes',
        'runsOn' => 'getRunsOn',
        'satisfies' => 'getSatisfies',
        'serverOwned' => 'getServerOwned',
        'showEnvironmentVariables' => 'getShowEnvironmentVariables',
        'sourceDefinitions' => 'getSourceDefinitions',
        'sourceLocation' => 'getSourceLocation',
        'version' => 'getVersion',
        'visibility' => 'getVisibility',
        'comment' => 'getComment',
        'createdBy' => 'getCreatedBy',
        'createdOn' => 'getCreatedOn',
        'deleted' => 'getDeleted',
        'modifiedBy' => 'getModifiedBy',
        'modifiedOn' => 'getModifiedOn',
        'owner' => 'getOwner',
        'parentDefinitionId' => 'getParentDefinitionId',
        'revision' => 'getRevision',
        'tasks' => 'getTasks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agentExecution'] = isset($data['agentExecution']) ? $data['agentExecution'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['contentsUploaded'] = isset($data['contentsUploaded']) ? $data['contentsUploaded'] : null;
        $this->container['contributionIdentifier'] = isset($data['contributionIdentifier']) ? $data['contributionIdentifier'] : null;
        $this->container['contributionVersion'] = isset($data['contributionVersion']) ? $data['contributionVersion'] : null;
        $this->container['dataSourceBindings'] = isset($data['dataSourceBindings']) ? $data['dataSourceBindings'] : null;
        $this->container['definitionType'] = isset($data['definitionType']) ? $data['definitionType'] : null;
        $this->container['demands'] = isset($data['demands']) ? $data['demands'] : null;
        $this->container['deprecated'] = isset($data['deprecated']) ? $data['deprecated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['execution'] = isset($data['execution']) ? $data['execution'] : null;
        $this->container['friendlyName'] = isset($data['friendlyName']) ? $data['friendlyName'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['helpMarkDown'] = isset($data['helpMarkDown']) ? $data['helpMarkDown'] : null;
        $this->container['helpUrl'] = isset($data['helpUrl']) ? $data['helpUrl'] : null;
        $this->container['hostType'] = isset($data['hostType']) ? $data['hostType'] : null;
        $this->container['iconUrl'] = isset($data['iconUrl']) ? $data['iconUrl'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['instanceNameFormat'] = isset($data['instanceNameFormat']) ? $data['instanceNameFormat'] : null;
        $this->container['minimumAgentVersion'] = isset($data['minimumAgentVersion']) ? $data['minimumAgentVersion'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['outputVariables'] = isset($data['outputVariables']) ? $data['outputVariables'] : null;
        $this->container['packageLocation'] = isset($data['packageLocation']) ? $data['packageLocation'] : null;
        $this->container['packageType'] = isset($data['packageType']) ? $data['packageType'] : null;
        $this->container['postJobExecution'] = isset($data['postJobExecution']) ? $data['postJobExecution'] : null;
        $this->container['preJobExecution'] = isset($data['preJobExecution']) ? $data['preJobExecution'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
        $this->container['releaseNotes'] = isset($data['releaseNotes']) ? $data['releaseNotes'] : null;
        $this->container['runsOn'] = isset($data['runsOn']) ? $data['runsOn'] : null;
        $this->container['satisfies'] = isset($data['satisfies']) ? $data['satisfies'] : null;
        $this->container['serverOwned'] = isset($data['serverOwned']) ? $data['serverOwned'] : null;
        $this->container['showEnvironmentVariables'] = isset($data['showEnvironmentVariables']) ? $data['showEnvironmentVariables'] : null;
        $this->container['sourceDefinitions'] = isset($data['sourceDefinitions']) ? $data['sourceDefinitions'] : null;
        $this->container['sourceLocation'] = isset($data['sourceLocation']) ? $data['sourceLocation'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['modifiedOn'] = isset($data['modifiedOn']) ? $data['modifiedOn'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['parentDefinitionId'] = isset($data['parentDefinitionId']) ? $data['parentDefinitionId'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agentExecution
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskExecution
     */
    public function getAgentExecution()
    {
        return $this->container['agentExecution'];
    }

    /**
     * Sets agentExecution
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskExecution $agentExecution agentExecution
     *
     * @return $this
     */
    public function setAgentExecution($agentExecution)
    {
        $this->container['agentExecution'] = $agentExecution;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets contentsUploaded
     *
     * @return bool
     */
    public function getContentsUploaded()
    {
        return $this->container['contentsUploaded'];
    }

    /**
     * Sets contentsUploaded
     *
     * @param bool $contentsUploaded contentsUploaded
     *
     * @return $this
     */
    public function setContentsUploaded($contentsUploaded)
    {
        $this->container['contentsUploaded'] = $contentsUploaded;

        return $this;
    }

    /**
     * Gets contributionIdentifier
     *
     * @return string
     */
    public function getContributionIdentifier()
    {
        return $this->container['contributionIdentifier'];
    }

    /**
     * Sets contributionIdentifier
     *
     * @param string $contributionIdentifier contributionIdentifier
     *
     * @return $this
     */
    public function setContributionIdentifier($contributionIdentifier)
    {
        $this->container['contributionIdentifier'] = $contributionIdentifier;

        return $this;
    }

    /**
     * Gets contributionVersion
     *
     * @return string
     */
    public function getContributionVersion()
    {
        return $this->container['contributionVersion'];
    }

    /**
     * Sets contributionVersion
     *
     * @param string $contributionVersion contributionVersion
     *
     * @return $this
     */
    public function setContributionVersion($contributionVersion)
    {
        $this->container['contributionVersion'] = $contributionVersion;

        return $this;
    }

    /**
     * Gets dataSourceBindings
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DataSourceBinding[]
     */
    public function getDataSourceBindings()
    {
        return $this->container['dataSourceBindings'];
    }

    /**
     * Sets dataSourceBindings
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\DataSourceBinding[] $dataSourceBindings dataSourceBindings
     *
     * @return $this
     */
    public function setDataSourceBindings($dataSourceBindings)
    {
        $this->container['dataSourceBindings'] = $dataSourceBindings;

        return $this;
    }

    /**
     * Gets definitionType
     *
     * @return string
     */
    public function getDefinitionType()
    {
        return $this->container['definitionType'];
    }

    /**
     * Sets definitionType
     *
     * @param string $definitionType definitionType
     *
     * @return $this
     */
    public function setDefinitionType($definitionType)
    {
        $this->container['definitionType'] = $definitionType;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Demand[]
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\Demand[] $demands demands
     *
     * @return $this
     */
    public function setDemands($demands)
    {
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets deprecated
     *
     * @return bool
     */
    public function getDeprecated()
    {
        return $this->container['deprecated'];
    }

    /**
     * Sets deprecated
     *
     * @param bool $deprecated deprecated
     *
     * @return $this
     */
    public function setDeprecated($deprecated)
    {
        $this->container['deprecated'] = $deprecated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets execution
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]
     */
    public function getExecution()
    {
        return $this->container['execution'];
    }

    /**
     * Sets execution
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject] $execution execution
     *
     * @return $this
     */
    public function setExecution($execution)
    {
        $this->container['execution'] = $execution;

        return $this;
    }

    /**
     * Gets friendlyName
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->container['friendlyName'];
    }

    /**
     * Sets friendlyName
     *
     * @param string $friendlyName friendlyName
     *
     * @return $this
     */
    public function setFriendlyName($friendlyName)
    {
        $this->container['friendlyName'] = $friendlyName;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupDefinition[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupDefinition[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets helpMarkDown
     *
     * @return string
     */
    public function getHelpMarkDown()
    {
        return $this->container['helpMarkDown'];
    }

    /**
     * Sets helpMarkDown
     *
     * @param string $helpMarkDown helpMarkDown
     *
     * @return $this
     */
    public function setHelpMarkDown($helpMarkDown)
    {
        $this->container['helpMarkDown'] = $helpMarkDown;

        return $this;
    }

    /**
     * Gets helpUrl
     *
     * @return string
     */
    public function getHelpUrl()
    {
        return $this->container['helpUrl'];
    }

    /**
     * Sets helpUrl
     *
     * @param string $helpUrl helpUrl
     *
     * @return $this
     */
    public function setHelpUrl($helpUrl)
    {
        $this->container['helpUrl'] = $helpUrl;

        return $this;
    }

    /**
     * Gets hostType
     *
     * @return string
     */
    public function getHostType()
    {
        return $this->container['hostType'];
    }

    /**
     * Sets hostType
     *
     * @param string $hostType hostType
     *
     * @return $this
     */
    public function setHostType($hostType)
    {
        $this->container['hostType'] = $hostType;

        return $this;
    }

    /**
     * Gets iconUrl
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['iconUrl'];
    }

    /**
     * Sets iconUrl
     *
     * @param string $iconUrl iconUrl
     *
     * @return $this
     */
    public function setIconUrl($iconUrl)
    {
        $this->container['iconUrl'] = $iconUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[]
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskInputDefinition[] $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets instanceNameFormat
     *
     * @return string
     */
    public function getInstanceNameFormat()
    {
        return $this->container['instanceNameFormat'];
    }

    /**
     * Sets instanceNameFormat
     *
     * @param string $instanceNameFormat instanceNameFormat
     *
     * @return $this
     */
    public function setInstanceNameFormat($instanceNameFormat)
    {
        $this->container['instanceNameFormat'] = $instanceNameFormat;

        return $this;
    }

    /**
     * Gets minimumAgentVersion
     *
     * @return string
     */
    public function getMinimumAgentVersion()
    {
        return $this->container['minimumAgentVersion'];
    }

    /**
     * Sets minimumAgentVersion
     *
     * @param string $minimumAgentVersion minimumAgentVersion
     *
     * @return $this
     */
    public function setMinimumAgentVersion($minimumAgentVersion)
    {
        $this->container['minimumAgentVersion'] = $minimumAgentVersion;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets outputVariables
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOutputVariable[]
     */
    public function getOutputVariables()
    {
        return $this->container['outputVariables'];
    }

    /**
     * Sets outputVariables
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOutputVariable[] $outputVariables outputVariables
     *
     * @return $this
     */
    public function setOutputVariables($outputVariables)
    {
        $this->container['outputVariables'] = $outputVariables;

        return $this;
    }

    /**
     * Gets packageLocation
     *
     * @return string
     */
    public function getPackageLocation()
    {
        return $this->container['packageLocation'];
    }

    /**
     * Sets packageLocation
     *
     * @param string $packageLocation packageLocation
     *
     * @return $this
     */
    public function setPackageLocation($packageLocation)
    {
        $this->container['packageLocation'] = $packageLocation;

        return $this;
    }

    /**
     * Gets packageType
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['packageType'];
    }

    /**
     * Sets packageType
     *
     * @param string $packageType packageType
     *
     * @return $this
     */
    public function setPackageType($packageType)
    {
        $this->container['packageType'] = $packageType;

        return $this;
    }

    /**
     * Gets postJobExecution
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]
     */
    public function getPostJobExecution()
    {
        return $this->container['postJobExecution'];
    }

    /**
     * Sets postJobExecution
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject] $postJobExecution postJobExecution
     *
     * @return $this
     */
    public function setPostJobExecution($postJobExecution)
    {
        $this->container['postJobExecution'] = $postJobExecution;

        return $this;
    }

    /**
     * Gets preJobExecution
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject]
     */
    public function getPreJobExecution()
    {
        return $this->container['preJobExecution'];
    }

    /**
     * Sets preJobExecution
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JObject] $preJobExecution preJobExecution
     *
     * @return $this
     */
    public function setPreJobExecution($preJobExecution)
    {
        $this->container['preJobExecution'] = $preJobExecution;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return bool
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param bool $preview preview
     *
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets releaseNotes
     *
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['releaseNotes'];
    }

    /**
     * Sets releaseNotes
     *
     * @param string $releaseNotes releaseNotes
     *
     * @return $this
     */
    public function setReleaseNotes($releaseNotes)
    {
        $this->container['releaseNotes'] = $releaseNotes;

        return $this;
    }

    /**
     * Gets runsOn
     *
     * @return string[]
     */
    public function getRunsOn()
    {
        return $this->container['runsOn'];
    }

    /**
     * Sets runsOn
     *
     * @param string[] $runsOn runsOn
     *
     * @return $this
     */
    public function setRunsOn($runsOn)
    {
        $this->container['runsOn'] = $runsOn;

        return $this;
    }

    /**
     * Gets satisfies
     *
     * @return string[]
     */
    public function getSatisfies()
    {
        return $this->container['satisfies'];
    }

    /**
     * Sets satisfies
     *
     * @param string[] $satisfies satisfies
     *
     * @return $this
     */
    public function setSatisfies($satisfies)
    {
        $this->container['satisfies'] = $satisfies;

        return $this;
    }

    /**
     * Gets serverOwned
     *
     * @return bool
     */
    public function getServerOwned()
    {
        return $this->container['serverOwned'];
    }

    /**
     * Sets serverOwned
     *
     * @param bool $serverOwned serverOwned
     *
     * @return $this
     */
    public function setServerOwned($serverOwned)
    {
        $this->container['serverOwned'] = $serverOwned;

        return $this;
    }

    /**
     * Gets showEnvironmentVariables
     *
     * @return bool
     */
    public function getShowEnvironmentVariables()
    {
        return $this->container['showEnvironmentVariables'];
    }

    /**
     * Sets showEnvironmentVariables
     *
     * @param bool $showEnvironmentVariables showEnvironmentVariables
     *
     * @return $this
     */
    public function setShowEnvironmentVariables($showEnvironmentVariables)
    {
        $this->container['showEnvironmentVariables'] = $showEnvironmentVariables;

        return $this;
    }

    /**
     * Gets sourceDefinitions
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskSourceDefinition[]
     */
    public function getSourceDefinitions()
    {
        return $this->container['sourceDefinitions'];
    }

    /**
     * Sets sourceDefinitions
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskSourceDefinition[] $sourceDefinitions sourceDefinitions
     *
     * @return $this
     */
    public function setSourceDefinitions($sourceDefinitions)
    {
        $this->container['sourceDefinitions'] = $sourceDefinitions;

        return $this;
    }

    /**
     * Gets sourceLocation
     *
     * @return string
     */
    public function getSourceLocation()
    {
        return $this->container['sourceLocation'];
    }

    /**
     * Sets sourceLocation
     *
     * @param string $sourceLocation sourceLocation
     *
     * @return $this
     */
    public function setSourceLocation($sourceLocation)
    {
        $this->container['sourceLocation'] = $sourceLocation;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskVersion $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string[]
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string[] $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Gets or sets comment.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef $createdBy Gets or sets the identity who created.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn Gets or sets date on which it got created.
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Gets or sets as 'true' to indicate as deleted, 'false' otherwise.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\IdentityRef $modifiedBy Gets or sets the identity who modified.
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modifiedOn
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modifiedOn'];
    }

    /**
     * Sets modifiedOn
     *
     * @param \DateTime $modifiedOn Gets or sets date on which it got modified.
     *
     * @return $this
     */
    public function setModifiedOn($modifiedOn)
    {
        $this->container['modifiedOn'] = $modifiedOn;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Gets or sets the owner.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets parentDefinitionId
     *
     * @return string
     */
    public function getParentDefinitionId()
    {
        return $this->container['parentDefinitionId'];
    }

    /**
     * Sets parentDefinitionId
     *
     * @param string $parentDefinitionId Gets or sets parent task group Id. This is used while creating a draft task group.
     *
     * @return $this
     */
    public function setParentDefinitionId($parentDefinitionId)
    {
        $this->container['parentDefinitionId'] = $parentDefinitionId;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Gets or sets revision.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskGroupStep[] $tasks Gets or sets the tasks.
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


