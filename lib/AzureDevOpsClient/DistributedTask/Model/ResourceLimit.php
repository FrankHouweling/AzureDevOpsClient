<?php
/**
 * ResourceLimit
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * ResourceLimit Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResourceLimit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResourceLimit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'failedToReachAllProviders' => 'bool',
        'hostId' => 'string',
        'isHosted' => 'bool',
        'isPremium' => 'bool',
        'parallelismTag' => 'string',
        'resourceLimitsData' => 'map[string,string]',
        'totalCount' => 'int',
        'totalMinutes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'failedToReachAllProviders' => null,
        'hostId' => 'uuid',
        'isHosted' => null,
        'isPremium' => null,
        'parallelismTag' => null,
        'resourceLimitsData' => null,
        'totalCount' => 'int32',
        'totalMinutes' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'failedToReachAllProviders' => 'failedToReachAllProviders',
        'hostId' => 'hostId',
        'isHosted' => 'isHosted',
        'isPremium' => 'isPremium',
        'parallelismTag' => 'parallelismTag',
        'resourceLimitsData' => 'resourceLimitsData',
        'totalCount' => 'totalCount',
        'totalMinutes' => 'totalMinutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'failedToReachAllProviders' => 'setFailedToReachAllProviders',
        'hostId' => 'setHostId',
        'isHosted' => 'setIsHosted',
        'isPremium' => 'setIsPremium',
        'parallelismTag' => 'setParallelismTag',
        'resourceLimitsData' => 'setResourceLimitsData',
        'totalCount' => 'setTotalCount',
        'totalMinutes' => 'setTotalMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'failedToReachAllProviders' => 'getFailedToReachAllProviders',
        'hostId' => 'getHostId',
        'isHosted' => 'getIsHosted',
        'isPremium' => 'getIsPremium',
        'parallelismTag' => 'getParallelismTag',
        'resourceLimitsData' => 'getResourceLimitsData',
        'totalCount' => 'getTotalCount',
        'totalMinutes' => 'getTotalMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['failedToReachAllProviders'] = isset($data['failedToReachAllProviders']) ? $data['failedToReachAllProviders'] : null;
        $this->container['hostId'] = isset($data['hostId']) ? $data['hostId'] : null;
        $this->container['isHosted'] = isset($data['isHosted']) ? $data['isHosted'] : null;
        $this->container['isPremium'] = isset($data['isPremium']) ? $data['isPremium'] : null;
        $this->container['parallelismTag'] = isset($data['parallelismTag']) ? $data['parallelismTag'] : null;
        $this->container['resourceLimitsData'] = isset($data['resourceLimitsData']) ? $data['resourceLimitsData'] : null;
        $this->container['totalCount'] = isset($data['totalCount']) ? $data['totalCount'] : null;
        $this->container['totalMinutes'] = isset($data['totalMinutes']) ? $data['totalMinutes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets failedToReachAllProviders
     *
     * @return bool
     */
    public function getFailedToReachAllProviders()
    {
        return $this->container['failedToReachAllProviders'];
    }

    /**
     * Sets failedToReachAllProviders
     *
     * @param bool $failedToReachAllProviders failedToReachAllProviders
     *
     * @return $this
     */
    public function setFailedToReachAllProviders($failedToReachAllProviders)
    {
        $this->container['failedToReachAllProviders'] = $failedToReachAllProviders;

        return $this;
    }

    /**
     * Gets hostId
     *
     * @return string
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     *
     * @param string $hostId hostId
     *
     * @return $this
     */
    public function setHostId($hostId)
    {
        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets isHosted
     *
     * @return bool
     */
    public function getIsHosted()
    {
        return $this->container['isHosted'];
    }

    /**
     * Sets isHosted
     *
     * @param bool $isHosted isHosted
     *
     * @return $this
     */
    public function setIsHosted($isHosted)
    {
        $this->container['isHosted'] = $isHosted;

        return $this;
    }

    /**
     * Gets isPremium
     *
     * @return bool
     */
    public function getIsPremium()
    {
        return $this->container['isPremium'];
    }

    /**
     * Sets isPremium
     *
     * @param bool $isPremium isPremium
     *
     * @return $this
     */
    public function setIsPremium($isPremium)
    {
        $this->container['isPremium'] = $isPremium;

        return $this;
    }

    /**
     * Gets parallelismTag
     *
     * @return string
     */
    public function getParallelismTag()
    {
        return $this->container['parallelismTag'];
    }

    /**
     * Sets parallelismTag
     *
     * @param string $parallelismTag parallelismTag
     *
     * @return $this
     */
    public function setParallelismTag($parallelismTag)
    {
        $this->container['parallelismTag'] = $parallelismTag;

        return $this;
    }

    /**
     * Gets resourceLimitsData
     *
     * @return map[string,string]
     */
    public function getResourceLimitsData()
    {
        return $this->container['resourceLimitsData'];
    }

    /**
     * Sets resourceLimitsData
     *
     * @param map[string,string] $resourceLimitsData resourceLimitsData
     *
     * @return $this
     */
    public function setResourceLimitsData($resourceLimitsData)
    {
        $this->container['resourceLimitsData'] = $resourceLimitsData;

        return $this;
    }

    /**
     * Gets totalCount
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['totalCount'];
    }

    /**
     * Sets totalCount
     *
     * @param int $totalCount totalCount
     *
     * @return $this
     */
    public function setTotalCount($totalCount)
    {
        $this->container['totalCount'] = $totalCount;

        return $this;
    }

    /**
     * Gets totalMinutes
     *
     * @return int
     */
    public function getTotalMinutes()
    {
        return $this->container['totalMinutes'];
    }

    /**
     * Sets totalMinutes
     *
     * @param int $totalMinutes totalMinutes
     *
     * @return $this
     */
    public function setTotalMinutes($totalMinutes)
    {
        $this->container['totalMinutes'] = $totalMinutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


