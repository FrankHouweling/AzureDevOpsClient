<?php
/**
 * TaskAgentPoolMaintenanceDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * TaskAgentPoolMaintenanceDefinition Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskAgentPoolMaintenanceDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskAgentPoolMaintenanceDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'id' => 'int',
        'jobTimeoutInMinutes' => 'int',
        'maxConcurrentAgentsPercentage' => 'int',
        'options' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceOptions',
        'pool' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference',
        'retentionPolicy' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceRetentionPolicy',
        'scheduleSetting' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceSchedule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'id' => 'int32',
        'jobTimeoutInMinutes' => 'int32',
        'maxConcurrentAgentsPercentage' => 'int32',
        'options' => null,
        'pool' => null,
        'retentionPolicy' => null,
        'scheduleSetting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'id' => 'id',
        'jobTimeoutInMinutes' => 'jobTimeoutInMinutes',
        'maxConcurrentAgentsPercentage' => 'maxConcurrentAgentsPercentage',
        'options' => 'options',
        'pool' => 'pool',
        'retentionPolicy' => 'retentionPolicy',
        'scheduleSetting' => 'scheduleSetting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'id' => 'setId',
        'jobTimeoutInMinutes' => 'setJobTimeoutInMinutes',
        'maxConcurrentAgentsPercentage' => 'setMaxConcurrentAgentsPercentage',
        'options' => 'setOptions',
        'pool' => 'setPool',
        'retentionPolicy' => 'setRetentionPolicy',
        'scheduleSetting' => 'setScheduleSetting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'id' => 'getId',
        'jobTimeoutInMinutes' => 'getJobTimeoutInMinutes',
        'maxConcurrentAgentsPercentage' => 'getMaxConcurrentAgentsPercentage',
        'options' => 'getOptions',
        'pool' => 'getPool',
        'retentionPolicy' => 'getRetentionPolicy',
        'scheduleSetting' => 'getScheduleSetting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['jobTimeoutInMinutes'] = isset($data['jobTimeoutInMinutes']) ? $data['jobTimeoutInMinutes'] : null;
        $this->container['maxConcurrentAgentsPercentage'] = isset($data['maxConcurrentAgentsPercentage']) ? $data['maxConcurrentAgentsPercentage'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['retentionPolicy'] = isset($data['retentionPolicy']) ? $data['retentionPolicy'] : null;
        $this->container['scheduleSetting'] = isset($data['scheduleSetting']) ? $data['scheduleSetting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enable maintenance
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets jobTimeoutInMinutes
     *
     * @return int
     */
    public function getJobTimeoutInMinutes()
    {
        return $this->container['jobTimeoutInMinutes'];
    }

    /**
     * Sets jobTimeoutInMinutes
     *
     * @param int $jobTimeoutInMinutes Maintenance job timeout per agent
     *
     * @return $this
     */
    public function setJobTimeoutInMinutes($jobTimeoutInMinutes)
    {
        $this->container['jobTimeoutInMinutes'] = $jobTimeoutInMinutes;

        return $this;
    }

    /**
     * Gets maxConcurrentAgentsPercentage
     *
     * @return int
     */
    public function getMaxConcurrentAgentsPercentage()
    {
        return $this->container['maxConcurrentAgentsPercentage'];
    }

    /**
     * Sets maxConcurrentAgentsPercentage
     *
     * @param int $maxConcurrentAgentsPercentage Max percentage of agents within a pool running maintenance job at given time
     *
     * @return $this
     */
    public function setMaxConcurrentAgentsPercentage($maxConcurrentAgentsPercentage)
    {
        $this->container['maxConcurrentAgentsPercentage'] = $maxConcurrentAgentsPercentage;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceOptions
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceOptions $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolReference $pool Pool reference for the maintenance definition
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets retentionPolicy
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceRetentionPolicy
     */
    public function getRetentionPolicy()
    {
        return $this->container['retentionPolicy'];
    }

    /**
     * Sets retentionPolicy
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceRetentionPolicy $retentionPolicy retentionPolicy
     *
     * @return $this
     */
    public function setRetentionPolicy($retentionPolicy)
    {
        $this->container['retentionPolicy'] = $retentionPolicy;

        return $this;
    }

    /**
     * Gets scheduleSetting
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceSchedule
     */
    public function getScheduleSetting()
    {
        return $this->container['scheduleSetting'];
    }

    /**
     * Sets scheduleSetting
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskAgentPoolMaintenanceSchedule $scheduleSetting scheduleSetting
     *
     * @return $this
     */
    public function setScheduleSetting($scheduleSetting)
    {
        $this->container['scheduleSetting'] = $scheduleSetting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


