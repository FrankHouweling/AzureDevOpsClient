<?php
/**
 * JobEnvironment
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * JobEnvironment Class Doc Comment
 *
 * @category Class
 * @description Represents the context of variables and vectors for a job request.
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobEnvironment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobEnvironment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endpoints' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint[]',
        'mask' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\MaskHint[]',
        'options' => 'map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JobOption]',
        'secureFiles' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\SecureFile[]',
        'systemConnection' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint',
        'variables' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endpoints' => null,
        'mask' => null,
        'options' => null,
        'secureFiles' => null,
        'systemConnection' => null,
        'variables' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoints' => 'endpoints',
        'mask' => 'mask',
        'options' => 'options',
        'secureFiles' => 'secureFiles',
        'systemConnection' => 'systemConnection',
        'variables' => 'variables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoints' => 'setEndpoints',
        'mask' => 'setMask',
        'options' => 'setOptions',
        'secureFiles' => 'setSecureFiles',
        'systemConnection' => 'setSystemConnection',
        'variables' => 'setVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoints' => 'getEndpoints',
        'mask' => 'getMask',
        'options' => 'getOptions',
        'secureFiles' => 'getSecureFiles',
        'systemConnection' => 'getSystemConnection',
        'variables' => 'getVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endpoints'] = isset($data['endpoints']) ? $data['endpoints'] : null;
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['secureFiles'] = isset($data['secureFiles']) ? $data['secureFiles'] : null;
        $this->container['systemConnection'] = isset($data['systemConnection']) ? $data['systemConnection'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoints
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint[]
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint[] $endpoints endpoints
     *
     * @return $this
     */
    public function setEndpoints($endpoints)
    {
        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\MaskHint[]
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\MaskHint[] $mask mask
     *
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets options
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JobOption]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\JobOption] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets secureFiles
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\SecureFile[]
     */
    public function getSecureFiles()
    {
        return $this->container['secureFiles'];
    }

    /**
     * Sets secureFiles
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\SecureFile[] $secureFiles secureFiles
     *
     * @return $this
     */
    public function setSecureFiles($secureFiles)
    {
        $this->container['secureFiles'] = $secureFiles;

        return $this;
    }

    /**
     * Gets systemConnection
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint
     */
    public function getSystemConnection()
    {
        return $this->container['systemConnection'];
    }

    /**
     * Sets systemConnection
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\ServiceEndpoint $systemConnection Gets or sets the endpoint used for communicating back to the calling service.
     *
     * @return $this
     */
    public function setSystemConnection($systemConnection)
    {
        $this->container['systemConnection'] = $systemConnection;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,string]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param map[string,string] $variables variables
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


