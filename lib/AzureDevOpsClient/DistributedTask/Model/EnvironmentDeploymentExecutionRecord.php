<?php
/**
 * EnvironmentDeploymentExecutionRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaskAgent
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\DistributedTask\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\DistributedTask\ObjectSerializer;

/**
 * EnvironmentDeploymentExecutionRecord Class Doc Comment
 *
 * @category Class
 * @description EnvironmentDeploymentExecutionRecord.
 * @package  FrankHouweling\AzureDevOpsClient\DistributedTask
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvironmentDeploymentExecutionRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvironmentDeploymentExecutionRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definition' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner',
        'environmentId' => 'int',
        'finishTime' => '\DateTime',
        'id' => 'int',
        'jobAttempt' => 'int',
        'jobName' => 'string',
        'owner' => '\FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner',
        'planId' => 'string',
        'planType' => 'string',
        'queueTime' => '\DateTime',
        'requestIdentifier' => 'string',
        'resourceId' => 'int',
        'result' => 'string',
        'scopeId' => 'string',
        'serviceOwner' => 'string',
        'stageAttempt' => 'int',
        'stageName' => 'string',
        'startTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definition' => null,
        'environmentId' => 'int32',
        'finishTime' => 'date-time',
        'id' => 'int64',
        'jobAttempt' => 'int32',
        'jobName' => null,
        'owner' => null,
        'planId' => 'uuid',
        'planType' => null,
        'queueTime' => 'date-time',
        'requestIdentifier' => null,
        'resourceId' => 'int32',
        'result' => null,
        'scopeId' => 'uuid',
        'serviceOwner' => 'uuid',
        'stageAttempt' => 'int32',
        'stageName' => null,
        'startTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definition' => 'definition',
        'environmentId' => 'environmentId',
        'finishTime' => 'finishTime',
        'id' => 'id',
        'jobAttempt' => 'jobAttempt',
        'jobName' => 'jobName',
        'owner' => 'owner',
        'planId' => 'planId',
        'planType' => 'planType',
        'queueTime' => 'queueTime',
        'requestIdentifier' => 'requestIdentifier',
        'resourceId' => 'resourceId',
        'result' => 'result',
        'scopeId' => 'scopeId',
        'serviceOwner' => 'serviceOwner',
        'stageAttempt' => 'stageAttempt',
        'stageName' => 'stageName',
        'startTime' => 'startTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definition' => 'setDefinition',
        'environmentId' => 'setEnvironmentId',
        'finishTime' => 'setFinishTime',
        'id' => 'setId',
        'jobAttempt' => 'setJobAttempt',
        'jobName' => 'setJobName',
        'owner' => 'setOwner',
        'planId' => 'setPlanId',
        'planType' => 'setPlanType',
        'queueTime' => 'setQueueTime',
        'requestIdentifier' => 'setRequestIdentifier',
        'resourceId' => 'setResourceId',
        'result' => 'setResult',
        'scopeId' => 'setScopeId',
        'serviceOwner' => 'setServiceOwner',
        'stageAttempt' => 'setStageAttempt',
        'stageName' => 'setStageName',
        'startTime' => 'setStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definition' => 'getDefinition',
        'environmentId' => 'getEnvironmentId',
        'finishTime' => 'getFinishTime',
        'id' => 'getId',
        'jobAttempt' => 'getJobAttempt',
        'jobName' => 'getJobName',
        'owner' => 'getOwner',
        'planId' => 'getPlanId',
        'planType' => 'getPlanType',
        'queueTime' => 'getQueueTime',
        'requestIdentifier' => 'getRequestIdentifier',
        'resourceId' => 'getResourceId',
        'result' => 'getResult',
        'scopeId' => 'getScopeId',
        'serviceOwner' => 'getServiceOwner',
        'stageAttempt' => 'getStageAttempt',
        'stageName' => 'getStageName',
        'startTime' => 'getStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_SUCCEEDED = 'succeeded';
    const RESULT_SUCCEEDED_WITH_ISSUES = 'succeededWithIssues';
    const RESULT_FAILED = 'failed';
    const RESULT_CANCELED = 'canceled';
    const RESULT_SKIPPED = 'skipped';
    const RESULT_ABANDONED = 'abandoned';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCEEDED,
            self::RESULT_SUCCEEDED_WITH_ISSUES,
            self::RESULT_FAILED,
            self::RESULT_CANCELED,
            self::RESULT_SKIPPED,
            self::RESULT_ABANDONED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definition'] = isset($data['definition']) ? $data['definition'] : null;
        $this->container['environmentId'] = isset($data['environmentId']) ? $data['environmentId'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['jobAttempt'] = isset($data['jobAttempt']) ? $data['jobAttempt'] : null;
        $this->container['jobName'] = isset($data['jobName']) ? $data['jobName'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['planId'] = isset($data['planId']) ? $data['planId'] : null;
        $this->container['planType'] = isset($data['planType']) ? $data['planType'] : null;
        $this->container['queueTime'] = isset($data['queueTime']) ? $data['queueTime'] : null;
        $this->container['requestIdentifier'] = isset($data['requestIdentifier']) ? $data['requestIdentifier'] : null;
        $this->container['resourceId'] = isset($data['resourceId']) ? $data['resourceId'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['scopeId'] = isset($data['scopeId']) ? $data['scopeId'] : null;
        $this->container['serviceOwner'] = isset($data['serviceOwner']) ? $data['serviceOwner'] : null;
        $this->container['stageAttempt'] = isset($data['stageAttempt']) ? $data['stageAttempt'] : null;
        $this->container['stageName'] = isset($data['stageName']) ? $data['stageName'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definition
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner $definition Definition of the environment deployment execution owner
     *
     * @return $this
     */
    public function setDefinition($definition)
    {
        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int
     */
    public function getEnvironmentId()
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int $environmentId Id of the Environment
     *
     * @return $this
     */
    public function setEnvironmentId($environmentId)
    {
        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return \DateTime
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param \DateTime $finishTime Finish time of the environment deployment execution
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id of the Environment deployment execution history record
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets jobAttempt
     *
     * @return int
     */
    public function getJobAttempt()
    {
        return $this->container['jobAttempt'];
    }

    /**
     * Sets jobAttempt
     *
     * @param int $jobAttempt Job Attempt
     *
     * @return $this
     */
    public function setJobAttempt($jobAttempt)
    {
        $this->container['jobAttempt'] = $jobAttempt;

        return $this;
    }

    /**
     * Gets jobName
     *
     * @return string
     */
    public function getJobName()
    {
        return $this->container['jobName'];
    }

    /**
     * Sets jobName
     *
     * @param string $jobName Job name
     *
     * @return $this
     */
    public function setJobName($jobName)
    {
        $this->container['jobName'] = $jobName;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \FrankHouweling\AzureDevOpsClient\DistributedTask\Model\TaskOrchestrationOwner $owner Owner of the environment deployment execution record
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets planId
     *
     * @return string
     */
    public function getPlanId()
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId
     *
     * @param string $planId Plan Id
     *
     * @return $this
     */
    public function setPlanId($planId)
    {
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets planType
     *
     * @return string
     */
    public function getPlanType()
    {
        return $this->container['planType'];
    }

    /**
     * Sets planType
     *
     * @param string $planType Plan type of the environment deployment execution record
     *
     * @return $this
     */
    public function setPlanType($planType)
    {
        $this->container['planType'] = $planType;

        return $this;
    }

    /**
     * Gets queueTime
     *
     * @return \DateTime
     */
    public function getQueueTime()
    {
        return $this->container['queueTime'];
    }

    /**
     * Sets queueTime
     *
     * @param \DateTime $queueTime Queue time of the environment deployment execution
     *
     * @return $this
     */
    public function setQueueTime($queueTime)
    {
        $this->container['queueTime'] = $queueTime;

        return $this;
    }

    /**
     * Gets requestIdentifier
     *
     * @return string
     */
    public function getRequestIdentifier()
    {
        return $this->container['requestIdentifier'];
    }

    /**
     * Sets requestIdentifier
     *
     * @param string $requestIdentifier Request identifier of the Environment deployment execution history record
     *
     * @return $this
     */
    public function setRequestIdentifier($requestIdentifier)
    {
        $this->container['requestIdentifier'] = $requestIdentifier;

        return $this;
    }

    /**
     * Gets resourceId
     *
     * @return int
     */
    public function getResourceId()
    {
        return $this->container['resourceId'];
    }

    /**
     * Sets resourceId
     *
     * @param int $resourceId Resource Id
     *
     * @return $this
     */
    public function setResourceId($resourceId)
    {
        $this->container['resourceId'] = $resourceId;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result Result of the environment deployment execution
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets scopeId
     *
     * @return string
     */
    public function getScopeId()
    {
        return $this->container['scopeId'];
    }

    /**
     * Sets scopeId
     *
     * @param string $scopeId Project Id
     *
     * @return $this
     */
    public function setScopeId($scopeId)
    {
        $this->container['scopeId'] = $scopeId;

        return $this;
    }

    /**
     * Gets serviceOwner
     *
     * @return string
     */
    public function getServiceOwner()
    {
        return $this->container['serviceOwner'];
    }

    /**
     * Sets serviceOwner
     *
     * @param string $serviceOwner Service owner Id
     *
     * @return $this
     */
    public function setServiceOwner($serviceOwner)
    {
        $this->container['serviceOwner'] = $serviceOwner;

        return $this;
    }

    /**
     * Gets stageAttempt
     *
     * @return int
     */
    public function getStageAttempt()
    {
        return $this->container['stageAttempt'];
    }

    /**
     * Sets stageAttempt
     *
     * @param int $stageAttempt Stage Attempt
     *
     * @return $this
     */
    public function setStageAttempt($stageAttempt)
    {
        $this->container['stageAttempt'] = $stageAttempt;

        return $this;
    }

    /**
     * Gets stageName
     *
     * @return string
     */
    public function getStageName()
    {
        return $this->container['stageName'];
    }

    /**
     * Sets stageName
     *
     * @param string $stageName Stage name
     *
     * @return $this
     */
    public function setStageName($stageName)
    {
        $this->container['stageName'] = $stageName;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime Start time of the environment deployment execution
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


