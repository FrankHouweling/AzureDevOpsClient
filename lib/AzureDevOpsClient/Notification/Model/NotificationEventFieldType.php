<?php
/**
 * NotificationEventFieldType
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * NotificationEventFieldType Class Doc Comment
 *
 * @category Class
 * @description Encapsulates the properties of a field type. It describes the data type of a field, the operators it support and how to populate it in the UI
 * @package  FrankHouweling\AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationEventFieldType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationEventFieldType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'operatorConstraints' => '\FrankHouweling\AzureDevOpsClient\Notification\Model\OperatorConstraint[]',
        'operators' => '\FrankHouweling\AzureDevOpsClient\Notification\Model\NotificationEventFieldOperator[]',
        'subscriptionFieldType' => 'string',
        'value' => '\FrankHouweling\AzureDevOpsClient\Notification\Model\ValueDefinition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'operatorConstraints' => null,
        'operators' => null,
        'subscriptionFieldType' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'operatorConstraints' => 'operatorConstraints',
        'operators' => 'operators',
        'subscriptionFieldType' => 'subscriptionFieldType',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'operatorConstraints' => 'setOperatorConstraints',
        'operators' => 'setOperators',
        'subscriptionFieldType' => 'setSubscriptionFieldType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'operatorConstraints' => 'getOperatorConstraints',
        'operators' => 'getOperators',
        'subscriptionFieldType' => 'getSubscriptionFieldType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_FIELD_TYPE_STRING = 'string';
    const SUBSCRIPTION_FIELD_TYPE_INTEGER = 'integer';
    const SUBSCRIPTION_FIELD_TYPE_DATE_TIME = 'dateTime';
    const SUBSCRIPTION_FIELD_TYPE_PLAIN_TEXT = 'plainText';
    const SUBSCRIPTION_FIELD_TYPE_HTML = 'html';
    const SUBSCRIPTION_FIELD_TYPE_TREE_PATH = 'treePath';
    const SUBSCRIPTION_FIELD_TYPE_HISTORY = 'history';
    const SUBSCRIPTION_FIELD_TYPE_DOUBLE = 'double';
    const SUBSCRIPTION_FIELD_TYPE_GUID = 'guid';
    const SUBSCRIPTION_FIELD_TYPE_BOOLEAN = 'boolean';
    const SUBSCRIPTION_FIELD_TYPE_IDENTITY = 'identity';
    const SUBSCRIPTION_FIELD_TYPE_PICKLIST_INTEGER = 'picklistInteger';
    const SUBSCRIPTION_FIELD_TYPE_PICKLIST_STRING = 'picklistString';
    const SUBSCRIPTION_FIELD_TYPE_PICKLIST_DOUBLE = 'picklistDouble';
    const SUBSCRIPTION_FIELD_TYPE_TEAM_PROJECT = 'teamProject';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionFieldTypeAllowableValues()
    {
        return [
            self::SUBSCRIPTION_FIELD_TYPE_STRING,
            self::SUBSCRIPTION_FIELD_TYPE_INTEGER,
            self::SUBSCRIPTION_FIELD_TYPE_DATE_TIME,
            self::SUBSCRIPTION_FIELD_TYPE_PLAIN_TEXT,
            self::SUBSCRIPTION_FIELD_TYPE_HTML,
            self::SUBSCRIPTION_FIELD_TYPE_TREE_PATH,
            self::SUBSCRIPTION_FIELD_TYPE_HISTORY,
            self::SUBSCRIPTION_FIELD_TYPE_DOUBLE,
            self::SUBSCRIPTION_FIELD_TYPE_GUID,
            self::SUBSCRIPTION_FIELD_TYPE_BOOLEAN,
            self::SUBSCRIPTION_FIELD_TYPE_IDENTITY,
            self::SUBSCRIPTION_FIELD_TYPE_PICKLIST_INTEGER,
            self::SUBSCRIPTION_FIELD_TYPE_PICKLIST_STRING,
            self::SUBSCRIPTION_FIELD_TYPE_PICKLIST_DOUBLE,
            self::SUBSCRIPTION_FIELD_TYPE_TEAM_PROJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['operatorConstraints'] = isset($data['operatorConstraints']) ? $data['operatorConstraints'] : null;
        $this->container['operators'] = isset($data['operators']) ? $data['operators'] : null;
        $this->container['subscriptionFieldType'] = isset($data['subscriptionFieldType']) ? $data['subscriptionFieldType'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubscriptionFieldTypeAllowableValues();
        if (!is_null($this->container['subscriptionFieldType']) && !in_array($this->container['subscriptionFieldType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscriptionFieldType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets or sets the unique identifier of this field type.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets operatorConstraints
     *
     * @return \FrankHouweling\AzureDevOpsClient\Notification\Model\OperatorConstraint[]
     */
    public function getOperatorConstraints()
    {
        return $this->container['operatorConstraints'];
    }

    /**
     * Sets operatorConstraints
     *
     * @param \FrankHouweling\AzureDevOpsClient\Notification\Model\OperatorConstraint[] $operatorConstraints operatorConstraints
     *
     * @return $this
     */
    public function setOperatorConstraints($operatorConstraints)
    {
        $this->container['operatorConstraints'] = $operatorConstraints;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \FrankHouweling\AzureDevOpsClient\Notification\Model\NotificationEventFieldOperator[]
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \FrankHouweling\AzureDevOpsClient\Notification\Model\NotificationEventFieldOperator[] $operators Gets or sets the list of operators that this type supports.
     *
     * @return $this
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets subscriptionFieldType
     *
     * @return string
     */
    public function getSubscriptionFieldType()
    {
        return $this->container['subscriptionFieldType'];
    }

    /**
     * Sets subscriptionFieldType
     *
     * @param string $subscriptionFieldType subscriptionFieldType
     *
     * @return $this
     */
    public function setSubscriptionFieldType($subscriptionFieldType)
    {
        $allowedValues = $this->getSubscriptionFieldTypeAllowableValues();
        if (!is_null($subscriptionFieldType) && !in_array($subscriptionFieldType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscriptionFieldType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriptionFieldType'] = $subscriptionFieldType;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \FrankHouweling\AzureDevOpsClient\Notification\Model\ValueDefinition
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \FrankHouweling\AzureDevOpsClient\Notification\Model\ValueDefinition $value Gets or sets the value definition of this field like the getValuesMethod and template to display in the UI
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


