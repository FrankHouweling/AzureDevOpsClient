<?php
/**
 * VssNotificationEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * VssNotificationEvent Class Doc Comment
 *
 * @category Class
 * @description This is the type used for firing notifications intended for the subsystem in the Notifications SDK. For components that can&#39;t take a dependency on the Notifications SDK directly, they can use ITeamFoundationEventService.PublishNotification and the Notifications SDK ISubscriber implementation will get it.
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VssNotificationEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VssNotificationEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actors' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]',
        'artifactUris' => 'string[]',
        'data' => 'object',
        'eventType' => 'string',
        'expiresIn' => 'string',
        'itemId' => 'string',
        'processDelay' => 'string',
        'scopes' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventScope[]',
        'sourceEventCreatedTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actors' => null,
        'artifactUris' => null,
        'data' => null,
        'eventType' => null,
        'expiresIn' => 'TimeSpan',
        'itemId' => null,
        'processDelay' => 'TimeSpan',
        'scopes' => null,
        'sourceEventCreatedTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actors' => 'actors',
        'artifactUris' => 'artifactUris',
        'data' => 'data',
        'eventType' => 'eventType',
        'expiresIn' => 'expiresIn',
        'itemId' => 'itemId',
        'processDelay' => 'processDelay',
        'scopes' => 'scopes',
        'sourceEventCreatedTime' => 'sourceEventCreatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actors' => 'setActors',
        'artifactUris' => 'setArtifactUris',
        'data' => 'setData',
        'eventType' => 'setEventType',
        'expiresIn' => 'setExpiresIn',
        'itemId' => 'setItemId',
        'processDelay' => 'setProcessDelay',
        'scopes' => 'setScopes',
        'sourceEventCreatedTime' => 'setSourceEventCreatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actors' => 'getActors',
        'artifactUris' => 'getArtifactUris',
        'data' => 'getData',
        'eventType' => 'getEventType',
        'expiresIn' => 'getExpiresIn',
        'itemId' => 'getItemId',
        'processDelay' => 'getProcessDelay',
        'scopes' => 'getScopes',
        'sourceEventCreatedTime' => 'getSourceEventCreatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actors'] = isset($data['actors']) ? $data['actors'] : null;
        $this->container['artifactUris'] = isset($data['artifactUris']) ? $data['artifactUris'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['eventType'] = isset($data['eventType']) ? $data['eventType'] : null;
        $this->container['expiresIn'] = isset($data['expiresIn']) ? $data['expiresIn'] : null;
        $this->container['itemId'] = isset($data['itemId']) ? $data['itemId'] : null;
        $this->container['processDelay'] = isset($data['processDelay']) ? $data['processDelay'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['sourceEventCreatedTime'] = isset($data['sourceEventCreatedTime']) ? $data['sourceEventCreatedTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actors
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]
     */
    public function getActors()
    {
        return $this->container['actors'];
    }

    /**
     * Sets actors
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[] $actors Optional: A list of actors which are additional identities with corresponding roles that are relevant to the event.
     *
     * @return $this
     */
    public function setActors($actors)
    {
        $this->container['actors'] = $actors;

        return $this;
    }

    /**
     * Gets artifactUris
     *
     * @return string[]
     */
    public function getArtifactUris()
    {
        return $this->container['artifactUris'];
    }

    /**
     * Sets artifactUris
     *
     * @param string[] $artifactUris Optional: A list of artifacts referenced or impacted by this event.
     *
     * @return $this
     */
    public function setArtifactUris($artifactUris)
    {
        $this->container['artifactUris'] = $artifactUris;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object $data Required: The event payload.  If Data is a string, it must be in Json or XML format.  Otherwise it must have a serialization format attribute.
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string $eventType Required: The name of the event.  This event must be registered in the context it is being fired.
     *
     * @return $this
     */
    public function setEventType($eventType)
    {
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets expiresIn
     *
     * @return string
     */
    public function getExpiresIn()
    {
        return $this->container['expiresIn'];
    }

    /**
     * Sets expiresIn
     *
     * @param string $expiresIn How long before the event expires and will be cleaned up.  The default is to use the system default.
     *
     * @return $this
     */
    public function setExpiresIn($expiresIn)
    {
        $this->container['expiresIn'] = $expiresIn;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string $itemId The id of the item, artifact, extension, project, etc.
     *
     * @return $this
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets processDelay
     *
     * @return string
     */
    public function getProcessDelay()
    {
        return $this->container['processDelay'];
    }

    /**
     * Sets processDelay
     *
     * @param string $processDelay How long to wait before processing this event.  The default is to process immediately.
     *
     * @return $this
     */
    public function setProcessDelay($processDelay)
    {
        $this->container['processDelay'] = $processDelay;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventScope[]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventScope[] $scopes Optional: A list of scopes which are are relevant to the event.
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets sourceEventCreatedTime
     *
     * @return \DateTime
     */
    public function getSourceEventCreatedTime()
    {
        return $this->container['sourceEventCreatedTime'];
    }

    /**
     * Sets sourceEventCreatedTime
     *
     * @param \DateTime $sourceEventCreatedTime This is the time the original source event for this VssNotificationEvent was created.  For example, for something like a build completion notification SourceEventCreatedTime should be the time the build finished not the time this event was raised.
     *
     * @return $this
     */
    public function setSourceEventCreatedTime($sourceEventCreatedTime)
    {
        $this->container['sourceEventCreatedTime'] = $sourceEventCreatedTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


