<?php
/**
 * EventBacklogStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * EventBacklogStatus Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventBacklogStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventBacklogStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'captureTime' => '\DateTime',
        'jobId' => 'string',
        'lastEventBatchStartTime' => '\DateTime',
        'lastEventProcessedTime' => '\DateTime',
        'lastJobBatchStartTime' => '\DateTime',
        'lastJobProcessedTime' => '\DateTime',
        'oldestPendingEventTime' => '\DateTime',
        'publisher' => 'string',
        'unprocessedEvents' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'captureTime' => 'date-time',
        'jobId' => 'uuid',
        'lastEventBatchStartTime' => 'date-time',
        'lastEventProcessedTime' => 'date-time',
        'lastJobBatchStartTime' => 'date-time',
        'lastJobProcessedTime' => 'date-time',
        'oldestPendingEventTime' => 'date-time',
        'publisher' => null,
        'unprocessedEvents' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'captureTime' => 'captureTime',
        'jobId' => 'jobId',
        'lastEventBatchStartTime' => 'lastEventBatchStartTime',
        'lastEventProcessedTime' => 'lastEventProcessedTime',
        'lastJobBatchStartTime' => 'lastJobBatchStartTime',
        'lastJobProcessedTime' => 'lastJobProcessedTime',
        'oldestPendingEventTime' => 'oldestPendingEventTime',
        'publisher' => 'publisher',
        'unprocessedEvents' => 'unprocessedEvents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'captureTime' => 'setCaptureTime',
        'jobId' => 'setJobId',
        'lastEventBatchStartTime' => 'setLastEventBatchStartTime',
        'lastEventProcessedTime' => 'setLastEventProcessedTime',
        'lastJobBatchStartTime' => 'setLastJobBatchStartTime',
        'lastJobProcessedTime' => 'setLastJobProcessedTime',
        'oldestPendingEventTime' => 'setOldestPendingEventTime',
        'publisher' => 'setPublisher',
        'unprocessedEvents' => 'setUnprocessedEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'captureTime' => 'getCaptureTime',
        'jobId' => 'getJobId',
        'lastEventBatchStartTime' => 'getLastEventBatchStartTime',
        'lastEventProcessedTime' => 'getLastEventProcessedTime',
        'lastJobBatchStartTime' => 'getLastJobBatchStartTime',
        'lastJobProcessedTime' => 'getLastJobProcessedTime',
        'oldestPendingEventTime' => 'getOldestPendingEventTime',
        'publisher' => 'getPublisher',
        'unprocessedEvents' => 'getUnprocessedEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['captureTime'] = isset($data['captureTime']) ? $data['captureTime'] : null;
        $this->container['jobId'] = isset($data['jobId']) ? $data['jobId'] : null;
        $this->container['lastEventBatchStartTime'] = isset($data['lastEventBatchStartTime']) ? $data['lastEventBatchStartTime'] : null;
        $this->container['lastEventProcessedTime'] = isset($data['lastEventProcessedTime']) ? $data['lastEventProcessedTime'] : null;
        $this->container['lastJobBatchStartTime'] = isset($data['lastJobBatchStartTime']) ? $data['lastJobBatchStartTime'] : null;
        $this->container['lastJobProcessedTime'] = isset($data['lastJobProcessedTime']) ? $data['lastJobProcessedTime'] : null;
        $this->container['oldestPendingEventTime'] = isset($data['oldestPendingEventTime']) ? $data['oldestPendingEventTime'] : null;
        $this->container['publisher'] = isset($data['publisher']) ? $data['publisher'] : null;
        $this->container['unprocessedEvents'] = isset($data['unprocessedEvents']) ? $data['unprocessedEvents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets captureTime
     *
     * @return \DateTime
     */
    public function getCaptureTime()
    {
        return $this->container['captureTime'];
    }

    /**
     * Sets captureTime
     *
     * @param \DateTime $captureTime captureTime
     *
     * @return $this
     */
    public function setCaptureTime($captureTime)
    {
        $this->container['captureTime'] = $captureTime;

        return $this;
    }

    /**
     * Gets jobId
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['jobId'];
    }

    /**
     * Sets jobId
     *
     * @param string $jobId jobId
     *
     * @return $this
     */
    public function setJobId($jobId)
    {
        $this->container['jobId'] = $jobId;

        return $this;
    }

    /**
     * Gets lastEventBatchStartTime
     *
     * @return \DateTime
     */
    public function getLastEventBatchStartTime()
    {
        return $this->container['lastEventBatchStartTime'];
    }

    /**
     * Sets lastEventBatchStartTime
     *
     * @param \DateTime $lastEventBatchStartTime lastEventBatchStartTime
     *
     * @return $this
     */
    public function setLastEventBatchStartTime($lastEventBatchStartTime)
    {
        $this->container['lastEventBatchStartTime'] = $lastEventBatchStartTime;

        return $this;
    }

    /**
     * Gets lastEventProcessedTime
     *
     * @return \DateTime
     */
    public function getLastEventProcessedTime()
    {
        return $this->container['lastEventProcessedTime'];
    }

    /**
     * Sets lastEventProcessedTime
     *
     * @param \DateTime $lastEventProcessedTime lastEventProcessedTime
     *
     * @return $this
     */
    public function setLastEventProcessedTime($lastEventProcessedTime)
    {
        $this->container['lastEventProcessedTime'] = $lastEventProcessedTime;

        return $this;
    }

    /**
     * Gets lastJobBatchStartTime
     *
     * @return \DateTime
     */
    public function getLastJobBatchStartTime()
    {
        return $this->container['lastJobBatchStartTime'];
    }

    /**
     * Sets lastJobBatchStartTime
     *
     * @param \DateTime $lastJobBatchStartTime lastJobBatchStartTime
     *
     * @return $this
     */
    public function setLastJobBatchStartTime($lastJobBatchStartTime)
    {
        $this->container['lastJobBatchStartTime'] = $lastJobBatchStartTime;

        return $this;
    }

    /**
     * Gets lastJobProcessedTime
     *
     * @return \DateTime
     */
    public function getLastJobProcessedTime()
    {
        return $this->container['lastJobProcessedTime'];
    }

    /**
     * Sets lastJobProcessedTime
     *
     * @param \DateTime $lastJobProcessedTime lastJobProcessedTime
     *
     * @return $this
     */
    public function setLastJobProcessedTime($lastJobProcessedTime)
    {
        $this->container['lastJobProcessedTime'] = $lastJobProcessedTime;

        return $this;
    }

    /**
     * Gets oldestPendingEventTime
     *
     * @return \DateTime
     */
    public function getOldestPendingEventTime()
    {
        return $this->container['oldestPendingEventTime'];
    }

    /**
     * Sets oldestPendingEventTime
     *
     * @param \DateTime $oldestPendingEventTime oldestPendingEventTime
     *
     * @return $this
     */
    public function setOldestPendingEventTime($oldestPendingEventTime)
    {
        $this->container['oldestPendingEventTime'] = $oldestPendingEventTime;

        return $this;
    }

    /**
     * Gets publisher
     *
     * @return string
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     *
     * @param string $publisher publisher
     *
     * @return $this
     */
    public function setPublisher($publisher)
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Gets unprocessedEvents
     *
     * @return int
     */
    public function getUnprocessedEvents()
    {
        return $this->container['unprocessedEvents'];
    }

    /**
     * Sets unprocessedEvents
     *
     * @param int $unprocessedEvents unprocessedEvents
     *
     * @return $this
     */
    public function setUnprocessedEvents($unprocessedEvents)
    {
        $this->container['unprocessedEvents'] = $unprocessedEvents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


