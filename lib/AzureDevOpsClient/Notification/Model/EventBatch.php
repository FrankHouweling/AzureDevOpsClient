<?php
/**
 * EventBatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * EventBatch Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventBatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventBatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endTime' => 'string',
        'eventCounts' => 'map[string,int]',
        'eventIds' => 'string',
        'notificationCounts' => 'map[string,int]',
        'preProcessEndTime' => 'string',
        'preProcessStartTime' => 'string',
        'processEndTime' => 'string',
        'processStartTime' => 'string',
        'startTime' => 'string',
        'subscriptionCounts' => 'map[string,int]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endTime' => 'TimeSpan',
        'eventCounts' => 'int32',
        'eventIds' => null,
        'notificationCounts' => 'int32',
        'preProcessEndTime' => 'TimeSpan',
        'preProcessStartTime' => 'TimeSpan',
        'processEndTime' => 'TimeSpan',
        'processStartTime' => 'TimeSpan',
        'startTime' => 'TimeSpan',
        'subscriptionCounts' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endTime' => 'endTime',
        'eventCounts' => 'eventCounts',
        'eventIds' => 'eventIds',
        'notificationCounts' => 'notificationCounts',
        'preProcessEndTime' => 'preProcessEndTime',
        'preProcessStartTime' => 'preProcessStartTime',
        'processEndTime' => 'processEndTime',
        'processStartTime' => 'processStartTime',
        'startTime' => 'startTime',
        'subscriptionCounts' => 'subscriptionCounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endTime' => 'setEndTime',
        'eventCounts' => 'setEventCounts',
        'eventIds' => 'setEventIds',
        'notificationCounts' => 'setNotificationCounts',
        'preProcessEndTime' => 'setPreProcessEndTime',
        'preProcessStartTime' => 'setPreProcessStartTime',
        'processEndTime' => 'setProcessEndTime',
        'processStartTime' => 'setProcessStartTime',
        'startTime' => 'setStartTime',
        'subscriptionCounts' => 'setSubscriptionCounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endTime' => 'getEndTime',
        'eventCounts' => 'getEventCounts',
        'eventIds' => 'getEventIds',
        'notificationCounts' => 'getNotificationCounts',
        'preProcessEndTime' => 'getPreProcessEndTime',
        'preProcessStartTime' => 'getPreProcessStartTime',
        'processEndTime' => 'getProcessEndTime',
        'processStartTime' => 'getProcessStartTime',
        'startTime' => 'getStartTime',
        'subscriptionCounts' => 'getSubscriptionCounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endTime'] = isset($data['endTime']) ? $data['endTime'] : null;
        $this->container['eventCounts'] = isset($data['eventCounts']) ? $data['eventCounts'] : null;
        $this->container['eventIds'] = isset($data['eventIds']) ? $data['eventIds'] : null;
        $this->container['notificationCounts'] = isset($data['notificationCounts']) ? $data['notificationCounts'] : null;
        $this->container['preProcessEndTime'] = isset($data['preProcessEndTime']) ? $data['preProcessEndTime'] : null;
        $this->container['preProcessStartTime'] = isset($data['preProcessStartTime']) ? $data['preProcessStartTime'] : null;
        $this->container['processEndTime'] = isset($data['processEndTime']) ? $data['processEndTime'] : null;
        $this->container['processStartTime'] = isset($data['processStartTime']) ? $data['processStartTime'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['subscriptionCounts'] = isset($data['subscriptionCounts']) ? $data['subscriptionCounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endTime
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param string $endTime endTime
     *
     * @return $this
     */
    public function setEndTime($endTime)
    {
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets eventCounts
     *
     * @return map[string,int]
     */
    public function getEventCounts()
    {
        return $this->container['eventCounts'];
    }

    /**
     * Sets eventCounts
     *
     * @param map[string,int] $eventCounts eventCounts
     *
     * @return $this
     */
    public function setEventCounts($eventCounts)
    {
        $this->container['eventCounts'] = $eventCounts;

        return $this;
    }

    /**
     * Gets eventIds
     *
     * @return string
     */
    public function getEventIds()
    {
        return $this->container['eventIds'];
    }

    /**
     * Sets eventIds
     *
     * @param string $eventIds eventIds
     *
     * @return $this
     */
    public function setEventIds($eventIds)
    {
        $this->container['eventIds'] = $eventIds;

        return $this;
    }

    /**
     * Gets notificationCounts
     *
     * @return map[string,int]
     */
    public function getNotificationCounts()
    {
        return $this->container['notificationCounts'];
    }

    /**
     * Sets notificationCounts
     *
     * @param map[string,int] $notificationCounts notificationCounts
     *
     * @return $this
     */
    public function setNotificationCounts($notificationCounts)
    {
        $this->container['notificationCounts'] = $notificationCounts;

        return $this;
    }

    /**
     * Gets preProcessEndTime
     *
     * @return string
     */
    public function getPreProcessEndTime()
    {
        return $this->container['preProcessEndTime'];
    }

    /**
     * Sets preProcessEndTime
     *
     * @param string $preProcessEndTime preProcessEndTime
     *
     * @return $this
     */
    public function setPreProcessEndTime($preProcessEndTime)
    {
        $this->container['preProcessEndTime'] = $preProcessEndTime;

        return $this;
    }

    /**
     * Gets preProcessStartTime
     *
     * @return string
     */
    public function getPreProcessStartTime()
    {
        return $this->container['preProcessStartTime'];
    }

    /**
     * Sets preProcessStartTime
     *
     * @param string $preProcessStartTime preProcessStartTime
     *
     * @return $this
     */
    public function setPreProcessStartTime($preProcessStartTime)
    {
        $this->container['preProcessStartTime'] = $preProcessStartTime;

        return $this;
    }

    /**
     * Gets processEndTime
     *
     * @return string
     */
    public function getProcessEndTime()
    {
        return $this->container['processEndTime'];
    }

    /**
     * Sets processEndTime
     *
     * @param string $processEndTime processEndTime
     *
     * @return $this
     */
    public function setProcessEndTime($processEndTime)
    {
        $this->container['processEndTime'] = $processEndTime;

        return $this;
    }

    /**
     * Gets processStartTime
     *
     * @return string
     */
    public function getProcessStartTime()
    {
        return $this->container['processStartTime'];
    }

    /**
     * Sets processStartTime
     *
     * @param string $processStartTime processStartTime
     *
     * @return $this
     */
    public function setProcessStartTime($processStartTime)
    {
        $this->container['processStartTime'] = $processStartTime;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param string $startTime startTime
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets subscriptionCounts
     *
     * @return map[string,int]
     */
    public function getSubscriptionCounts()
    {
        return $this->container['subscriptionCounts'];
    }

    /**
     * Sets subscriptionCounts
     *
     * @param map[string,int] $subscriptionCounts subscriptionCounts
     *
     * @return $this
     */
    public function setSubscriptionCounts($subscriptionCounts)
    {
        $this->container['subscriptionCounts'] = $subscriptionCounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


