<?php
/**
 * ProcessedEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * ProcessedEvent Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessedEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessedEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actors' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]',
        'allowedChannels' => 'string',
        'artifactUri' => 'string',
        'deliveryIdentities' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ProcessingIdentities',
        'evaluations' => 'map[string,\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionEvaluation]',
        'eventId' => 'int',
        'exclusions' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]',
        'inclusions' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]',
        'notifications' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\GeneratedNotification[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actors' => null,
        'allowedChannels' => null,
        'artifactUri' => null,
        'deliveryIdentities' => null,
        'evaluations' => null,
        'eventId' => 'int32',
        'exclusions' => null,
        'inclusions' => null,
        'notifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actors' => 'actors',
        'allowedChannels' => 'allowedChannels',
        'artifactUri' => 'artifactUri',
        'deliveryIdentities' => 'deliveryIdentities',
        'evaluations' => 'evaluations',
        'eventId' => 'eventId',
        'exclusions' => 'exclusions',
        'inclusions' => 'inclusions',
        'notifications' => 'notifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actors' => 'setActors',
        'allowedChannels' => 'setAllowedChannels',
        'artifactUri' => 'setArtifactUri',
        'deliveryIdentities' => 'setDeliveryIdentities',
        'evaluations' => 'setEvaluations',
        'eventId' => 'setEventId',
        'exclusions' => 'setExclusions',
        'inclusions' => 'setInclusions',
        'notifications' => 'setNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actors' => 'getActors',
        'allowedChannels' => 'getAllowedChannels',
        'artifactUri' => 'getArtifactUri',
        'deliveryIdentities' => 'getDeliveryIdentities',
        'evaluations' => 'getEvaluations',
        'eventId' => 'getEventId',
        'exclusions' => 'getExclusions',
        'inclusions' => 'getInclusions',
        'notifications' => 'getNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actors'] = isset($data['actors']) ? $data['actors'] : null;
        $this->container['allowedChannels'] = isset($data['allowedChannels']) ? $data['allowedChannels'] : null;
        $this->container['artifactUri'] = isset($data['artifactUri']) ? $data['artifactUri'] : null;
        $this->container['deliveryIdentities'] = isset($data['deliveryIdentities']) ? $data['deliveryIdentities'] : null;
        $this->container['evaluations'] = isset($data['evaluations']) ? $data['evaluations'] : null;
        $this->container['eventId'] = isset($data['eventId']) ? $data['eventId'] : null;
        $this->container['exclusions'] = isset($data['exclusions']) ? $data['exclusions'] : null;
        $this->container['inclusions'] = isset($data['inclusions']) ? $data['inclusions'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actors
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]
     */
    public function getActors()
    {
        return $this->container['actors'];
    }

    /**
     * Sets actors
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[] $actors All of the users that were associated with this event and their role.
     *
     * @return $this
     */
    public function setActors($actors)
    {
        $this->container['actors'] = $actors;

        return $this;
    }

    /**
     * Gets allowedChannels
     *
     * @return string
     */
    public function getAllowedChannels()
    {
        return $this->container['allowedChannels'];
    }

    /**
     * Sets allowedChannels
     *
     * @param string $allowedChannels allowedChannels
     *
     * @return $this
     */
    public function setAllowedChannels($allowedChannels)
    {
        $this->container['allowedChannels'] = $allowedChannels;

        return $this;
    }

    /**
     * Gets artifactUri
     *
     * @return string
     */
    public function getArtifactUri()
    {
        return $this->container['artifactUri'];
    }

    /**
     * Sets artifactUri
     *
     * @param string $artifactUri artifactUri
     *
     * @return $this
     */
    public function setArtifactUri($artifactUri)
    {
        $this->container['artifactUri'] = $artifactUri;

        return $this;
    }

    /**
     * Gets deliveryIdentities
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ProcessingIdentities
     */
    public function getDeliveryIdentities()
    {
        return $this->container['deliveryIdentities'];
    }

    /**
     * Sets deliveryIdentities
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ProcessingIdentities $deliveryIdentities deliveryIdentities
     *
     * @return $this
     */
    public function setDeliveryIdentities($deliveryIdentities)
    {
        $this->container['deliveryIdentities'] = $deliveryIdentities;

        return $this;
    }

    /**
     * Gets evaluations
     *
     * @return map[string,\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionEvaluation]
     */
    public function getEvaluations()
    {
        return $this->container['evaluations'];
    }

    /**
     * Sets evaluations
     *
     * @param map[string,\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionEvaluation] $evaluations Evaluations for each user
     *
     * @return $this
     */
    public function setEvaluations($evaluations)
    {
        $this->container['evaluations'] = $evaluations;

        return $this;
    }

    /**
     * Gets eventId
     *
     * @return int
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param int $eventId eventId
     *
     * @return $this
     */
    public function setEventId($eventId)
    {
        $this->container['eventId'] = $eventId;

        return $this;
    }

    /**
     * Gets exclusions
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]
     */
    public function getExclusions()
    {
        return $this->container['exclusions'];
    }

    /**
     * Sets exclusions
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[] $exclusions Which members were excluded from evaluation (only applies to ActorMatcher subscriptions)
     *
     * @return $this
     */
    public function setExclusions($exclusions)
    {
        $this->container['exclusions'] = $exclusions;

        return $this;
    }

    /**
     * Gets inclusions
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[]
     */
    public function getInclusions()
    {
        return $this->container['inclusions'];
    }

    /**
     * Sets inclusions
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\EventActor[] $inclusions Which members were included for evaluation (only applies to ActorMatcher subscriptions)
     *
     * @return $this
     */
    public function setInclusions($inclusions)
    {
        $this->container['inclusions'] = $inclusions;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\GeneratedNotification[]
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\GeneratedNotification[] $notifications notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


