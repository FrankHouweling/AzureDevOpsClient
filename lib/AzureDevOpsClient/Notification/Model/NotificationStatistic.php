<?php
/**
 * NotificationStatistic
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * NotificationStatistic Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationStatistic implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationStatistic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'hitCount' => 'int',
        'path' => 'string',
        'type' => 'string',
        'user' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\IdentityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date-time',
        'hitCount' => 'int32',
        'path' => null,
        'type' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'hitCount' => 'hitCount',
        'path' => 'path',
        'type' => 'type',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'hitCount' => 'setHitCount',
        'path' => 'setPath',
        'type' => 'setType',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'hitCount' => 'getHitCount',
        'path' => 'getPath',
        'type' => 'getType',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_NOTIFICATION_BY_SUBSCRIPTION = 'notificationBySubscription';
    const TYPE_EVENTS_BY_EVENT_TYPE = 'eventsByEventType';
    const TYPE_NOTIFICATION_BY_EVENT_TYPE = 'notificationByEventType';
    const TYPE_EVENTS_BY_EVENT_TYPE_PER_USER = 'eventsByEventTypePerUser';
    const TYPE_NOTIFICATION_BY_EVENT_TYPE_PER_USER = 'notificationByEventTypePerUser';
    const TYPE_EVENTS = 'events';
    const TYPE_NOTIFICATIONS = 'notifications';
    const TYPE_NOTIFICATION_FAILURE_BY_SUBSCRIPTION = 'notificationFailureBySubscription';
    const TYPE_UNPROCESSED_RANGE_START = 'unprocessedRangeStart';
    const TYPE_UNPROCESSED_EVENTS_BY_PUBLISHER = 'unprocessedEventsByPublisher';
    const TYPE_UNPROCESSED_EVENT_DELAY_BY_PUBLISHER = 'unprocessedEventDelayByPublisher';
    const TYPE_UNPROCESSED_NOTIFICATIONS_BY_CHANNEL_BY_PUBLISHER = 'unprocessedNotificationsByChannelByPublisher';
    const TYPE_UNPROCESSED_NOTIFICATION_DELAY_BY_CHANNEL_BY_PUBLISHER = 'unprocessedNotificationDelayByChannelByPublisher';
    const TYPE_DELAY_RANGE_START = 'delayRangeStart';
    const TYPE_TOTAL_PIPELINE_TIME = 'totalPipelineTime';
    const TYPE_NOTIFICATION_PIPELINE_TIME = 'notificationPipelineTime';
    const TYPE_EVENT_PIPELINE_TIME = 'eventPipelineTime';
    const TYPE_HOURLY_RANGE_START = 'hourlyRangeStart';
    const TYPE_HOURLY_NOTIFICATION_BY_SUBSCRIPTION = 'hourlyNotificationBySubscription';
    const TYPE_HOURLY_EVENTS_BY_EVENT_TYPE_PER_USER = 'hourlyEventsByEventTypePerUser';
    const TYPE_HOURLY_EVENTS = 'hourlyEvents';
    const TYPE_HOURLY_NOTIFICATIONS = 'hourlyNotifications';
    const TYPE_HOURLY_UNPROCESSED_EVENTS_BY_PUBLISHER = 'hourlyUnprocessedEventsByPublisher';
    const TYPE_HOURLY_UNPROCESSED_EVENT_DELAY_BY_PUBLISHER = 'hourlyUnprocessedEventDelayByPublisher';
    const TYPE_HOURLY_UNPROCESSED_NOTIFICATIONS_BY_CHANNEL_BY_PUBLISHER = 'hourlyUnprocessedNotificationsByChannelByPublisher';
    const TYPE_HOURLY_UNPROCESSED_NOTIFICATION_DELAY_BY_CHANNEL_BY_PUBLISHER = 'hourlyUnprocessedNotificationDelayByChannelByPublisher';
    const TYPE_HOURLY_TOTAL_PIPELINE_TIME = 'hourlyTotalPipelineTime';
    const TYPE_HOURLY_NOTIFICATION_PIPELINE_TIME = 'hourlyNotificationPipelineTime';
    const TYPE_HOURLY_EVENT_PIPELINE_TIME = 'hourlyEventPipelineTime';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NOTIFICATION_BY_SUBSCRIPTION,
            self::TYPE_EVENTS_BY_EVENT_TYPE,
            self::TYPE_NOTIFICATION_BY_EVENT_TYPE,
            self::TYPE_EVENTS_BY_EVENT_TYPE_PER_USER,
            self::TYPE_NOTIFICATION_BY_EVENT_TYPE_PER_USER,
            self::TYPE_EVENTS,
            self::TYPE_NOTIFICATIONS,
            self::TYPE_NOTIFICATION_FAILURE_BY_SUBSCRIPTION,
            self::TYPE_UNPROCESSED_RANGE_START,
            self::TYPE_UNPROCESSED_EVENTS_BY_PUBLISHER,
            self::TYPE_UNPROCESSED_EVENT_DELAY_BY_PUBLISHER,
            self::TYPE_UNPROCESSED_NOTIFICATIONS_BY_CHANNEL_BY_PUBLISHER,
            self::TYPE_UNPROCESSED_NOTIFICATION_DELAY_BY_CHANNEL_BY_PUBLISHER,
            self::TYPE_DELAY_RANGE_START,
            self::TYPE_TOTAL_PIPELINE_TIME,
            self::TYPE_NOTIFICATION_PIPELINE_TIME,
            self::TYPE_EVENT_PIPELINE_TIME,
            self::TYPE_HOURLY_RANGE_START,
            self::TYPE_HOURLY_NOTIFICATION_BY_SUBSCRIPTION,
            self::TYPE_HOURLY_EVENTS_BY_EVENT_TYPE_PER_USER,
            self::TYPE_HOURLY_EVENTS,
            self::TYPE_HOURLY_NOTIFICATIONS,
            self::TYPE_HOURLY_UNPROCESSED_EVENTS_BY_PUBLISHER,
            self::TYPE_HOURLY_UNPROCESSED_EVENT_DELAY_BY_PUBLISHER,
            self::TYPE_HOURLY_UNPROCESSED_NOTIFICATIONS_BY_CHANNEL_BY_PUBLISHER,
            self::TYPE_HOURLY_UNPROCESSED_NOTIFICATION_DELAY_BY_CHANNEL_BY_PUBLISHER,
            self::TYPE_HOURLY_TOTAL_PIPELINE_TIME,
            self::TYPE_HOURLY_NOTIFICATION_PIPELINE_TIME,
            self::TYPE_HOURLY_EVENT_PIPELINE_TIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['hitCount'] = isset($data['hitCount']) ? $data['hitCount'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hitCount
     *
     * @return int
     */
    public function getHitCount()
    {
        return $this->container['hitCount'];
    }

    /**
     * Sets hitCount
     *
     * @param int $hitCount hitCount
     *
     * @return $this
     */
    public function setHitCount($hitCount)
    {
        $this->container['hitCount'] = $hitCount;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\IdentityRef
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\IdentityRef $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


