<?php
/**
 * NotificationSubscriptionUpdateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * NotificationSubscriptionUpdateParameters Class Doc Comment
 *
 * @category Class
 * @description Parameters for updating an existing subscription. A subscription defines criteria for matching events and how the subscription&#39;s subscriber should be notified about those events. Note: only the fields to be updated should be set.
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationSubscriptionUpdateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationSubscriptionUpdateParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adminSettings' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionAdminSettings',
        'channel' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionChannel',
        'description' => 'string',
        'filter' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionFilter',
        'scope' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionScope',
        'status' => 'string',
        'statusMessage' => 'string',
        'userSettings' => '\AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionUserSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adminSettings' => null,
        'channel' => null,
        'description' => null,
        'filter' => null,
        'scope' => null,
        'status' => null,
        'statusMessage' => null,
        'userSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adminSettings' => 'adminSettings',
        'channel' => 'channel',
        'description' => 'description',
        'filter' => 'filter',
        'scope' => 'scope',
        'status' => 'status',
        'statusMessage' => 'statusMessage',
        'userSettings' => 'userSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adminSettings' => 'setAdminSettings',
        'channel' => 'setChannel',
        'description' => 'setDescription',
        'filter' => 'setFilter',
        'scope' => 'setScope',
        'status' => 'setStatus',
        'statusMessage' => 'setStatusMessage',
        'userSettings' => 'setUserSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adminSettings' => 'getAdminSettings',
        'channel' => 'getChannel',
        'description' => 'getDescription',
        'filter' => 'getFilter',
        'scope' => 'getScope',
        'status' => 'getStatus',
        'statusMessage' => 'getStatusMessage',
        'userSettings' => 'getUserSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_JAILED_BY_NOTIFICATIONS_VOLUME = 'jailedByNotificationsVolume';
    const STATUS_PENDING_DELETION = 'pendingDeletion';
    const STATUS_DISABLED_ARGUMENT_EXCEPTION = 'disabledArgumentException';
    const STATUS_DISABLED_PROJECT_INVALID = 'disabledProjectInvalid';
    const STATUS_DISABLED_MISSING_PERMISSIONS = 'disabledMissingPermissions';
    const STATUS_DISABLED_FROM_PROBATION = 'disabledFromProbation';
    const STATUS_DISABLED_INACTIVE_IDENTITY = 'disabledInactiveIdentity';
    const STATUS_DISABLED_MESSAGE_QUEUE_NOT_SUPPORTED = 'disabledMessageQueueNotSupported';
    const STATUS_DISABLED_MISSING_IDENTITY = 'disabledMissingIdentity';
    const STATUS_DISABLED_INVALID_ROLE_EXPRESSION = 'disabledInvalidRoleExpression';
    const STATUS_DISABLED_INVALID_PATH_CLAUSE = 'disabledInvalidPathClause';
    const STATUS_DISABLED_AS_DUPLICATE_OF_DEFAULT = 'disabledAsDuplicateOfDefault';
    const STATUS_DISABLED_BY_ADMIN = 'disabledByAdmin';
    const STATUS_DISABLED = 'disabled';
    const STATUS_ENABLED = 'enabled';
    const STATUS_ENABLED_ON_PROBATION = 'enabledOnProbation';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_JAILED_BY_NOTIFICATIONS_VOLUME,
            self::STATUS_PENDING_DELETION,
            self::STATUS_DISABLED_ARGUMENT_EXCEPTION,
            self::STATUS_DISABLED_PROJECT_INVALID,
            self::STATUS_DISABLED_MISSING_PERMISSIONS,
            self::STATUS_DISABLED_FROM_PROBATION,
            self::STATUS_DISABLED_INACTIVE_IDENTITY,
            self::STATUS_DISABLED_MESSAGE_QUEUE_NOT_SUPPORTED,
            self::STATUS_DISABLED_MISSING_IDENTITY,
            self::STATUS_DISABLED_INVALID_ROLE_EXPRESSION,
            self::STATUS_DISABLED_INVALID_PATH_CLAUSE,
            self::STATUS_DISABLED_AS_DUPLICATE_OF_DEFAULT,
            self::STATUS_DISABLED_BY_ADMIN,
            self::STATUS_DISABLED,
            self::STATUS_ENABLED,
            self::STATUS_ENABLED_ON_PROBATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adminSettings'] = isset($data['adminSettings']) ? $data['adminSettings'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusMessage'] = isset($data['statusMessage']) ? $data['statusMessage'] : null;
        $this->container['userSettings'] = isset($data['userSettings']) ? $data['userSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adminSettings
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionAdminSettings
     */
    public function getAdminSettings()
    {
        return $this->container['adminSettings'];
    }

    /**
     * Sets adminSettings
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionAdminSettings $adminSettings Admin-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group.
     *
     * @return $this
     */
    public function setAdminSettings($adminSettings)
    {
        $this->container['adminSettings'] = $adminSettings;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionChannel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionChannel $channel Channel for delivering notifications triggered by the subscription.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Updated description for the subscription. Typically describes filter criteria which helps identity the subscription.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\ISubscriptionFilter $filter Matching criteria for the subscription. ExpressionFilter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionScope
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionScope $scope The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically the current account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Updated status for the subscription. Typically used to enable or disable a subscription.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusMessage
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['statusMessage'];
    }

    /**
     * Sets statusMessage
     *
     * @param string $statusMessage Optional message that provides more details about the updated status.
     *
     * @return $this
     */
    public function setStatusMessage($statusMessage)
    {
        $this->container['statusMessage'] = $statusMessage;

        return $this;
    }

    /**
     * Gets userSettings
     *
     * @return \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionUserSettings
     */
    public function getUserSettings()
    {
        return $this->container['userSettings'];
    }

    /**
     * Sets userSettings
     *
     * @param \AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model\SubscriptionUserSettings $userSettings User-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group. Typically used to opt-in or opt-out a user from a group subscription.
     *
     * @return $this
     */
    public function setUserSettings($userSettings)
    {
        $this->container['userSettings'] = $userSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


