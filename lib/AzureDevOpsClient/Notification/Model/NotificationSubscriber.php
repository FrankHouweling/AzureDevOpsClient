<?php
/**
 * NotificationSubscriber
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Notification\AzureDevOpsClient\Notification\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Notification\ObjectSerializer;

/**
 * NotificationSubscriber Class Doc Comment
 *
 * @category Class
 * @description A subscriber is a user or group that has the potential to receive notifications.
 * @package  AzureDevOpsClient\Notification
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationSubscriber implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationSubscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deliveryPreference' => 'string',
        'flags' => 'string',
        'id' => 'string',
        'preferredEmailAddress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deliveryPreference' => null,
        'flags' => null,
        'id' => 'uuid',
        'preferredEmailAddress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryPreference' => 'deliveryPreference',
        'flags' => 'flags',
        'id' => 'id',
        'preferredEmailAddress' => 'preferredEmailAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryPreference' => 'setDeliveryPreference',
        'flags' => 'setFlags',
        'id' => 'setId',
        'preferredEmailAddress' => 'setPreferredEmailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryPreference' => 'getDeliveryPreference',
        'flags' => 'getFlags',
        'id' => 'getId',
        'preferredEmailAddress' => 'getPreferredEmailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_PREFERENCE_NO_DELIVERY = 'noDelivery';
    const DELIVERY_PREFERENCE_PREFERRED_EMAIL_ADDRESS = 'preferredEmailAddress';
    const DELIVERY_PREFERENCE_EACH_MEMBER = 'eachMember';
    const DELIVERY_PREFERENCE_USE_DEFAULT = 'useDefault';
    const FLAGS_NONE = 'none';
    const FLAGS_DELIVERY_PREFERENCES_EDITABLE = 'deliveryPreferencesEditable';
    const FLAGS_SUPPORTS_PREFERRED_EMAIL_ADDRESS_DELIVERY = 'supportsPreferredEmailAddressDelivery';
    const FLAGS_SUPPORTS_EACH_MEMBER_DELIVERY = 'supportsEachMemberDelivery';
    const FLAGS_SUPPORTS_NO_DELIVERY = 'supportsNoDelivery';
    const FLAGS_IS_USER = 'isUser';
    const FLAGS_IS_GROUP = 'isGroup';
    const FLAGS_IS_TEAM = 'isTeam';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryPreferenceAllowableValues()
    {
        return [
            self::DELIVERY_PREFERENCE_NO_DELIVERY,
            self::DELIVERY_PREFERENCE_PREFERRED_EMAIL_ADDRESS,
            self::DELIVERY_PREFERENCE_EACH_MEMBER,
            self::DELIVERY_PREFERENCE_USE_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlagsAllowableValues()
    {
        return [
            self::FLAGS_NONE,
            self::FLAGS_DELIVERY_PREFERENCES_EDITABLE,
            self::FLAGS_SUPPORTS_PREFERRED_EMAIL_ADDRESS_DELIVERY,
            self::FLAGS_SUPPORTS_EACH_MEMBER_DELIVERY,
            self::FLAGS_SUPPORTS_NO_DELIVERY,
            self::FLAGS_IS_USER,
            self::FLAGS_IS_GROUP,
            self::FLAGS_IS_TEAM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deliveryPreference'] = isset($data['deliveryPreference']) ? $data['deliveryPreference'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['preferredEmailAddress'] = isset($data['preferredEmailAddress']) ? $data['preferredEmailAddress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryPreferenceAllowableValues();
        if (!is_null($this->container['deliveryPreference']) && !in_array($this->container['deliveryPreference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deliveryPreference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFlagsAllowableValues();
        if (!is_null($this->container['flags']) && !in_array($this->container['flags'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flags', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryPreference
     *
     * @return string
     */
    public function getDeliveryPreference()
    {
        return $this->container['deliveryPreference'];
    }

    /**
     * Sets deliveryPreference
     *
     * @param string $deliveryPreference Indicates how the subscriber should be notified by default.
     *
     * @return $this
     */
    public function setDeliveryPreference($deliveryPreference)
    {
        $allowedValues = $this->getDeliveryPreferenceAllowableValues();
        if (!is_null($deliveryPreference) && !in_array($deliveryPreference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deliveryPreference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deliveryPreference'] = $deliveryPreference;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $allowedValues = $this->getFlagsAllowableValues();
        if (!is_null($flags) && !in_array($flags, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifier of the subscriber.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets preferredEmailAddress
     *
     * @return string
     */
    public function getPreferredEmailAddress()
    {
        return $this->container['preferredEmailAddress'];
    }

    /**
     * Sets preferredEmailAddress
     *
     * @param string $preferredEmailAddress Preferred email address of the subscriber. A null or empty value indicates no preferred email address has been set.
     *
     * @return $this
     */
    public function setPreferredEmailAddress($preferredEmailAddress)
    {
        $this->container['preferredEmailAddress'] = $preferredEmailAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


