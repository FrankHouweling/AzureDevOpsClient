<?php
/**
 * ChangesetsApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tfvc
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Tfvc\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\Tfvc\ApiException;
use FrankHouweling\AzureDevOpsClient\Tfvc\Configuration;
use FrankHouweling\AzureDevOpsClient\Tfvc\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\Tfvc\ObjectSerializer;

/**
 * ChangesetsApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangesetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changesetsCreate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef
     */
    public function changesetsCreate($organization, $body, $project, $apiVersion)
    {
        list($response) = $this->changesetsCreateWithHttpInfo($organization, $body, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation changesetsCreateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef, HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsCreateWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef';
        $request = $this->changesetsCreateRequest($organization, $body, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsCreateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsCreateAsync($organization, $body, $project, $apiVersion)
    {
        return $this->changesetsCreateAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsCreateAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef';
        $request = $this->changesetsCreateRequest($organization, $body, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsCreate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsCreateRequest($organization, $body, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling changesetsCreate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling changesetsCreate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsCreate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/tfvc/changesets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesetsGet
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id Changeset Id to retrieve. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxChangeCount Number of changes to return (maximum 100 changes) Default: 0 (optional)
     * @param  bool $includeDetails Include policy details and check-in notes in the response. Default: false (optional)
     * @param  bool $includeWorkItems Include workitems. Default: false (optional)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  bool $includeSourceRename Include renames.  Default: false (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset
     */
    public function changesetsGet($organization, $id, $project, $apiVersion, $maxChangeCount = null, $includeDetails = null, $includeWorkItems = null, $maxCommentLength = null, $includeSourceRename = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        list($response) = $this->changesetsGetWithHttpInfo($organization, $id, $project, $apiVersion, $maxChangeCount, $includeDetails, $includeWorkItems, $maxCommentLength, $includeSourceRename, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);
        return $response;
    }

    /**
     * Operation changesetsGetWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id Changeset Id to retrieve. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxChangeCount Number of changes to return (maximum 100 changes) Default: 0 (optional)
     * @param  bool $includeDetails Include policy details and check-in notes in the response. Default: false (optional)
     * @param  bool $includeWorkItems Include workitems. Default: false (optional)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  bool $includeSourceRename Include renames.  Default: false (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset, HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsGetWithHttpInfo($organization, $id, $project, $apiVersion, $maxChangeCount = null, $includeDetails = null, $includeWorkItems = null, $maxCommentLength = null, $includeSourceRename = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset';
        $request = $this->changesetsGetRequest($organization, $id, $project, $apiVersion, $maxChangeCount, $includeDetails, $includeWorkItems, $maxCommentLength, $includeSourceRename, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsGetAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id Changeset Id to retrieve. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxChangeCount Number of changes to return (maximum 100 changes) Default: 0 (optional)
     * @param  bool $includeDetails Include policy details and check-in notes in the response. Default: false (optional)
     * @param  bool $includeWorkItems Include workitems. Default: false (optional)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  bool $includeSourceRename Include renames.  Default: false (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetAsync($organization, $id, $project, $apiVersion, $maxChangeCount = null, $includeDetails = null, $includeWorkItems = null, $maxCommentLength = null, $includeSourceRename = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        return $this->changesetsGetAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $maxChangeCount, $includeDetails, $includeWorkItems, $maxCommentLength, $includeSourceRename, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id Changeset Id to retrieve. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxChangeCount Number of changes to return (maximum 100 changes) Default: 0 (optional)
     * @param  bool $includeDetails Include policy details and check-in notes in the response. Default: false (optional)
     * @param  bool $includeWorkItems Include workitems. Default: false (optional)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  bool $includeSourceRename Include renames.  Default: false (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetAsyncWithHttpInfo($organization, $id, $project, $apiVersion, $maxChangeCount = null, $includeDetails = null, $includeWorkItems = null, $maxCommentLength = null, $includeSourceRename = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangeset';
        $request = $this->changesetsGetRequest($organization, $id, $project, $apiVersion, $maxChangeCount, $includeDetails, $includeWorkItems, $maxCommentLength, $includeSourceRename, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsGet'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id Changeset Id to retrieve. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxChangeCount Number of changes to return (maximum 100 changes) Default: 0 (optional)
     * @param  bool $includeDetails Include policy details and check-in notes in the response. Default: false (optional)
     * @param  bool $includeWorkItems Include workitems. Default: false (optional)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  bool $includeSourceRename Include renames.  Default: false (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsGetRequest($organization, $id, $project, $apiVersion, $maxChangeCount = null, $includeDetails = null, $includeWorkItems = null, $maxCommentLength = null, $includeSourceRename = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsGet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling changesetsGet'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling changesetsGet'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsGet'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/tfvc/changesets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($maxChangeCount !== null) {
            $queryParams['maxChangeCount'] = ObjectSerializer::toQueryValue($maxChangeCount);
        }
        // query params
        if ($includeDetails !== null) {
            $queryParams['includeDetails'] = ObjectSerializer::toQueryValue($includeDetails);
        }
        // query params
        if ($includeWorkItems !== null) {
            $queryParams['includeWorkItems'] = ObjectSerializer::toQueryValue($includeWorkItems);
        }
        // query params
        if ($maxCommentLength !== null) {
            $queryParams['maxCommentLength'] = ObjectSerializer::toQueryValue($maxCommentLength);
        }
        // query params
        if ($includeSourceRename !== null) {
            $queryParams['includeSourceRename'] = ObjectSerializer::toQueryValue($includeSourceRename);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($searchCriteriaAuthor !== null) {
            $queryParams['searchCriteria.author'] = ObjectSerializer::toQueryValue($searchCriteriaAuthor);
        }
        // query params
        if ($searchCriteriaFollowRenames !== null) {
            $queryParams['searchCriteria.followRenames'] = ObjectSerializer::toQueryValue($searchCriteriaFollowRenames);
        }
        // query params
        if ($searchCriteriaFromDate !== null) {
            $queryParams['searchCriteria.fromDate'] = ObjectSerializer::toQueryValue($searchCriteriaFromDate);
        }
        // query params
        if ($searchCriteriaFromId !== null) {
            $queryParams['searchCriteria.fromId'] = ObjectSerializer::toQueryValue($searchCriteriaFromId);
        }
        // query params
        if ($searchCriteriaIncludeLinks !== null) {
            $queryParams['searchCriteria.includeLinks'] = ObjectSerializer::toQueryValue($searchCriteriaIncludeLinks);
        }
        // query params
        if ($searchCriteriaItemPath !== null) {
            $queryParams['searchCriteria.itemPath'] = ObjectSerializer::toQueryValue($searchCriteriaItemPath);
        }
        // query params
        if ($searchCriteriaMappings !== null) {
            $queryParams['searchCriteria.mappings'] = ObjectSerializer::toQueryValue($searchCriteriaMappings);
        }
        // query params
        if ($searchCriteriaToDate !== null) {
            $queryParams['searchCriteria.toDate'] = ObjectSerializer::toQueryValue($searchCriteriaToDate);
        }
        // query params
        if ($searchCriteriaToId !== null) {
            $queryParams['searchCriteria.toId'] = ObjectSerializer::toQueryValue($searchCriteriaToId);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesetsGetBatchedChangesets
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetsRequestData $body List of changeset IDs. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]
     */
    public function changesetsGetBatchedChangesets($organization, $body, $apiVersion)
    {
        list($response) = $this->changesetsGetBatchedChangesetsWithHttpInfo($organization, $body, $apiVersion);
        return $response;
    }

    /**
     * Operation changesetsGetBatchedChangesetsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetsRequestData $body List of changeset IDs. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[], HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsGetBatchedChangesetsWithHttpInfo($organization, $body, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]';
        $request = $this->changesetsGetBatchedChangesetsRequest($organization, $body, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsGetBatchedChangesetsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetsRequestData $body List of changeset IDs. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetBatchedChangesetsAsync($organization, $body, $apiVersion)
    {
        return $this->changesetsGetBatchedChangesetsAsyncWithHttpInfo($organization, $body, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsGetBatchedChangesetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetsRequestData $body List of changeset IDs. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetBatchedChangesetsAsyncWithHttpInfo($organization, $body, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]';
        $request = $this->changesetsGetBatchedChangesetsRequest($organization, $body, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsGetBatchedChangesets'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetsRequestData $body List of changeset IDs. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsGetBatchedChangesetsRequest($organization, $body, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsGetBatchedChangesets'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling changesetsGetBatchedChangesets'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsGetBatchedChangesets'
            );
        }

        $resourcePath = '/{organization}/_apis/tfvc/changesetsbatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesetsGetChangesetChanges
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. Default: null (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $continuationToken Return the next page of results. Default: null (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChange[]
     */
    public function changesetsGetChangesetChanges($organization, $id, $apiVersion, $skip = null, $top = null, $continuationToken = null)
    {
        list($response) = $this->changesetsGetChangesetChangesWithHttpInfo($organization, $id, $apiVersion, $skip, $top, $continuationToken);
        return $response;
    }

    /**
     * Operation changesetsGetChangesetChangesWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. Default: null (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $continuationToken Return the next page of results. Default: null (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsGetChangesetChangesWithHttpInfo($organization, $id, $apiVersion, $skip = null, $top = null, $continuationToken = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChange[]';
        $request = $this->changesetsGetChangesetChangesRequest($organization, $id, $apiVersion, $skip, $top, $continuationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsGetChangesetChangesAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. Default: null (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $continuationToken Return the next page of results. Default: null (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetChangesAsync($organization, $id, $apiVersion, $skip = null, $top = null, $continuationToken = null)
    {
        return $this->changesetsGetChangesetChangesAsyncWithHttpInfo($organization, $id, $apiVersion, $skip, $top, $continuationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsGetChangesetChangesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. Default: null (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $continuationToken Return the next page of results. Default: null (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetChangesAsyncWithHttpInfo($organization, $id, $apiVersion, $skip = null, $top = null, $continuationToken = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChange[]';
        $request = $this->changesetsGetChangesetChangesRequest($organization, $id, $apiVersion, $skip, $top, $continuationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsGetChangesetChanges'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. Default: null (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $continuationToken Return the next page of results. Default: null (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsGetChangesetChangesRequest($organization, $id, $apiVersion, $skip = null, $top = null, $continuationToken = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsGetChangesetChanges'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling changesetsGetChangesetChanges'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsGetChangesetChanges'
            );
        }

        $resourcePath = '/{organization}/_apis/tfvc/changesets/{id}/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($continuationToken !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuationToken);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesetsGetChangesetWorkItems
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\AssociatedWorkItem[]
     */
    public function changesetsGetChangesetWorkItems($organization, $id, $apiVersion)
    {
        list($response) = $this->changesetsGetChangesetWorkItemsWithHttpInfo($organization, $id, $apiVersion);
        return $response;
    }

    /**
     * Operation changesetsGetChangesetWorkItemsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\AssociatedWorkItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsGetChangesetWorkItemsWithHttpInfo($organization, $id, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\AssociatedWorkItem[]';
        $request = $this->changesetsGetChangesetWorkItemsRequest($organization, $id, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\AssociatedWorkItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsGetChangesetWorkItemsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetWorkItemsAsync($organization, $id, $apiVersion)
    {
        return $this->changesetsGetChangesetWorkItemsAsyncWithHttpInfo($organization, $id, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsGetChangesetWorkItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetWorkItemsAsyncWithHttpInfo($organization, $id, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\AssociatedWorkItem[]';
        $request = $this->changesetsGetChangesetWorkItemsRequest($organization, $id, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsGetChangesetWorkItems'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  int $id ID of the changeset. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsGetChangesetWorkItemsRequest($organization, $id, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsGetChangesetWorkItems'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling changesetsGetChangesetWorkItems'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsGetChangesetWorkItems'
            );
        }

        $resourcePath = '/{organization}/_apis/tfvc/changesets/{id}/workItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesetsGetChangesets
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]
     */
    public function changesetsGetChangesets($organization, $project, $apiVersion, $maxCommentLength = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        list($response) = $this->changesetsGetChangesetsWithHttpInfo($organization, $project, $apiVersion, $maxCommentLength, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);
        return $response;
    }

    /**
     * Operation changesetsGetChangesetsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Tfvc\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[], HTTP status code, HTTP response headers (array of strings)
     */
    public function changesetsGetChangesetsWithHttpInfo($organization, $project, $apiVersion, $maxCommentLength = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]';
        $request = $this->changesetsGetChangesetsRequest($organization, $project, $apiVersion, $maxCommentLength, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesetsGetChangesetsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetsAsync($organization, $project, $apiVersion, $maxCommentLength = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        return $this->changesetsGetChangesetsAsyncWithHttpInfo($organization, $project, $apiVersion, $maxCommentLength, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesetsGetChangesetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changesetsGetChangesetsAsyncWithHttpInfo($organization, $project, $apiVersion, $maxCommentLength = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TfvcChangesetRef[]';
        $request = $this->changesetsGetChangesetsRequest($organization, $project, $apiVersion, $maxCommentLength, $skip, $top, $orderby, $searchCriteriaAuthor, $searchCriteriaFollowRenames, $searchCriteriaFromDate, $searchCriteriaFromId, $searchCriteriaIncludeLinks, $searchCriteriaItemPath, $searchCriteriaMappings, $searchCriteriaToDate, $searchCriteriaToId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesetsGetChangesets'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     * @param  int $maxCommentLength Include details about associated work items in the response. Default: null (optional)
     * @param  int $skip Number of results to skip. Default: null (optional)
     * @param  int $top The maximum number of results to return. Default: null (optional)
     * @param  string $orderby Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order. (optional)
     * @param  string $searchCriteriaAuthor Alias or display name of user who made the changes. (optional)
     * @param  bool $searchCriteriaFollowRenames Whether or not to follow renames for the given item being queried. (optional)
     * @param  string $searchCriteriaFromDate If provided, only include changesets created after this date (string). (optional)
     * @param  int $searchCriteriaFromId If provided, only include changesets after this changesetID. (optional)
     * @param  bool $searchCriteriaIncludeLinks Whether to include the _links field on the shallow references. (optional)
     * @param  string $searchCriteriaItemPath Path of item to search under. (optional)
     * @param  object $searchCriteriaMappings Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null (optional)
     * @param  string $searchCriteriaToDate If provided, only include changesets created before this date (string). (optional)
     * @param  int $searchCriteriaToId If provided, a version descriptor for the latest change list to include. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changesetsGetChangesetsRequest($organization, $project, $apiVersion, $maxCommentLength = null, $skip = null, $top = null, $orderby = null, $searchCriteriaAuthor = null, $searchCriteriaFollowRenames = null, $searchCriteriaFromDate = null, $searchCriteriaFromId = null, $searchCriteriaIncludeLinks = null, $searchCriteriaItemPath = null, $searchCriteriaMappings = null, $searchCriteriaToDate = null, $searchCriteriaToId = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling changesetsGetChangesets'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling changesetsGetChangesets'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling changesetsGetChangesets'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/tfvc/changesets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($maxCommentLength !== null) {
            $queryParams['maxCommentLength'] = ObjectSerializer::toQueryValue($maxCommentLength);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($searchCriteriaAuthor !== null) {
            $queryParams['searchCriteria.author'] = ObjectSerializer::toQueryValue($searchCriteriaAuthor);
        }
        // query params
        if ($searchCriteriaFollowRenames !== null) {
            $queryParams['searchCriteria.followRenames'] = ObjectSerializer::toQueryValue($searchCriteriaFollowRenames);
        }
        // query params
        if ($searchCriteriaFromDate !== null) {
            $queryParams['searchCriteria.fromDate'] = ObjectSerializer::toQueryValue($searchCriteriaFromDate);
        }
        // query params
        if ($searchCriteriaFromId !== null) {
            $queryParams['searchCriteria.fromId'] = ObjectSerializer::toQueryValue($searchCriteriaFromId);
        }
        // query params
        if ($searchCriteriaIncludeLinks !== null) {
            $queryParams['searchCriteria.includeLinks'] = ObjectSerializer::toQueryValue($searchCriteriaIncludeLinks);
        }
        // query params
        if ($searchCriteriaItemPath !== null) {
            $queryParams['searchCriteria.itemPath'] = ObjectSerializer::toQueryValue($searchCriteriaItemPath);
        }
        // query params
        if ($searchCriteriaMappings !== null) {
            $queryParams['searchCriteria.mappings'] = ObjectSerializer::toQueryValue($searchCriteriaMappings);
        }
        // query params
        if ($searchCriteriaToDate !== null) {
            $queryParams['searchCriteria.toDate'] = ObjectSerializer::toQueryValue($searchCriteriaToDate);
        }
        // query params
        if ($searchCriteriaToId !== null) {
            $queryParams['searchCriteria.toId'] = ObjectSerializer::toQueryValue($searchCriteriaToId);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
