<?php
/**
 * GitRepository
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tfvc
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Tfvc\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Tfvc\ObjectSerializer;

/**
 * GitRepository Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitRepository implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GitRepository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\ReferenceLinks',
        'defaultBranch' => 'string',
        'id' => 'string',
        'isFork' => 'bool',
        'name' => 'string',
        'parentRepository' => '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\GitRepositoryRef',
        'project' => '\FrankHouweling\AzureDevOpsClient\Tfvc\Model\TeamProjectReference',
        'remoteUrl' => 'string',
        'size' => 'int',
        'sshUrl' => 'string',
        'url' => 'string',
        'validRemoteUrls' => 'string[]',
        'webUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'defaultBranch' => null,
        'id' => 'uuid',
        'isFork' => null,
        'name' => null,
        'parentRepository' => null,
        'project' => null,
        'remoteUrl' => null,
        'size' => 'int64',
        'sshUrl' => null,
        'url' => null,
        'validRemoteUrls' => null,
        'webUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'defaultBranch' => 'defaultBranch',
        'id' => 'id',
        'isFork' => 'isFork',
        'name' => 'name',
        'parentRepository' => 'parentRepository',
        'project' => 'project',
        'remoteUrl' => 'remoteUrl',
        'size' => 'size',
        'sshUrl' => 'sshUrl',
        'url' => 'url',
        'validRemoteUrls' => 'validRemoteUrls',
        'webUrl' => 'webUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'defaultBranch' => 'setDefaultBranch',
        'id' => 'setId',
        'isFork' => 'setIsFork',
        'name' => 'setName',
        'parentRepository' => 'setParentRepository',
        'project' => 'setProject',
        'remoteUrl' => 'setRemoteUrl',
        'size' => 'setSize',
        'sshUrl' => 'setSshUrl',
        'url' => 'setUrl',
        'validRemoteUrls' => 'setValidRemoteUrls',
        'webUrl' => 'setWebUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'defaultBranch' => 'getDefaultBranch',
        'id' => 'getId',
        'isFork' => 'getIsFork',
        'name' => 'getName',
        'parentRepository' => 'getParentRepository',
        'project' => 'getProject',
        'remoteUrl' => 'getRemoteUrl',
        'size' => 'getSize',
        'sshUrl' => 'getSshUrl',
        'url' => 'getUrl',
        'validRemoteUrls' => 'getValidRemoteUrls',
        'webUrl' => 'getWebUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['defaultBranch'] = isset($data['defaultBranch']) ? $data['defaultBranch'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isFork'] = isset($data['isFork']) ? $data['isFork'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parentRepository'] = isset($data['parentRepository']) ? $data['parentRepository'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['remoteUrl'] = isset($data['remoteUrl']) ? $data['remoteUrl'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['sshUrl'] = isset($data['sshUrl']) ? $data['sshUrl'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['validRemoteUrls'] = isset($data['validRemoteUrls']) ? $data['validRemoteUrls'] : null;
        $this->container['webUrl'] = isset($data['webUrl']) ? $data['webUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Tfvc\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets defaultBranch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['defaultBranch'];
    }

    /**
     * Sets defaultBranch
     *
     * @param string $defaultBranch defaultBranch
     *
     * @return $this
     */
    public function setDefaultBranch($defaultBranch)
    {
        $this->container['defaultBranch'] = $defaultBranch;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isFork
     *
     * @return bool
     */
    public function getIsFork()
    {
        return $this->container['isFork'];
    }

    /**
     * Sets isFork
     *
     * @param bool $isFork True if the repository was created as a fork
     *
     * @return $this
     */
    public function setIsFork($isFork)
    {
        $this->container['isFork'] = $isFork;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parentRepository
     *
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\GitRepositoryRef
     */
    public function getParentRepository()
    {
        return $this->container['parentRepository'];
    }

    /**
     * Sets parentRepository
     *
     * @param \FrankHouweling\AzureDevOpsClient\Tfvc\Model\GitRepositoryRef $parentRepository parentRepository
     *
     * @return $this
     */
    public function setParentRepository($parentRepository)
    {
        $this->container['parentRepository'] = $parentRepository;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TeamProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\Tfvc\Model\TeamProjectReference $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets remoteUrl
     *
     * @return string
     */
    public function getRemoteUrl()
    {
        return $this->container['remoteUrl'];
    }

    /**
     * Sets remoteUrl
     *
     * @param string $remoteUrl remoteUrl
     *
     * @return $this
     */
    public function setRemoteUrl($remoteUrl)
    {
        $this->container['remoteUrl'] = $remoteUrl;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Compressed size (bytes) of the repository.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets sshUrl
     *
     * @return string
     */
    public function getSshUrl()
    {
        return $this->container['sshUrl'];
    }

    /**
     * Sets sshUrl
     *
     * @param string $sshUrl sshUrl
     *
     * @return $this
     */
    public function setSshUrl($sshUrl)
    {
        $this->container['sshUrl'] = $sshUrl;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets validRemoteUrls
     *
     * @return string[]
     */
    public function getValidRemoteUrls()
    {
        return $this->container['validRemoteUrls'];
    }

    /**
     * Sets validRemoteUrls
     *
     * @param string[] $validRemoteUrls validRemoteUrls
     *
     * @return $this
     */
    public function setValidRemoteUrls($validRemoteUrls)
    {
        $this->container['validRemoteUrls'] = $validRemoteUrls;

        return $this;
    }

    /**
     * Gets webUrl
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['webUrl'];
    }

    /**
     * Sets webUrl
     *
     * @param string $webUrl webUrl
     *
     * @return $this
     */
    public function setWebUrl($webUrl)
    {
        $this->container['webUrl'] = $webUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


