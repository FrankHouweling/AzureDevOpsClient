<?php
/**
 * TfvcVersionDescriptor
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tfvc
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Tfvc\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Tfvc\ObjectSerializer;

/**
 * TfvcVersionDescriptor Class Doc Comment
 *
 * @category Class
 * @description Version descriptor properties.
 * @package  FrankHouweling\AzureDevOpsClient\Tfvc
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TfvcVersionDescriptor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TfvcVersionDescriptor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'versionOption' => 'string',
        'versionType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'versionOption' => null,
        'versionType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'versionOption' => 'versionOption',
        'versionType' => 'versionType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'versionOption' => 'setVersionOption',
        'versionType' => 'setVersionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'versionOption' => 'getVersionOption',
        'versionType' => 'getVersionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VERSION_OPTION_NONE = 'none';
    const VERSION_OPTION_PREVIOUS = 'previous';
    const VERSION_OPTION_USE_RENAME = 'useRename';
    const VERSION_TYPE_NONE = 'none';
    const VERSION_TYPE_CHANGESET = 'changeset';
    const VERSION_TYPE_SHELVESET = 'shelveset';
    const VERSION_TYPE_CHANGE = 'change';
    const VERSION_TYPE_DATE = 'date';
    const VERSION_TYPE_LATEST = 'latest';
    const VERSION_TYPE_TIP = 'tip';
    const VERSION_TYPE_MERGE_SOURCE = 'mergeSource';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionOptionAllowableValues()
    {
        return [
            self::VERSION_OPTION_NONE,
            self::VERSION_OPTION_PREVIOUS,
            self::VERSION_OPTION_USE_RENAME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionTypeAllowableValues()
    {
        return [
            self::VERSION_TYPE_NONE,
            self::VERSION_TYPE_CHANGESET,
            self::VERSION_TYPE_SHELVESET,
            self::VERSION_TYPE_CHANGE,
            self::VERSION_TYPE_DATE,
            self::VERSION_TYPE_LATEST,
            self::VERSION_TYPE_TIP,
            self::VERSION_TYPE_MERGE_SOURCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['versionOption'] = isset($data['versionOption']) ? $data['versionOption'] : null;
        $this->container['versionType'] = isset($data['versionType']) ? $data['versionType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVersionOptionAllowableValues();
        if (!is_null($this->container['versionOption']) && !in_array($this->container['versionOption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'versionOption', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVersionTypeAllowableValues();
        if (!is_null($this->container['versionType']) && !in_array($this->container['versionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'versionType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version object.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets versionOption
     *
     * @return string
     */
    public function getVersionOption()
    {
        return $this->container['versionOption'];
    }

    /**
     * Sets versionOption
     *
     * @param string $versionOption versionOption
     *
     * @return $this
     */
    public function setVersionOption($versionOption)
    {
        $allowedValues = $this->getVersionOptionAllowableValues();
        if (!is_null($versionOption) && !in_array($versionOption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'versionOption', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['versionOption'] = $versionOption;

        return $this;
    }

    /**
     * Gets versionType
     *
     * @return string
     */
    public function getVersionType()
    {
        return $this->container['versionType'];
    }

    /**
     * Sets versionType
     *
     * @param string $versionType versionType
     *
     * @return $this
     */
    public function setVersionType($versionType)
    {
        $allowedValues = $this->getVersionTypeAllowableValues();
        if (!is_null($versionType) && !in_array($versionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'versionType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['versionType'] = $versionType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


