<?php
/**
 * CardFieldSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Work\ObjectSerializer;

/**
 * CardFieldSettings Class Doc Comment
 *
 * @category Class
 * @description Card settings, such as fields and rules
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardFieldSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardFieldSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additionalFields' => '\FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[]',
        'assignedToDisplayFormat' => 'string',
        'coreFields' => '\FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[]',
        'showAssignedTo' => 'bool',
        'showEmptyFields' => 'bool',
        'showId' => 'bool',
        'showState' => 'bool',
        'showTags' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additionalFields' => null,
        'assignedToDisplayFormat' => null,
        'coreFields' => null,
        'showAssignedTo' => null,
        'showEmptyFields' => null,
        'showId' => null,
        'showState' => null,
        'showTags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalFields' => 'additionalFields',
        'assignedToDisplayFormat' => 'assignedToDisplayFormat',
        'coreFields' => 'coreFields',
        'showAssignedTo' => 'showAssignedTo',
        'showEmptyFields' => 'showEmptyFields',
        'showId' => 'showId',
        'showState' => 'showState',
        'showTags' => 'showTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalFields' => 'setAdditionalFields',
        'assignedToDisplayFormat' => 'setAssignedToDisplayFormat',
        'coreFields' => 'setCoreFields',
        'showAssignedTo' => 'setShowAssignedTo',
        'showEmptyFields' => 'setShowEmptyFields',
        'showId' => 'setShowId',
        'showState' => 'setShowState',
        'showTags' => 'setShowTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalFields' => 'getAdditionalFields',
        'assignedToDisplayFormat' => 'getAssignedToDisplayFormat',
        'coreFields' => 'getCoreFields',
        'showAssignedTo' => 'getShowAssignedTo',
        'showEmptyFields' => 'getShowEmptyFields',
        'showId' => 'getShowId',
        'showState' => 'getShowState',
        'showTags' => 'getShowTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSIGNED_TO_DISPLAY_FORMAT_AVATAR_ONLY = 'avatarOnly';
    const ASSIGNED_TO_DISPLAY_FORMAT_FULL_NAME = 'fullName';
    const ASSIGNED_TO_DISPLAY_FORMAT_AVATAR_AND_FULL_NAME = 'avatarAndFullName';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignedToDisplayFormatAllowableValues()
    {
        return [
            self::ASSIGNED_TO_DISPLAY_FORMAT_AVATAR_ONLY,
            self::ASSIGNED_TO_DISPLAY_FORMAT_FULL_NAME,
            self::ASSIGNED_TO_DISPLAY_FORMAT_AVATAR_AND_FULL_NAME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalFields'] = isset($data['additionalFields']) ? $data['additionalFields'] : null;
        $this->container['assignedToDisplayFormat'] = isset($data['assignedToDisplayFormat']) ? $data['assignedToDisplayFormat'] : null;
        $this->container['coreFields'] = isset($data['coreFields']) ? $data['coreFields'] : null;
        $this->container['showAssignedTo'] = isset($data['showAssignedTo']) ? $data['showAssignedTo'] : null;
        $this->container['showEmptyFields'] = isset($data['showEmptyFields']) ? $data['showEmptyFields'] : null;
        $this->container['showId'] = isset($data['showId']) ? $data['showId'] : null;
        $this->container['showState'] = isset($data['showState']) ? $data['showState'] : null;
        $this->container['showTags'] = isset($data['showTags']) ? $data['showTags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssignedToDisplayFormatAllowableValues();
        if (!is_null($this->container['assignedToDisplayFormat']) && !in_array($this->container['assignedToDisplayFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'assignedToDisplayFormat', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalFields
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[]
     */
    public function getAdditionalFields()
    {
        return $this->container['additionalFields'];
    }

    /**
     * Sets additionalFields
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[] $additionalFields A collection of field information of additional fields on cards. The index in the collection signifies the order of the field among the additional fields. Currently unused. Should be used with User Story 691539: Card setting: additional fields
     *
     * @return $this
     */
    public function setAdditionalFields($additionalFields)
    {
        $this->container['additionalFields'] = $additionalFields;

        return $this;
    }

    /**
     * Gets assignedToDisplayFormat
     *
     * @return string
     */
    public function getAssignedToDisplayFormat()
    {
        return $this->container['assignedToDisplayFormat'];
    }

    /**
     * Sets assignedToDisplayFormat
     *
     * @param string $assignedToDisplayFormat Display format for the assigned to field
     *
     * @return $this
     */
    public function setAssignedToDisplayFormat($assignedToDisplayFormat)
    {
        $allowedValues = $this->getAssignedToDisplayFormatAllowableValues();
        if (!is_null($assignedToDisplayFormat) && !in_array($assignedToDisplayFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'assignedToDisplayFormat', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assignedToDisplayFormat'] = $assignedToDisplayFormat;

        return $this;
    }

    /**
     * Gets coreFields
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[]
     */
    public function getCoreFields()
    {
        return $this->container['coreFields'];
    }

    /**
     * Sets coreFields
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\FieldInfo[] $coreFields A collection of field information of rendered core fields on cards.
     *
     * @return $this
     */
    public function setCoreFields($coreFields)
    {
        $this->container['coreFields'] = $coreFields;

        return $this;
    }

    /**
     * Gets showAssignedTo
     *
     * @return bool
     */
    public function getShowAssignedTo()
    {
        return $this->container['showAssignedTo'];
    }

    /**
     * Sets showAssignedTo
     *
     * @param bool $showAssignedTo Flag indicating whether to show assigned to field on cards. When true, AssignedToDisplayFormat will determine how the field will be displayed
     *
     * @return $this
     */
    public function setShowAssignedTo($showAssignedTo)
    {
        $this->container['showAssignedTo'] = $showAssignedTo;

        return $this;
    }

    /**
     * Gets showEmptyFields
     *
     * @return bool
     */
    public function getShowEmptyFields()
    {
        return $this->container['showEmptyFields'];
    }

    /**
     * Sets showEmptyFields
     *
     * @param bool $showEmptyFields Flag indicating whether to show empty fields on cards
     *
     * @return $this
     */
    public function setShowEmptyFields($showEmptyFields)
    {
        $this->container['showEmptyFields'] = $showEmptyFields;

        return $this;
    }

    /**
     * Gets showId
     *
     * @return bool
     */
    public function getShowId()
    {
        return $this->container['showId'];
    }

    /**
     * Sets showId
     *
     * @param bool $showId Flag indicating whether to show ID on cards
     *
     * @return $this
     */
    public function setShowId($showId)
    {
        $this->container['showId'] = $showId;

        return $this;
    }

    /**
     * Gets showState
     *
     * @return bool
     */
    public function getShowState()
    {
        return $this->container['showState'];
    }

    /**
     * Sets showState
     *
     * @param bool $showState Flag indicating whether to show state field on cards
     *
     * @return $this
     */
    public function setShowState($showState)
    {
        $this->container['showState'] = $showState;

        return $this;
    }

    /**
     * Gets showTags
     *
     * @return bool
     */
    public function getShowTags()
    {
        return $this->container['showTags'];
    }

    /**
     * Sets showTags
     *
     * @param bool $showTags Flag indicating whether to show tags on cards
     *
     * @return $this
     */
    public function setShowTags($showTags)
    {
        $this->container['showTags'] = $showTags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


