<?php
/**
 * BacklogConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Work\ObjectSerializer;

/**
 * BacklogConfiguration Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BacklogConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BacklogConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backlogFields' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogFields',
        'bugsBehavior' => 'string',
        'hiddenBacklogs' => 'string[]',
        'isBugsBehaviorConfigured' => 'bool',
        'portfolioBacklogs' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration[]',
        'requirementBacklog' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration',
        'taskBacklog' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration',
        'url' => 'string',
        'workItemTypeMappedStates' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemTypeStateInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backlogFields' => null,
        'bugsBehavior' => null,
        'hiddenBacklogs' => null,
        'isBugsBehaviorConfigured' => null,
        'portfolioBacklogs' => null,
        'requirementBacklog' => null,
        'taskBacklog' => null,
        'url' => null,
        'workItemTypeMappedStates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backlogFields' => 'backlogFields',
        'bugsBehavior' => 'bugsBehavior',
        'hiddenBacklogs' => 'hiddenBacklogs',
        'isBugsBehaviorConfigured' => 'isBugsBehaviorConfigured',
        'portfolioBacklogs' => 'portfolioBacklogs',
        'requirementBacklog' => 'requirementBacklog',
        'taskBacklog' => 'taskBacklog',
        'url' => 'url',
        'workItemTypeMappedStates' => 'workItemTypeMappedStates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backlogFields' => 'setBacklogFields',
        'bugsBehavior' => 'setBugsBehavior',
        'hiddenBacklogs' => 'setHiddenBacklogs',
        'isBugsBehaviorConfigured' => 'setIsBugsBehaviorConfigured',
        'portfolioBacklogs' => 'setPortfolioBacklogs',
        'requirementBacklog' => 'setRequirementBacklog',
        'taskBacklog' => 'setTaskBacklog',
        'url' => 'setUrl',
        'workItemTypeMappedStates' => 'setWorkItemTypeMappedStates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backlogFields' => 'getBacklogFields',
        'bugsBehavior' => 'getBugsBehavior',
        'hiddenBacklogs' => 'getHiddenBacklogs',
        'isBugsBehaviorConfigured' => 'getIsBugsBehaviorConfigured',
        'portfolioBacklogs' => 'getPortfolioBacklogs',
        'requirementBacklog' => 'getRequirementBacklog',
        'taskBacklog' => 'getTaskBacklog',
        'url' => 'getUrl',
        'workItemTypeMappedStates' => 'getWorkItemTypeMappedStates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BUGS_BEHAVIOR_OFF = 'off';
    const BUGS_BEHAVIOR_AS_REQUIREMENTS = 'asRequirements';
    const BUGS_BEHAVIOR_AS_TASKS = 'asTasks';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBugsBehaviorAllowableValues()
    {
        return [
            self::BUGS_BEHAVIOR_OFF,
            self::BUGS_BEHAVIOR_AS_REQUIREMENTS,
            self::BUGS_BEHAVIOR_AS_TASKS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backlogFields'] = isset($data['backlogFields']) ? $data['backlogFields'] : null;
        $this->container['bugsBehavior'] = isset($data['bugsBehavior']) ? $data['bugsBehavior'] : null;
        $this->container['hiddenBacklogs'] = isset($data['hiddenBacklogs']) ? $data['hiddenBacklogs'] : null;
        $this->container['isBugsBehaviorConfigured'] = isset($data['isBugsBehaviorConfigured']) ? $data['isBugsBehaviorConfigured'] : null;
        $this->container['portfolioBacklogs'] = isset($data['portfolioBacklogs']) ? $data['portfolioBacklogs'] : null;
        $this->container['requirementBacklog'] = isset($data['requirementBacklog']) ? $data['requirementBacklog'] : null;
        $this->container['taskBacklog'] = isset($data['taskBacklog']) ? $data['taskBacklog'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['workItemTypeMappedStates'] = isset($data['workItemTypeMappedStates']) ? $data['workItemTypeMappedStates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBugsBehaviorAllowableValues();
        if (!is_null($this->container['bugsBehavior']) && !in_array($this->container['bugsBehavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bugsBehavior', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backlogFields
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogFields
     */
    public function getBacklogFields()
    {
        return $this->container['backlogFields'];
    }

    /**
     * Sets backlogFields
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogFields $backlogFields Behavior/type field mapping
     *
     * @return $this
     */
    public function setBacklogFields($backlogFields)
    {
        $this->container['backlogFields'] = $backlogFields;

        return $this;
    }

    /**
     * Gets bugsBehavior
     *
     * @return string
     */
    public function getBugsBehavior()
    {
        return $this->container['bugsBehavior'];
    }

    /**
     * Sets bugsBehavior
     *
     * @param string $bugsBehavior Bugs behavior
     *
     * @return $this
     */
    public function setBugsBehavior($bugsBehavior)
    {
        $allowedValues = $this->getBugsBehaviorAllowableValues();
        if (!is_null($bugsBehavior) && !in_array($bugsBehavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bugsBehavior', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bugsBehavior'] = $bugsBehavior;

        return $this;
    }

    /**
     * Gets hiddenBacklogs
     *
     * @return string[]
     */
    public function getHiddenBacklogs()
    {
        return $this->container['hiddenBacklogs'];
    }

    /**
     * Sets hiddenBacklogs
     *
     * @param string[] $hiddenBacklogs Hidden Backlog
     *
     * @return $this
     */
    public function setHiddenBacklogs($hiddenBacklogs)
    {
        $this->container['hiddenBacklogs'] = $hiddenBacklogs;

        return $this;
    }

    /**
     * Gets isBugsBehaviorConfigured
     *
     * @return bool
     */
    public function getIsBugsBehaviorConfigured()
    {
        return $this->container['isBugsBehaviorConfigured'];
    }

    /**
     * Sets isBugsBehaviorConfigured
     *
     * @param bool $isBugsBehaviorConfigured Is BugsBehavior Configured in the process
     *
     * @return $this
     */
    public function setIsBugsBehaviorConfigured($isBugsBehaviorConfigured)
    {
        $this->container['isBugsBehaviorConfigured'] = $isBugsBehaviorConfigured;

        return $this;
    }

    /**
     * Gets portfolioBacklogs
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration[]
     */
    public function getPortfolioBacklogs()
    {
        return $this->container['portfolioBacklogs'];
    }

    /**
     * Sets portfolioBacklogs
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration[] $portfolioBacklogs Portfolio backlog descriptors
     *
     * @return $this
     */
    public function setPortfolioBacklogs($portfolioBacklogs)
    {
        $this->container['portfolioBacklogs'] = $portfolioBacklogs;

        return $this;
    }

    /**
     * Gets requirementBacklog
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration
     */
    public function getRequirementBacklog()
    {
        return $this->container['requirementBacklog'];
    }

    /**
     * Sets requirementBacklog
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration $requirementBacklog Requirement backlog
     *
     * @return $this
     */
    public function setRequirementBacklog($requirementBacklog)
    {
        $this->container['requirementBacklog'] = $requirementBacklog;

        return $this;
    }

    /**
     * Gets taskBacklog
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration
     */
    public function getTaskBacklog()
    {
        return $this->container['taskBacklog'];
    }

    /**
     * Sets taskBacklog
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevelConfiguration $taskBacklog Task backlog
     *
     * @return $this
     */
    public function setTaskBacklog($taskBacklog)
    {
        $this->container['taskBacklog'] = $taskBacklog;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets workItemTypeMappedStates
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemTypeStateInfo[]
     */
    public function getWorkItemTypeMappedStates()
    {
        return $this->container['workItemTypeMappedStates'];
    }

    /**
     * Sets workItemTypeMappedStates
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemTypeStateInfo[] $workItemTypeMappedStates Mapped states for work item types
     *
     * @return $this
     */
    public function setWorkItemTypeMappedStates($workItemTypeMappedStates)
    {
        $this->container['workItemTypeMappedStates'] = $workItemTypeMappedStates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


