<?php
/**
 * DeliveryViewData
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Work\ObjectSerializer;

/**
 * DeliveryViewData Class Doc Comment
 *
 * @category Class
 * @description Data contract for Data of Delivery View
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryViewData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryViewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'revision' => 'int',
        'childIdToParentIdMap' => 'map[string,int]',
        'criteriaStatus' => '\FrankHouweling\AzureDevOpsClient\Work\Model\TimelineCriteriaStatus',
        'endDate' => '\DateTime',
        'maxExpandedTeams' => 'int',
        'startDate' => '\DateTime',
        'teams' => '\FrankHouweling\AzureDevOpsClient\Work\Model\TimelineTeamData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'revision' => 'int32',
        'childIdToParentIdMap' => 'int32',
        'criteriaStatus' => null,
        'endDate' => 'date-time',
        'maxExpandedTeams' => 'int32',
        'startDate' => 'date-time',
        'teams' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'revision' => 'revision',
        'childIdToParentIdMap' => 'childIdToParentIdMap',
        'criteriaStatus' => 'criteriaStatus',
        'endDate' => 'endDate',
        'maxExpandedTeams' => 'maxExpandedTeams',
        'startDate' => 'startDate',
        'teams' => 'teams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'revision' => 'setRevision',
        'childIdToParentIdMap' => 'setChildIdToParentIdMap',
        'criteriaStatus' => 'setCriteriaStatus',
        'endDate' => 'setEndDate',
        'maxExpandedTeams' => 'setMaxExpandedTeams',
        'startDate' => 'setStartDate',
        'teams' => 'setTeams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'revision' => 'getRevision',
        'childIdToParentIdMap' => 'getChildIdToParentIdMap',
        'criteriaStatus' => 'getCriteriaStatus',
        'endDate' => 'getEndDate',
        'maxExpandedTeams' => 'getMaxExpandedTeams',
        'startDate' => 'getStartDate',
        'teams' => 'getTeams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['childIdToParentIdMap'] = isset($data['childIdToParentIdMap']) ? $data['childIdToParentIdMap'] : null;
        $this->container['criteriaStatus'] = isset($data['criteriaStatus']) ? $data['criteriaStatus'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['maxExpandedTeams'] = isset($data['maxExpandedTeams']) ? $data['maxExpandedTeams'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets childIdToParentIdMap
     *
     * @return map[string,int]
     */
    public function getChildIdToParentIdMap()
    {
        return $this->container['childIdToParentIdMap'];
    }

    /**
     * Sets childIdToParentIdMap
     *
     * @param map[string,int] $childIdToParentIdMap Work item child id to parent id map
     *
     * @return $this
     */
    public function setChildIdToParentIdMap($childIdToParentIdMap)
    {
        $this->container['childIdToParentIdMap'] = $childIdToParentIdMap;

        return $this;
    }

    /**
     * Gets criteriaStatus
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineCriteriaStatus
     */
    public function getCriteriaStatus()
    {
        return $this->container['criteriaStatus'];
    }

    /**
     * Sets criteriaStatus
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineCriteriaStatus $criteriaStatus Filter criteria status of the timeline
     *
     * @return $this
     */
    public function setCriteriaStatus($criteriaStatus)
    {
        $this->container['criteriaStatus'] = $criteriaStatus;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate The end date of the delivery view data
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets maxExpandedTeams
     *
     * @return int
     */
    public function getMaxExpandedTeams()
    {
        return $this->container['maxExpandedTeams'];
    }

    /**
     * Sets maxExpandedTeams
     *
     * @param int $maxExpandedTeams Max number of teams can be configured for a delivery plan.
     *
     * @return $this
     */
    public function setMaxExpandedTeams($maxExpandedTeams)
    {
        $this->container['maxExpandedTeams'] = $maxExpandedTeams;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate The start date for the delivery view data
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineTeamData[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineTeamData[] $teams All the team data
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


