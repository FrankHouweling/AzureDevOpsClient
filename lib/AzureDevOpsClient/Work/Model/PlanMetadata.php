<?php
/**
 * PlanMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Work\ObjectSerializer;

/**
 * PlanMetadata Class Doc Comment
 *
 * @category Class
 * @description Metadata about a plan definition that is stored in favorites service
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'createdByIdentity' => '\FrankHouweling\AzureDevOpsClient\Work\Model\IdentityRef',
        'description' => 'string',
        'modifiedDate' => '\DateTime',
        'userPermissions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'createdByIdentity' => null,
        'description' => null,
        'modifiedDate' => 'date-time',
        'userPermissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdByIdentity' => 'createdByIdentity',
        'description' => 'description',
        'modifiedDate' => 'modifiedDate',
        'userPermissions' => 'userPermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdByIdentity' => 'setCreatedByIdentity',
        'description' => 'setDescription',
        'modifiedDate' => 'setModifiedDate',
        'userPermissions' => 'setUserPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdByIdentity' => 'getCreatedByIdentity',
        'description' => 'getDescription',
        'modifiedDate' => 'getModifiedDate',
        'userPermissions' => 'getUserPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USER_PERMISSIONS_NONE = 'none';
    const USER_PERMISSIONS_VIEW = 'view';
    const USER_PERMISSIONS_EDIT = 'edit';
    const USER_PERMISSIONS_DELETE = 'delete';
    const USER_PERMISSIONS_MANAGE = 'manage';
    const USER_PERMISSIONS_ALL_PERMISSIONS = 'allPermissions';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserPermissionsAllowableValues()
    {
        return [
            self::USER_PERMISSIONS_NONE,
            self::USER_PERMISSIONS_VIEW,
            self::USER_PERMISSIONS_EDIT,
            self::USER_PERMISSIONS_DELETE,
            self::USER_PERMISSIONS_MANAGE,
            self::USER_PERMISSIONS_ALL_PERMISSIONS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['createdByIdentity'] = isset($data['createdByIdentity']) ? $data['createdByIdentity'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['modifiedDate'] = isset($data['modifiedDate']) ? $data['modifiedDate'] : null;
        $this->container['userPermissions'] = isset($data['userPermissions']) ? $data['userPermissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUserPermissionsAllowableValues();
        if (!is_null($this->container['userPermissions']) && !in_array($this->container['userPermissions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'userPermissions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdByIdentity
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\IdentityRef
     */
    public function getCreatedByIdentity()
    {
        return $this->container['createdByIdentity'];
    }

    /**
     * Sets createdByIdentity
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\IdentityRef $createdByIdentity Identity of the creator of the plan
     *
     * @return $this
     */
    public function setCreatedByIdentity($createdByIdentity)
    {
        $this->container['createdByIdentity'] = $createdByIdentity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of plan
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime $modifiedDate Last modified date of the plan
     *
     * @return $this
     */
    public function setModifiedDate($modifiedDate)
    {
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets userPermissions
     *
     * @return string
     */
    public function getUserPermissions()
    {
        return $this->container['userPermissions'];
    }

    /**
     * Sets userPermissions
     *
     * @param string $userPermissions Bit flag indicating set of permissions a user has to the plan.
     *
     * @return $this
     */
    public function setUserPermissions($userPermissions)
    {
        $allowedValues = $this->getUserPermissionsAllowableValues();
        if (!is_null($userPermissions) && !in_array($userPermissions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'userPermissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['userPermissions'] = $userPermissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


