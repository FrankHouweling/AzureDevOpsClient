<?php
/**
 * TimelineTeamData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Work\ObjectSerializer;

/**
 * TimelineTeamData Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimelineTeamData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimelineTeamData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backlog' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevel',
        'fieldReferenceNames' => 'string[]',
        'id' => 'string',
        'isExpanded' => 'bool',
        'iterations' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamIteration[]',
        'name' => 'string',
        'orderByField' => 'string',
        'partiallyPagedFieldReferenceNames' => 'string[]',
        'projectId' => 'string',
        'status' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamStatus',
        'teamFieldDefaultValue' => 'string',
        'teamFieldName' => 'string',
        'teamFieldValues' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TeamFieldValue[]',
        'workItemTypeColors' => '\AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemColor[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backlog' => null,
        'fieldReferenceNames' => null,
        'id' => 'uuid',
        'isExpanded' => null,
        'iterations' => null,
        'name' => null,
        'orderByField' => null,
        'partiallyPagedFieldReferenceNames' => null,
        'projectId' => 'uuid',
        'status' => null,
        'teamFieldDefaultValue' => null,
        'teamFieldName' => null,
        'teamFieldValues' => null,
        'workItemTypeColors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backlog' => 'backlog',
        'fieldReferenceNames' => 'fieldReferenceNames',
        'id' => 'id',
        'isExpanded' => 'isExpanded',
        'iterations' => 'iterations',
        'name' => 'name',
        'orderByField' => 'orderByField',
        'partiallyPagedFieldReferenceNames' => 'partiallyPagedFieldReferenceNames',
        'projectId' => 'projectId',
        'status' => 'status',
        'teamFieldDefaultValue' => 'teamFieldDefaultValue',
        'teamFieldName' => 'teamFieldName',
        'teamFieldValues' => 'teamFieldValues',
        'workItemTypeColors' => 'workItemTypeColors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backlog' => 'setBacklog',
        'fieldReferenceNames' => 'setFieldReferenceNames',
        'id' => 'setId',
        'isExpanded' => 'setIsExpanded',
        'iterations' => 'setIterations',
        'name' => 'setName',
        'orderByField' => 'setOrderByField',
        'partiallyPagedFieldReferenceNames' => 'setPartiallyPagedFieldReferenceNames',
        'projectId' => 'setProjectId',
        'status' => 'setStatus',
        'teamFieldDefaultValue' => 'setTeamFieldDefaultValue',
        'teamFieldName' => 'setTeamFieldName',
        'teamFieldValues' => 'setTeamFieldValues',
        'workItemTypeColors' => 'setWorkItemTypeColors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backlog' => 'getBacklog',
        'fieldReferenceNames' => 'getFieldReferenceNames',
        'id' => 'getId',
        'isExpanded' => 'getIsExpanded',
        'iterations' => 'getIterations',
        'name' => 'getName',
        'orderByField' => 'getOrderByField',
        'partiallyPagedFieldReferenceNames' => 'getPartiallyPagedFieldReferenceNames',
        'projectId' => 'getProjectId',
        'status' => 'getStatus',
        'teamFieldDefaultValue' => 'getTeamFieldDefaultValue',
        'teamFieldName' => 'getTeamFieldName',
        'teamFieldValues' => 'getTeamFieldValues',
        'workItemTypeColors' => 'getWorkItemTypeColors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backlog'] = isset($data['backlog']) ? $data['backlog'] : null;
        $this->container['fieldReferenceNames'] = isset($data['fieldReferenceNames']) ? $data['fieldReferenceNames'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isExpanded'] = isset($data['isExpanded']) ? $data['isExpanded'] : null;
        $this->container['iterations'] = isset($data['iterations']) ? $data['iterations'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['orderByField'] = isset($data['orderByField']) ? $data['orderByField'] : null;
        $this->container['partiallyPagedFieldReferenceNames'] = isset($data['partiallyPagedFieldReferenceNames']) ? $data['partiallyPagedFieldReferenceNames'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['teamFieldDefaultValue'] = isset($data['teamFieldDefaultValue']) ? $data['teamFieldDefaultValue'] : null;
        $this->container['teamFieldName'] = isset($data['teamFieldName']) ? $data['teamFieldName'] : null;
        $this->container['teamFieldValues'] = isset($data['teamFieldValues']) ? $data['teamFieldValues'] : null;
        $this->container['workItemTypeColors'] = isset($data['workItemTypeColors']) ? $data['workItemTypeColors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backlog
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevel
     */
    public function getBacklog()
    {
        return $this->container['backlog'];
    }

    /**
     * Sets backlog
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\BacklogLevel $backlog Backlog matching the mapped backlog associated with this team.
     *
     * @return $this
     */
    public function setBacklog($backlog)
    {
        $this->container['backlog'] = $backlog;

        return $this;
    }

    /**
     * Gets fieldReferenceNames
     *
     * @return string[]
     */
    public function getFieldReferenceNames()
    {
        return $this->container['fieldReferenceNames'];
    }

    /**
     * Sets fieldReferenceNames
     *
     * @param string[] $fieldReferenceNames The field reference names of the work item data
     *
     * @return $this
     */
    public function setFieldReferenceNames($fieldReferenceNames)
    {
        $this->container['fieldReferenceNames'] = $fieldReferenceNames;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the team
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isExpanded
     *
     * @return bool
     */
    public function getIsExpanded()
    {
        return $this->container['isExpanded'];
    }

    /**
     * Sets isExpanded
     *
     * @param bool $isExpanded Was iteration and work item data retrieved for this team. <remarks> Teams with IsExpanded false have not had their iteration, work item, and field related data queried and will never contain this data. If true then these items are queried and, if there are items in the queried range, there will be data. </remarks>
     *
     * @return $this
     */
    public function setIsExpanded($isExpanded)
    {
        $this->container['isExpanded'] = $isExpanded;

        return $this;
    }

    /**
     * Gets iterations
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamIteration[]
     */
    public function getIterations()
    {
        return $this->container['iterations'];
    }

    /**
     * Sets iterations
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamIteration[] $iterations The iteration data, including the work items, in the queried date range.
     *
     * @return $this
     */
    public function setIterations($iterations)
    {
        $this->container['iterations'] = $iterations;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the team
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets orderByField
     *
     * @return string
     */
    public function getOrderByField()
    {
        return $this->container['orderByField'];
    }

    /**
     * Sets orderByField
     *
     * @param string $orderByField The order by field name of this team
     *
     * @return $this
     */
    public function setOrderByField($orderByField)
    {
        $this->container['orderByField'] = $orderByField;

        return $this;
    }

    /**
     * Gets partiallyPagedFieldReferenceNames
     *
     * @return string[]
     */
    public function getPartiallyPagedFieldReferenceNames()
    {
        return $this->container['partiallyPagedFieldReferenceNames'];
    }

    /**
     * Sets partiallyPagedFieldReferenceNames
     *
     * @param string[] $partiallyPagedFieldReferenceNames The field reference names of the partially paged work items, such as ID, WorkItemType
     *
     * @return $this
     */
    public function setPartiallyPagedFieldReferenceNames($partiallyPagedFieldReferenceNames)
    {
        $this->container['partiallyPagedFieldReferenceNames'] = $partiallyPagedFieldReferenceNames;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId The project id the team belongs team
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TimelineTeamStatus $status Status for this team.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets teamFieldDefaultValue
     *
     * @return string
     */
    public function getTeamFieldDefaultValue()
    {
        return $this->container['teamFieldDefaultValue'];
    }

    /**
     * Sets teamFieldDefaultValue
     *
     * @param string $teamFieldDefaultValue The team field default value
     *
     * @return $this
     */
    public function setTeamFieldDefaultValue($teamFieldDefaultValue)
    {
        $this->container['teamFieldDefaultValue'] = $teamFieldDefaultValue;

        return $this;
    }

    /**
     * Gets teamFieldName
     *
     * @return string
     */
    public function getTeamFieldName()
    {
        return $this->container['teamFieldName'];
    }

    /**
     * Sets teamFieldName
     *
     * @param string $teamFieldName The team field name of this team
     *
     * @return $this
     */
    public function setTeamFieldName($teamFieldName)
    {
        $this->container['teamFieldName'] = $teamFieldName;

        return $this;
    }

    /**
     * Gets teamFieldValues
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TeamFieldValue[]
     */
    public function getTeamFieldValues()
    {
        return $this->container['teamFieldValues'];
    }

    /**
     * Sets teamFieldValues
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\TeamFieldValue[] $teamFieldValues The team field values
     *
     * @return $this
     */
    public function setTeamFieldValues($teamFieldValues)
    {
        $this->container['teamFieldValues'] = $teamFieldValues;

        return $this;
    }

    /**
     * Gets workItemTypeColors
     *
     * @return \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemColor[]
     */
    public function getWorkItemTypeColors()
    {
        return $this->container['workItemTypeColors'];
    }

    /**
     * Sets workItemTypeColors
     *
     * @param \AzureDevOpsClient\Work\AzureDevOpsClient\Work\Model\WorkItemColor[] $workItemTypeColors Colors for the work item types.
     *
     * @return $this
     */
    public function setWorkItemTypeColors($workItemTypeColors)
    {
        $this->container['workItemTypeColors'] = $workItemTypeColors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


