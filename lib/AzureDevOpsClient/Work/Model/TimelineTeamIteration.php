<?php
/**
 * TimelineTeamIteration
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Work
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Work\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Work\ObjectSerializer;

/**
 * TimelineTeamIteration Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Work
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimelineTeamIteration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimelineTeamIteration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cssNodeId' => 'string',
        'finishDate' => '\DateTime',
        'name' => 'string',
        'partiallyPagedWorkItems' => 'object[][]',
        'path' => 'string',
        'startDate' => '\DateTime',
        'status' => '\FrankHouweling\AzureDevOpsClient\Work\Model\TimelineIterationStatus',
        'workItems' => 'object[][]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cssNodeId' => null,
        'finishDate' => 'date-time',
        'name' => null,
        'partiallyPagedWorkItems' => null,
        'path' => null,
        'startDate' => 'date-time',
        'status' => null,
        'workItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cssNodeId' => 'cssNodeId',
        'finishDate' => 'finishDate',
        'name' => 'name',
        'partiallyPagedWorkItems' => 'partiallyPagedWorkItems',
        'path' => 'path',
        'startDate' => 'startDate',
        'status' => 'status',
        'workItems' => 'workItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cssNodeId' => 'setCssNodeId',
        'finishDate' => 'setFinishDate',
        'name' => 'setName',
        'partiallyPagedWorkItems' => 'setPartiallyPagedWorkItems',
        'path' => 'setPath',
        'startDate' => 'setStartDate',
        'status' => 'setStatus',
        'workItems' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cssNodeId' => 'getCssNodeId',
        'finishDate' => 'getFinishDate',
        'name' => 'getName',
        'partiallyPagedWorkItems' => 'getPartiallyPagedWorkItems',
        'path' => 'getPath',
        'startDate' => 'getStartDate',
        'status' => 'getStatus',
        'workItems' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cssNodeId'] = isset($data['cssNodeId']) ? $data['cssNodeId'] : null;
        $this->container['finishDate'] = isset($data['finishDate']) ? $data['finishDate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['partiallyPagedWorkItems'] = isset($data['partiallyPagedWorkItems']) ? $data['partiallyPagedWorkItems'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['workItems'] = isset($data['workItems']) ? $data['workItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cssNodeId
     *
     * @return string
     */
    public function getCssNodeId()
    {
        return $this->container['cssNodeId'];
    }

    /**
     * Sets cssNodeId
     *
     * @param string $cssNodeId The iteration CSS Node Id
     *
     * @return $this
     */
    public function setCssNodeId($cssNodeId)
    {
        $this->container['cssNodeId'] = $cssNodeId;

        return $this;
    }

    /**
     * Gets finishDate
     *
     * @return \DateTime
     */
    public function getFinishDate()
    {
        return $this->container['finishDate'];
    }

    /**
     * Sets finishDate
     *
     * @param \DateTime $finishDate The end date of the iteration
     *
     * @return $this
     */
    public function setFinishDate($finishDate)
    {
        $this->container['finishDate'] = $finishDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The iteration name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partiallyPagedWorkItems
     *
     * @return object[][]
     */
    public function getPartiallyPagedWorkItems()
    {
        return $this->container['partiallyPagedWorkItems'];
    }

    /**
     * Sets partiallyPagedWorkItems
     *
     * @param object[][] $partiallyPagedWorkItems All the partially paged workitems in this iteration.
     *
     * @return $this
     */
    public function setPartiallyPagedWorkItems($partiallyPagedWorkItems)
    {
        $this->container['partiallyPagedWorkItems'] = $partiallyPagedWorkItems;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The iteration path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate The start date of the iteration
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineIterationStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \FrankHouweling\AzureDevOpsClient\Work\Model\TimelineIterationStatus $status The status of this iteration
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets workItems
     *
     * @return object[][]
     */
    public function getWorkItems()
    {
        return $this->container['workItems'];
    }

    /**
     * Sets workItems
     *
     * @param object[][] $workItems The work items that have been paged in this iteration
     *
     * @return $this
     */
    public function setWorkItems($workItems)
    {
        $this->container['workItems'] = $workItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


