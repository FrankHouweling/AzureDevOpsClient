<?php
/**
 * GraphMembershipTraversal
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Graph
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Graph\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Graph\ObjectSerializer;

/**
 * GraphMembershipTraversal Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GraphMembershipTraversal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GraphMembershipTraversal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'incompletenessReason' => 'string',
        'isComplete' => 'bool',
        'subjectDescriptor' => 'string',
        'traversedSubjectIds' => 'string[]',
        'traversedSubjects' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'incompletenessReason' => null,
        'isComplete' => null,
        'subjectDescriptor' => null,
        'traversedSubjectIds' => 'uuid',
        'traversedSubjects' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'incompletenessReason' => 'incompletenessReason',
        'isComplete' => 'isComplete',
        'subjectDescriptor' => 'subjectDescriptor',
        'traversedSubjectIds' => 'traversedSubjectIds',
        'traversedSubjects' => 'traversedSubjects'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'incompletenessReason' => 'setIncompletenessReason',
        'isComplete' => 'setIsComplete',
        'subjectDescriptor' => 'setSubjectDescriptor',
        'traversedSubjectIds' => 'setTraversedSubjectIds',
        'traversedSubjects' => 'setTraversedSubjects'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'incompletenessReason' => 'getIncompletenessReason',
        'isComplete' => 'getIsComplete',
        'subjectDescriptor' => 'getSubjectDescriptor',
        'traversedSubjectIds' => 'getTraversedSubjectIds',
        'traversedSubjects' => 'getTraversedSubjects'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['incompletenessReason'] = isset($data['incompletenessReason']) ? $data['incompletenessReason'] : null;
        $this->container['isComplete'] = isset($data['isComplete']) ? $data['isComplete'] : null;
        $this->container['subjectDescriptor'] = isset($data['subjectDescriptor']) ? $data['subjectDescriptor'] : null;
        $this->container['traversedSubjectIds'] = isset($data['traversedSubjectIds']) ? $data['traversedSubjectIds'] : null;
        $this->container['traversedSubjects'] = isset($data['traversedSubjects']) ? $data['traversedSubjects'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets incompletenessReason
     *
     * @return string
     */
    public function getIncompletenessReason()
    {
        return $this->container['incompletenessReason'];
    }

    /**
     * Sets incompletenessReason
     *
     * @param string $incompletenessReason Reason why the subject could not be traversed completely
     *
     * @return $this
     */
    public function setIncompletenessReason($incompletenessReason)
    {
        $this->container['incompletenessReason'] = $incompletenessReason;

        return $this;
    }

    /**
     * Gets isComplete
     *
     * @return bool
     */
    public function getIsComplete()
    {
        return $this->container['isComplete'];
    }

    /**
     * Sets isComplete
     *
     * @param bool $isComplete When true, the subject is traversed completely
     *
     * @return $this
     */
    public function setIsComplete($isComplete)
    {
        $this->container['isComplete'] = $isComplete;

        return $this;
    }

    /**
     * Gets subjectDescriptor
     *
     * @return string
     */
    public function getSubjectDescriptor()
    {
        return $this->container['subjectDescriptor'];
    }

    /**
     * Sets subjectDescriptor
     *
     * @param string $subjectDescriptor The traversed subject descriptor
     *
     * @return $this
     */
    public function setSubjectDescriptor($subjectDescriptor)
    {
        $this->container['subjectDescriptor'] = $subjectDescriptor;

        return $this;
    }

    /**
     * Gets traversedSubjectIds
     *
     * @return string[]
     */
    public function getTraversedSubjectIds()
    {
        return $this->container['traversedSubjectIds'];
    }

    /**
     * Sets traversedSubjectIds
     *
     * @param string[] $traversedSubjectIds Subject descriptor ids of the traversed members
     *
     * @return $this
     */
    public function setTraversedSubjectIds($traversedSubjectIds)
    {
        $this->container['traversedSubjectIds'] = $traversedSubjectIds;

        return $this;
    }

    /**
     * Gets traversedSubjects
     *
     * @return string[]
     */
    public function getTraversedSubjects()
    {
        return $this->container['traversedSubjects'];
    }

    /**
     * Sets traversedSubjects
     *
     * @param string[] $traversedSubjects Subject descriptors of the traversed members
     *
     * @return $this
     */
    public function setTraversedSubjects($traversedSubjects)
    {
        $this->container['traversedSubjects'] = $traversedSubjects;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


