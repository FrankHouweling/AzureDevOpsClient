<?php
/**
 * GraphScopeCreationContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Graph
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Graph\AzureDevOpsClient\Graph\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Graph\ObjectSerializer;

/**
 * GraphScopeCreationContext Class Doc Comment
 *
 * @category Class
 * @description This type is the subset of fields that can be provided by the user to create a Vsts scope. Scope creation is currently limited to internal back-compat scenarios. End users that attempt to create a scope with this API will fail.
 * @package  AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GraphScopeCreationContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GraphScopeCreationContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adminGroupDescription' => 'string',
        'adminGroupName' => 'string',
        'creatorId' => 'string',
        'name' => 'string',
        'scopeType' => 'string',
        'storageKey' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adminGroupDescription' => null,
        'adminGroupName' => null,
        'creatorId' => 'uuid',
        'name' => null,
        'scopeType' => null,
        'storageKey' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adminGroupDescription' => 'adminGroupDescription',
        'adminGroupName' => 'adminGroupName',
        'creatorId' => 'creatorId',
        'name' => 'name',
        'scopeType' => 'scopeType',
        'storageKey' => 'storageKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adminGroupDescription' => 'setAdminGroupDescription',
        'adminGroupName' => 'setAdminGroupName',
        'creatorId' => 'setCreatorId',
        'name' => 'setName',
        'scopeType' => 'setScopeType',
        'storageKey' => 'setStorageKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adminGroupDescription' => 'getAdminGroupDescription',
        'adminGroupName' => 'getAdminGroupName',
        'creatorId' => 'getCreatorId',
        'name' => 'getName',
        'scopeType' => 'getScopeType',
        'storageKey' => 'getStorageKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCOPE_TYPE_GENERIC = 'generic';
    const SCOPE_TYPE_SERVICE_HOST = 'serviceHost';
    const SCOPE_TYPE_TEAM_PROJECT = 'teamProject';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeTypeAllowableValues()
    {
        return [
            self::SCOPE_TYPE_GENERIC,
            self::SCOPE_TYPE_SERVICE_HOST,
            self::SCOPE_TYPE_TEAM_PROJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adminGroupDescription'] = isset($data['adminGroupDescription']) ? $data['adminGroupDescription'] : null;
        $this->container['adminGroupName'] = isset($data['adminGroupName']) ? $data['adminGroupName'] : null;
        $this->container['creatorId'] = isset($data['creatorId']) ? $data['creatorId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['scopeType'] = isset($data['scopeType']) ? $data['scopeType'] : null;
        $this->container['storageKey'] = isset($data['storageKey']) ? $data['storageKey'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScopeTypeAllowableValues();
        if (!is_null($this->container['scopeType']) && !in_array($this->container['scopeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scopeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adminGroupDescription
     *
     * @return string
     */
    public function getAdminGroupDescription()
    {
        return $this->container['adminGroupDescription'];
    }

    /**
     * Sets adminGroupDescription
     *
     * @param string $adminGroupDescription Set this field to override the default description of this scope's admin group.
     *
     * @return $this
     */
    public function setAdminGroupDescription($adminGroupDescription)
    {
        $this->container['adminGroupDescription'] = $adminGroupDescription;

        return $this;
    }

    /**
     * Gets adminGroupName
     *
     * @return string
     */
    public function getAdminGroupName()
    {
        return $this->container['adminGroupName'];
    }

    /**
     * Sets adminGroupName
     *
     * @param string $adminGroupName All scopes have an Administrator Group that controls access to the contents of the scope. Set this field to use a non-default group name for that administrators group.
     *
     * @return $this
     */
    public function setAdminGroupName($adminGroupName)
    {
        $this->container['adminGroupName'] = $adminGroupName;

        return $this;
    }

    /**
     * Gets creatorId
     *
     * @return string
     */
    public function getCreatorId()
    {
        return $this->container['creatorId'];
    }

    /**
     * Sets creatorId
     *
     * @param string $creatorId Set this optional field if this scope is created on behalf of a user other than the user making the request. This should be the Id of the user that is not the requester.
     *
     * @return $this
     */
    public function setCreatorId($creatorId)
    {
        $this->container['creatorId'] = $creatorId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The scope must be provided with a unique name within the parent scope. This means the created scope can have a parent or child with the same name, but no siblings with the same name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets scopeType
     *
     * @return string
     */
    public function getScopeType()
    {
        return $this->container['scopeType'];
    }

    /**
     * Sets scopeType
     *
     * @param string $scopeType The type of scope being created.
     *
     * @return $this
     */
    public function setScopeType($scopeType)
    {
        $allowedValues = $this->getScopeTypeAllowableValues();
        if (!is_null($scopeType) && !in_array($scopeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scopeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scopeType'] = $scopeType;

        return $this;
    }

    /**
     * Gets storageKey
     *
     * @return string
     */
    public function getStorageKey()
    {
        return $this->container['storageKey'];
    }

    /**
     * Sets storageKey
     *
     * @param string $storageKey An optional ID that uniquely represents the scope within it's parent scope. If this parameter is not provided, Vsts will generate on automatically.
     *
     * @return $this
     */
    public function setStorageKey($storageKey)
    {
        $this->container['storageKey'] = $storageKey;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


