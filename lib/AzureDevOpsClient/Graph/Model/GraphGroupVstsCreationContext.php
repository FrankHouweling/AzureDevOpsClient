<?php
/**
 * GraphGroupVstsCreationContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Graph
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Graph\AzureDevOpsClient\Graph\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Graph\ObjectSerializer;

/**
 * GraphGroupVstsCreationContext Class Doc Comment
 *
 * @category Class
 * @description Use this type to create a new Vsts group that is not backed by an external provider.
 * @package  AzureDevOpsClient\Graph
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GraphGroupVstsCreationContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GraphGroupVstsCreationContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'storageKey' => 'string',
        'crossProject' => 'bool',
        'description' => 'string',
        'descriptor' => 'string',
        'displayName' => 'string',
        'restrictedVisibility' => 'bool',
        'specialGroupType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'storageKey' => 'uuid',
        'crossProject' => null,
        'description' => null,
        'descriptor' => null,
        'displayName' => null,
        'restrictedVisibility' => null,
        'specialGroupType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storageKey' => 'storageKey',
        'crossProject' => 'crossProject',
        'description' => 'description',
        'descriptor' => 'descriptor',
        'displayName' => 'displayName',
        'restrictedVisibility' => 'restrictedVisibility',
        'specialGroupType' => 'specialGroupType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storageKey' => 'setStorageKey',
        'crossProject' => 'setCrossProject',
        'description' => 'setDescription',
        'descriptor' => 'setDescriptor',
        'displayName' => 'setDisplayName',
        'restrictedVisibility' => 'setRestrictedVisibility',
        'specialGroupType' => 'setSpecialGroupType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storageKey' => 'getStorageKey',
        'crossProject' => 'getCrossProject',
        'description' => 'getDescription',
        'descriptor' => 'getDescriptor',
        'displayName' => 'getDisplayName',
        'restrictedVisibility' => 'getRestrictedVisibility',
        'specialGroupType' => 'getSpecialGroupType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storageKey'] = isset($data['storageKey']) ? $data['storageKey'] : null;
        $this->container['crossProject'] = isset($data['crossProject']) ? $data['crossProject'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptor'] = isset($data['descriptor']) ? $data['descriptor'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['restrictedVisibility'] = isset($data['restrictedVisibility']) ? $data['restrictedVisibility'] : null;
        $this->container['specialGroupType'] = isset($data['specialGroupType']) ? $data['specialGroupType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storageKey
     *
     * @return string
     */
    public function getStorageKey()
    {
        return $this->container['storageKey'];
    }

    /**
     * Sets storageKey
     *
     * @param string $storageKey Optional: If provided, we will use this identifier for the storage key of the created group
     *
     * @return $this
     */
    public function setStorageKey($storageKey)
    {
        $this->container['storageKey'] = $storageKey;

        return $this;
    }

    /**
     * Gets crossProject
     *
     * @return bool
     */
    public function getCrossProject()
    {
        return $this->container['crossProject'];
    }

    /**
     * Sets crossProject
     *
     * @param bool $crossProject For internal use only in back compat scenarios.
     *
     * @return $this
     */
    public function setCrossProject($crossProject)
    {
        $this->container['crossProject'] = $crossProject;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Used by VSTS groups; if set this will be the group description, otherwise ignored
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptor
     *
     * @return string
     */
    public function getDescriptor()
    {
        return $this->container['descriptor'];
    }

    /**
     * Sets descriptor
     *
     * @param string $descriptor descriptor
     *
     * @return $this
     */
    public function setDescriptor($descriptor)
    {
        $this->container['descriptor'] = $descriptor;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Used by VSTS groups; if set this will be the group DisplayName, otherwise ignored
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets restrictedVisibility
     *
     * @return bool
     */
    public function getRestrictedVisibility()
    {
        return $this->container['restrictedVisibility'];
    }

    /**
     * Sets restrictedVisibility
     *
     * @param bool $restrictedVisibility For internal use only in back compat scenarios.
     *
     * @return $this
     */
    public function setRestrictedVisibility($restrictedVisibility)
    {
        $this->container['restrictedVisibility'] = $restrictedVisibility;

        return $this;
    }

    /**
     * Gets specialGroupType
     *
     * @return string
     */
    public function getSpecialGroupType()
    {
        return $this->container['specialGroupType'];
    }

    /**
     * Sets specialGroupType
     *
     * @param string $specialGroupType For internal use only in back compat scenarios.
     *
     * @return $this
     */
    public function setSpecialGroupType($specialGroupType)
    {
        $this->container['specialGroupType'] = $specialGroupType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


