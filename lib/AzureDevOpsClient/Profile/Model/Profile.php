<?php
/**
 * Profile
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Profile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Profile
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Profile\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Profile\ObjectSerializer;

/**
 * Profile Class Doc Comment
 *
 * @category Class
 * @description A user profile.
 * @package  FrankHouweling\AzureDevOpsClient\Profile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Profile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicationContainer' => '\FrankHouweling\AzureDevOpsClient\Profile\Model\AttributesContainer',
        'coreAttributes' => 'map[string,\FrankHouweling\AzureDevOpsClient\Profile\Model\CoreProfileAttribute]',
        'coreRevision' => 'int',
        'id' => 'string',
        'profileState' => 'string',
        'revision' => 'int',
        'timeStamp' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applicationContainer' => null,
        'coreAttributes' => null,
        'coreRevision' => 'int32',
        'id' => 'uuid',
        'profileState' => null,
        'revision' => 'int32',
        'timeStamp' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicationContainer' => 'applicationContainer',
        'coreAttributes' => 'coreAttributes',
        'coreRevision' => 'coreRevision',
        'id' => 'id',
        'profileState' => 'profileState',
        'revision' => 'revision',
        'timeStamp' => 'timeStamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicationContainer' => 'setApplicationContainer',
        'coreAttributes' => 'setCoreAttributes',
        'coreRevision' => 'setCoreRevision',
        'id' => 'setId',
        'profileState' => 'setProfileState',
        'revision' => 'setRevision',
        'timeStamp' => 'setTimeStamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicationContainer' => 'getApplicationContainer',
        'coreAttributes' => 'getCoreAttributes',
        'coreRevision' => 'getCoreRevision',
        'id' => 'getId',
        'profileState' => 'getProfileState',
        'revision' => 'getRevision',
        'timeStamp' => 'getTimeStamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROFILE_STATE_CUSTOM = 'custom';
    const PROFILE_STATE_CUSTOM_READ_ONLY = 'customReadOnly';
    const PROFILE_STATE_READ_ONLY = 'readOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileStateAllowableValues()
    {
        return [
            self::PROFILE_STATE_CUSTOM,
            self::PROFILE_STATE_CUSTOM_READ_ONLY,
            self::PROFILE_STATE_READ_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicationContainer'] = isset($data['applicationContainer']) ? $data['applicationContainer'] : null;
        $this->container['coreAttributes'] = isset($data['coreAttributes']) ? $data['coreAttributes'] : null;
        $this->container['coreRevision'] = isset($data['coreRevision']) ? $data['coreRevision'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['profileState'] = isset($data['profileState']) ? $data['profileState'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['timeStamp'] = isset($data['timeStamp']) ? $data['timeStamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProfileStateAllowableValues();
        if (!is_null($this->container['profileState']) && !in_array($this->container['profileState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'profileState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicationContainer
     *
     * @return \FrankHouweling\AzureDevOpsClient\Profile\Model\AttributesContainer
     */
    public function getApplicationContainer()
    {
        return $this->container['applicationContainer'];
    }

    /**
     * Sets applicationContainer
     *
     * @param \FrankHouweling\AzureDevOpsClient\Profile\Model\AttributesContainer $applicationContainer The attributes of this profile.
     *
     * @return $this
     */
    public function setApplicationContainer($applicationContainer)
    {
        $this->container['applicationContainer'] = $applicationContainer;

        return $this;
    }

    /**
     * Gets coreAttributes
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\Profile\Model\CoreProfileAttribute]
     */
    public function getCoreAttributes()
    {
        return $this->container['coreAttributes'];
    }

    /**
     * Sets coreAttributes
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\Profile\Model\CoreProfileAttribute] $coreAttributes The core attributes of this profile.
     *
     * @return $this
     */
    public function setCoreAttributes($coreAttributes)
    {
        $this->container['coreAttributes'] = $coreAttributes;

        return $this;
    }

    /**
     * Gets coreRevision
     *
     * @return int
     */
    public function getCoreRevision()
    {
        return $this->container['coreRevision'];
    }

    /**
     * Sets coreRevision
     *
     * @param int $coreRevision The maximum revision number of any attribute.
     *
     * @return $this
     */
    public function setCoreRevision($coreRevision)
    {
        $this->container['coreRevision'] = $coreRevision;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the profile.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets profileState
     *
     * @return string
     */
    public function getProfileState()
    {
        return $this->container['profileState'];
    }

    /**
     * Sets profileState
     *
     * @param string $profileState The current state of the profile.
     *
     * @return $this
     */
    public function setProfileState($profileState)
    {
        $allowedValues = $this->getProfileStateAllowableValues();
        if (!is_null($profileState) && !in_array($profileState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'profileState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profileState'] = $profileState;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision The maximum revision number of any attribute.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets timeStamp
     *
     * @return \DateTime
     */
    public function getTimeStamp()
    {
        return $this->container['timeStamp'];
    }

    /**
     * Sets timeStamp
     *
     * @param \DateTime $timeStamp The time at which this profile was last changed.
     *
     * @return $this
     */
    public function setTimeStamp($timeStamp)
    {
        $this->container['timeStamp'] = $timeStamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


