<?php
/**
 * CreateProfileContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Profile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Profile
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Profile\AzureDevOpsClient\Profile\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Profile\ObjectSerializer;

/**
 * CreateProfileContext Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Profile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateProfileContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateProfileContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ciData' => 'map[string,object]',
        'contactWithOffers' => 'bool',
        'countryName' => 'string',
        'displayName' => 'string',
        'emailAddress' => 'string',
        'hasAccount' => 'bool',
        'language' => 'string',
        'phoneNumber' => 'string',
        'profileState' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ciData' => null,
        'contactWithOffers' => null,
        'countryName' => null,
        'displayName' => null,
        'emailAddress' => null,
        'hasAccount' => null,
        'language' => null,
        'phoneNumber' => null,
        'profileState' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ciData' => 'ciData',
        'contactWithOffers' => 'contactWithOffers',
        'countryName' => 'countryName',
        'displayName' => 'displayName',
        'emailAddress' => 'emailAddress',
        'hasAccount' => 'hasAccount',
        'language' => 'language',
        'phoneNumber' => 'phoneNumber',
        'profileState' => 'profileState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ciData' => 'setCiData',
        'contactWithOffers' => 'setContactWithOffers',
        'countryName' => 'setCountryName',
        'displayName' => 'setDisplayName',
        'emailAddress' => 'setEmailAddress',
        'hasAccount' => 'setHasAccount',
        'language' => 'setLanguage',
        'phoneNumber' => 'setPhoneNumber',
        'profileState' => 'setProfileState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ciData' => 'getCiData',
        'contactWithOffers' => 'getContactWithOffers',
        'countryName' => 'getCountryName',
        'displayName' => 'getDisplayName',
        'emailAddress' => 'getEmailAddress',
        'hasAccount' => 'getHasAccount',
        'language' => 'getLanguage',
        'phoneNumber' => 'getPhoneNumber',
        'profileState' => 'getProfileState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROFILE_STATE_CUSTOM = 'custom';
    const PROFILE_STATE_CUSTOM_READ_ONLY = 'customReadOnly';
    const PROFILE_STATE_READ_ONLY = 'readOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileStateAllowableValues()
    {
        return [
            self::PROFILE_STATE_CUSTOM,
            self::PROFILE_STATE_CUSTOM_READ_ONLY,
            self::PROFILE_STATE_READ_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ciData'] = isset($data['ciData']) ? $data['ciData'] : null;
        $this->container['contactWithOffers'] = isset($data['contactWithOffers']) ? $data['contactWithOffers'] : null;
        $this->container['countryName'] = isset($data['countryName']) ? $data['countryName'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['hasAccount'] = isset($data['hasAccount']) ? $data['hasAccount'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['profileState'] = isset($data['profileState']) ? $data['profileState'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProfileStateAllowableValues();
        if (!is_null($this->container['profileState']) && !in_array($this->container['profileState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'profileState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ciData
     *
     * @return map[string,object]
     */
    public function getCiData()
    {
        return $this->container['ciData'];
    }

    /**
     * Sets ciData
     *
     * @param map[string,object] $ciData ciData
     *
     * @return $this
     */
    public function setCiData($ciData)
    {
        $this->container['ciData'] = $ciData;

        return $this;
    }

    /**
     * Gets contactWithOffers
     *
     * @return bool
     */
    public function getContactWithOffers()
    {
        return $this->container['contactWithOffers'];
    }

    /**
     * Sets contactWithOffers
     *
     * @param bool $contactWithOffers contactWithOffers
     *
     * @return $this
     */
    public function setContactWithOffers($contactWithOffers)
    {
        $this->container['contactWithOffers'] = $contactWithOffers;

        return $this;
    }

    /**
     * Gets countryName
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['countryName'];
    }

    /**
     * Sets countryName
     *
     * @param string $countryName countryName
     *
     * @return $this
     */
    public function setCountryName($countryName)
    {
        $this->container['countryName'] = $countryName;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets hasAccount
     *
     * @return bool
     */
    public function getHasAccount()
    {
        return $this->container['hasAccount'];
    }

    /**
     * Sets hasAccount
     *
     * @param bool $hasAccount hasAccount
     *
     * @return $this
     */
    public function setHasAccount($hasAccount)
    {
        $this->container['hasAccount'] = $hasAccount;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string $phoneNumber phoneNumber
     *
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets profileState
     *
     * @return string
     */
    public function getProfileState()
    {
        return $this->container['profileState'];
    }

    /**
     * Sets profileState
     *
     * @param string $profileState The current state of the profile.
     *
     * @return $this
     */
    public function setProfileState($profileState)
    {
        $allowedValues = $this->getProfileStateAllowableValues();
        if (!is_null($profileState) && !in_array($profileState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'profileState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profileState'] = $profileState;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


