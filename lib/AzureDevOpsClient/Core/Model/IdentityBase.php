<?php
/**
 * IdentityBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Core
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Core\ObjectSerializer;

/**
 * IdentityBase Class Doc Comment
 *
 * @category Class
 * @description Base Identity class to allow \&quot;trimmed\&quot; identity class in the GetConnectionData API Makes sure that on-the-wire representations of the derived classes are compatible with each other (e.g. Server responds with PublicIdentity object while client deserializes it as Identity object) Derived classes should not have additional [DataMember] properties
 * @package  AzureDevOpsClient\Core
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IdentityBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IdentityBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customDisplayName' => 'string',
        'descriptor' => '\AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor',
        'id' => 'string',
        'isActive' => 'bool',
        'isContainer' => 'bool',
        'masterId' => 'string',
        'memberIds' => 'string[]',
        'memberOf' => '\AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[]',
        'members' => '\AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[]',
        'metaTypeId' => 'int',
        'properties' => '\AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\PropertiesCollection',
        'providerDisplayName' => 'string',
        'resourceVersion' => 'int',
        'socialDescriptor' => 'string',
        'subjectDescriptor' => 'string',
        'uniqueUserId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customDisplayName' => null,
        'descriptor' => null,
        'id' => 'uuid',
        'isActive' => null,
        'isContainer' => null,
        'masterId' => 'uuid',
        'memberIds' => 'uuid',
        'memberOf' => null,
        'members' => null,
        'metaTypeId' => 'int32',
        'properties' => null,
        'providerDisplayName' => null,
        'resourceVersion' => 'int32',
        'socialDescriptor' => null,
        'subjectDescriptor' => null,
        'uniqueUserId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customDisplayName' => 'customDisplayName',
        'descriptor' => 'descriptor',
        'id' => 'id',
        'isActive' => 'isActive',
        'isContainer' => 'isContainer',
        'masterId' => 'masterId',
        'memberIds' => 'memberIds',
        'memberOf' => 'memberOf',
        'members' => 'members',
        'metaTypeId' => 'metaTypeId',
        'properties' => 'properties',
        'providerDisplayName' => 'providerDisplayName',
        'resourceVersion' => 'resourceVersion',
        'socialDescriptor' => 'socialDescriptor',
        'subjectDescriptor' => 'subjectDescriptor',
        'uniqueUserId' => 'uniqueUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customDisplayName' => 'setCustomDisplayName',
        'descriptor' => 'setDescriptor',
        'id' => 'setId',
        'isActive' => 'setIsActive',
        'isContainer' => 'setIsContainer',
        'masterId' => 'setMasterId',
        'memberIds' => 'setMemberIds',
        'memberOf' => 'setMemberOf',
        'members' => 'setMembers',
        'metaTypeId' => 'setMetaTypeId',
        'properties' => 'setProperties',
        'providerDisplayName' => 'setProviderDisplayName',
        'resourceVersion' => 'setResourceVersion',
        'socialDescriptor' => 'setSocialDescriptor',
        'subjectDescriptor' => 'setSubjectDescriptor',
        'uniqueUserId' => 'setUniqueUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customDisplayName' => 'getCustomDisplayName',
        'descriptor' => 'getDescriptor',
        'id' => 'getId',
        'isActive' => 'getIsActive',
        'isContainer' => 'getIsContainer',
        'masterId' => 'getMasterId',
        'memberIds' => 'getMemberIds',
        'memberOf' => 'getMemberOf',
        'members' => 'getMembers',
        'metaTypeId' => 'getMetaTypeId',
        'properties' => 'getProperties',
        'providerDisplayName' => 'getProviderDisplayName',
        'resourceVersion' => 'getResourceVersion',
        'socialDescriptor' => 'getSocialDescriptor',
        'subjectDescriptor' => 'getSubjectDescriptor',
        'uniqueUserId' => 'getUniqueUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customDisplayName'] = isset($data['customDisplayName']) ? $data['customDisplayName'] : null;
        $this->container['descriptor'] = isset($data['descriptor']) ? $data['descriptor'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['isContainer'] = isset($data['isContainer']) ? $data['isContainer'] : null;
        $this->container['masterId'] = isset($data['masterId']) ? $data['masterId'] : null;
        $this->container['memberIds'] = isset($data['memberIds']) ? $data['memberIds'] : null;
        $this->container['memberOf'] = isset($data['memberOf']) ? $data['memberOf'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['metaTypeId'] = isset($data['metaTypeId']) ? $data['metaTypeId'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['providerDisplayName'] = isset($data['providerDisplayName']) ? $data['providerDisplayName'] : null;
        $this->container['resourceVersion'] = isset($data['resourceVersion']) ? $data['resourceVersion'] : null;
        $this->container['socialDescriptor'] = isset($data['socialDescriptor']) ? $data['socialDescriptor'] : null;
        $this->container['subjectDescriptor'] = isset($data['subjectDescriptor']) ? $data['subjectDescriptor'] : null;
        $this->container['uniqueUserId'] = isset($data['uniqueUserId']) ? $data['uniqueUserId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customDisplayName
     *
     * @return string
     */
    public function getCustomDisplayName()
    {
        return $this->container['customDisplayName'];
    }

    /**
     * Sets customDisplayName
     *
     * @param string $customDisplayName The custom display name for the identity (if any). Setting this property to an empty string will clear the existing custom display name. Setting this property to null will not affect the existing persisted value (since null values do not get sent over the wire or to the database)
     *
     * @return $this
     */
    public function setCustomDisplayName($customDisplayName)
    {
        $this->container['customDisplayName'] = $customDisplayName;

        return $this;
    }

    /**
     * Gets descriptor
     *
     * @return \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor
     */
    public function getDescriptor()
    {
        return $this->container['descriptor'];
    }

    /**
     * Sets descriptor
     *
     * @param \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor $descriptor descriptor
     *
     * @return $this
     */
    public function setDescriptor($descriptor)
    {
        $this->container['descriptor'] = $descriptor;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets isContainer
     *
     * @return bool
     */
    public function getIsContainer()
    {
        return $this->container['isContainer'];
    }

    /**
     * Sets isContainer
     *
     * @param bool $isContainer isContainer
     *
     * @return $this
     */
    public function setIsContainer($isContainer)
    {
        $this->container['isContainer'] = $isContainer;

        return $this;
    }

    /**
     * Gets masterId
     *
     * @return string
     */
    public function getMasterId()
    {
        return $this->container['masterId'];
    }

    /**
     * Sets masterId
     *
     * @param string $masterId masterId
     *
     * @return $this
     */
    public function setMasterId($masterId)
    {
        $this->container['masterId'] = $masterId;

        return $this;
    }

    /**
     * Gets memberIds
     *
     * @return string[]
     */
    public function getMemberIds()
    {
        return $this->container['memberIds'];
    }

    /**
     * Sets memberIds
     *
     * @param string[] $memberIds memberIds
     *
     * @return $this
     */
    public function setMemberIds($memberIds)
    {
        $this->container['memberIds'] = $memberIds;

        return $this;
    }

    /**
     * Gets memberOf
     *
     * @return \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[]
     */
    public function getMemberOf()
    {
        return $this->container['memberOf'];
    }

    /**
     * Sets memberOf
     *
     * @param \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[] $memberOf memberOf
     *
     * @return $this
     */
    public function setMemberOf($memberOf)
    {
        $this->container['memberOf'] = $memberOf;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\IdentityDescriptor[] $members members
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets metaTypeId
     *
     * @return int
     */
    public function getMetaTypeId()
    {
        return $this->container['metaTypeId'];
    }

    /**
     * Sets metaTypeId
     *
     * @param int $metaTypeId metaTypeId
     *
     * @return $this
     */
    public function setMetaTypeId($metaTypeId)
    {
        $this->container['metaTypeId'] = $metaTypeId;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \AzureDevOpsClient\Core\AzureDevOpsClient\Core\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets providerDisplayName
     *
     * @return string
     */
    public function getProviderDisplayName()
    {
        return $this->container['providerDisplayName'];
    }

    /**
     * Sets providerDisplayName
     *
     * @param string $providerDisplayName The display name for the identity as specified by the source identity provider.
     *
     * @return $this
     */
    public function setProviderDisplayName($providerDisplayName)
    {
        $this->container['providerDisplayName'] = $providerDisplayName;

        return $this;
    }

    /**
     * Gets resourceVersion
     *
     * @return int
     */
    public function getResourceVersion()
    {
        return $this->container['resourceVersion'];
    }

    /**
     * Sets resourceVersion
     *
     * @param int $resourceVersion resourceVersion
     *
     * @return $this
     */
    public function setResourceVersion($resourceVersion)
    {
        $this->container['resourceVersion'] = $resourceVersion;

        return $this;
    }

    /**
     * Gets socialDescriptor
     *
     * @return string
     */
    public function getSocialDescriptor()
    {
        return $this->container['socialDescriptor'];
    }

    /**
     * Sets socialDescriptor
     *
     * @param string $socialDescriptor socialDescriptor
     *
     * @return $this
     */
    public function setSocialDescriptor($socialDescriptor)
    {
        $this->container['socialDescriptor'] = $socialDescriptor;

        return $this;
    }

    /**
     * Gets subjectDescriptor
     *
     * @return string
     */
    public function getSubjectDescriptor()
    {
        return $this->container['subjectDescriptor'];
    }

    /**
     * Sets subjectDescriptor
     *
     * @param string $subjectDescriptor subjectDescriptor
     *
     * @return $this
     */
    public function setSubjectDescriptor($subjectDescriptor)
    {
        $this->container['subjectDescriptor'] = $subjectDescriptor;

        return $this;
    }

    /**
     * Gets uniqueUserId
     *
     * @return int
     */
    public function getUniqueUserId()
    {
        return $this->container['uniqueUserId'];
    }

    /**
     * Sets uniqueUserId
     *
     * @param int $uniqueUserId uniqueUserId
     *
     * @return $this
     */
    public function setUniqueUserId($uniqueUserId)
    {
        $this->container['uniqueUserId'] = $uniqueUserId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


