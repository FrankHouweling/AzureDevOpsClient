<?php
/**
 * AuditStream
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Audit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Audit
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Audit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Audit\ObjectSerializer;

/**
 * AuditStream Class Doc Comment
 *
 * @category Class
 * @description This class represents an audit stream
 * @package  FrankHouweling\AzureDevOpsClient\Audit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditStream implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuditStream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'consumerInputs' => 'map[string,string]',
        'consumerType' => 'string',
        'createdTime' => '\DateTime',
        'displayName' => 'string',
        'id' => 'int',
        'status' => 'string',
        'statusReason' => 'string',
        'updatedTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'consumerInputs' => null,
        'consumerType' => null,
        'createdTime' => 'date-time',
        'displayName' => null,
        'id' => 'int32',
        'status' => null,
        'statusReason' => null,
        'updatedTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consumerInputs' => 'consumerInputs',
        'consumerType' => 'consumerType',
        'createdTime' => 'createdTime',
        'displayName' => 'displayName',
        'id' => 'id',
        'status' => 'status',
        'statusReason' => 'statusReason',
        'updatedTime' => 'updatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consumerInputs' => 'setConsumerInputs',
        'consumerType' => 'setConsumerType',
        'createdTime' => 'setCreatedTime',
        'displayName' => 'setDisplayName',
        'id' => 'setId',
        'status' => 'setStatus',
        'statusReason' => 'setStatusReason',
        'updatedTime' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consumerInputs' => 'getConsumerInputs',
        'consumerType' => 'getConsumerType',
        'createdTime' => 'getCreatedTime',
        'displayName' => 'getDisplayName',
        'id' => 'getId',
        'status' => 'getStatus',
        'statusReason' => 'getStatusReason',
        'updatedTime' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_UNKNOWN = 'unknown';
    const STATUS_ENABLED = 'enabled';
    const STATUS_DISABLED_BY_USER = 'disabledByUser';
    const STATUS_DISABLED_BY_SYSTEM = 'disabledBySystem';
    const STATUS_DELETED = 'deleted';
    const STATUS_BACKFILLING = 'backfilling';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_ENABLED,
            self::STATUS_DISABLED_BY_USER,
            self::STATUS_DISABLED_BY_SYSTEM,
            self::STATUS_DELETED,
            self::STATUS_BACKFILLING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consumerInputs'] = isset($data['consumerInputs']) ? $data['consumerInputs'] : null;
        $this->container['consumerType'] = isset($data['consumerType']) ? $data['consumerType'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusReason'] = isset($data['statusReason']) ? $data['statusReason'] : null;
        $this->container['updatedTime'] = isset($data['updatedTime']) ? $data['updatedTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consumerInputs
     *
     * @return map[string,string]
     */
    public function getConsumerInputs()
    {
        return $this->container['consumerInputs'];
    }

    /**
     * Sets consumerInputs
     *
     * @param map[string,string] $consumerInputs Inputs used to communicate with external service. Inputs could be url, a connection string, a token, etc.
     *
     * @return $this
     */
    public function setConsumerInputs($consumerInputs)
    {
        $this->container['consumerInputs'] = $consumerInputs;

        return $this;
    }

    /**
     * Gets consumerType
     *
     * @return string
     */
    public function getConsumerType()
    {
        return $this->container['consumerType'];
    }

    /**
     * Sets consumerType
     *
     * @param string $consumerType Type of the consumer, i.e. splunk, azureEventHub, etc.
     *
     * @return $this
     */
    public function setConsumerType($consumerType)
    {
        $this->container['consumerType'] = $consumerType;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param \DateTime $createdTime The time when the stream was created
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Used to identify individual streams
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique stream identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the stream, Enabled, Disabled
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusReason
     *
     * @return string
     */
    public function getStatusReason()
    {
        return $this->container['statusReason'];
    }

    /**
     * Sets statusReason
     *
     * @param string $statusReason Reason for the current stream status, i.e. Disabled by the system, Invalid credentials, etc.
     *
     * @return $this
     */
    public function setStatusReason($statusReason)
    {
        $this->container['statusReason'] = $statusReason;

        return $this;
    }

    /**
     * Gets updatedTime
     *
     * @return \DateTime
     */
    public function getUpdatedTime()
    {
        return $this->container['updatedTime'];
    }

    /**
     * Sets updatedTime
     *
     * @param \DateTime $updatedTime The time when the stream was last updated
     *
     * @return $this
     */
    public function setUpdatedTime($updatedTime)
    {
        $this->container['updatedTime'] = $updatedTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


