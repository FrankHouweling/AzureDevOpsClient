<?php
/**
 * AuditLogEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Audit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Audit
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Audit\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Audit\ObjectSerializer;

/**
 * AuditLogEntry Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Audit
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditLogEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuditLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actionId' => 'string',
        'activityId' => 'string',
        'actorCUID' => 'string',
        'actorUserId' => 'string',
        'authenticationMechanism' => 'string',
        'correlationId' => 'string',
        'data' => 'map[string,object]',
        'id' => 'string',
        'ipAddress' => 'string',
        'projectId' => 'string',
        'scopeId' => 'string',
        'scopeType' => 'string',
        'timestamp' => '\DateTime',
        'userAgent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actionId' => null,
        'activityId' => 'uuid',
        'actorCUID' => 'uuid',
        'actorUserId' => 'uuid',
        'authenticationMechanism' => null,
        'correlationId' => 'uuid',
        'data' => null,
        'id' => 'uuid',
        'ipAddress' => null,
        'projectId' => 'uuid',
        'scopeId' => 'uuid',
        'scopeType' => null,
        'timestamp' => 'date-time',
        'userAgent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actionId' => 'actionId',
        'activityId' => 'activityId',
        'actorCUID' => 'actorCUID',
        'actorUserId' => 'actorUserId',
        'authenticationMechanism' => 'authenticationMechanism',
        'correlationId' => 'correlationId',
        'data' => 'data',
        'id' => 'id',
        'ipAddress' => 'ipAddress',
        'projectId' => 'projectId',
        'scopeId' => 'scopeId',
        'scopeType' => 'scopeType',
        'timestamp' => 'timestamp',
        'userAgent' => 'userAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actionId' => 'setActionId',
        'activityId' => 'setActivityId',
        'actorCUID' => 'setActorCUID',
        'actorUserId' => 'setActorUserId',
        'authenticationMechanism' => 'setAuthenticationMechanism',
        'correlationId' => 'setCorrelationId',
        'data' => 'setData',
        'id' => 'setId',
        'ipAddress' => 'setIpAddress',
        'projectId' => 'setProjectId',
        'scopeId' => 'setScopeId',
        'scopeType' => 'setScopeType',
        'timestamp' => 'setTimestamp',
        'userAgent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actionId' => 'getActionId',
        'activityId' => 'getActivityId',
        'actorCUID' => 'getActorCUID',
        'actorUserId' => 'getActorUserId',
        'authenticationMechanism' => 'getAuthenticationMechanism',
        'correlationId' => 'getCorrelationId',
        'data' => 'getData',
        'id' => 'getId',
        'ipAddress' => 'getIpAddress',
        'projectId' => 'getProjectId',
        'scopeId' => 'getScopeId',
        'scopeType' => 'getScopeType',
        'timestamp' => 'getTimestamp',
        'userAgent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCOPE_TYPE_UNKNOWN = 'unknown';
    const SCOPE_TYPE_DEPLOYMENT = 'deployment';
    const SCOPE_TYPE_ENTERPRISE = 'enterprise';
    const SCOPE_TYPE_ORGANIZATION = 'organization';
    const SCOPE_TYPE_PROJECT = 'project';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeTypeAllowableValues()
    {
        return [
            self::SCOPE_TYPE_UNKNOWN,
            self::SCOPE_TYPE_DEPLOYMENT,
            self::SCOPE_TYPE_ENTERPRISE,
            self::SCOPE_TYPE_ORGANIZATION,
            self::SCOPE_TYPE_PROJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actionId'] = isset($data['actionId']) ? $data['actionId'] : null;
        $this->container['activityId'] = isset($data['activityId']) ? $data['activityId'] : null;
        $this->container['actorCUID'] = isset($data['actorCUID']) ? $data['actorCUID'] : null;
        $this->container['actorUserId'] = isset($data['actorUserId']) ? $data['actorUserId'] : null;
        $this->container['authenticationMechanism'] = isset($data['authenticationMechanism']) ? $data['authenticationMechanism'] : null;
        $this->container['correlationId'] = isset($data['correlationId']) ? $data['correlationId'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['scopeId'] = isset($data['scopeId']) ? $data['scopeId'] : null;
        $this->container['scopeType'] = isset($data['scopeType']) ? $data['scopeType'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['userAgent'] = isset($data['userAgent']) ? $data['userAgent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScopeTypeAllowableValues();
        if (!is_null($this->container['scopeType']) && !in_array($this->container['scopeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scopeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actionId
     *
     * @return string
     */
    public function getActionId()
    {
        return $this->container['actionId'];
    }

    /**
     * Sets actionId
     *
     * @param string $actionId The action if for the event, i.e Git.CreateRepo, Project.RenameProject
     *
     * @return $this
     */
    public function setActionId($actionId)
    {
        $this->container['actionId'] = $actionId;

        return $this;
    }

    /**
     * Gets activityId
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activityId'];
    }

    /**
     * Sets activityId
     *
     * @param string $activityId ActivityId
     *
     * @return $this
     */
    public function setActivityId($activityId)
    {
        $this->container['activityId'] = $activityId;

        return $this;
    }

    /**
     * Gets actorCUID
     *
     * @return string
     */
    public function getActorCUID()
    {
        return $this->container['actorCUID'];
    }

    /**
     * Sets actorCUID
     *
     * @param string $actorCUID The Actor's CUID
     *
     * @return $this
     */
    public function setActorCUID($actorCUID)
    {
        $this->container['actorCUID'] = $actorCUID;

        return $this;
    }

    /**
     * Gets actorUserId
     *
     * @return string
     */
    public function getActorUserId()
    {
        return $this->container['actorUserId'];
    }

    /**
     * Sets actorUserId
     *
     * @param string $actorUserId The Actor's User Id
     *
     * @return $this
     */
    public function setActorUserId($actorUserId)
    {
        $this->container['actorUserId'] = $actorUserId;

        return $this;
    }

    /**
     * Gets authenticationMechanism
     *
     * @return string
     */
    public function getAuthenticationMechanism()
    {
        return $this->container['authenticationMechanism'];
    }

    /**
     * Sets authenticationMechanism
     *
     * @param string $authenticationMechanism Type of authentication used by the author
     *
     * @return $this
     */
    public function setAuthenticationMechanism($authenticationMechanism)
    {
        $this->container['authenticationMechanism'] = $authenticationMechanism;

        return $this;
    }

    /**
     * Gets correlationId
     *
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlationId'];
    }

    /**
     * Sets correlationId
     *
     * @param string $correlationId This allows us to group things together, like one user action that caused a cascade of event entries (project creation).
     *
     * @return $this
     */
    public function setCorrelationId($correlationId)
    {
        $this->container['correlationId'] = $correlationId;

        return $this;
    }

    /**
     * Gets data
     *
     * @return map[string,object]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param map[string,object] $data External data such as CUIDs, item names, etc.
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id EventId, should be unique
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string $ipAddress IP Address where the event was originated
     *
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId When specified, the id of the project this event is associated to
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets scopeId
     *
     * @return string
     */
    public function getScopeId()
    {
        return $this->container['scopeId'];
    }

    /**
     * Sets scopeId
     *
     * @param string $scopeId The organization Id (Organization is the only scope currently supported)
     *
     * @return $this
     */
    public function setScopeId($scopeId)
    {
        $this->container['scopeId'] = $scopeId;

        return $this;
    }

    /**
     * Gets scopeType
     *
     * @return string
     */
    public function getScopeType()
    {
        return $this->container['scopeType'];
    }

    /**
     * Sets scopeType
     *
     * @param string $scopeType The type of the scope (Organization is only scope currently supported)
     *
     * @return $this
     */
    public function setScopeType($scopeType)
    {
        $allowedValues = $this->getScopeTypeAllowableValues();
        if (!is_null($scopeType) && !in_array($scopeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scopeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scopeType'] = $scopeType;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp The time when the event occurred in UTC
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string $userAgent The user agent from the request
     *
     * @return $this
     */
    public function setUserAgent($userAgent)
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


