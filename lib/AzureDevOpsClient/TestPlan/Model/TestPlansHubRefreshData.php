<?php
/**
 * TestPlansHubRefreshData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestPlan
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestPlan\ObjectSerializer;

/**
 * TestPlansHubRefreshData Class Doc Comment
 *
 * @category Class
 * @description This data model is used in TestPlansHubRefreshDataProvider and populates the data required for initial page load
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestPlansHubRefreshData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestPlansHubRefreshData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'defineColumnOptionFields' => 'string[]',
        'errorMessage' => 'string',
        'executeColumnOptionFields' => 'string[]',
        'isAdvancedExtensionEnabled' => 'bool',
        'selectedSuiteId' => 'int',
        'testCasePageSize' => 'int',
        'testCases' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]',
        'testCasesContinuationToken' => 'string',
        'testPlan' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPlanDetailedReference',
        'testPointPageSize' => 'int',
        'testPoints' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPoint[]',
        'testPointsContinuationToken' => 'string',
        'testSuites' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuite[]',
        'testSuitesContinuationToken' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'defineColumnOptionFields' => null,
        'errorMessage' => null,
        'executeColumnOptionFields' => null,
        'isAdvancedExtensionEnabled' => null,
        'selectedSuiteId' => 'int32',
        'testCasePageSize' => 'int32',
        'testCases' => null,
        'testCasesContinuationToken' => null,
        'testPlan' => null,
        'testPointPageSize' => 'int32',
        'testPoints' => null,
        'testPointsContinuationToken' => null,
        'testSuites' => null,
        'testSuitesContinuationToken' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'defineColumnOptionFields' => 'defineColumnOptionFields',
        'errorMessage' => 'errorMessage',
        'executeColumnOptionFields' => 'executeColumnOptionFields',
        'isAdvancedExtensionEnabled' => 'isAdvancedExtensionEnabled',
        'selectedSuiteId' => 'selectedSuiteId',
        'testCasePageSize' => 'testCasePageSize',
        'testCases' => 'testCases',
        'testCasesContinuationToken' => 'testCasesContinuationToken',
        'testPlan' => 'testPlan',
        'testPointPageSize' => 'testPointPageSize',
        'testPoints' => 'testPoints',
        'testPointsContinuationToken' => 'testPointsContinuationToken',
        'testSuites' => 'testSuites',
        'testSuitesContinuationToken' => 'testSuitesContinuationToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'defineColumnOptionFields' => 'setDefineColumnOptionFields',
        'errorMessage' => 'setErrorMessage',
        'executeColumnOptionFields' => 'setExecuteColumnOptionFields',
        'isAdvancedExtensionEnabled' => 'setIsAdvancedExtensionEnabled',
        'selectedSuiteId' => 'setSelectedSuiteId',
        'testCasePageSize' => 'setTestCasePageSize',
        'testCases' => 'setTestCases',
        'testCasesContinuationToken' => 'setTestCasesContinuationToken',
        'testPlan' => 'setTestPlan',
        'testPointPageSize' => 'setTestPointPageSize',
        'testPoints' => 'setTestPoints',
        'testPointsContinuationToken' => 'setTestPointsContinuationToken',
        'testSuites' => 'setTestSuites',
        'testSuitesContinuationToken' => 'setTestSuitesContinuationToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'defineColumnOptionFields' => 'getDefineColumnOptionFields',
        'errorMessage' => 'getErrorMessage',
        'executeColumnOptionFields' => 'getExecuteColumnOptionFields',
        'isAdvancedExtensionEnabled' => 'getIsAdvancedExtensionEnabled',
        'selectedSuiteId' => 'getSelectedSuiteId',
        'testCasePageSize' => 'getTestCasePageSize',
        'testCases' => 'getTestCases',
        'testCasesContinuationToken' => 'getTestCasesContinuationToken',
        'testPlan' => 'getTestPlan',
        'testPointPageSize' => 'getTestPointPageSize',
        'testPoints' => 'getTestPoints',
        'testPointsContinuationToken' => 'getTestPointsContinuationToken',
        'testSuites' => 'getTestSuites',
        'testSuitesContinuationToken' => 'getTestSuitesContinuationToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['defineColumnOptionFields'] = isset($data['defineColumnOptionFields']) ? $data['defineColumnOptionFields'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['executeColumnOptionFields'] = isset($data['executeColumnOptionFields']) ? $data['executeColumnOptionFields'] : null;
        $this->container['isAdvancedExtensionEnabled'] = isset($data['isAdvancedExtensionEnabled']) ? $data['isAdvancedExtensionEnabled'] : null;
        $this->container['selectedSuiteId'] = isset($data['selectedSuiteId']) ? $data['selectedSuiteId'] : null;
        $this->container['testCasePageSize'] = isset($data['testCasePageSize']) ? $data['testCasePageSize'] : null;
        $this->container['testCases'] = isset($data['testCases']) ? $data['testCases'] : null;
        $this->container['testCasesContinuationToken'] = isset($data['testCasesContinuationToken']) ? $data['testCasesContinuationToken'] : null;
        $this->container['testPlan'] = isset($data['testPlan']) ? $data['testPlan'] : null;
        $this->container['testPointPageSize'] = isset($data['testPointPageSize']) ? $data['testPointPageSize'] : null;
        $this->container['testPoints'] = isset($data['testPoints']) ? $data['testPoints'] : null;
        $this->container['testPointsContinuationToken'] = isset($data['testPointsContinuationToken']) ? $data['testPointsContinuationToken'] : null;
        $this->container['testSuites'] = isset($data['testSuites']) ? $data['testSuites'] : null;
        $this->container['testSuitesContinuationToken'] = isset($data['testSuitesContinuationToken']) ? $data['testSuitesContinuationToken'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets defineColumnOptionFields
     *
     * @return string[]
     */
    public function getDefineColumnOptionFields()
    {
        return $this->container['defineColumnOptionFields'];
    }

    /**
     * Sets defineColumnOptionFields
     *
     * @param string[] $defineColumnOptionFields defineColumnOptionFields
     *
     * @return $this
     */
    public function setDefineColumnOptionFields($defineColumnOptionFields)
    {
        $this->container['defineColumnOptionFields'] = $defineColumnOptionFields;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage errorMessage
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets executeColumnOptionFields
     *
     * @return string[]
     */
    public function getExecuteColumnOptionFields()
    {
        return $this->container['executeColumnOptionFields'];
    }

    /**
     * Sets executeColumnOptionFields
     *
     * @param string[] $executeColumnOptionFields executeColumnOptionFields
     *
     * @return $this
     */
    public function setExecuteColumnOptionFields($executeColumnOptionFields)
    {
        $this->container['executeColumnOptionFields'] = $executeColumnOptionFields;

        return $this;
    }

    /**
     * Gets isAdvancedExtensionEnabled
     *
     * @return bool
     */
    public function getIsAdvancedExtensionEnabled()
    {
        return $this->container['isAdvancedExtensionEnabled'];
    }

    /**
     * Sets isAdvancedExtensionEnabled
     *
     * @param bool $isAdvancedExtensionEnabled isAdvancedExtensionEnabled
     *
     * @return $this
     */
    public function setIsAdvancedExtensionEnabled($isAdvancedExtensionEnabled)
    {
        $this->container['isAdvancedExtensionEnabled'] = $isAdvancedExtensionEnabled;

        return $this;
    }

    /**
     * Gets selectedSuiteId
     *
     * @return int
     */
    public function getSelectedSuiteId()
    {
        return $this->container['selectedSuiteId'];
    }

    /**
     * Sets selectedSuiteId
     *
     * @param int $selectedSuiteId selectedSuiteId
     *
     * @return $this
     */
    public function setSelectedSuiteId($selectedSuiteId)
    {
        $this->container['selectedSuiteId'] = $selectedSuiteId;

        return $this;
    }

    /**
     * Gets testCasePageSize
     *
     * @return int
     */
    public function getTestCasePageSize()
    {
        return $this->container['testCasePageSize'];
    }

    /**
     * Sets testCasePageSize
     *
     * @param int $testCasePageSize testCasePageSize
     *
     * @return $this
     */
    public function setTestCasePageSize($testCasePageSize)
    {
        $this->container['testCasePageSize'] = $testCasePageSize;

        return $this;
    }

    /**
     * Gets testCases
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]
     */
    public function getTestCases()
    {
        return $this->container['testCases'];
    }

    /**
     * Sets testCases
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[] $testCases testCases
     *
     * @return $this
     */
    public function setTestCases($testCases)
    {
        $this->container['testCases'] = $testCases;

        return $this;
    }

    /**
     * Gets testCasesContinuationToken
     *
     * @return string
     */
    public function getTestCasesContinuationToken()
    {
        return $this->container['testCasesContinuationToken'];
    }

    /**
     * Sets testCasesContinuationToken
     *
     * @param string $testCasesContinuationToken testCasesContinuationToken
     *
     * @return $this
     */
    public function setTestCasesContinuationToken($testCasesContinuationToken)
    {
        $this->container['testCasesContinuationToken'] = $testCasesContinuationToken;

        return $this;
    }

    /**
     * Gets testPlan
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPlanDetailedReference
     */
    public function getTestPlan()
    {
        return $this->container['testPlan'];
    }

    /**
     * Sets testPlan
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPlanDetailedReference $testPlan testPlan
     *
     * @return $this
     */
    public function setTestPlan($testPlan)
    {
        $this->container['testPlan'] = $testPlan;

        return $this;
    }

    /**
     * Gets testPointPageSize
     *
     * @return int
     */
    public function getTestPointPageSize()
    {
        return $this->container['testPointPageSize'];
    }

    /**
     * Sets testPointPageSize
     *
     * @param int $testPointPageSize testPointPageSize
     *
     * @return $this
     */
    public function setTestPointPageSize($testPointPageSize)
    {
        $this->container['testPointPageSize'] = $testPointPageSize;

        return $this;
    }

    /**
     * Gets testPoints
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPoint[]
     */
    public function getTestPoints()
    {
        return $this->container['testPoints'];
    }

    /**
     * Sets testPoints
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestPoint[] $testPoints testPoints
     *
     * @return $this
     */
    public function setTestPoints($testPoints)
    {
        $this->container['testPoints'] = $testPoints;

        return $this;
    }

    /**
     * Gets testPointsContinuationToken
     *
     * @return string
     */
    public function getTestPointsContinuationToken()
    {
        return $this->container['testPointsContinuationToken'];
    }

    /**
     * Sets testPointsContinuationToken
     *
     * @param string $testPointsContinuationToken testPointsContinuationToken
     *
     * @return $this
     */
    public function setTestPointsContinuationToken($testPointsContinuationToken)
    {
        $this->container['testPointsContinuationToken'] = $testPointsContinuationToken;

        return $this;
    }

    /**
     * Gets testSuites
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuite[]
     */
    public function getTestSuites()
    {
        return $this->container['testSuites'];
    }

    /**
     * Sets testSuites
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuite[] $testSuites testSuites
     *
     * @return $this
     */
    public function setTestSuites($testSuites)
    {
        $this->container['testSuites'] = $testSuites;

        return $this;
    }

    /**
     * Gets testSuitesContinuationToken
     *
     * @return string
     */
    public function getTestSuitesContinuationToken()
    {
        return $this->container['testSuitesContinuationToken'];
    }

    /**
     * Sets testSuitesContinuationToken
     *
     * @param string $testSuitesContinuationToken testSuitesContinuationToken
     *
     * @return $this
     */
    public function setTestSuitesContinuationToken($testSuitesContinuationToken)
    {
        $this->container['testSuitesContinuationToken'] = $testSuitesContinuationToken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


