<?php
/**
 * TestPointResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestPlan
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestPlan\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestPlan\ObjectSerializer;

/**
 * TestPointResults Class Doc Comment
 *
 * @category Class
 * @description Test Point Results
 * @package  FrankHouweling\AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestPointResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestPointResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'failureType' => 'string',
        'lastResolutionState' => 'string',
        'lastResultDetails' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\LastResultDetails',
        'lastResultId' => 'int',
        'lastResultState' => 'string',
        'lastRunBuildNumber' => 'string',
        'lastTestRunId' => 'int',
        'outcome' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'failureType' => null,
        'lastResolutionState' => null,
        'lastResultDetails' => null,
        'lastResultId' => 'int32',
        'lastResultState' => null,
        'lastRunBuildNumber' => null,
        'lastTestRunId' => 'int32',
        'outcome' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'failureType' => 'failureType',
        'lastResolutionState' => 'lastResolutionState',
        'lastResultDetails' => 'lastResultDetails',
        'lastResultId' => 'lastResultId',
        'lastResultState' => 'lastResultState',
        'lastRunBuildNumber' => 'lastRunBuildNumber',
        'lastTestRunId' => 'lastTestRunId',
        'outcome' => 'outcome',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'failureType' => 'setFailureType',
        'lastResolutionState' => 'setLastResolutionState',
        'lastResultDetails' => 'setLastResultDetails',
        'lastResultId' => 'setLastResultId',
        'lastResultState' => 'setLastResultState',
        'lastRunBuildNumber' => 'setLastRunBuildNumber',
        'lastTestRunId' => 'setLastTestRunId',
        'outcome' => 'setOutcome',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'failureType' => 'getFailureType',
        'lastResolutionState' => 'getLastResolutionState',
        'lastResultDetails' => 'getLastResultDetails',
        'lastResultId' => 'getLastResultId',
        'lastResultState' => 'getLastResultState',
        'lastRunBuildNumber' => 'getLastRunBuildNumber',
        'lastTestRunId' => 'getLastTestRunId',
        'outcome' => 'getOutcome',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FAILURE_TYPE_NONE = 'none';
    const FAILURE_TYPE_REGRESSION = 'regression';
    const FAILURE_TYPE_NEW_ISSUE = 'new_Issue';
    const FAILURE_TYPE_KNOWN_ISSUE = 'known_Issue';
    const FAILURE_TYPE_UNKNOWN = 'unknown';
    const FAILURE_TYPE_NULL_VALUE = 'null_Value';
    const FAILURE_TYPE_MAX_VALUE = 'maxValue';
    const LAST_RESOLUTION_STATE_NONE = 'none';
    const LAST_RESOLUTION_STATE_NEEDS_INVESTIGATION = 'needsInvestigation';
    const LAST_RESOLUTION_STATE_TEST_ISSUE = 'testIssue';
    const LAST_RESOLUTION_STATE_PRODUCT_ISSUE = 'productIssue';
    const LAST_RESOLUTION_STATE_CONFIGURATION_ISSUE = 'configurationIssue';
    const LAST_RESOLUTION_STATE_NULL_VALUE = 'nullValue';
    const LAST_RESOLUTION_STATE_MAX_VALUE = 'maxValue';
    const LAST_RESULT_STATE_UNSPECIFIED = 'unspecified';
    const LAST_RESULT_STATE_PENDING = 'pending';
    const LAST_RESULT_STATE_QUEUED = 'queued';
    const LAST_RESULT_STATE_IN_PROGRESS = 'inProgress';
    const LAST_RESULT_STATE_PAUSED = 'paused';
    const LAST_RESULT_STATE_COMPLETED = 'completed';
    const LAST_RESULT_STATE_MAX_VALUE = 'maxValue';
    const OUTCOME_UNSPECIFIED = 'unspecified';
    const OUTCOME_NONE = 'none';
    const OUTCOME_PASSED = 'passed';
    const OUTCOME_FAILED = 'failed';
    const OUTCOME_INCONCLUSIVE = 'inconclusive';
    const OUTCOME_TIMEOUT = 'timeout';
    const OUTCOME_ABORTED = 'aborted';
    const OUTCOME_BLOCKED = 'blocked';
    const OUTCOME_NOT_EXECUTED = 'notExecuted';
    const OUTCOME_WARNING = 'warning';
    const OUTCOME_ERROR = 'error';
    const OUTCOME_NOT_APPLICABLE = 'notApplicable';
    const OUTCOME_PAUSED = 'paused';
    const OUTCOME_IN_PROGRESS = 'inProgress';
    const OUTCOME_NOT_IMPACTED = 'notImpacted';
    const OUTCOME_MAX_VALUE = 'maxValue';
    const STATE_NONE = 'none';
    const STATE_READY = 'ready';
    const STATE_COMPLETED = 'completed';
    const STATE_NOT_READY = 'notReady';
    const STATE_IN_PROGRESS = 'inProgress';
    const STATE_MAX_VALUE = 'maxValue';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailureTypeAllowableValues()
    {
        return [
            self::FAILURE_TYPE_NONE,
            self::FAILURE_TYPE_REGRESSION,
            self::FAILURE_TYPE_NEW_ISSUE,
            self::FAILURE_TYPE_KNOWN_ISSUE,
            self::FAILURE_TYPE_UNKNOWN,
            self::FAILURE_TYPE_NULL_VALUE,
            self::FAILURE_TYPE_MAX_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastResolutionStateAllowableValues()
    {
        return [
            self::LAST_RESOLUTION_STATE_NONE,
            self::LAST_RESOLUTION_STATE_NEEDS_INVESTIGATION,
            self::LAST_RESOLUTION_STATE_TEST_ISSUE,
            self::LAST_RESOLUTION_STATE_PRODUCT_ISSUE,
            self::LAST_RESOLUTION_STATE_CONFIGURATION_ISSUE,
            self::LAST_RESOLUTION_STATE_NULL_VALUE,
            self::LAST_RESOLUTION_STATE_MAX_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastResultStateAllowableValues()
    {
        return [
            self::LAST_RESULT_STATE_UNSPECIFIED,
            self::LAST_RESULT_STATE_PENDING,
            self::LAST_RESULT_STATE_QUEUED,
            self::LAST_RESULT_STATE_IN_PROGRESS,
            self::LAST_RESULT_STATE_PAUSED,
            self::LAST_RESULT_STATE_COMPLETED,
            self::LAST_RESULT_STATE_MAX_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutcomeAllowableValues()
    {
        return [
            self::OUTCOME_UNSPECIFIED,
            self::OUTCOME_NONE,
            self::OUTCOME_PASSED,
            self::OUTCOME_FAILED,
            self::OUTCOME_INCONCLUSIVE,
            self::OUTCOME_TIMEOUT,
            self::OUTCOME_ABORTED,
            self::OUTCOME_BLOCKED,
            self::OUTCOME_NOT_EXECUTED,
            self::OUTCOME_WARNING,
            self::OUTCOME_ERROR,
            self::OUTCOME_NOT_APPLICABLE,
            self::OUTCOME_PAUSED,
            self::OUTCOME_IN_PROGRESS,
            self::OUTCOME_NOT_IMPACTED,
            self::OUTCOME_MAX_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_NONE,
            self::STATE_READY,
            self::STATE_COMPLETED,
            self::STATE_NOT_READY,
            self::STATE_IN_PROGRESS,
            self::STATE_MAX_VALUE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['failureType'] = isset($data['failureType']) ? $data['failureType'] : null;
        $this->container['lastResolutionState'] = isset($data['lastResolutionState']) ? $data['lastResolutionState'] : null;
        $this->container['lastResultDetails'] = isset($data['lastResultDetails']) ? $data['lastResultDetails'] : null;
        $this->container['lastResultId'] = isset($data['lastResultId']) ? $data['lastResultId'] : null;
        $this->container['lastResultState'] = isset($data['lastResultState']) ? $data['lastResultState'] : null;
        $this->container['lastRunBuildNumber'] = isset($data['lastRunBuildNumber']) ? $data['lastRunBuildNumber'] : null;
        $this->container['lastTestRunId'] = isset($data['lastTestRunId']) ? $data['lastTestRunId'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFailureTypeAllowableValues();
        if (!is_null($this->container['failureType']) && !in_array($this->container['failureType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'failureType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLastResolutionStateAllowableValues();
        if (!is_null($this->container['lastResolutionState']) && !in_array($this->container['lastResolutionState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lastResolutionState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLastResultStateAllowableValues();
        if (!is_null($this->container['lastResultState']) && !in_array($this->container['lastResultState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lastResultState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($this->container['outcome']) && !in_array($this->container['outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'outcome', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets failureType
     *
     * @return string
     */
    public function getFailureType()
    {
        return $this->container['failureType'];
    }

    /**
     * Sets failureType
     *
     * @param string $failureType Failure Type for the Test Point
     *
     * @return $this
     */
    public function setFailureType($failureType)
    {
        $allowedValues = $this->getFailureTypeAllowableValues();
        if (!is_null($failureType) && !in_array($failureType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'failureType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failureType'] = $failureType;

        return $this;
    }

    /**
     * Gets lastResolutionState
     *
     * @return string
     */
    public function getLastResolutionState()
    {
        return $this->container['lastResolutionState'];
    }

    /**
     * Sets lastResolutionState
     *
     * @param string $lastResolutionState Last Resolution State Id for the Test Point
     *
     * @return $this
     */
    public function setLastResolutionState($lastResolutionState)
    {
        $allowedValues = $this->getLastResolutionStateAllowableValues();
        if (!is_null($lastResolutionState) && !in_array($lastResolutionState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lastResolutionState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lastResolutionState'] = $lastResolutionState;

        return $this;
    }

    /**
     * Gets lastResultDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\LastResultDetails
     */
    public function getLastResultDetails()
    {
        return $this->container['lastResultDetails'];
    }

    /**
     * Sets lastResultDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\LastResultDetails $lastResultDetails Last Result Details for the Test Point
     *
     * @return $this
     */
    public function setLastResultDetails($lastResultDetails)
    {
        $this->container['lastResultDetails'] = $lastResultDetails;

        return $this;
    }

    /**
     * Gets lastResultId
     *
     * @return int
     */
    public function getLastResultId()
    {
        return $this->container['lastResultId'];
    }

    /**
     * Sets lastResultId
     *
     * @param int $lastResultId Last Result Id
     *
     * @return $this
     */
    public function setLastResultId($lastResultId)
    {
        $this->container['lastResultId'] = $lastResultId;

        return $this;
    }

    /**
     * Gets lastResultState
     *
     * @return string
     */
    public function getLastResultState()
    {
        return $this->container['lastResultState'];
    }

    /**
     * Sets lastResultState
     *
     * @param string $lastResultState Last Result State of the Test Point
     *
     * @return $this
     */
    public function setLastResultState($lastResultState)
    {
        $allowedValues = $this->getLastResultStateAllowableValues();
        if (!is_null($lastResultState) && !in_array($lastResultState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lastResultState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lastResultState'] = $lastResultState;

        return $this;
    }

    /**
     * Gets lastRunBuildNumber
     *
     * @return string
     */
    public function getLastRunBuildNumber()
    {
        return $this->container['lastRunBuildNumber'];
    }

    /**
     * Sets lastRunBuildNumber
     *
     * @param string $lastRunBuildNumber Last RUn Build Number for the Test Point
     *
     * @return $this
     */
    public function setLastRunBuildNumber($lastRunBuildNumber)
    {
        $this->container['lastRunBuildNumber'] = $lastRunBuildNumber;

        return $this;
    }

    /**
     * Gets lastTestRunId
     *
     * @return int
     */
    public function getLastTestRunId()
    {
        return $this->container['lastTestRunId'];
    }

    /**
     * Sets lastTestRunId
     *
     * @param int $lastTestRunId Last Test Run Id for the Test Point
     *
     * @return $this
     */
    public function setLastTestRunId($lastTestRunId)
    {
        $this->container['lastTestRunId'] = $lastTestRunId;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome Outcome of the Test Point
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($outcome) && !in_array($outcome, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outcome', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the Test Point
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


