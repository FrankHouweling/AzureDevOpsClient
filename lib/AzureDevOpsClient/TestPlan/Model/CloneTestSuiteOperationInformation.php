<?php
/**
 * CloneTestSuiteOperationInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestPlan
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model;

use \ArrayAccess;
use \AzureDevOpsClient\TestPlan\ObjectSerializer;

/**
 * CloneTestSuiteOperationInformation Class Doc Comment
 *
 * @category Class
 * @description Response for Test Suite clone operation
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloneTestSuiteOperationInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CloneTestSuiteOperationInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clonedTestSuite' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject',
        'cloneOperationResponse' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOperationCommonResponse',
        'cloneOptions' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOptions',
        'destinationTestSuite' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject',
        'sourceTestSuite' => '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clonedTestSuite' => null,
        'cloneOperationResponse' => null,
        'cloneOptions' => null,
        'destinationTestSuite' => null,
        'sourceTestSuite' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clonedTestSuite' => 'clonedTestSuite',
        'cloneOperationResponse' => 'cloneOperationResponse',
        'cloneOptions' => 'cloneOptions',
        'destinationTestSuite' => 'destinationTestSuite',
        'sourceTestSuite' => 'sourceTestSuite'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clonedTestSuite' => 'setClonedTestSuite',
        'cloneOperationResponse' => 'setCloneOperationResponse',
        'cloneOptions' => 'setCloneOptions',
        'destinationTestSuite' => 'setDestinationTestSuite',
        'sourceTestSuite' => 'setSourceTestSuite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clonedTestSuite' => 'getClonedTestSuite',
        'cloneOperationResponse' => 'getCloneOperationResponse',
        'cloneOptions' => 'getCloneOptions',
        'destinationTestSuite' => 'getDestinationTestSuite',
        'sourceTestSuite' => 'getSourceTestSuite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clonedTestSuite'] = isset($data['clonedTestSuite']) ? $data['clonedTestSuite'] : null;
        $this->container['cloneOperationResponse'] = isset($data['cloneOperationResponse']) ? $data['cloneOperationResponse'] : null;
        $this->container['cloneOptions'] = isset($data['cloneOptions']) ? $data['cloneOptions'] : null;
        $this->container['destinationTestSuite'] = isset($data['destinationTestSuite']) ? $data['destinationTestSuite'] : null;
        $this->container['sourceTestSuite'] = isset($data['sourceTestSuite']) ? $data['sourceTestSuite'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clonedTestSuite
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject
     */
    public function getClonedTestSuite()
    {
        return $this->container['clonedTestSuite'];
    }

    /**
     * Sets clonedTestSuite
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject $clonedTestSuite Information of newly cloned Test Suite
     *
     * @return $this
     */
    public function setClonedTestSuite($clonedTestSuite)
    {
        $this->container['clonedTestSuite'] = $clonedTestSuite;

        return $this;
    }

    /**
     * Gets cloneOperationResponse
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOperationCommonResponse
     */
    public function getCloneOperationResponse()
    {
        return $this->container['cloneOperationResponse'];
    }

    /**
     * Sets cloneOperationResponse
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOperationCommonResponse $cloneOperationResponse Various information related to the clone
     *
     * @return $this
     */
    public function setCloneOperationResponse($cloneOperationResponse)
    {
        $this->container['cloneOperationResponse'] = $cloneOperationResponse;

        return $this;
    }

    /**
     * Gets cloneOptions
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOptions
     */
    public function getCloneOptions()
    {
        return $this->container['cloneOptions'];
    }

    /**
     * Sets cloneOptions
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\CloneOptions $cloneOptions Test Plan Clone create parameters
     *
     * @return $this
     */
    public function setCloneOptions($cloneOptions)
    {
        $this->container['cloneOptions'] = $cloneOptions;

        return $this;
    }

    /**
     * Gets destinationTestSuite
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject
     */
    public function getDestinationTestSuite()
    {
        return $this->container['destinationTestSuite'];
    }

    /**
     * Sets destinationTestSuite
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject $destinationTestSuite Information of destination Test Suite
     *
     * @return $this
     */
    public function setDestinationTestSuite($destinationTestSuite)
    {
        $this->container['destinationTestSuite'] = $destinationTestSuite;

        return $this;
    }

    /**
     * Gets sourceTestSuite
     *
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject
     */
    public function getSourceTestSuite()
    {
        return $this->container['sourceTestSuite'];
    }

    /**
     * Sets sourceTestSuite
     *
     * @param \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestSuiteReferenceWithProject $sourceTestSuite Information of source Test Suite
     *
     * @return $this
     */
    public function setSourceTestSuite($sourceTestSuite)
    {
        $this->container['sourceTestSuite'] = $sourceTestSuite;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


