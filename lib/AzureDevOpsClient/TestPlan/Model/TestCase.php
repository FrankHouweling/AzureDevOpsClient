<?php
/**
 * TestCase
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestPlan
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\TestPlan\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\TestPlan\ObjectSerializer;

/**
 * TestCase Class Doc Comment
 *
 * @category Class
 * @description Test Case Class
 * @package  FrankHouweling\AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestCase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestCase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\ReferenceLinks',
        'order' => 'int',
        'pointAssignments' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\PointAssignment[]',
        'project' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\TeamProjectReference',
        'testPlan' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestPlanReference',
        'testSuite' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestSuiteReference',
        'workItem' => '\FrankHouweling\AzureDevOpsClient\TestPlan\Model\WorkItemDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'order' => 'int32',
        'pointAssignments' => null,
        'project' => null,
        'testPlan' => null,
        'testSuite' => null,
        'workItem' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'order' => 'order',
        'pointAssignments' => 'pointAssignments',
        'project' => 'project',
        'testPlan' => 'testPlan',
        'testSuite' => 'testSuite',
        'workItem' => 'workItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'order' => 'setOrder',
        'pointAssignments' => 'setPointAssignments',
        'project' => 'setProject',
        'testPlan' => 'setTestPlan',
        'testSuite' => 'setTestSuite',
        'workItem' => 'setWorkItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'order' => 'getOrder',
        'pointAssignments' => 'getPointAssignments',
        'project' => 'getProject',
        'testPlan' => 'getTestPlan',
        'testSuite' => 'getTestSuite',
        'workItem' => 'getWorkItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['pointAssignments'] = isset($data['pointAssignments']) ? $data['pointAssignments'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['testPlan'] = isset($data['testPlan']) ? $data['testPlan'] : null;
        $this->container['testSuite'] = isset($data['testSuite']) ? $data['testSuite'] : null;
        $this->container['workItem'] = isset($data['workItem']) ? $data['workItem'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\ReferenceLinks $links Reference links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order Order of the TestCase in the Suite
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets pointAssignments
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\PointAssignment[]
     */
    public function getPointAssignments()
    {
        return $this->container['pointAssignments'];
    }

    /**
     * Sets pointAssignments
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\PointAssignment[] $pointAssignments List of Points associated with the Test Case
     *
     * @return $this
     */
    public function setPointAssignments($pointAssignments)
    {
        $this->container['pointAssignments'] = $pointAssignments;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TeamProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TeamProjectReference $project Project under which the Test Case is
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets testPlan
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestPlanReference
     */
    public function getTestPlan()
    {
        return $this->container['testPlan'];
    }

    /**
     * Sets testPlan
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestPlanReference $testPlan Test Plan under which the Test Case is
     *
     * @return $this
     */
    public function setTestPlan($testPlan)
    {
        $this->container['testPlan'] = $testPlan;

        return $this;
    }

    /**
     * Gets testSuite
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestSuiteReference
     */
    public function getTestSuite()
    {
        return $this->container['testSuite'];
    }

    /**
     * Sets testSuite
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\TestSuiteReference $testSuite Test Suite under which the Test Case is
     *
     * @return $this
     */
    public function setTestSuite($testSuite)
    {
        $this->container['testSuite'] = $testSuite;

        return $this;
    }

    /**
     * Gets workItem
     *
     * @return \FrankHouweling\AzureDevOpsClient\TestPlan\Model\WorkItemDetails
     */
    public function getWorkItem()
    {
        return $this->container['workItem'];
    }

    /**
     * Sets workItem
     *
     * @param \FrankHouweling\AzureDevOpsClient\TestPlan\Model\WorkItemDetails $workItem Work Item details of the TestCase
     *
     * @return $this
     */
    public function setWorkItem($workItem)
    {
        $this->container['workItem'] = $workItem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


