<?php
/**
 * SuiteTestCaseApi
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestPlan
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AzureDevOpsClient\TestPlan\ApiException;
use AzureDevOpsClient\TestPlan\Configuration;
use AzureDevOpsClient\TestPlan\HeaderSelector;
use AzureDevOpsClient\TestPlan\ObjectSerializer;

/**
 * SuiteTestCaseApi Class Doc Comment
 *
 * @category Class
 * @package  AzureDevOpsClient\TestPlan
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuiteTestCaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation suiteTestCaseAdd
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be added. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be added. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]
     */
    public function suiteTestCaseAdd($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        list($response) = $this->suiteTestCaseAddWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion);
        return $response;
    }

    /**
     * Operation suiteTestCaseAddWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be added. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be added. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[], HTTP status code, HTTP response headers (array of strings)
     */
    public function suiteTestCaseAddWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseAddRequest($organization, $body, $project, $planId, $suiteId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suiteTestCaseAddAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be added. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be added. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseAddAsync($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        return $this->suiteTestCaseAddAsyncWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suiteTestCaseAddAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be added. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be added. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseAddAsyncWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseAddRequest($organization, $body, $project, $planId, $suiteId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suiteTestCaseAdd'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be added. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be added. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suiteTestCaseAddRequest($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling suiteTestCaseAdd'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling suiteTestCaseAdd'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling suiteTestCaseAdd'
            );
        }
        // verify the required parameter 'planId' is set
        if ($planId === null || (is_array($planId) && count($planId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planId when calling suiteTestCaseAdd'
            );
        }
        // verify the required parameter 'suiteId' is set
        if ($suiteId === null || (is_array($suiteId) && count($suiteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suiteId when calling suiteTestCaseAdd'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling suiteTestCaseAdd'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($planId !== null) {
            $resourcePath = str_replace(
                '{' . 'planId' . '}',
                ObjectSerializer::toPathValue($planId),
                $resourcePath
            );
        }
        // path params
        if ($suiteId !== null) {
            $resourcePath = str_replace(
                '{' . 'suiteId' . '}',
                ObjectSerializer::toPathValue($suiteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suiteTestCaseGetTestCase
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $testCaseIds Test Case Ids to be fetched. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]
     */
    public function suiteTestCaseGetTestCase($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields = null, $returnIdentityRef = null)
    {
        list($response) = $this->suiteTestCaseGetTestCaseWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields, $returnIdentityRef);
        return $response;
    }

    /**
     * Operation suiteTestCaseGetTestCaseWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $testCaseIds Test Case Ids to be fetched. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[], HTTP status code, HTTP response headers (array of strings)
     */
    public function suiteTestCaseGetTestCaseWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields = null, $returnIdentityRef = null)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseGetTestCaseRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields, $returnIdentityRef);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suiteTestCaseGetTestCaseAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $testCaseIds Test Case Ids to be fetched. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseGetTestCaseAsync($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields = null, $returnIdentityRef = null)
    {
        return $this->suiteTestCaseGetTestCaseAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields, $returnIdentityRef)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suiteTestCaseGetTestCaseAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $testCaseIds Test Case Ids to be fetched. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseGetTestCaseAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields = null, $returnIdentityRef = null)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseGetTestCaseRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields, $returnIdentityRef);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suiteTestCaseGetTestCase'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $testCaseIds Test Case Ids to be fetched. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suiteTestCaseGetTestCaseRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion, $witFields = null, $returnIdentityRef = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling suiteTestCaseGetTestCase'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling suiteTestCaseGetTestCase'
            );
        }
        // verify the required parameter 'planId' is set
        if ($planId === null || (is_array($planId) && count($planId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planId when calling suiteTestCaseGetTestCase'
            );
        }
        // verify the required parameter 'suiteId' is set
        if ($suiteId === null || (is_array($suiteId) && count($suiteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suiteId when calling suiteTestCaseGetTestCase'
            );
        }
        // verify the required parameter 'testCaseIds' is set
        if ($testCaseIds === null || (is_array($testCaseIds) && count($testCaseIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $testCaseIds when calling suiteTestCaseGetTestCase'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling suiteTestCaseGetTestCase'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($witFields !== null) {
            $queryParams['witFields'] = ObjectSerializer::toQueryValue($witFields);
        }
        // query params
        if ($returnIdentityRef !== null) {
            $queryParams['returnIdentityRef'] = ObjectSerializer::toQueryValue($returnIdentityRef);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($planId !== null) {
            $resourcePath = str_replace(
                '{' . 'planId' . '}',
                ObjectSerializer::toPathValue($planId),
                $resourcePath
            );
        }
        // path params
        if ($suiteId !== null) {
            $resourcePath = str_replace(
                '{' . 'suiteId' . '}',
                ObjectSerializer::toPathValue($suiteId),
                $resourcePath
            );
        }
        // path params
        if ($testCaseIds !== null) {
            $resourcePath = str_replace(
                '{' . 'testCaseIds' . '}',
                ObjectSerializer::toPathValue($testCaseIds),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suiteTestCaseGetTestCaseList
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $testIds Test Case Ids to be fetched. (optional)
     * @param  string $configurationIds Fetch Test Cases which contains all the configuration Ids specified. (optional)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  string $continuationToken If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \&quot;x-ms-continuationtoken\&quot;. Omit this parameter to get the first batch of test cases. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     * @param  bool $expand If set to false, will get a smaller payload containing only basic details about the suite test case object (optional)
     * @param  string $excludeFlags Flag to exclude various values from payload. For example to remove point assignments pass exclude &#x3D; 1. To remove extra information (links, test plan , test suite) pass exclude &#x3D; 2. To remove both extra information and point assignments pass exclude &#x3D; 3 (1 + 2). (optional)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]
     */
    public function suiteTestCaseGetTestCaseList($organization, $project, $planId, $suiteId, $apiVersion, $testIds = null, $configurationIds = null, $witFields = null, $continuationToken = null, $returnIdentityRef = null, $expand = null, $excludeFlags = null)
    {
        list($response) = $this->suiteTestCaseGetTestCaseListWithHttpInfo($organization, $project, $planId, $suiteId, $apiVersion, $testIds, $configurationIds, $witFields, $continuationToken, $returnIdentityRef, $expand, $excludeFlags);
        return $response;
    }

    /**
     * Operation suiteTestCaseGetTestCaseListWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $testIds Test Case Ids to be fetched. (optional)
     * @param  string $configurationIds Fetch Test Cases which contains all the configuration Ids specified. (optional)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  string $continuationToken If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \&quot;x-ms-continuationtoken\&quot;. Omit this parameter to get the first batch of test cases. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     * @param  bool $expand If set to false, will get a smaller payload containing only basic details about the suite test case object (optional)
     * @param  string $excludeFlags Flag to exclude various values from payload. For example to remove point assignments pass exclude &#x3D; 1. To remove extra information (links, test plan , test suite) pass exclude &#x3D; 2. To remove both extra information and point assignments pass exclude &#x3D; 3 (1 + 2). (optional)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[], HTTP status code, HTTP response headers (array of strings)
     */
    public function suiteTestCaseGetTestCaseListWithHttpInfo($organization, $project, $planId, $suiteId, $apiVersion, $testIds = null, $configurationIds = null, $witFields = null, $continuationToken = null, $returnIdentityRef = null, $expand = null, $excludeFlags = null)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseGetTestCaseListRequest($organization, $project, $planId, $suiteId, $apiVersion, $testIds, $configurationIds, $witFields, $continuationToken, $returnIdentityRef, $expand, $excludeFlags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suiteTestCaseGetTestCaseListAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $testIds Test Case Ids to be fetched. (optional)
     * @param  string $configurationIds Fetch Test Cases which contains all the configuration Ids specified. (optional)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  string $continuationToken If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \&quot;x-ms-continuationtoken\&quot;. Omit this parameter to get the first batch of test cases. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     * @param  bool $expand If set to false, will get a smaller payload containing only basic details about the suite test case object (optional)
     * @param  string $excludeFlags Flag to exclude various values from payload. For example to remove point assignments pass exclude &#x3D; 1. To remove extra information (links, test plan , test suite) pass exclude &#x3D; 2. To remove both extra information and point assignments pass exclude &#x3D; 3 (1 + 2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseGetTestCaseListAsync($organization, $project, $planId, $suiteId, $apiVersion, $testIds = null, $configurationIds = null, $witFields = null, $continuationToken = null, $returnIdentityRef = null, $expand = null, $excludeFlags = null)
    {
        return $this->suiteTestCaseGetTestCaseListAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $apiVersion, $testIds, $configurationIds, $witFields, $continuationToken, $returnIdentityRef, $expand, $excludeFlags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suiteTestCaseGetTestCaseListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $testIds Test Case Ids to be fetched. (optional)
     * @param  string $configurationIds Fetch Test Cases which contains all the configuration Ids specified. (optional)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  string $continuationToken If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \&quot;x-ms-continuationtoken\&quot;. Omit this parameter to get the first batch of test cases. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     * @param  bool $expand If set to false, will get a smaller payload containing only basic details about the suite test case object (optional)
     * @param  string $excludeFlags Flag to exclude various values from payload. For example to remove point assignments pass exclude &#x3D; 1. To remove extra information (links, test plan , test suite) pass exclude &#x3D; 2. To remove both extra information and point assignments pass exclude &#x3D; 3 (1 + 2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseGetTestCaseListAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $apiVersion, $testIds = null, $configurationIds = null, $witFields = null, $continuationToken = null, $returnIdentityRef = null, $expand = null, $excludeFlags = null)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseGetTestCaseListRequest($organization, $project, $planId, $suiteId, $apiVersion, $testIds, $configurationIds, $witFields, $continuationToken, $returnIdentityRef, $expand, $excludeFlags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suiteTestCaseGetTestCaseList'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan for which test cases are requested. (required)
     * @param  int $suiteId ID of the test suite for which test cases are requested. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $testIds Test Case Ids to be fetched. (optional)
     * @param  string $configurationIds Fetch Test Cases which contains all the configuration Ids specified. (optional)
     * @param  string $witFields Get the list of witFields. (optional)
     * @param  string $continuationToken If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \&quot;x-ms-continuationtoken\&quot;. Omit this parameter to get the first batch of test cases. (optional)
     * @param  bool $returnIdentityRef If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default. (optional)
     * @param  bool $expand If set to false, will get a smaller payload containing only basic details about the suite test case object (optional)
     * @param  string $excludeFlags Flag to exclude various values from payload. For example to remove point assignments pass exclude &#x3D; 1. To remove extra information (links, test plan , test suite) pass exclude &#x3D; 2. To remove both extra information and point assignments pass exclude &#x3D; 3 (1 + 2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suiteTestCaseGetTestCaseListRequest($organization, $project, $planId, $suiteId, $apiVersion, $testIds = null, $configurationIds = null, $witFields = null, $continuationToken = null, $returnIdentityRef = null, $expand = null, $excludeFlags = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling suiteTestCaseGetTestCaseList'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling suiteTestCaseGetTestCaseList'
            );
        }
        // verify the required parameter 'planId' is set
        if ($planId === null || (is_array($planId) && count($planId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planId when calling suiteTestCaseGetTestCaseList'
            );
        }
        // verify the required parameter 'suiteId' is set
        if ($suiteId === null || (is_array($suiteId) && count($suiteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suiteId when calling suiteTestCaseGetTestCaseList'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling suiteTestCaseGetTestCaseList'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($testIds !== null) {
            $queryParams['testIds'] = ObjectSerializer::toQueryValue($testIds);
        }
        // query params
        if ($configurationIds !== null) {
            $queryParams['configurationIds'] = ObjectSerializer::toQueryValue($configurationIds);
        }
        // query params
        if ($witFields !== null) {
            $queryParams['witFields'] = ObjectSerializer::toQueryValue($witFields);
        }
        // query params
        if ($continuationToken !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuationToken);
        }
        // query params
        if ($returnIdentityRef !== null) {
            $queryParams['returnIdentityRef'] = ObjectSerializer::toQueryValue($returnIdentityRef);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($excludeFlags !== null) {
            $queryParams['excludeFlags'] = ObjectSerializer::toQueryValue($excludeFlags);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($planId !== null) {
            $resourcePath = str_replace(
                '{' . 'planId' . '}',
                ObjectSerializer::toPathValue($planId),
                $resourcePath
            );
        }
        // path params
        if ($suiteId !== null) {
            $resourcePath = str_replace(
                '{' . 'suiteId' . '}',
                ObjectSerializer::toPathValue($suiteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suiteTestCaseRemoveTestCasesFromSuite
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan from which test cases are to be removed. (required)
     * @param  int $suiteId ID of the test suite from which test cases are to be removed. (required)
     * @param  string $testCaseIds Test Case Ids to be removed. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function suiteTestCaseRemoveTestCasesFromSuite($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
    {
        $this->suiteTestCaseRemoveTestCasesFromSuiteWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion);
    }

    /**
     * Operation suiteTestCaseRemoveTestCasesFromSuiteWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan from which test cases are to be removed. (required)
     * @param  int $suiteId ID of the test suite from which test cases are to be removed. (required)
     * @param  string $testCaseIds Test Case Ids to be removed. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function suiteTestCaseRemoveTestCasesFromSuiteWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
    {
        $returnType = '';
        $request = $this->suiteTestCaseRemoveTestCasesFromSuiteRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation suiteTestCaseRemoveTestCasesFromSuiteAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan from which test cases are to be removed. (required)
     * @param  int $suiteId ID of the test suite from which test cases are to be removed. (required)
     * @param  string $testCaseIds Test Case Ids to be removed. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseRemoveTestCasesFromSuiteAsync($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
    {
        return $this->suiteTestCaseRemoveTestCasesFromSuiteAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suiteTestCaseRemoveTestCasesFromSuiteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan from which test cases are to be removed. (required)
     * @param  int $suiteId ID of the test suite from which test cases are to be removed. (required)
     * @param  string $testCaseIds Test Case Ids to be removed. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseRemoveTestCasesFromSuiteAsyncWithHttpInfo($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
    {
        $returnType = '';
        $request = $this->suiteTestCaseRemoveTestCasesFromSuiteRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suiteTestCaseRemoveTestCasesFromSuite'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan from which test cases are to be removed. (required)
     * @param  int $suiteId ID of the test suite from which test cases are to be removed. (required)
     * @param  string $testCaseIds Test Case Ids to be removed. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suiteTestCaseRemoveTestCasesFromSuiteRequest($organization, $project, $planId, $suiteId, $testCaseIds, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }
        // verify the required parameter 'planId' is set
        if ($planId === null || (is_array($planId) && count($planId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planId when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }
        // verify the required parameter 'suiteId' is set
        if ($suiteId === null || (is_array($suiteId) && count($suiteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suiteId when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }
        // verify the required parameter 'testCaseIds' is set
        if ($testCaseIds === null || (is_array($testCaseIds) && count($testCaseIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $testCaseIds when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling suiteTestCaseRemoveTestCasesFromSuite'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($planId !== null) {
            $resourcePath = str_replace(
                '{' . 'planId' . '}',
                ObjectSerializer::toPathValue($planId),
                $resourcePath
            );
        }
        // path params
        if ($suiteId !== null) {
            $resourcePath = str_replace(
                '{' . 'suiteId' . '}',
                ObjectSerializer::toPathValue($suiteId),
                $resourcePath
            );
        }
        // path params
        if ($testCaseIds !== null) {
            $resourcePath = str_replace(
                '{' . 'testCaseIds' . '}',
                ObjectSerializer::toPathValue($testCaseIds),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suiteTestCaseUpdate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body A SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be updated. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be updated. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]
     */
    public function suiteTestCaseUpdate($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        list($response) = $this->suiteTestCaseUpdateWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion);
        return $response;
    }

    /**
     * Operation suiteTestCaseUpdateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body A SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be updated. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be updated. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\TestPlan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[], HTTP status code, HTTP response headers (array of strings)
     */
    public function suiteTestCaseUpdateWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseUpdateRequest($organization, $body, $project, $planId, $suiteId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suiteTestCaseUpdateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body A SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be updated. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be updated. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseUpdateAsync($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        return $this->suiteTestCaseUpdateAsyncWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suiteTestCaseUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body A SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be updated. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be updated. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suiteTestCaseUpdateAsyncWithHttpInfo($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\TestCase[]';
        $request = $this->suiteTestCaseUpdateRequest($organization, $body, $project, $planId, $suiteId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suiteTestCaseUpdate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\TestPlan\AzureDevOpsClient\TestPlan\Model\SuiteTestCaseCreateUpdateParameters[] $body A SuiteTestCaseCreateUpdateParameters object. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $planId ID of the test plan to which test cases are to be updated. (required)
     * @param  int $suiteId ID of the test suite to which test cases are to be updated. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suiteTestCaseUpdateRequest($organization, $body, $project, $planId, $suiteId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling suiteTestCaseUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling suiteTestCaseUpdate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling suiteTestCaseUpdate'
            );
        }
        // verify the required parameter 'planId' is set
        if ($planId === null || (is_array($planId) && count($planId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planId when calling suiteTestCaseUpdate'
            );
        }
        // verify the required parameter 'suiteId' is set
        if ($suiteId === null || (is_array($suiteId) && count($suiteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suiteId when calling suiteTestCaseUpdate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling suiteTestCaseUpdate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($planId !== null) {
            $resourcePath = str_replace(
                '{' . 'planId' . '}',
                ObjectSerializer::toPathValue($planId),
                $resourcePath
            );
        }
        // path params
        if ($suiteId !== null) {
            $resourcePath = str_replace(
                '{' . 'suiteId' . '}',
                ObjectSerializer::toPathValue($suiteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
