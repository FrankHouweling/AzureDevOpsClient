<?php
/**
 * BuildsApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\Build\ApiException;
use FrankHouweling\AzureDevOpsClient\Build\Configuration;
use FrankHouweling\AzureDevOpsClient\Build\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildsApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation buildsDelete
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsDelete($organization, $project, $buildId, $apiVersion)
    {
        $this->buildsDeleteWithHttpInfo($organization, $project, $buildId, $apiVersion);
    }

    /**
     * Operation buildsDeleteWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsDeleteWithHttpInfo($organization, $project, $buildId, $apiVersion)
    {
        $returnType = '';
        $request = $this->buildsDeleteRequest($organization, $project, $buildId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation buildsDeleteAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsDeleteAsync($organization, $project, $buildId, $apiVersion)
    {
        return $this->buildsDeleteAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsDeleteAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion)
    {
        $returnType = '';
        $request = $this->buildsDeleteRequest($organization, $project, $buildId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsDelete'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsDeleteRequest($organization, $project, $buildId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsDelete'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsDelete'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsDelete'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsDelete'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGet
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $propertyFilters  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function buildsGet($organization, $project, $buildId, $apiVersion, $propertyFilters = null)
    {
        list($response) = $this->buildsGetWithHttpInfo($organization, $project, $buildId, $apiVersion, $propertyFilters);
        return $response;
    }

    /**
     * Operation buildsGetWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $propertyFilters  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetWithHttpInfo($organization, $project, $buildId, $apiVersion, $propertyFilters = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsGetRequest($organization, $project, $buildId, $apiVersion, $propertyFilters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $propertyFilters  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetAsync($organization, $project, $buildId, $apiVersion, $propertyFilters = null)
    {
        return $this->buildsGetAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $propertyFilters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $propertyFilters  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $propertyFilters = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsGetRequest($organization, $project, $buildId, $apiVersion, $propertyFilters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGet'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $propertyFilters  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetRequest($organization, $project, $buildId, $apiVersion, $propertyFilters = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGet'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGet'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGet'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGet'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($propertyFilters !== null) {
            $queryParams['propertyFilters'] = ObjectSerializer::toQueryValue($propertyFilters);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetBuildChanges
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $continuationToken  (optional)
     * @param  int $top The maximum number of changes to return (optional)
     * @param  bool $includeSourceChange  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Change[]
     */
    public function buildsGetBuildChanges($organization, $project, $buildId, $apiVersion, $continuationToken = null, $top = null, $includeSourceChange = null)
    {
        list($response) = $this->buildsGetBuildChangesWithHttpInfo($organization, $project, $buildId, $apiVersion, $continuationToken, $top, $includeSourceChange);
        return $response;
    }

    /**
     * Operation buildsGetBuildChangesWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $continuationToken  (optional)
     * @param  int $top The maximum number of changes to return (optional)
     * @param  bool $includeSourceChange  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Change[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetBuildChangesWithHttpInfo($organization, $project, $buildId, $apiVersion, $continuationToken = null, $top = null, $includeSourceChange = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]';
        $request = $this->buildsGetBuildChangesRequest($organization, $project, $buildId, $apiVersion, $continuationToken, $top, $includeSourceChange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetBuildChangesAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $continuationToken  (optional)
     * @param  int $top The maximum number of changes to return (optional)
     * @param  bool $includeSourceChange  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildChangesAsync($organization, $project, $buildId, $apiVersion, $continuationToken = null, $top = null, $includeSourceChange = null)
    {
        return $this->buildsGetBuildChangesAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $continuationToken, $top, $includeSourceChange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetBuildChangesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $continuationToken  (optional)
     * @param  int $top The maximum number of changes to return (optional)
     * @param  bool $includeSourceChange  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildChangesAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $continuationToken = null, $top = null, $includeSourceChange = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]';
        $request = $this->buildsGetBuildChangesRequest($organization, $project, $buildId, $apiVersion, $continuationToken, $top, $includeSourceChange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetBuildChanges'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId  (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  string $continuationToken  (optional)
     * @param  int $top The maximum number of changes to return (optional)
     * @param  bool $includeSourceChange  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetBuildChangesRequest($organization, $project, $buildId, $apiVersion, $continuationToken = null, $top = null, $includeSourceChange = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetBuildChanges'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetBuildChanges'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGetBuildChanges'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetBuildChanges'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($continuationToken !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuationToken);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($includeSourceChange !== null) {
            $queryParams['includeSourceChange'] = ObjectSerializer::toQueryValue($includeSourceChange);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetBuildLog
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  int $logId The ID of the log file. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $startLine The start line. (optional)
     * @param  int $endLine The end line. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function buildsGetBuildLog($organization, $project, $buildId, $logId, $apiVersion, $startLine = null, $endLine = null)
    {
        list($response) = $this->buildsGetBuildLogWithHttpInfo($organization, $project, $buildId, $logId, $apiVersion, $startLine, $endLine);
        return $response;
    }

    /**
     * Operation buildsGetBuildLogWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  int $logId The ID of the log file. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $startLine The start line. (optional)
     * @param  int $endLine The end line. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetBuildLogWithHttpInfo($organization, $project, $buildId, $logId, $apiVersion, $startLine = null, $endLine = null)
    {
        $returnType = 'string';
        $request = $this->buildsGetBuildLogRequest($organization, $project, $buildId, $logId, $apiVersion, $startLine, $endLine);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetBuildLogAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  int $logId The ID of the log file. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $startLine The start line. (optional)
     * @param  int $endLine The end line. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildLogAsync($organization, $project, $buildId, $logId, $apiVersion, $startLine = null, $endLine = null)
    {
        return $this->buildsGetBuildLogAsyncWithHttpInfo($organization, $project, $buildId, $logId, $apiVersion, $startLine, $endLine)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetBuildLogAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  int $logId The ID of the log file. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $startLine The start line. (optional)
     * @param  int $endLine The end line. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildLogAsyncWithHttpInfo($organization, $project, $buildId, $logId, $apiVersion, $startLine = null, $endLine = null)
    {
        $returnType = 'string';
        $request = $this->buildsGetBuildLogRequest($organization, $project, $buildId, $logId, $apiVersion, $startLine, $endLine);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetBuildLog'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  int $logId The ID of the log file. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $startLine The start line. (optional)
     * @param  int $endLine The end line. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetBuildLogRequest($organization, $project, $buildId, $logId, $apiVersion, $startLine = null, $endLine = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetBuildLog'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetBuildLog'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGetBuildLog'
            );
        }
        // verify the required parameter 'logId' is set
        if ($logId === null || (is_array($logId) && count($logId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logId when calling buildsGetBuildLog'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetBuildLog'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}/logs/{logId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startLine !== null) {
            $queryParams['startLine'] = ObjectSerializer::toQueryValue($startLine);
        }
        // query params
        if ($endLine !== null) {
            $queryParams['endLine'] = ObjectSerializer::toQueryValue($endLine);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }
        // path params
        if ($logId !== null) {
            $resourcePath = str_replace(
                '{' . 'logId' . '}',
                ObjectSerializer::toPathValue($logId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/json', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/json', 'text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetBuildLogs
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildLog[]
     */
    public function buildsGetBuildLogs($organization, $project, $buildId, $apiVersion)
    {
        list($response) = $this->buildsGetBuildLogsWithHttpInfo($organization, $project, $buildId, $apiVersion);
        return $response;
    }

    /**
     * Operation buildsGetBuildLogsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\BuildLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetBuildLogsWithHttpInfo($organization, $project, $buildId, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildLog[]';
        $request = $this->buildsGetBuildLogsRequest($organization, $project, $buildId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetBuildLogsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildLogsAsync($organization, $project, $buildId, $apiVersion)
    {
        return $this->buildsGetBuildLogsAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetBuildLogsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildLogsAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildLog[]';
        $request = $this->buildsGetBuildLogsRequest($organization, $project, $buildId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetBuildLogs'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetBuildLogsRequest($organization, $project, $buildId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetBuildLogs'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetBuildLogs'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGetBuildLogs'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetBuildLogs'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetBuildWorkItemsRefs
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]
     */
    public function buildsGetBuildWorkItemsRefs($organization, $project, $buildId, $apiVersion, $top = null)
    {
        list($response) = $this->buildsGetBuildWorkItemsRefsWithHttpInfo($organization, $project, $buildId, $apiVersion, $top);
        return $response;
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetBuildWorkItemsRefsWithHttpInfo($organization, $project, $buildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetBuildWorkItemsRefsRequest($organization, $project, $buildId, $apiVersion, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildWorkItemsRefsAsync($organization, $project, $buildId, $apiVersion, $top = null)
    {
        return $this->buildsGetBuildWorkItemsRefsAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildWorkItemsRefsAsyncWithHttpInfo($organization, $project, $buildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetBuildWorkItemsRefsRequest($organization, $project, $buildId, $apiVersion, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetBuildWorkItemsRefs'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetBuildWorkItemsRefsRequest($organization, $project, $buildId, $apiVersion, $top = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetBuildWorkItemsRefs'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetBuildWorkItemsRefs'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGetBuildWorkItemsRefs'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetBuildWorkItemsRefs'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}/workitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsFromCommits
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string[] $body A comma-delimited list of commit IDs. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]
     */
    public function buildsGetBuildWorkItemsRefsFromCommits($organization, $body, $project, $buildId, $apiVersion, $top = null)
    {
        list($response) = $this->buildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $top);
        return $response;
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string[] $body A comma-delimited list of commit IDs. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetBuildWorkItemsRefsFromCommitsRequest($organization, $body, $project, $buildId, $apiVersion, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsFromCommitsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string[] $body A comma-delimited list of commit IDs. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildWorkItemsRefsFromCommitsAsync($organization, $body, $project, $buildId, $apiVersion, $top = null)
    {
        return $this->buildsGetBuildWorkItemsRefsFromCommitsAsyncWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetBuildWorkItemsRefsFromCommitsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string[] $body A comma-delimited list of commit IDs. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetBuildWorkItemsRefsFromCommitsAsyncWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetBuildWorkItemsRefsFromCommitsRequest($organization, $body, $project, $buildId, $apiVersion, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetBuildWorkItemsRefsFromCommits'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string[] $body A comma-delimited list of commit IDs. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetBuildWorkItemsRefsFromCommitsRequest($organization, $body, $project, $buildId, $apiVersion, $top = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetBuildWorkItemsRefsFromCommits'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling buildsGetBuildWorkItemsRefsFromCommits'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetBuildWorkItemsRefsFromCommits'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsGetBuildWorkItemsRefsFromCommits'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetBuildWorkItemsRefsFromCommits'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}/workitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetChangesBetweenBuilds
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $fromBuildId The ID of the first build. (optional)
     * @param  int $toBuildId The ID of the last build. (optional)
     * @param  int $top The maximum number of changes to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Change[]
     */
    public function buildsGetChangesBetweenBuilds($organization, $project, $apiVersion, $fromBuildId = null, $toBuildId = null, $top = null)
    {
        list($response) = $this->buildsGetChangesBetweenBuildsWithHttpInfo($organization, $project, $apiVersion, $fromBuildId, $toBuildId, $top);
        return $response;
    }

    /**
     * Operation buildsGetChangesBetweenBuildsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $fromBuildId The ID of the first build. (optional)
     * @param  int $toBuildId The ID of the last build. (optional)
     * @param  int $top The maximum number of changes to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Change[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetChangesBetweenBuildsWithHttpInfo($organization, $project, $apiVersion, $fromBuildId = null, $toBuildId = null, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]';
        $request = $this->buildsGetChangesBetweenBuildsRequest($organization, $project, $apiVersion, $fromBuildId, $toBuildId, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetChangesBetweenBuildsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $fromBuildId The ID of the first build. (optional)
     * @param  int $toBuildId The ID of the last build. (optional)
     * @param  int $top The maximum number of changes to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetChangesBetweenBuildsAsync($organization, $project, $apiVersion, $fromBuildId = null, $toBuildId = null, $top = null)
    {
        return $this->buildsGetChangesBetweenBuildsAsyncWithHttpInfo($organization, $project, $apiVersion, $fromBuildId, $toBuildId, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetChangesBetweenBuildsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $fromBuildId The ID of the first build. (optional)
     * @param  int $toBuildId The ID of the last build. (optional)
     * @param  int $top The maximum number of changes to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetChangesBetweenBuildsAsyncWithHttpInfo($organization, $project, $apiVersion, $fromBuildId = null, $toBuildId = null, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]';
        $request = $this->buildsGetChangesBetweenBuildsRequest($organization, $project, $apiVersion, $fromBuildId, $toBuildId, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetChangesBetweenBuilds'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $fromBuildId The ID of the first build. (optional)
     * @param  int $toBuildId The ID of the last build. (optional)
     * @param  int $top The maximum number of changes to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetChangesBetweenBuildsRequest($organization, $project, $apiVersion, $fromBuildId = null, $toBuildId = null, $top = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetChangesBetweenBuilds'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetChangesBetweenBuilds'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetChangesBetweenBuilds'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromBuildId !== null) {
            $queryParams['fromBuildId'] = ObjectSerializer::toQueryValue($fromBuildId);
        }
        // query params
        if ($toBuildId !== null) {
            $queryParams['toBuildId'] = ObjectSerializer::toQueryValue($toBuildId);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetWorkItemsBetweenBuilds
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $fromBuildId The ID of the first build. (required)
     * @param  int $toBuildId The ID of the last build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]
     */
    public function buildsGetWorkItemsBetweenBuilds($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top = null)
    {
        list($response) = $this->buildsGetWorkItemsBetweenBuildsWithHttpInfo($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top);
        return $response;
    }

    /**
     * Operation buildsGetWorkItemsBetweenBuildsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $fromBuildId The ID of the first build. (required)
     * @param  int $toBuildId The ID of the last build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetWorkItemsBetweenBuildsWithHttpInfo($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetWorkItemsBetweenBuildsRequest($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetWorkItemsBetweenBuildsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $fromBuildId The ID of the first build. (required)
     * @param  int $toBuildId The ID of the last build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetWorkItemsBetweenBuildsAsync($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top = null)
    {
        return $this->buildsGetWorkItemsBetweenBuildsAsyncWithHttpInfo($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetWorkItemsBetweenBuildsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $fromBuildId The ID of the first build. (required)
     * @param  int $toBuildId The ID of the last build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetWorkItemsBetweenBuildsAsyncWithHttpInfo($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\ResourceRef[]';
        $request = $this->buildsGetWorkItemsBetweenBuildsRequest($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetWorkItemsBetweenBuilds'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $fromBuildId The ID of the first build. (required)
     * @param  int $toBuildId The ID of the last build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api. (required)
     * @param  int $top The maximum number of work items to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetWorkItemsBetweenBuildsRequest($organization, $project, $fromBuildId, $toBuildId, $apiVersion, $top = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsGetWorkItemsBetweenBuilds'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsGetWorkItemsBetweenBuilds'
            );
        }
        // verify the required parameter 'fromBuildId' is set
        if ($fromBuildId === null || (is_array($fromBuildId) && count($fromBuildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromBuildId when calling buildsGetWorkItemsBetweenBuilds'
            );
        }
        // verify the required parameter 'toBuildId' is set
        if ($toBuildId === null || (is_array($toBuildId) && count($toBuildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toBuildId when calling buildsGetWorkItemsBetweenBuilds'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsGetWorkItemsBetweenBuilds'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/workitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromBuildId !== null) {
            $queryParams['fromBuildId'] = ObjectSerializer::toQueryValue($fromBuildId);
        }
        // query params
        if ($toBuildId !== null) {
            $queryParams['toBuildId'] = ObjectSerializer::toQueryValue($toBuildId);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsList
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $definitions A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)
     * @param  string $queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)
     * @param  string $buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)
     * @param  \DateTime $minTime If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)
     * @param  \DateTime $maxTime If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)
     * @param  string $requestedFor If specified, filters to builds requested for the specified user. (optional)
     * @param  string $reasonFilter If specified, filters to builds that match this reason. (optional)
     * @param  string $statusFilter If specified, filters to builds that match this status. (optional)
     * @param  string $resultFilter If specified, filters to builds that match this result. (optional)
     * @param  string $tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)
     * @param  string $properties A comma-delimited list of properties to retrieve. (optional)
     * @param  int $top The maximum number of builds to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)
     * @param  int $maxBuildsPerDefinition The maximum number of builds to return per definition. (optional)
     * @param  string $deletedFilter Indicates whether to exclude, include, or only return deleted builds. (optional)
     * @param  string $queryOrder The order in which builds should be returned. (optional)
     * @param  string $branchName If specified, filters to builds that built branches that built this branch. (optional)
     * @param  string $buildIds A comma-delimited list that specifies the IDs of builds to retrieve. (optional)
     * @param  string $repositoryId If specified, filters to builds that built from this repository. (optional)
     * @param  string $repositoryType If specified, filters to builds that built from repositories of this type. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build[]
     */
    public function buildsList($organization, $project, $apiVersion, $definitions = null, $queues = null, $buildNumber = null, $minTime = null, $maxTime = null, $requestedFor = null, $reasonFilter = null, $statusFilter = null, $resultFilter = null, $tagFilters = null, $properties = null, $top = null, $continuationToken = null, $maxBuildsPerDefinition = null, $deletedFilter = null, $queryOrder = null, $branchName = null, $buildIds = null, $repositoryId = null, $repositoryType = null)
    {
        list($response) = $this->buildsListWithHttpInfo($organization, $project, $apiVersion, $definitions, $queues, $buildNumber, $minTime, $maxTime, $requestedFor, $reasonFilter, $statusFilter, $resultFilter, $tagFilters, $properties, $top, $continuationToken, $maxBuildsPerDefinition, $deletedFilter, $queryOrder, $branchName, $buildIds, $repositoryId, $repositoryType);
        return $response;
    }

    /**
     * Operation buildsListWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $definitions A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)
     * @param  string $queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)
     * @param  string $buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)
     * @param  \DateTime $minTime If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)
     * @param  \DateTime $maxTime If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)
     * @param  string $requestedFor If specified, filters to builds requested for the specified user. (optional)
     * @param  string $reasonFilter If specified, filters to builds that match this reason. (optional)
     * @param  string $statusFilter If specified, filters to builds that match this status. (optional)
     * @param  string $resultFilter If specified, filters to builds that match this result. (optional)
     * @param  string $tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)
     * @param  string $properties A comma-delimited list of properties to retrieve. (optional)
     * @param  int $top The maximum number of builds to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)
     * @param  int $maxBuildsPerDefinition The maximum number of builds to return per definition. (optional)
     * @param  string $deletedFilter Indicates whether to exclude, include, or only return deleted builds. (optional)
     * @param  string $queryOrder The order in which builds should be returned. (optional)
     * @param  string $branchName If specified, filters to builds that built branches that built this branch. (optional)
     * @param  string $buildIds A comma-delimited list that specifies the IDs of builds to retrieve. (optional)
     * @param  string $repositoryId If specified, filters to builds that built from this repository. (optional)
     * @param  string $repositoryType If specified, filters to builds that built from repositories of this type. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Build[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsListWithHttpInfo($organization, $project, $apiVersion, $definitions = null, $queues = null, $buildNumber = null, $minTime = null, $maxTime = null, $requestedFor = null, $reasonFilter = null, $statusFilter = null, $resultFilter = null, $tagFilters = null, $properties = null, $top = null, $continuationToken = null, $maxBuildsPerDefinition = null, $deletedFilter = null, $queryOrder = null, $branchName = null, $buildIds = null, $repositoryId = null, $repositoryType = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]';
        $request = $this->buildsListRequest($organization, $project, $apiVersion, $definitions, $queues, $buildNumber, $minTime, $maxTime, $requestedFor, $reasonFilter, $statusFilter, $resultFilter, $tagFilters, $properties, $top, $continuationToken, $maxBuildsPerDefinition, $deletedFilter, $queryOrder, $branchName, $buildIds, $repositoryId, $repositoryType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsListAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $definitions A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)
     * @param  string $queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)
     * @param  string $buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)
     * @param  \DateTime $minTime If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)
     * @param  \DateTime $maxTime If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)
     * @param  string $requestedFor If specified, filters to builds requested for the specified user. (optional)
     * @param  string $reasonFilter If specified, filters to builds that match this reason. (optional)
     * @param  string $statusFilter If specified, filters to builds that match this status. (optional)
     * @param  string $resultFilter If specified, filters to builds that match this result. (optional)
     * @param  string $tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)
     * @param  string $properties A comma-delimited list of properties to retrieve. (optional)
     * @param  int $top The maximum number of builds to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)
     * @param  int $maxBuildsPerDefinition The maximum number of builds to return per definition. (optional)
     * @param  string $deletedFilter Indicates whether to exclude, include, or only return deleted builds. (optional)
     * @param  string $queryOrder The order in which builds should be returned. (optional)
     * @param  string $branchName If specified, filters to builds that built branches that built this branch. (optional)
     * @param  string $buildIds A comma-delimited list that specifies the IDs of builds to retrieve. (optional)
     * @param  string $repositoryId If specified, filters to builds that built from this repository. (optional)
     * @param  string $repositoryType If specified, filters to builds that built from repositories of this type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsListAsync($organization, $project, $apiVersion, $definitions = null, $queues = null, $buildNumber = null, $minTime = null, $maxTime = null, $requestedFor = null, $reasonFilter = null, $statusFilter = null, $resultFilter = null, $tagFilters = null, $properties = null, $top = null, $continuationToken = null, $maxBuildsPerDefinition = null, $deletedFilter = null, $queryOrder = null, $branchName = null, $buildIds = null, $repositoryId = null, $repositoryType = null)
    {
        return $this->buildsListAsyncWithHttpInfo($organization, $project, $apiVersion, $definitions, $queues, $buildNumber, $minTime, $maxTime, $requestedFor, $reasonFilter, $statusFilter, $resultFilter, $tagFilters, $properties, $top, $continuationToken, $maxBuildsPerDefinition, $deletedFilter, $queryOrder, $branchName, $buildIds, $repositoryId, $repositoryType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $definitions A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)
     * @param  string $queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)
     * @param  string $buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)
     * @param  \DateTime $minTime If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)
     * @param  \DateTime $maxTime If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)
     * @param  string $requestedFor If specified, filters to builds requested for the specified user. (optional)
     * @param  string $reasonFilter If specified, filters to builds that match this reason. (optional)
     * @param  string $statusFilter If specified, filters to builds that match this status. (optional)
     * @param  string $resultFilter If specified, filters to builds that match this result. (optional)
     * @param  string $tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)
     * @param  string $properties A comma-delimited list of properties to retrieve. (optional)
     * @param  int $top The maximum number of builds to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)
     * @param  int $maxBuildsPerDefinition The maximum number of builds to return per definition. (optional)
     * @param  string $deletedFilter Indicates whether to exclude, include, or only return deleted builds. (optional)
     * @param  string $queryOrder The order in which builds should be returned. (optional)
     * @param  string $branchName If specified, filters to builds that built branches that built this branch. (optional)
     * @param  string $buildIds A comma-delimited list that specifies the IDs of builds to retrieve. (optional)
     * @param  string $repositoryId If specified, filters to builds that built from this repository. (optional)
     * @param  string $repositoryType If specified, filters to builds that built from repositories of this type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsListAsyncWithHttpInfo($organization, $project, $apiVersion, $definitions = null, $queues = null, $buildNumber = null, $minTime = null, $maxTime = null, $requestedFor = null, $reasonFilter = null, $statusFilter = null, $resultFilter = null, $tagFilters = null, $properties = null, $top = null, $continuationToken = null, $maxBuildsPerDefinition = null, $deletedFilter = null, $queryOrder = null, $branchName = null, $buildIds = null, $repositoryId = null, $repositoryType = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]';
        $request = $this->buildsListRequest($organization, $project, $apiVersion, $definitions, $queues, $buildNumber, $minTime, $maxTime, $requestedFor, $reasonFilter, $statusFilter, $resultFilter, $tagFilters, $properties, $top, $continuationToken, $maxBuildsPerDefinition, $deletedFilter, $queryOrder, $branchName, $buildIds, $repositoryId, $repositoryType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsList'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  string $definitions A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)
     * @param  string $queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)
     * @param  string $buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)
     * @param  \DateTime $minTime If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)
     * @param  \DateTime $maxTime If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)
     * @param  string $requestedFor If specified, filters to builds requested for the specified user. (optional)
     * @param  string $reasonFilter If specified, filters to builds that match this reason. (optional)
     * @param  string $statusFilter If specified, filters to builds that match this status. (optional)
     * @param  string $resultFilter If specified, filters to builds that match this result. (optional)
     * @param  string $tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)
     * @param  string $properties A comma-delimited list of properties to retrieve. (optional)
     * @param  int $top The maximum number of builds to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)
     * @param  int $maxBuildsPerDefinition The maximum number of builds to return per definition. (optional)
     * @param  string $deletedFilter Indicates whether to exclude, include, or only return deleted builds. (optional)
     * @param  string $queryOrder The order in which builds should be returned. (optional)
     * @param  string $branchName If specified, filters to builds that built branches that built this branch. (optional)
     * @param  string $buildIds A comma-delimited list that specifies the IDs of builds to retrieve. (optional)
     * @param  string $repositoryId If specified, filters to builds that built from this repository. (optional)
     * @param  string $repositoryType If specified, filters to builds that built from repositories of this type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsListRequest($organization, $project, $apiVersion, $definitions = null, $queues = null, $buildNumber = null, $minTime = null, $maxTime = null, $requestedFor = null, $reasonFilter = null, $statusFilter = null, $resultFilter = null, $tagFilters = null, $properties = null, $top = null, $continuationToken = null, $maxBuildsPerDefinition = null, $deletedFilter = null, $queryOrder = null, $branchName = null, $buildIds = null, $repositoryId = null, $repositoryType = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsList'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsList'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsList'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($definitions !== null) {
            $queryParams['definitions'] = ObjectSerializer::toQueryValue($definitions);
        }
        // query params
        if ($queues !== null) {
            $queryParams['queues'] = ObjectSerializer::toQueryValue($queues);
        }
        // query params
        if ($buildNumber !== null) {
            $queryParams['buildNumber'] = ObjectSerializer::toQueryValue($buildNumber);
        }
        // query params
        if ($minTime !== null) {
            $queryParams['minTime'] = ObjectSerializer::toQueryValue($minTime);
        }
        // query params
        if ($maxTime !== null) {
            $queryParams['maxTime'] = ObjectSerializer::toQueryValue($maxTime);
        }
        // query params
        if ($requestedFor !== null) {
            $queryParams['requestedFor'] = ObjectSerializer::toQueryValue($requestedFor);
        }
        // query params
        if ($reasonFilter !== null) {
            $queryParams['reasonFilter'] = ObjectSerializer::toQueryValue($reasonFilter);
        }
        // query params
        if ($statusFilter !== null) {
            $queryParams['statusFilter'] = ObjectSerializer::toQueryValue($statusFilter);
        }
        // query params
        if ($resultFilter !== null) {
            $queryParams['resultFilter'] = ObjectSerializer::toQueryValue($resultFilter);
        }
        // query params
        if ($tagFilters !== null) {
            $queryParams['tagFilters'] = ObjectSerializer::toQueryValue($tagFilters);
        }
        // query params
        if ($properties !== null) {
            $queryParams['properties'] = ObjectSerializer::toQueryValue($properties);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($continuationToken !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuationToken);
        }
        // query params
        if ($maxBuildsPerDefinition !== null) {
            $queryParams['maxBuildsPerDefinition'] = ObjectSerializer::toQueryValue($maxBuildsPerDefinition);
        }
        // query params
        if ($deletedFilter !== null) {
            $queryParams['deletedFilter'] = ObjectSerializer::toQueryValue($deletedFilter);
        }
        // query params
        if ($queryOrder !== null) {
            $queryParams['queryOrder'] = ObjectSerializer::toQueryValue($queryOrder);
        }
        // query params
        if ($branchName !== null) {
            $queryParams['branchName'] = ObjectSerializer::toQueryValue($branchName);
        }
        // query params
        if ($buildIds !== null) {
            $queryParams['buildIds'] = ObjectSerializer::toQueryValue($buildIds);
        }
        // query params
        if ($repositoryId !== null) {
            $queryParams['repositoryId'] = ObjectSerializer::toQueryValue($repositoryId);
        }
        // query params
        if ($repositoryType !== null) {
            $queryParams['repositoryType'] = ObjectSerializer::toQueryValue($repositoryType);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsQueue
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $ignoreWarnings  (optional)
     * @param  string $checkInTicket  (optional)
     * @param  int $sourceBuildId  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function buildsQueue($organization, $body, $project, $apiVersion, $ignoreWarnings = null, $checkInTicket = null, $sourceBuildId = null)
    {
        list($response) = $this->buildsQueueWithHttpInfo($organization, $body, $project, $apiVersion, $ignoreWarnings, $checkInTicket, $sourceBuildId);
        return $response;
    }

    /**
     * Operation buildsQueueWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $ignoreWarnings  (optional)
     * @param  string $checkInTicket  (optional)
     * @param  int $sourceBuildId  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsQueueWithHttpInfo($organization, $body, $project, $apiVersion, $ignoreWarnings = null, $checkInTicket = null, $sourceBuildId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsQueueRequest($organization, $body, $project, $apiVersion, $ignoreWarnings, $checkInTicket, $sourceBuildId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsQueueAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $ignoreWarnings  (optional)
     * @param  string $checkInTicket  (optional)
     * @param  int $sourceBuildId  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsQueueAsync($organization, $body, $project, $apiVersion, $ignoreWarnings = null, $checkInTicket = null, $sourceBuildId = null)
    {
        return $this->buildsQueueAsyncWithHttpInfo($organization, $body, $project, $apiVersion, $ignoreWarnings, $checkInTicket, $sourceBuildId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsQueueAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $ignoreWarnings  (optional)
     * @param  string $checkInTicket  (optional)
     * @param  int $sourceBuildId  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsQueueAsyncWithHttpInfo($organization, $body, $project, $apiVersion, $ignoreWarnings = null, $checkInTicket = null, $sourceBuildId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsQueueRequest($organization, $body, $project, $apiVersion, $ignoreWarnings, $checkInTicket, $sourceBuildId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsQueue'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $ignoreWarnings  (optional)
     * @param  string $checkInTicket  (optional)
     * @param  int $sourceBuildId  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsQueueRequest($organization, $body, $project, $apiVersion, $ignoreWarnings = null, $checkInTicket = null, $sourceBuildId = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsQueue'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling buildsQueue'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsQueue'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsQueue'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ignoreWarnings !== null) {
            $queryParams['ignoreWarnings'] = ObjectSerializer::toQueryValue($ignoreWarnings);
        }
        // query params
        if ($checkInTicket !== null) {
            $queryParams['checkInTicket'] = ObjectSerializer::toQueryValue($checkInTicket);
        }
        // query params
        if ($sourceBuildId !== null) {
            $queryParams['sourceBuildId'] = ObjectSerializer::toQueryValue($sourceBuildId);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsUpdateBuild
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body The build. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $retry  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function buildsUpdateBuild($organization, $body, $project, $buildId, $apiVersion, $retry = null)
    {
        list($response) = $this->buildsUpdateBuildWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $retry);
        return $response;
    }

    /**
     * Operation buildsUpdateBuildWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body The build. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $retry  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsUpdateBuildWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $retry = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsUpdateBuildRequest($organization, $body, $project, $buildId, $apiVersion, $retry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsUpdateBuildAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body The build. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $retry  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateBuildAsync($organization, $body, $project, $buildId, $apiVersion, $retry = null)
    {
        return $this->buildsUpdateBuildAsyncWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $retry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsUpdateBuildAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body The build. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $retry  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateBuildAsyncWithHttpInfo($organization, $body, $project, $buildId, $apiVersion, $retry = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build';
        $request = $this->buildsUpdateBuildRequest($organization, $body, $project, $buildId, $apiVersion, $retry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsUpdateBuild'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build $body The build. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $buildId The ID of the build. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     * @param  bool $retry  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsUpdateBuildRequest($organization, $body, $project, $buildId, $apiVersion, $retry = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsUpdateBuild'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling buildsUpdateBuild'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsUpdateBuild'
            );
        }
        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling buildsUpdateBuild'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsUpdateBuild'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds/{buildId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($retry !== null) {
            $queryParams['retry'] = ObjectSerializer::toQueryValue($retry);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'buildId' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsUpdateBuilds
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build[] $body The builds to update. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build[]
     */
    public function buildsUpdateBuilds($organization, $body, $project, $apiVersion)
    {
        list($response) = $this->buildsUpdateBuildsWithHttpInfo($organization, $body, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation buildsUpdateBuildsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build[] $body The builds to update. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Build\Model\Build[], HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsUpdateBuildsWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]';
        $request = $this->buildsUpdateBuildsRequest($organization, $body, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsUpdateBuildsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build[] $body The builds to update. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateBuildsAsync($organization, $body, $project, $apiVersion)
    {
        return $this->buildsUpdateBuildsAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsUpdateBuildsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build[] $body The builds to update. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateBuildsAsyncWithHttpInfo($organization, $body, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Build\Model\Build[]';
        $request = $this->buildsUpdateBuildsRequest($organization, $body, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsUpdateBuilds'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Build\Model\Build[] $body The builds to update. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.5&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsUpdateBuildsRequest($organization, $body, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling buildsUpdateBuilds'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling buildsUpdateBuilds'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling buildsUpdateBuilds'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling buildsUpdateBuilds'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
