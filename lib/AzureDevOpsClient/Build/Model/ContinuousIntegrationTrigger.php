<?php
/**
 * ContinuousIntegrationTrigger
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * ContinuousIntegrationTrigger Class Doc Comment
 *
 * @category Class
 * @description Represents a continuous integration (CI) trigger.
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContinuousIntegrationTrigger implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContinuousIntegrationTrigger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'triggerType' => 'string',
        'batchChanges' => 'bool',
        'branchFilters' => 'string[]',
        'maxConcurrentBuildsPerBranch' => 'int',
        'pathFilters' => 'string[]',
        'pollingInterval' => 'int',
        'pollingJobId' => 'string',
        'settingsSourceType' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'triggerType' => null,
        'batchChanges' => null,
        'branchFilters' => null,
        'maxConcurrentBuildsPerBranch' => 'int32',
        'pathFilters' => null,
        'pollingInterval' => 'int32',
        'pollingJobId' => 'uuid',
        'settingsSourceType' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'triggerType' => 'triggerType',
        'batchChanges' => 'batchChanges',
        'branchFilters' => 'branchFilters',
        'maxConcurrentBuildsPerBranch' => 'maxConcurrentBuildsPerBranch',
        'pathFilters' => 'pathFilters',
        'pollingInterval' => 'pollingInterval',
        'pollingJobId' => 'pollingJobId',
        'settingsSourceType' => 'settingsSourceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'triggerType' => 'setTriggerType',
        'batchChanges' => 'setBatchChanges',
        'branchFilters' => 'setBranchFilters',
        'maxConcurrentBuildsPerBranch' => 'setMaxConcurrentBuildsPerBranch',
        'pathFilters' => 'setPathFilters',
        'pollingInterval' => 'setPollingInterval',
        'pollingJobId' => 'setPollingJobId',
        'settingsSourceType' => 'setSettingsSourceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'triggerType' => 'getTriggerType',
        'batchChanges' => 'getBatchChanges',
        'branchFilters' => 'getBranchFilters',
        'maxConcurrentBuildsPerBranch' => 'getMaxConcurrentBuildsPerBranch',
        'pathFilters' => 'getPathFilters',
        'pollingInterval' => 'getPollingInterval',
        'pollingJobId' => 'getPollingJobId',
        'settingsSourceType' => 'getSettingsSourceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRIGGER_TYPE_NONE = 'none';
    const TRIGGER_TYPE_CONTINUOUS_INTEGRATION = 'continuousIntegration';
    const TRIGGER_TYPE_BATCHED_CONTINUOUS_INTEGRATION = 'batchedContinuousIntegration';
    const TRIGGER_TYPE_SCHEDULE = 'schedule';
    const TRIGGER_TYPE_GATED_CHECK_IN = 'gatedCheckIn';
    const TRIGGER_TYPE_BATCHED_GATED_CHECK_IN = 'batchedGatedCheckIn';
    const TRIGGER_TYPE_PULL_REQUEST = 'pullRequest';
    const TRIGGER_TYPE_BUILD_COMPLETION = 'buildCompletion';
    const TRIGGER_TYPE_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerTypeAllowableValues()
    {
        return [
            self::TRIGGER_TYPE_NONE,
            self::TRIGGER_TYPE_CONTINUOUS_INTEGRATION,
            self::TRIGGER_TYPE_BATCHED_CONTINUOUS_INTEGRATION,
            self::TRIGGER_TYPE_SCHEDULE,
            self::TRIGGER_TYPE_GATED_CHECK_IN,
            self::TRIGGER_TYPE_BATCHED_GATED_CHECK_IN,
            self::TRIGGER_TYPE_PULL_REQUEST,
            self::TRIGGER_TYPE_BUILD_COMPLETION,
            self::TRIGGER_TYPE_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['triggerType'] = isset($data['triggerType']) ? $data['triggerType'] : null;
        $this->container['batchChanges'] = isset($data['batchChanges']) ? $data['batchChanges'] : null;
        $this->container['branchFilters'] = isset($data['branchFilters']) ? $data['branchFilters'] : null;
        $this->container['maxConcurrentBuildsPerBranch'] = isset($data['maxConcurrentBuildsPerBranch']) ? $data['maxConcurrentBuildsPerBranch'] : null;
        $this->container['pathFilters'] = isset($data['pathFilters']) ? $data['pathFilters'] : null;
        $this->container['pollingInterval'] = isset($data['pollingInterval']) ? $data['pollingInterval'] : null;
        $this->container['pollingJobId'] = isset($data['pollingJobId']) ? $data['pollingJobId'] : null;
        $this->container['settingsSourceType'] = isset($data['settingsSourceType']) ? $data['settingsSourceType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($this->container['triggerType']) && !in_array($this->container['triggerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'triggerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets triggerType
     *
     * @return string
     */
    public function getTriggerType()
    {
        return $this->container['triggerType'];
    }

    /**
     * Sets triggerType
     *
     * @param string $triggerType The type of the trigger.
     *
     * @return $this
     */
    public function setTriggerType($triggerType)
    {
        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($triggerType) && !in_array($triggerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'triggerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggerType'] = $triggerType;

        return $this;
    }

    /**
     * Gets batchChanges
     *
     * @return bool
     */
    public function getBatchChanges()
    {
        return $this->container['batchChanges'];
    }

    /**
     * Sets batchChanges
     *
     * @param bool $batchChanges Indicates whether changes should be batched while another CI build is running.
     *
     * @return $this
     */
    public function setBatchChanges($batchChanges)
    {
        $this->container['batchChanges'] = $batchChanges;

        return $this;
    }

    /**
     * Gets branchFilters
     *
     * @return string[]
     */
    public function getBranchFilters()
    {
        return $this->container['branchFilters'];
    }

    /**
     * Sets branchFilters
     *
     * @param string[] $branchFilters branchFilters
     *
     * @return $this
     */
    public function setBranchFilters($branchFilters)
    {
        $this->container['branchFilters'] = $branchFilters;

        return $this;
    }

    /**
     * Gets maxConcurrentBuildsPerBranch
     *
     * @return int
     */
    public function getMaxConcurrentBuildsPerBranch()
    {
        return $this->container['maxConcurrentBuildsPerBranch'];
    }

    /**
     * Sets maxConcurrentBuildsPerBranch
     *
     * @param int $maxConcurrentBuildsPerBranch The maximum number of simultaneous CI builds that will run per branch.
     *
     * @return $this
     */
    public function setMaxConcurrentBuildsPerBranch($maxConcurrentBuildsPerBranch)
    {
        $this->container['maxConcurrentBuildsPerBranch'] = $maxConcurrentBuildsPerBranch;

        return $this;
    }

    /**
     * Gets pathFilters
     *
     * @return string[]
     */
    public function getPathFilters()
    {
        return $this->container['pathFilters'];
    }

    /**
     * Sets pathFilters
     *
     * @param string[] $pathFilters pathFilters
     *
     * @return $this
     */
    public function setPathFilters($pathFilters)
    {
        $this->container['pathFilters'] = $pathFilters;

        return $this;
    }

    /**
     * Gets pollingInterval
     *
     * @return int
     */
    public function getPollingInterval()
    {
        return $this->container['pollingInterval'];
    }

    /**
     * Sets pollingInterval
     *
     * @param int $pollingInterval The polling interval, in seconds.
     *
     * @return $this
     */
    public function setPollingInterval($pollingInterval)
    {
        $this->container['pollingInterval'] = $pollingInterval;

        return $this;
    }

    /**
     * Gets pollingJobId
     *
     * @return string
     */
    public function getPollingJobId()
    {
        return $this->container['pollingJobId'];
    }

    /**
     * Sets pollingJobId
     *
     * @param string $pollingJobId The ID of the job used to poll an external repository.
     *
     * @return $this
     */
    public function setPollingJobId($pollingJobId)
    {
        $this->container['pollingJobId'] = $pollingJobId;

        return $this;
    }

    /**
     * Gets settingsSourceType
     *
     * @return int
     */
    public function getSettingsSourceType()
    {
        return $this->container['settingsSourceType'];
    }

    /**
     * Sets settingsSourceType
     *
     * @param int $settingsSourceType settingsSourceType
     *
     * @return $this
     */
    public function setSettingsSourceType($settingsSourceType)
    {
        $this->container['settingsSourceType'] = $settingsSourceType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


