<?php
/**
 * BuildSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildSummary Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\XamlBuildReference',
        'finishTime' => '\DateTime',
        'keepForever' => 'bool',
        'quality' => 'string',
        'reason' => 'string',
        'requestedFor' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef',
        'startTime' => '\DateTime',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build' => null,
        'finishTime' => 'date-time',
        'keepForever' => null,
        'quality' => null,
        'reason' => null,
        'requestedFor' => null,
        'startTime' => 'date-time',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build' => 'build',
        'finishTime' => 'finishTime',
        'keepForever' => 'keepForever',
        'quality' => 'quality',
        'reason' => 'reason',
        'requestedFor' => 'requestedFor',
        'startTime' => 'startTime',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build' => 'setBuild',
        'finishTime' => 'setFinishTime',
        'keepForever' => 'setKeepForever',
        'quality' => 'setQuality',
        'reason' => 'setReason',
        'requestedFor' => 'setRequestedFor',
        'startTime' => 'setStartTime',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build' => 'getBuild',
        'finishTime' => 'getFinishTime',
        'keepForever' => 'getKeepForever',
        'quality' => 'getQuality',
        'reason' => 'getReason',
        'requestedFor' => 'getRequestedFor',
        'startTime' => 'getStartTime',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_NONE = 'none';
    const REASON_MANUAL = 'manual';
    const REASON_INDIVIDUAL_CI = 'individualCI';
    const REASON_BATCHED_CI = 'batchedCI';
    const REASON_SCHEDULE = 'schedule';
    const REASON_SCHEDULE_FORCED = 'scheduleForced';
    const REASON_USER_CREATED = 'userCreated';
    const REASON_VALIDATE_SHELVESET = 'validateShelveset';
    const REASON_CHECK_IN_SHELVESET = 'checkInShelveset';
    const REASON_PULL_REQUEST = 'pullRequest';
    const REASON_BUILD_COMPLETION = 'buildCompletion';
    const REASON_RESOURCE_TRIGGER = 'resourceTrigger';
    const REASON_TRIGGERED = 'triggered';
    const REASON_ALL = 'all';
    const STATUS_NONE = 'none';
    const STATUS_IN_PROGRESS = 'inProgress';
    const STATUS_COMPLETED = 'completed';
    const STATUS_CANCELLING = 'cancelling';
    const STATUS_POSTPONED = 'postponed';
    const STATUS_NOT_STARTED = 'notStarted';
    const STATUS_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NONE,
            self::REASON_MANUAL,
            self::REASON_INDIVIDUAL_CI,
            self::REASON_BATCHED_CI,
            self::REASON_SCHEDULE,
            self::REASON_SCHEDULE_FORCED,
            self::REASON_USER_CREATED,
            self::REASON_VALIDATE_SHELVESET,
            self::REASON_CHECK_IN_SHELVESET,
            self::REASON_PULL_REQUEST,
            self::REASON_BUILD_COMPLETION,
            self::REASON_RESOURCE_TRIGGER,
            self::REASON_TRIGGERED,
            self::REASON_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLING,
            self::STATUS_POSTPONED,
            self::STATUS_NOT_STARTED,
            self::STATUS_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['keepForever'] = isset($data['keepForever']) ? $data['keepForever'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['requestedFor'] = isset($data['requestedFor']) ? $data['requestedFor'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets build
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\XamlBuildReference
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\XamlBuildReference $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return \DateTime
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param \DateTime $finishTime finishTime
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets keepForever
     *
     * @return bool
     */
    public function getKeepForever()
    {
        return $this->container['keepForever'];
    }

    /**
     * Sets keepForever
     *
     * @param bool $keepForever keepForever
     *
     * @return $this
     */
    public function setKeepForever($keepForever)
    {
        $this->container['keepForever'] = $keepForever;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string $quality quality
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets requestedFor
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getRequestedFor()
    {
        return $this->container['requestedFor'];
    }

    /**
     * Sets requestedFor
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef $requestedFor requestedFor
     *
     * @return $this
     */
    public function setRequestedFor($requestedFor)
    {
        $this->container['requestedFor'] = $requestedFor;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime startTime
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


