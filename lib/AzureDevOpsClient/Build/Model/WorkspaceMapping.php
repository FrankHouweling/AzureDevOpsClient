<?php
/**
 * WorkspaceMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * WorkspaceMapping Class Doc Comment
 *
 * @category Class
 * @description Mapping for a workspace
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkspaceMapping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkspaceMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definitionUri' => 'string',
        'depth' => 'int',
        'localItem' => 'string',
        'mappingType' => 'string',
        'serverItem' => 'string',
        'workspaceId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definitionUri' => null,
        'depth' => 'int32',
        'localItem' => null,
        'mappingType' => null,
        'serverItem' => null,
        'workspaceId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definitionUri' => 'definitionUri',
        'depth' => 'depth',
        'localItem' => 'localItem',
        'mappingType' => 'mappingType',
        'serverItem' => 'serverItem',
        'workspaceId' => 'workspaceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definitionUri' => 'setDefinitionUri',
        'depth' => 'setDepth',
        'localItem' => 'setLocalItem',
        'mappingType' => 'setMappingType',
        'serverItem' => 'setServerItem',
        'workspaceId' => 'setWorkspaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definitionUri' => 'getDefinitionUri',
        'depth' => 'getDepth',
        'localItem' => 'getLocalItem',
        'mappingType' => 'getMappingType',
        'serverItem' => 'getServerItem',
        'workspaceId' => 'getWorkspaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAPPING_TYPE_MAP = 'map';
    const MAPPING_TYPE_CLOAK = 'cloak';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMappingTypeAllowableValues()
    {
        return [
            self::MAPPING_TYPE_MAP,
            self::MAPPING_TYPE_CLOAK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definitionUri'] = isset($data['definitionUri']) ? $data['definitionUri'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['localItem'] = isset($data['localItem']) ? $data['localItem'] : null;
        $this->container['mappingType'] = isset($data['mappingType']) ? $data['mappingType'] : null;
        $this->container['serverItem'] = isset($data['serverItem']) ? $data['serverItem'] : null;
        $this->container['workspaceId'] = isset($data['workspaceId']) ? $data['workspaceId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMappingTypeAllowableValues();
        if (!is_null($this->container['mappingType']) && !in_array($this->container['mappingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mappingType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definitionUri
     *
     * @return string
     */
    public function getDefinitionUri()
    {
        return $this->container['definitionUri'];
    }

    /**
     * Sets definitionUri
     *
     * @param string $definitionUri Uri of the associated definition
     *
     * @return $this
     */
    public function setDefinitionUri($definitionUri)
    {
        $this->container['definitionUri'] = $definitionUri;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int $depth Depth of this mapping
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets localItem
     *
     * @return string
     */
    public function getLocalItem()
    {
        return $this->container['localItem'];
    }

    /**
     * Sets localItem
     *
     * @param string $localItem local location of the definition
     *
     * @return $this
     */
    public function setLocalItem($localItem)
    {
        $this->container['localItem'] = $localItem;

        return $this;
    }

    /**
     * Gets mappingType
     *
     * @return string
     */
    public function getMappingType()
    {
        return $this->container['mappingType'];
    }

    /**
     * Sets mappingType
     *
     * @param string $mappingType type of workspace mapping
     *
     * @return $this
     */
    public function setMappingType($mappingType)
    {
        $allowedValues = $this->getMappingTypeAllowableValues();
        if (!is_null($mappingType) && !in_array($mappingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mappingType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mappingType'] = $mappingType;

        return $this;
    }

    /**
     * Gets serverItem
     *
     * @return string
     */
    public function getServerItem()
    {
        return $this->container['serverItem'];
    }

    /**
     * Sets serverItem
     *
     * @param string $serverItem Server location of the definition
     *
     * @return $this
     */
    public function setServerItem($serverItem)
    {
        $this->container['serverItem'] = $serverItem;

        return $this;
    }

    /**
     * Gets workspaceId
     *
     * @return int
     */
    public function getWorkspaceId()
    {
        return $this->container['workspaceId'];
    }

    /**
     * Sets workspaceId
     *
     * @param int $workspaceId Id of the workspace
     *
     * @return $this
     */
    public function setWorkspaceId($workspaceId)
    {
        $this->container['workspaceId'] = $workspaceId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


