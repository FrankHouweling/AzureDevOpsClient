<?php
/**
 * AgentPoolQueueTarget
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * AgentPoolQueueTarget Class Doc Comment
 *
 * @category Class
 * @description Describes how a phase should run against an agent queue.
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentPoolQueueTarget implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgentPoolQueueTarget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'int',
        'agentSpecification' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification',
        'allowScriptsAuthAccessOption' => 'bool',
        'demands' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[]',
        'executionOptions' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentTargetExecutionOptions',
        'queue' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => 'int32',
        'agentSpecification' => null,
        'allowScriptsAuthAccessOption' => null,
        'demands' => null,
        'executionOptions' => null,
        'queue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'agentSpecification' => 'agentSpecification',
        'allowScriptsAuthAccessOption' => 'allowScriptsAuthAccessOption',
        'demands' => 'demands',
        'executionOptions' => 'executionOptions',
        'queue' => 'queue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'agentSpecification' => 'setAgentSpecification',
        'allowScriptsAuthAccessOption' => 'setAllowScriptsAuthAccessOption',
        'demands' => 'setDemands',
        'executionOptions' => 'setExecutionOptions',
        'queue' => 'setQueue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'agentSpecification' => 'getAgentSpecification',
        'allowScriptsAuthAccessOption' => 'getAllowScriptsAuthAccessOption',
        'demands' => 'getDemands',
        'executionOptions' => 'getExecutionOptions',
        'queue' => 'getQueue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['agentSpecification'] = isset($data['agentSpecification']) ? $data['agentSpecification'] : null;
        $this->container['allowScriptsAuthAccessOption'] = isset($data['allowScriptsAuthAccessOption']) ? $data['allowScriptsAuthAccessOption'] : null;
        $this->container['demands'] = isset($data['demands']) ? $data['demands'] : null;
        $this->container['executionOptions'] = isset($data['executionOptions']) ? $data['executionOptions'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of the target.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets agentSpecification
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification
     */
    public function getAgentSpecification()
    {
        return $this->container['agentSpecification'];
    }

    /**
     * Sets agentSpecification
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification $agentSpecification Agent specification of the target.
     *
     * @return $this
     */
    public function setAgentSpecification($agentSpecification)
    {
        $this->container['agentSpecification'] = $agentSpecification;

        return $this;
    }

    /**
     * Gets allowScriptsAuthAccessOption
     *
     * @return bool
     */
    public function getAllowScriptsAuthAccessOption()
    {
        return $this->container['allowScriptsAuthAccessOption'];
    }

    /**
     * Sets allowScriptsAuthAccessOption
     *
     * @param bool $allowScriptsAuthAccessOption Enables scripts and other processes launched while executing phase to access the OAuth token
     *
     * @return $this
     */
    public function setAllowScriptsAuthAccessOption($allowScriptsAuthAccessOption)
    {
        $this->container['allowScriptsAuthAccessOption'] = $allowScriptsAuthAccessOption;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[]
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[] $demands demands
     *
     * @return $this
     */
    public function setDemands($demands)
    {
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets executionOptions
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentTargetExecutionOptions
     */
    public function getExecutionOptions()
    {
        return $this->container['executionOptions'];
    }

    /**
     * Sets executionOptions
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentTargetExecutionOptions $executionOptions The execution options.
     *
     * @return $this
     */
    public function setExecutionOptions($executionOptions)
    {
        $this->container['executionOptions'] = $executionOptions;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue $queue The queue.
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


