<?php
/**
 * BuildDefinitionSourceProvider
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildDefinitionSourceProvider Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildDefinitionSourceProvider implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildDefinitionSourceProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definitionUri' => 'string',
        'fields' => 'map[string,string]',
        'id' => 'int',
        'lastModified' => '\DateTime',
        'name' => 'string',
        'supportedTriggerTypes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definitionUri' => null,
        'fields' => null,
        'id' => 'int32',
        'lastModified' => 'date-time',
        'name' => null,
        'supportedTriggerTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definitionUri' => 'definitionUri',
        'fields' => 'fields',
        'id' => 'id',
        'lastModified' => 'lastModified',
        'name' => 'name',
        'supportedTriggerTypes' => 'supportedTriggerTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definitionUri' => 'setDefinitionUri',
        'fields' => 'setFields',
        'id' => 'setId',
        'lastModified' => 'setLastModified',
        'name' => 'setName',
        'supportedTriggerTypes' => 'setSupportedTriggerTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definitionUri' => 'getDefinitionUri',
        'fields' => 'getFields',
        'id' => 'getId',
        'lastModified' => 'getLastModified',
        'name' => 'getName',
        'supportedTriggerTypes' => 'getSupportedTriggerTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUPPORTED_TRIGGER_TYPES_NONE = 'none';
    const SUPPORTED_TRIGGER_TYPES_CONTINUOUS_INTEGRATION = 'continuousIntegration';
    const SUPPORTED_TRIGGER_TYPES_BATCHED_CONTINUOUS_INTEGRATION = 'batchedContinuousIntegration';
    const SUPPORTED_TRIGGER_TYPES_SCHEDULE = 'schedule';
    const SUPPORTED_TRIGGER_TYPES_GATED_CHECK_IN = 'gatedCheckIn';
    const SUPPORTED_TRIGGER_TYPES_BATCHED_GATED_CHECK_IN = 'batchedGatedCheckIn';
    const SUPPORTED_TRIGGER_TYPES_PULL_REQUEST = 'pullRequest';
    const SUPPORTED_TRIGGER_TYPES_BUILD_COMPLETION = 'buildCompletion';
    const SUPPORTED_TRIGGER_TYPES_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedTriggerTypesAllowableValues()
    {
        return [
            self::SUPPORTED_TRIGGER_TYPES_NONE,
            self::SUPPORTED_TRIGGER_TYPES_CONTINUOUS_INTEGRATION,
            self::SUPPORTED_TRIGGER_TYPES_BATCHED_CONTINUOUS_INTEGRATION,
            self::SUPPORTED_TRIGGER_TYPES_SCHEDULE,
            self::SUPPORTED_TRIGGER_TYPES_GATED_CHECK_IN,
            self::SUPPORTED_TRIGGER_TYPES_BATCHED_GATED_CHECK_IN,
            self::SUPPORTED_TRIGGER_TYPES_PULL_REQUEST,
            self::SUPPORTED_TRIGGER_TYPES_BUILD_COMPLETION,
            self::SUPPORTED_TRIGGER_TYPES_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definitionUri'] = isset($data['definitionUri']) ? $data['definitionUri'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastModified'] = isset($data['lastModified']) ? $data['lastModified'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['supportedTriggerTypes'] = isset($data['supportedTriggerTypes']) ? $data['supportedTriggerTypes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSupportedTriggerTypesAllowableValues();
        if (!is_null($this->container['supportedTriggerTypes']) && !in_array($this->container['supportedTriggerTypes'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'supportedTriggerTypes', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definitionUri
     *
     * @return string
     */
    public function getDefinitionUri()
    {
        return $this->container['definitionUri'];
    }

    /**
     * Sets definitionUri
     *
     * @param string $definitionUri Uri of the associated definition
     *
     * @return $this
     */
    public function setDefinitionUri($definitionUri)
    {
        $this->container['definitionUri'] = $definitionUri;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return map[string,string]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param map[string,string] $fields fields associated with this build definition
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id of this source provider
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param \DateTime $lastModified The lst time this source provider was modified
     *
     * @return $this
     */
    public function setLastModified($lastModified)
    {
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the source provider
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets supportedTriggerTypes
     *
     * @return string
     */
    public function getSupportedTriggerTypes()
    {
        return $this->container['supportedTriggerTypes'];
    }

    /**
     * Sets supportedTriggerTypes
     *
     * @param string $supportedTriggerTypes Which trigger types are supported by this definition source provider
     *
     * @return $this
     */
    public function setSupportedTriggerTypes($supportedTriggerTypes)
    {
        $allowedValues = $this->getSupportedTriggerTypesAllowableValues();
        if (!is_null($supportedTriggerTypes) && !in_array($supportedTriggerTypes, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supportedTriggerTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supportedTriggerTypes'] = $supportedTriggerTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


