<?php
/**
 * BuildDefinition32
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildDefinition32 Class Doc Comment
 *
 * @category Class
 * @description For back-compat with extensions that use the old Steps format instead of Process and Phases
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildDefinition32 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildDefinition3_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks',
        'authoredBy' => '\FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef',
        'draftOf' => '\FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference',
        'drafts' => '\FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference[]',
        'metrics' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildMetric[]',
        'quality' => 'string',
        'queue' => '\FrankHouweling\AzureDevOpsClient\Build\Model\AgentPoolQueue',
        'createdDate' => '\DateTime',
        'id' => 'int',
        'name' => 'string',
        'path' => 'string',
        'project' => '\FrankHouweling\AzureDevOpsClient\Build\Model\TeamProjectReference',
        'queueStatus' => 'string',
        'revision' => 'int',
        'type' => 'string',
        'uri' => 'string',
        'url' => 'string',
        'badgeEnabled' => 'bool',
        'build' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionStep[]',
        'buildNumberFormat' => 'string',
        'comment' => 'string',
        'demands' => '\FrankHouweling\AzureDevOpsClient\Build\Model\Demand[]',
        'description' => 'string',
        'dropLocation' => 'string',
        'jobAuthorizationScope' => 'string',
        'jobCancelTimeoutInMinutes' => 'int',
        'jobTimeoutInMinutes' => 'int',
        'latestBuild' => '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
        'latestCompletedBuild' => '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
        'options' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildOption[]',
        'processParameters' => '\FrankHouweling\AzureDevOpsClient\Build\Model\ProcessParameters',
        'properties' => '\FrankHouweling\AzureDevOpsClient\Build\Model\PropertiesCollection',
        'repository' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildRepository',
        'retentionRules' => '\FrankHouweling\AzureDevOpsClient\Build\Model\RetentionPolicy[]',
        'tags' => 'string[]',
        'triggers' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildTrigger[]',
        'variables' => 'map[string,\FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionVariable]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'authoredBy' => null,
        'draftOf' => null,
        'drafts' => null,
        'metrics' => null,
        'quality' => null,
        'queue' => null,
        'createdDate' => 'date-time',
        'id' => 'int32',
        'name' => null,
        'path' => null,
        'project' => null,
        'queueStatus' => null,
        'revision' => 'int32',
        'type' => null,
        'uri' => null,
        'url' => null,
        'badgeEnabled' => null,
        'build' => null,
        'buildNumberFormat' => null,
        'comment' => null,
        'demands' => null,
        'description' => null,
        'dropLocation' => null,
        'jobAuthorizationScope' => null,
        'jobCancelTimeoutInMinutes' => 'int32',
        'jobTimeoutInMinutes' => 'int32',
        'latestBuild' => null,
        'latestCompletedBuild' => null,
        'options' => null,
        'processParameters' => null,
        'properties' => null,
        'repository' => null,
        'retentionRules' => null,
        'tags' => null,
        'triggers' => null,
        'variables' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'authoredBy' => 'authoredBy',
        'draftOf' => 'draftOf',
        'drafts' => 'drafts',
        'metrics' => 'metrics',
        'quality' => 'quality',
        'queue' => 'queue',
        'createdDate' => 'createdDate',
        'id' => 'id',
        'name' => 'name',
        'path' => 'path',
        'project' => 'project',
        'queueStatus' => 'queueStatus',
        'revision' => 'revision',
        'type' => 'type',
        'uri' => 'uri',
        'url' => 'url',
        'badgeEnabled' => 'badgeEnabled',
        'build' => 'build',
        'buildNumberFormat' => 'buildNumberFormat',
        'comment' => 'comment',
        'demands' => 'demands',
        'description' => 'description',
        'dropLocation' => 'dropLocation',
        'jobAuthorizationScope' => 'jobAuthorizationScope',
        'jobCancelTimeoutInMinutes' => 'jobCancelTimeoutInMinutes',
        'jobTimeoutInMinutes' => 'jobTimeoutInMinutes',
        'latestBuild' => 'latestBuild',
        'latestCompletedBuild' => 'latestCompletedBuild',
        'options' => 'options',
        'processParameters' => 'processParameters',
        'properties' => 'properties',
        'repository' => 'repository',
        'retentionRules' => 'retentionRules',
        'tags' => 'tags',
        'triggers' => 'triggers',
        'variables' => 'variables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'authoredBy' => 'setAuthoredBy',
        'draftOf' => 'setDraftOf',
        'drafts' => 'setDrafts',
        'metrics' => 'setMetrics',
        'quality' => 'setQuality',
        'queue' => 'setQueue',
        'createdDate' => 'setCreatedDate',
        'id' => 'setId',
        'name' => 'setName',
        'path' => 'setPath',
        'project' => 'setProject',
        'queueStatus' => 'setQueueStatus',
        'revision' => 'setRevision',
        'type' => 'setType',
        'uri' => 'setUri',
        'url' => 'setUrl',
        'badgeEnabled' => 'setBadgeEnabled',
        'build' => 'setBuild',
        'buildNumberFormat' => 'setBuildNumberFormat',
        'comment' => 'setComment',
        'demands' => 'setDemands',
        'description' => 'setDescription',
        'dropLocation' => 'setDropLocation',
        'jobAuthorizationScope' => 'setJobAuthorizationScope',
        'jobCancelTimeoutInMinutes' => 'setJobCancelTimeoutInMinutes',
        'jobTimeoutInMinutes' => 'setJobTimeoutInMinutes',
        'latestBuild' => 'setLatestBuild',
        'latestCompletedBuild' => 'setLatestCompletedBuild',
        'options' => 'setOptions',
        'processParameters' => 'setProcessParameters',
        'properties' => 'setProperties',
        'repository' => 'setRepository',
        'retentionRules' => 'setRetentionRules',
        'tags' => 'setTags',
        'triggers' => 'setTriggers',
        'variables' => 'setVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'authoredBy' => 'getAuthoredBy',
        'draftOf' => 'getDraftOf',
        'drafts' => 'getDrafts',
        'metrics' => 'getMetrics',
        'quality' => 'getQuality',
        'queue' => 'getQueue',
        'createdDate' => 'getCreatedDate',
        'id' => 'getId',
        'name' => 'getName',
        'path' => 'getPath',
        'project' => 'getProject',
        'queueStatus' => 'getQueueStatus',
        'revision' => 'getRevision',
        'type' => 'getType',
        'uri' => 'getUri',
        'url' => 'getUrl',
        'badgeEnabled' => 'getBadgeEnabled',
        'build' => 'getBuild',
        'buildNumberFormat' => 'getBuildNumberFormat',
        'comment' => 'getComment',
        'demands' => 'getDemands',
        'description' => 'getDescription',
        'dropLocation' => 'getDropLocation',
        'jobAuthorizationScope' => 'getJobAuthorizationScope',
        'jobCancelTimeoutInMinutes' => 'getJobCancelTimeoutInMinutes',
        'jobTimeoutInMinutes' => 'getJobTimeoutInMinutes',
        'latestBuild' => 'getLatestBuild',
        'latestCompletedBuild' => 'getLatestCompletedBuild',
        'options' => 'getOptions',
        'processParameters' => 'getProcessParameters',
        'properties' => 'getProperties',
        'repository' => 'getRepository',
        'retentionRules' => 'getRetentionRules',
        'tags' => 'getTags',
        'triggers' => 'getTriggers',
        'variables' => 'getVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const QUALITY_DEFINITION = 'definition';
    const QUALITY_DRAFT = 'draft';
    const QUEUE_STATUS_ENABLED = 'enabled';
    const QUEUE_STATUS_PAUSED = 'paused';
    const QUEUE_STATUS_DISABLED = 'disabled';
    const TYPE_XAML = 'xaml';
    const TYPE_BUILD = 'build';
    const JOB_AUTHORIZATION_SCOPE_PROJECT_COLLECTION = 'projectCollection';
    const JOB_AUTHORIZATION_SCOPE_PROJECT = 'project';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQualityAllowableValues()
    {
        return [
            self::QUALITY_DEFINITION,
            self::QUALITY_DRAFT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueueStatusAllowableValues()
    {
        return [
            self::QUEUE_STATUS_ENABLED,
            self::QUEUE_STATUS_PAUSED,
            self::QUEUE_STATUS_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_XAML,
            self::TYPE_BUILD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobAuthorizationScopeAllowableValues()
    {
        return [
            self::JOB_AUTHORIZATION_SCOPE_PROJECT_COLLECTION,
            self::JOB_AUTHORIZATION_SCOPE_PROJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['authoredBy'] = isset($data['authoredBy']) ? $data['authoredBy'] : null;
        $this->container['draftOf'] = isset($data['draftOf']) ? $data['draftOf'] : null;
        $this->container['drafts'] = isset($data['drafts']) ? $data['drafts'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['queueStatus'] = isset($data['queueStatus']) ? $data['queueStatus'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['badgeEnabled'] = isset($data['badgeEnabled']) ? $data['badgeEnabled'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildNumberFormat'] = isset($data['buildNumberFormat']) ? $data['buildNumberFormat'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['demands'] = isset($data['demands']) ? $data['demands'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dropLocation'] = isset($data['dropLocation']) ? $data['dropLocation'] : null;
        $this->container['jobAuthorizationScope'] = isset($data['jobAuthorizationScope']) ? $data['jobAuthorizationScope'] : null;
        $this->container['jobCancelTimeoutInMinutes'] = isset($data['jobCancelTimeoutInMinutes']) ? $data['jobCancelTimeoutInMinutes'] : null;
        $this->container['jobTimeoutInMinutes'] = isset($data['jobTimeoutInMinutes']) ? $data['jobTimeoutInMinutes'] : null;
        $this->container['latestBuild'] = isset($data['latestBuild']) ? $data['latestBuild'] : null;
        $this->container['latestCompletedBuild'] = isset($data['latestCompletedBuild']) ? $data['latestCompletedBuild'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['processParameters'] = isset($data['processParameters']) ? $data['processParameters'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['repository'] = isset($data['repository']) ? $data['repository'] : null;
        $this->container['retentionRules'] = isset($data['retentionRules']) ? $data['retentionRules'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['triggers'] = isset($data['triggers']) ? $data['triggers'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQualityAllowableValues();
        if (!is_null($this->container['quality']) && !in_array($this->container['quality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'quality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueueStatusAllowableValues();
        if (!is_null($this->container['queueStatus']) && !in_array($this->container['queueStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queueStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobAuthorizationScopeAllowableValues();
        if (!is_null($this->container['jobAuthorizationScope']) && !in_array($this->container['jobAuthorizationScope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jobAuthorizationScope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets authoredBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getAuthoredBy()
    {
        return $this->container['authoredBy'];
    }

    /**
     * Sets authoredBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef $authoredBy The author of the definition.
     *
     * @return $this
     */
    public function setAuthoredBy($authoredBy)
    {
        $this->container['authoredBy'] = $authoredBy;

        return $this;
    }

    /**
     * Gets draftOf
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference
     */
    public function getDraftOf()
    {
        return $this->container['draftOf'];
    }

    /**
     * Sets draftOf
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference $draftOf A reference to the definition that this definition is a draft of, if this is a draft definition.
     *
     * @return $this
     */
    public function setDraftOf($draftOf)
    {
        $this->container['draftOf'] = $draftOf;

        return $this;
    }

    /**
     * Gets drafts
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference[]
     */
    public function getDrafts()
    {
        return $this->container['drafts'];
    }

    /**
     * Sets drafts
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\DefinitionReference[] $drafts The list of drafts associated with this definition, if this is not a draft definition.
     *
     * @return $this
     */
    public function setDrafts($drafts)
    {
        $this->container['drafts'] = $drafts;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildMetric[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildMetric[] $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string $quality The quality of the definition document (draft, etc.)
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $allowedValues = $this->getQualityAllowableValues();
        if (!is_null($quality) && !in_array($quality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'quality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\AgentPoolQueue
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\AgentPoolQueue $queue The default queue for builds run against this definition.
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate The date this version of the definition was created.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the referenced definition.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the referenced definition.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The folder path of the definition.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\TeamProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\TeamProjectReference $project A reference to the project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets queueStatus
     *
     * @return string
     */
    public function getQueueStatus()
    {
        return $this->container['queueStatus'];
    }

    /**
     * Sets queueStatus
     *
     * @param string $queueStatus A value that indicates whether builds can be queued against this definition.
     *
     * @return $this
     */
    public function setQueueStatus($queueStatus)
    {
        $allowedValues = $this->getQueueStatusAllowableValues();
        if (!is_null($queueStatus) && !in_array($queueStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queueStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queueStatus'] = $queueStatus;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision The definition revision number.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the definition.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri The definition's URI.
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The REST URL of the definition.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets badgeEnabled
     *
     * @return bool
     */
    public function getBadgeEnabled()
    {
        return $this->container['badgeEnabled'];
    }

    /**
     * Sets badgeEnabled
     *
     * @param bool $badgeEnabled Indicates whether badges are enabled for this definition
     *
     * @return $this
     */
    public function setBadgeEnabled($badgeEnabled)
    {
        $this->container['badgeEnabled'] = $badgeEnabled;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionStep[]
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionStep[] $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildNumberFormat
     *
     * @return string
     */
    public function getBuildNumberFormat()
    {
        return $this->container['buildNumberFormat'];
    }

    /**
     * Sets buildNumberFormat
     *
     * @param string $buildNumberFormat The build number format
     *
     * @return $this
     */
    public function setBuildNumberFormat($buildNumberFormat)
    {
        $this->container['buildNumberFormat'] = $buildNumberFormat;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment The comment entered when saving the definition
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Demand[]
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\Demand[] $demands demands
     *
     * @return $this
     */
    public function setDemands($demands)
    {
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dropLocation
     *
     * @return string
     */
    public function getDropLocation()
    {
        return $this->container['dropLocation'];
    }

    /**
     * Sets dropLocation
     *
     * @param string $dropLocation The drop location for the definition
     *
     * @return $this
     */
    public function setDropLocation($dropLocation)
    {
        $this->container['dropLocation'] = $dropLocation;

        return $this;
    }

    /**
     * Gets jobAuthorizationScope
     *
     * @return string
     */
    public function getJobAuthorizationScope()
    {
        return $this->container['jobAuthorizationScope'];
    }

    /**
     * Sets jobAuthorizationScope
     *
     * @param string $jobAuthorizationScope The job authorization scope for builds which are queued against this definition
     *
     * @return $this
     */
    public function setJobAuthorizationScope($jobAuthorizationScope)
    {
        $allowedValues = $this->getJobAuthorizationScopeAllowableValues();
        if (!is_null($jobAuthorizationScope) && !in_array($jobAuthorizationScope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jobAuthorizationScope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jobAuthorizationScope'] = $jobAuthorizationScope;

        return $this;
    }

    /**
     * Gets jobCancelTimeoutInMinutes
     *
     * @return int
     */
    public function getJobCancelTimeoutInMinutes()
    {
        return $this->container['jobCancelTimeoutInMinutes'];
    }

    /**
     * Sets jobCancelTimeoutInMinutes
     *
     * @param int $jobCancelTimeoutInMinutes The job cancel timeout in minutes for builds which are cancelled by user for this definition
     *
     * @return $this
     */
    public function setJobCancelTimeoutInMinutes($jobCancelTimeoutInMinutes)
    {
        $this->container['jobCancelTimeoutInMinutes'] = $jobCancelTimeoutInMinutes;

        return $this;
    }

    /**
     * Gets jobTimeoutInMinutes
     *
     * @return int
     */
    public function getJobTimeoutInMinutes()
    {
        return $this->container['jobTimeoutInMinutes'];
    }

    /**
     * Sets jobTimeoutInMinutes
     *
     * @param int $jobTimeoutInMinutes The job execution timeout in minutes for builds which are queued against this definition
     *
     * @return $this
     */
    public function setJobTimeoutInMinutes($jobTimeoutInMinutes)
    {
        $this->container['jobTimeoutInMinutes'] = $jobTimeoutInMinutes;

        return $this;
    }

    /**
     * Gets latestBuild
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function getLatestBuild()
    {
        return $this->container['latestBuild'];
    }

    /**
     * Sets latestBuild
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\Build $latestBuild latestBuild
     *
     * @return $this
     */
    public function setLatestBuild($latestBuild)
    {
        $this->container['latestBuild'] = $latestBuild;

        return $this;
    }

    /**
     * Gets latestCompletedBuild
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function getLatestCompletedBuild()
    {
        return $this->container['latestCompletedBuild'];
    }

    /**
     * Sets latestCompletedBuild
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\Build $latestCompletedBuild latestCompletedBuild
     *
     * @return $this
     */
    public function setLatestCompletedBuild($latestCompletedBuild)
    {
        $this->container['latestCompletedBuild'] = $latestCompletedBuild;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildOption[] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets processParameters
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ProcessParameters
     */
    public function getProcessParameters()
    {
        return $this->container['processParameters'];
    }

    /**
     * Sets processParameters
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\ProcessParameters $processParameters Process Parameters
     *
     * @return $this
     */
    public function setProcessParameters($processParameters)
    {
        $this->container['processParameters'] = $processParameters;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildRepository
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildRepository $repository The repository
     *
     * @return $this
     */
    public function setRepository($repository)
    {
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets retentionRules
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\RetentionPolicy[]
     */
    public function getRetentionRules()
    {
        return $this->container['retentionRules'];
    }

    /**
     * Sets retentionRules
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\RetentionPolicy[] $retentionRules retentionRules
     *
     * @return $this
     */
    public function setRetentionRules($retentionRules)
    {
        $this->container['retentionRules'] = $retentionRules;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildTrigger[]
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildTrigger[] $triggers triggers
     *
     * @return $this
     */
    public function setTriggers($triggers)
    {
        $this->container['triggers'] = $triggers;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,\FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionVariable]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param map[string,\FrankHouweling\AzureDevOpsClient\Build\Model\BuildDefinitionVariable] $variables variables
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


