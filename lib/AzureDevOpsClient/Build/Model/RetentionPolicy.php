<?php
/**
 * RetentionPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * RetentionPolicy Class Doc Comment
 *
 * @category Class
 * @description Represents a retention policy for a build definition.
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetentionPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetentionPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'artifacts' => 'string[]',
        'artifactTypesToDelete' => 'string[]',
        'branches' => 'string[]',
        'daysToKeep' => 'int',
        'deleteBuildRecord' => 'bool',
        'deleteTestResults' => 'bool',
        'minimumToKeep' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'artifacts' => null,
        'artifactTypesToDelete' => null,
        'branches' => null,
        'daysToKeep' => 'int32',
        'deleteBuildRecord' => null,
        'deleteTestResults' => null,
        'minimumToKeep' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artifacts' => 'artifacts',
        'artifactTypesToDelete' => 'artifactTypesToDelete',
        'branches' => 'branches',
        'daysToKeep' => 'daysToKeep',
        'deleteBuildRecord' => 'deleteBuildRecord',
        'deleteTestResults' => 'deleteTestResults',
        'minimumToKeep' => 'minimumToKeep'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artifacts' => 'setArtifacts',
        'artifactTypesToDelete' => 'setArtifactTypesToDelete',
        'branches' => 'setBranches',
        'daysToKeep' => 'setDaysToKeep',
        'deleteBuildRecord' => 'setDeleteBuildRecord',
        'deleteTestResults' => 'setDeleteTestResults',
        'minimumToKeep' => 'setMinimumToKeep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artifacts' => 'getArtifacts',
        'artifactTypesToDelete' => 'getArtifactTypesToDelete',
        'branches' => 'getBranches',
        'daysToKeep' => 'getDaysToKeep',
        'deleteBuildRecord' => 'getDeleteBuildRecord',
        'deleteTestResults' => 'getDeleteTestResults',
        'minimumToKeep' => 'getMinimumToKeep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['artifacts'] = isset($data['artifacts']) ? $data['artifacts'] : null;
        $this->container['artifactTypesToDelete'] = isset($data['artifactTypesToDelete']) ? $data['artifactTypesToDelete'] : null;
        $this->container['branches'] = isset($data['branches']) ? $data['branches'] : null;
        $this->container['daysToKeep'] = isset($data['daysToKeep']) ? $data['daysToKeep'] : null;
        $this->container['deleteBuildRecord'] = isset($data['deleteBuildRecord']) ? $data['deleteBuildRecord'] : null;
        $this->container['deleteTestResults'] = isset($data['deleteTestResults']) ? $data['deleteTestResults'] : null;
        $this->container['minimumToKeep'] = isset($data['minimumToKeep']) ? $data['minimumToKeep'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artifacts
     *
     * @return string[]
     */
    public function getArtifacts()
    {
        return $this->container['artifacts'];
    }

    /**
     * Sets artifacts
     *
     * @param string[] $artifacts artifacts
     *
     * @return $this
     */
    public function setArtifacts($artifacts)
    {
        $this->container['artifacts'] = $artifacts;

        return $this;
    }

    /**
     * Gets artifactTypesToDelete
     *
     * @return string[]
     */
    public function getArtifactTypesToDelete()
    {
        return $this->container['artifactTypesToDelete'];
    }

    /**
     * Sets artifactTypesToDelete
     *
     * @param string[] $artifactTypesToDelete artifactTypesToDelete
     *
     * @return $this
     */
    public function setArtifactTypesToDelete($artifactTypesToDelete)
    {
        $this->container['artifactTypesToDelete'] = $artifactTypesToDelete;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return string[]
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param string[] $branches branches
     *
     * @return $this
     */
    public function setBranches($branches)
    {
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets daysToKeep
     *
     * @return int
     */
    public function getDaysToKeep()
    {
        return $this->container['daysToKeep'];
    }

    /**
     * Sets daysToKeep
     *
     * @param int $daysToKeep The number of days to keep builds.
     *
     * @return $this
     */
    public function setDaysToKeep($daysToKeep)
    {
        $this->container['daysToKeep'] = $daysToKeep;

        return $this;
    }

    /**
     * Gets deleteBuildRecord
     *
     * @return bool
     */
    public function getDeleteBuildRecord()
    {
        return $this->container['deleteBuildRecord'];
    }

    /**
     * Sets deleteBuildRecord
     *
     * @param bool $deleteBuildRecord Indicates whether the build record itself should be deleted.
     *
     * @return $this
     */
    public function setDeleteBuildRecord($deleteBuildRecord)
    {
        $this->container['deleteBuildRecord'] = $deleteBuildRecord;

        return $this;
    }

    /**
     * Gets deleteTestResults
     *
     * @return bool
     */
    public function getDeleteTestResults()
    {
        return $this->container['deleteTestResults'];
    }

    /**
     * Sets deleteTestResults
     *
     * @param bool $deleteTestResults Indicates whether to delete test results associated with the build.
     *
     * @return $this
     */
    public function setDeleteTestResults($deleteTestResults)
    {
        $this->container['deleteTestResults'] = $deleteTestResults;

        return $this;
    }

    /**
     * Gets minimumToKeep
     *
     * @return int
     */
    public function getMinimumToKeep()
    {
        return $this->container['minimumToKeep'];
    }

    /**
     * Sets minimumToKeep
     *
     * @param int $minimumToKeep The minimum number of builds to keep.
     *
     * @return $this
     */
    public function setMinimumToKeep($minimumToKeep)
    {
        $this->container['minimumToKeep'] = $minimumToKeep;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


