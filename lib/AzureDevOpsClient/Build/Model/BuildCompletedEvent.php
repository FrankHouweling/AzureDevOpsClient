<?php
/**
 * BuildCompletedEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildCompletedEvent Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildCompletedEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildCompletedEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build' => '\FrankHouweling\AzureDevOpsClient\Build\Model\Build',
        'buildId' => 'int',
        'changes' => '\FrankHouweling\AzureDevOpsClient\Build\Model\Change[]',
        'pullRequest' => '\FrankHouweling\AzureDevOpsClient\Build\Model\PullRequest',
        'testResults' => '\FrankHouweling\AzureDevOpsClient\Build\Model\AggregatedResultsAnalysis',
        'timelineRecords' => '\FrankHouweling\AzureDevOpsClient\Build\Model\TimelineRecord[]',
        'workItems' => '\FrankHouweling\AzureDevOpsClient\Build\Model\AssociatedWorkItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build' => null,
        'buildId' => 'int32',
        'changes' => null,
        'pullRequest' => null,
        'testResults' => null,
        'timelineRecords' => null,
        'workItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build' => 'build',
        'buildId' => 'buildId',
        'changes' => 'changes',
        'pullRequest' => 'pullRequest',
        'testResults' => 'testResults',
        'timelineRecords' => 'timelineRecords',
        'workItems' => 'workItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build' => 'setBuild',
        'buildId' => 'setBuildId',
        'changes' => 'setChanges',
        'pullRequest' => 'setPullRequest',
        'testResults' => 'setTestResults',
        'timelineRecords' => 'setTimelineRecords',
        'workItems' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build' => 'getBuild',
        'buildId' => 'getBuildId',
        'changes' => 'getChanges',
        'pullRequest' => 'getPullRequest',
        'testResults' => 'getTestResults',
        'timelineRecords' => 'getTimelineRecords',
        'workItems' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['buildId'] = isset($data['buildId']) ? $data['buildId'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['pullRequest'] = isset($data['pullRequest']) ? $data['pullRequest'] : null;
        $this->container['testResults'] = isset($data['testResults']) ? $data['testResults'] : null;
        $this->container['timelineRecords'] = isset($data['timelineRecords']) ? $data['timelineRecords'] : null;
        $this->container['workItems'] = isset($data['workItems']) ? $data['workItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets build
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Build
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\Build $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets buildId
     *
     * @return int
     */
    public function getBuildId()
    {
        return $this->container['buildId'];
    }

    /**
     * Sets buildId
     *
     * @param int $buildId buildId
     *
     * @return $this
     */
    public function setBuildId($buildId)
    {
        $this->container['buildId'] = $buildId;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\Change[]
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\Change[] $changes Changes associated with a build used for build notifications
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets pullRequest
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\PullRequest
     */
    public function getPullRequest()
    {
        return $this->container['pullRequest'];
    }

    /**
     * Sets pullRequest
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\PullRequest $pullRequest Pull request for the build used for build notifications
     *
     * @return $this
     */
    public function setPullRequest($pullRequest)
    {
        $this->container['pullRequest'] = $pullRequest;

        return $this;
    }

    /**
     * Gets testResults
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\AggregatedResultsAnalysis
     */
    public function getTestResults()
    {
        return $this->container['testResults'];
    }

    /**
     * Sets testResults
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\AggregatedResultsAnalysis $testResults Test results associated with a build used for build notifications
     *
     * @return $this
     */
    public function setTestResults($testResults)
    {
        $this->container['testResults'] = $testResults;

        return $this;
    }

    /**
     * Gets timelineRecords
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\TimelineRecord[]
     */
    public function getTimelineRecords()
    {
        return $this->container['timelineRecords'];
    }

    /**
     * Sets timelineRecords
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\TimelineRecord[] $timelineRecords Timeline records associated with a build used for build notifications
     *
     * @return $this
     */
    public function setTimelineRecords($timelineRecords)
    {
        $this->container['timelineRecords'] = $timelineRecords;

        return $this;
    }

    /**
     * Gets workItems
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\AssociatedWorkItem[]
     */
    public function getWorkItems()
    {
        return $this->container['workItems'];
    }

    /**
     * Sets workItems
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\AssociatedWorkItem[] $workItems Work items associated with a build used for build notifications
     *
     * @return $this
     */
    public function setWorkItems($workItems)
    {
        $this->container['workItems'] = $workItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


