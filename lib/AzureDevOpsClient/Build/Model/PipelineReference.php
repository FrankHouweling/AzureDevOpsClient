<?php
/**
 * PipelineReference
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * PipelineReference Class Doc Comment
 *
 * @category Class
 * @description Pipeline reference
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PipelineReference implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PipelineReference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jobReference' => '\FrankHouweling\AzureDevOpsClient\Build\Model\JobReference',
        'phaseReference' => '\FrankHouweling\AzureDevOpsClient\Build\Model\PhaseReference',
        'pipelineId' => 'int',
        'stageReference' => '\FrankHouweling\AzureDevOpsClient\Build\Model\StageReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jobReference' => null,
        'phaseReference' => null,
        'pipelineId' => 'int32',
        'stageReference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobReference' => 'jobReference',
        'phaseReference' => 'phaseReference',
        'pipelineId' => 'pipelineId',
        'stageReference' => 'stageReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobReference' => 'setJobReference',
        'phaseReference' => 'setPhaseReference',
        'pipelineId' => 'setPipelineId',
        'stageReference' => 'setStageReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobReference' => 'getJobReference',
        'phaseReference' => 'getPhaseReference',
        'pipelineId' => 'getPipelineId',
        'stageReference' => 'getStageReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jobReference'] = isset($data['jobReference']) ? $data['jobReference'] : null;
        $this->container['phaseReference'] = isset($data['phaseReference']) ? $data['phaseReference'] : null;
        $this->container['pipelineId'] = isset($data['pipelineId']) ? $data['pipelineId'] : null;
        $this->container['stageReference'] = isset($data['stageReference']) ? $data['stageReference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jobReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\JobReference
     */
    public function getJobReference()
    {
        return $this->container['jobReference'];
    }

    /**
     * Sets jobReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\JobReference $jobReference Reference of the job
     *
     * @return $this
     */
    public function setJobReference($jobReference)
    {
        $this->container['jobReference'] = $jobReference;

        return $this;
    }

    /**
     * Gets phaseReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\PhaseReference
     */
    public function getPhaseReference()
    {
        return $this->container['phaseReference'];
    }

    /**
     * Sets phaseReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\PhaseReference $phaseReference Reference of the phase.
     *
     * @return $this
     */
    public function setPhaseReference($phaseReference)
    {
        $this->container['phaseReference'] = $phaseReference;

        return $this;
    }

    /**
     * Gets pipelineId
     *
     * @return int
     */
    public function getPipelineId()
    {
        return $this->container['pipelineId'];
    }

    /**
     * Sets pipelineId
     *
     * @param int $pipelineId Reference of the pipeline with which this pipeline instance is related.
     *
     * @return $this
     */
    public function setPipelineId($pipelineId)
    {
        $this->container['pipelineId'] = $pipelineId;

        return $this;
    }

    /**
     * Gets stageReference
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\StageReference
     */
    public function getStageReference()
    {
        return $this->container['stageReference'];
    }

    /**
     * Sets stageReference
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\StageReference $stageReference Reference of the stage.
     *
     * @return $this
     */
    public function setStageReference($stageReference)
    {
        $this->container['stageReference'] = $stageReference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


