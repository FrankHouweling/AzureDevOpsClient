<?php
/**
 * PullRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @description Represents a pull request object.  These are retrieved from Source Providers.
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks',
        'author' => '\FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef',
        'currentState' => 'string',
        'description' => 'string',
        'id' => 'string',
        'providerName' => 'string',
        'sourceBranchRef' => 'string',
        'sourceRepositoryOwner' => 'string',
        'targetBranchRef' => 'string',
        'targetRepositoryOwner' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'author' => null,
        'currentState' => null,
        'description' => null,
        'id' => null,
        'providerName' => null,
        'sourceBranchRef' => null,
        'sourceRepositoryOwner' => null,
        'targetBranchRef' => null,
        'targetRepositoryOwner' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'author' => 'author',
        'currentState' => 'currentState',
        'description' => 'description',
        'id' => 'id',
        'providerName' => 'providerName',
        'sourceBranchRef' => 'sourceBranchRef',
        'sourceRepositoryOwner' => 'sourceRepositoryOwner',
        'targetBranchRef' => 'targetBranchRef',
        'targetRepositoryOwner' => 'targetRepositoryOwner',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'author' => 'setAuthor',
        'currentState' => 'setCurrentState',
        'description' => 'setDescription',
        'id' => 'setId',
        'providerName' => 'setProviderName',
        'sourceBranchRef' => 'setSourceBranchRef',
        'sourceRepositoryOwner' => 'setSourceRepositoryOwner',
        'targetBranchRef' => 'setTargetBranchRef',
        'targetRepositoryOwner' => 'setTargetRepositoryOwner',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'author' => 'getAuthor',
        'currentState' => 'getCurrentState',
        'description' => 'getDescription',
        'id' => 'getId',
        'providerName' => 'getProviderName',
        'sourceBranchRef' => 'getSourceBranchRef',
        'sourceRepositoryOwner' => 'getSourceRepositoryOwner',
        'targetBranchRef' => 'getTargetBranchRef',
        'targetRepositoryOwner' => 'getTargetRepositoryOwner',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['currentState'] = isset($data['currentState']) ? $data['currentState'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['providerName'] = isset($data['providerName']) ? $data['providerName'] : null;
        $this->container['sourceBranchRef'] = isset($data['sourceBranchRef']) ? $data['sourceBranchRef'] : null;
        $this->container['sourceRepositoryOwner'] = isset($data['sourceRepositoryOwner']) ? $data['sourceRepositoryOwner'] : null;
        $this->container['targetBranchRef'] = isset($data['targetBranchRef']) ? $data['targetBranchRef'] : null;
        $this->container['targetRepositoryOwner'] = isset($data['targetRepositoryOwner']) ? $data['targetRepositoryOwner'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\ReferenceLinks $links The links to other objects related to this object.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\IdentityRef $author Author of the pull request.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets currentState
     *
     * @return string
     */
    public function getCurrentState()
    {
        return $this->container['currentState'];
    }

    /**
     * Sets currentState
     *
     * @param string $currentState Current state of the pull request, e.g. open, merged, closed, conflicts, etc.
     *
     * @return $this
     */
    public function setCurrentState($currentState)
    {
        $this->container['currentState'] = $currentState;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description for the pull request.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the pull request
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets providerName
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['providerName'];
    }

    /**
     * Sets providerName
     *
     * @param string $providerName The name of the provider this pull request is associated with.
     *
     * @return $this
     */
    public function setProviderName($providerName)
    {
        $this->container['providerName'] = $providerName;

        return $this;
    }

    /**
     * Gets sourceBranchRef
     *
     * @return string
     */
    public function getSourceBranchRef()
    {
        return $this->container['sourceBranchRef'];
    }

    /**
     * Sets sourceBranchRef
     *
     * @param string $sourceBranchRef Source branch ref of this pull request
     *
     * @return $this
     */
    public function setSourceBranchRef($sourceBranchRef)
    {
        $this->container['sourceBranchRef'] = $sourceBranchRef;

        return $this;
    }

    /**
     * Gets sourceRepositoryOwner
     *
     * @return string
     */
    public function getSourceRepositoryOwner()
    {
        return $this->container['sourceRepositoryOwner'];
    }

    /**
     * Sets sourceRepositoryOwner
     *
     * @param string $sourceRepositoryOwner Owner of the source repository of this pull request
     *
     * @return $this
     */
    public function setSourceRepositoryOwner($sourceRepositoryOwner)
    {
        $this->container['sourceRepositoryOwner'] = $sourceRepositoryOwner;

        return $this;
    }

    /**
     * Gets targetBranchRef
     *
     * @return string
     */
    public function getTargetBranchRef()
    {
        return $this->container['targetBranchRef'];
    }

    /**
     * Sets targetBranchRef
     *
     * @param string $targetBranchRef Target branch ref of this pull request
     *
     * @return $this
     */
    public function setTargetBranchRef($targetBranchRef)
    {
        $this->container['targetBranchRef'] = $targetBranchRef;

        return $this;
    }

    /**
     * Gets targetRepositoryOwner
     *
     * @return string
     */
    public function getTargetRepositoryOwner()
    {
        return $this->container['targetRepositoryOwner'];
    }

    /**
     * Sets targetRepositoryOwner
     *
     * @param string $targetRepositoryOwner Owner of the target repository of this pull request
     *
     * @return $this
     */
    public function setTargetRepositoryOwner($targetRepositoryOwner)
    {
        $this->container['targetRepositoryOwner'] = $targetRepositoryOwner;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the pull request.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


