<?php
/**
 * BuildProcessTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildProcessTemplate Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildProcessTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildProcessTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'fileExists' => 'bool',
        'id' => 'int',
        'parameters' => 'string',
        'serverPath' => 'string',
        'supportedReasons' => 'string',
        'teamProject' => 'string',
        'templateType' => 'string',
        'url' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'fileExists' => null,
        'id' => 'int32',
        'parameters' => null,
        'serverPath' => null,
        'supportedReasons' => null,
        'teamProject' => null,
        'templateType' => null,
        'url' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'fileExists' => 'fileExists',
        'id' => 'id',
        'parameters' => 'parameters',
        'serverPath' => 'serverPath',
        'supportedReasons' => 'supportedReasons',
        'teamProject' => 'teamProject',
        'templateType' => 'templateType',
        'url' => 'url',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'fileExists' => 'setFileExists',
        'id' => 'setId',
        'parameters' => 'setParameters',
        'serverPath' => 'setServerPath',
        'supportedReasons' => 'setSupportedReasons',
        'teamProject' => 'setTeamProject',
        'templateType' => 'setTemplateType',
        'url' => 'setUrl',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'fileExists' => 'getFileExists',
        'id' => 'getId',
        'parameters' => 'getParameters',
        'serverPath' => 'getServerPath',
        'supportedReasons' => 'getSupportedReasons',
        'teamProject' => 'getTeamProject',
        'templateType' => 'getTemplateType',
        'url' => 'getUrl',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUPPORTED_REASONS_NONE = 'none';
    const SUPPORTED_REASONS_MANUAL = 'manual';
    const SUPPORTED_REASONS_INDIVIDUAL_CI = 'individualCI';
    const SUPPORTED_REASONS_BATCHED_CI = 'batchedCI';
    const SUPPORTED_REASONS_SCHEDULE = 'schedule';
    const SUPPORTED_REASONS_SCHEDULE_FORCED = 'scheduleForced';
    const SUPPORTED_REASONS_USER_CREATED = 'userCreated';
    const SUPPORTED_REASONS_VALIDATE_SHELVESET = 'validateShelveset';
    const SUPPORTED_REASONS_CHECK_IN_SHELVESET = 'checkInShelveset';
    const SUPPORTED_REASONS_PULL_REQUEST = 'pullRequest';
    const SUPPORTED_REASONS_BUILD_COMPLETION = 'buildCompletion';
    const SUPPORTED_REASONS_RESOURCE_TRIGGER = 'resourceTrigger';
    const SUPPORTED_REASONS_TRIGGERED = 'triggered';
    const SUPPORTED_REASONS_ALL = 'all';
    const TEMPLATE_TYPE_CUSTOM = 'custom';
    const TEMPLATE_TYPE__DEFAULT = 'default';
    const TEMPLATE_TYPE_UPGRADE = 'upgrade';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedReasonsAllowableValues()
    {
        return [
            self::SUPPORTED_REASONS_NONE,
            self::SUPPORTED_REASONS_MANUAL,
            self::SUPPORTED_REASONS_INDIVIDUAL_CI,
            self::SUPPORTED_REASONS_BATCHED_CI,
            self::SUPPORTED_REASONS_SCHEDULE,
            self::SUPPORTED_REASONS_SCHEDULE_FORCED,
            self::SUPPORTED_REASONS_USER_CREATED,
            self::SUPPORTED_REASONS_VALIDATE_SHELVESET,
            self::SUPPORTED_REASONS_CHECK_IN_SHELVESET,
            self::SUPPORTED_REASONS_PULL_REQUEST,
            self::SUPPORTED_REASONS_BUILD_COMPLETION,
            self::SUPPORTED_REASONS_RESOURCE_TRIGGER,
            self::SUPPORTED_REASONS_TRIGGERED,
            self::SUPPORTED_REASONS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_CUSTOM,
            self::TEMPLATE_TYPE__DEFAULT,
            self::TEMPLATE_TYPE_UPGRADE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['fileExists'] = isset($data['fileExists']) ? $data['fileExists'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['serverPath'] = isset($data['serverPath']) ? $data['serverPath'] : null;
        $this->container['supportedReasons'] = isset($data['supportedReasons']) ? $data['supportedReasons'] : null;
        $this->container['teamProject'] = isset($data['teamProject']) ? $data['teamProject'] : null;
        $this->container['templateType'] = isset($data['templateType']) ? $data['templateType'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSupportedReasonsAllowableValues();
        if (!is_null($this->container['supportedReasons']) && !in_array($this->container['supportedReasons'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'supportedReasons', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($this->container['templateType']) && !in_array($this->container['templateType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'templateType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fileExists
     *
     * @return bool
     */
    public function getFileExists()
    {
        return $this->container['fileExists'];
    }

    /**
     * Sets fileExists
     *
     * @param bool $fileExists fileExists
     *
     * @return $this
     */
    public function setFileExists($fileExists)
    {
        $this->container['fileExists'] = $fileExists;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return string
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param string $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets serverPath
     *
     * @return string
     */
    public function getServerPath()
    {
        return $this->container['serverPath'];
    }

    /**
     * Sets serverPath
     *
     * @param string $serverPath serverPath
     *
     * @return $this
     */
    public function setServerPath($serverPath)
    {
        $this->container['serverPath'] = $serverPath;

        return $this;
    }

    /**
     * Gets supportedReasons
     *
     * @return string
     */
    public function getSupportedReasons()
    {
        return $this->container['supportedReasons'];
    }

    /**
     * Sets supportedReasons
     *
     * @param string $supportedReasons supportedReasons
     *
     * @return $this
     */
    public function setSupportedReasons($supportedReasons)
    {
        $allowedValues = $this->getSupportedReasonsAllowableValues();
        if (!is_null($supportedReasons) && !in_array($supportedReasons, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supportedReasons', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supportedReasons'] = $supportedReasons;

        return $this;
    }

    /**
     * Gets teamProject
     *
     * @return string
     */
    public function getTeamProject()
    {
        return $this->container['teamProject'];
    }

    /**
     * Sets teamProject
     *
     * @param string $teamProject teamProject
     *
     * @return $this
     */
    public function setTeamProject($teamProject)
    {
        $this->container['teamProject'] = $teamProject;

        return $this;
    }

    /**
     * Gets templateType
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['templateType'];
    }

    /**
     * Sets templateType
     *
     * @param string $templateType templateType
     *
     * @return $this
     */
    public function setTemplateType($templateType)
    {
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($templateType) && !in_array($templateType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'templateType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['templateType'] = $templateType;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


