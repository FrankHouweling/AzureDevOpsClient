<?php
/**
 * Build
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Build\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @description Data representation of a build.
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Build implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\ReferenceLinks',
        'agentSpecification' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification',
        'buildNumber' => 'string',
        'buildNumberRevision' => 'int',
        'controller' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildController',
        'definition' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\DefinitionReference',
        'deleted' => 'bool',
        'deletedBy' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef',
        'deletedDate' => '\DateTime',
        'deletedReason' => 'string',
        'demands' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[]',
        'finishTime' => '\DateTime',
        'id' => 'int',
        'keepForever' => 'bool',
        'lastChangedBy' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef',
        'lastChangedDate' => '\DateTime',
        'logs' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildLogReference',
        'orchestrationPlan' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference',
        'parameters' => 'string',
        'plans' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference[]',
        'priority' => 'string',
        'project' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TeamProjectReference',
        'properties' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\PropertiesCollection',
        'quality' => 'string',
        'queue' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue',
        'queueOptions' => 'string',
        'queuePosition' => 'int',
        'queueTime' => '\DateTime',
        'reason' => 'string',
        'repository' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRepository',
        'requestedBy' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef',
        'requestedFor' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef',
        'result' => 'string',
        'retainedByRelease' => 'bool',
        'sourceBranch' => 'string',
        'sourceVersion' => 'string',
        'startTime' => '\DateTime',
        'status' => 'string',
        'tags' => 'string[]',
        'triggeredByBuild' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Build',
        'triggerInfo' => 'map[string,string]',
        'uri' => 'string',
        'url' => 'string',
        'validationResults' => '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRequestValidationResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'agentSpecification' => null,
        'buildNumber' => null,
        'buildNumberRevision' => 'int32',
        'controller' => null,
        'definition' => null,
        'deleted' => null,
        'deletedBy' => null,
        'deletedDate' => 'date-time',
        'deletedReason' => null,
        'demands' => null,
        'finishTime' => 'date-time',
        'id' => 'int32',
        'keepForever' => null,
        'lastChangedBy' => null,
        'lastChangedDate' => 'date-time',
        'logs' => null,
        'orchestrationPlan' => null,
        'parameters' => null,
        'plans' => null,
        'priority' => null,
        'project' => null,
        'properties' => null,
        'quality' => null,
        'queue' => null,
        'queueOptions' => null,
        'queuePosition' => 'int32',
        'queueTime' => 'date-time',
        'reason' => null,
        'repository' => null,
        'requestedBy' => null,
        'requestedFor' => null,
        'result' => null,
        'retainedByRelease' => null,
        'sourceBranch' => null,
        'sourceVersion' => null,
        'startTime' => 'date-time',
        'status' => null,
        'tags' => null,
        'triggeredByBuild' => null,
        'triggerInfo' => null,
        'uri' => null,
        'url' => null,
        'validationResults' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'agentSpecification' => 'agentSpecification',
        'buildNumber' => 'buildNumber',
        'buildNumberRevision' => 'buildNumberRevision',
        'controller' => 'controller',
        'definition' => 'definition',
        'deleted' => 'deleted',
        'deletedBy' => 'deletedBy',
        'deletedDate' => 'deletedDate',
        'deletedReason' => 'deletedReason',
        'demands' => 'demands',
        'finishTime' => 'finishTime',
        'id' => 'id',
        'keepForever' => 'keepForever',
        'lastChangedBy' => 'lastChangedBy',
        'lastChangedDate' => 'lastChangedDate',
        'logs' => 'logs',
        'orchestrationPlan' => 'orchestrationPlan',
        'parameters' => 'parameters',
        'plans' => 'plans',
        'priority' => 'priority',
        'project' => 'project',
        'properties' => 'properties',
        'quality' => 'quality',
        'queue' => 'queue',
        'queueOptions' => 'queueOptions',
        'queuePosition' => 'queuePosition',
        'queueTime' => 'queueTime',
        'reason' => 'reason',
        'repository' => 'repository',
        'requestedBy' => 'requestedBy',
        'requestedFor' => 'requestedFor',
        'result' => 'result',
        'retainedByRelease' => 'retainedByRelease',
        'sourceBranch' => 'sourceBranch',
        'sourceVersion' => 'sourceVersion',
        'startTime' => 'startTime',
        'status' => 'status',
        'tags' => 'tags',
        'triggeredByBuild' => 'triggeredByBuild',
        'triggerInfo' => 'triggerInfo',
        'uri' => 'uri',
        'url' => 'url',
        'validationResults' => 'validationResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'agentSpecification' => 'setAgentSpecification',
        'buildNumber' => 'setBuildNumber',
        'buildNumberRevision' => 'setBuildNumberRevision',
        'controller' => 'setController',
        'definition' => 'setDefinition',
        'deleted' => 'setDeleted',
        'deletedBy' => 'setDeletedBy',
        'deletedDate' => 'setDeletedDate',
        'deletedReason' => 'setDeletedReason',
        'demands' => 'setDemands',
        'finishTime' => 'setFinishTime',
        'id' => 'setId',
        'keepForever' => 'setKeepForever',
        'lastChangedBy' => 'setLastChangedBy',
        'lastChangedDate' => 'setLastChangedDate',
        'logs' => 'setLogs',
        'orchestrationPlan' => 'setOrchestrationPlan',
        'parameters' => 'setParameters',
        'plans' => 'setPlans',
        'priority' => 'setPriority',
        'project' => 'setProject',
        'properties' => 'setProperties',
        'quality' => 'setQuality',
        'queue' => 'setQueue',
        'queueOptions' => 'setQueueOptions',
        'queuePosition' => 'setQueuePosition',
        'queueTime' => 'setQueueTime',
        'reason' => 'setReason',
        'repository' => 'setRepository',
        'requestedBy' => 'setRequestedBy',
        'requestedFor' => 'setRequestedFor',
        'result' => 'setResult',
        'retainedByRelease' => 'setRetainedByRelease',
        'sourceBranch' => 'setSourceBranch',
        'sourceVersion' => 'setSourceVersion',
        'startTime' => 'setStartTime',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'triggeredByBuild' => 'setTriggeredByBuild',
        'triggerInfo' => 'setTriggerInfo',
        'uri' => 'setUri',
        'url' => 'setUrl',
        'validationResults' => 'setValidationResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'agentSpecification' => 'getAgentSpecification',
        'buildNumber' => 'getBuildNumber',
        'buildNumberRevision' => 'getBuildNumberRevision',
        'controller' => 'getController',
        'definition' => 'getDefinition',
        'deleted' => 'getDeleted',
        'deletedBy' => 'getDeletedBy',
        'deletedDate' => 'getDeletedDate',
        'deletedReason' => 'getDeletedReason',
        'demands' => 'getDemands',
        'finishTime' => 'getFinishTime',
        'id' => 'getId',
        'keepForever' => 'getKeepForever',
        'lastChangedBy' => 'getLastChangedBy',
        'lastChangedDate' => 'getLastChangedDate',
        'logs' => 'getLogs',
        'orchestrationPlan' => 'getOrchestrationPlan',
        'parameters' => 'getParameters',
        'plans' => 'getPlans',
        'priority' => 'getPriority',
        'project' => 'getProject',
        'properties' => 'getProperties',
        'quality' => 'getQuality',
        'queue' => 'getQueue',
        'queueOptions' => 'getQueueOptions',
        'queuePosition' => 'getQueuePosition',
        'queueTime' => 'getQueueTime',
        'reason' => 'getReason',
        'repository' => 'getRepository',
        'requestedBy' => 'getRequestedBy',
        'requestedFor' => 'getRequestedFor',
        'result' => 'getResult',
        'retainedByRelease' => 'getRetainedByRelease',
        'sourceBranch' => 'getSourceBranch',
        'sourceVersion' => 'getSourceVersion',
        'startTime' => 'getStartTime',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'triggeredByBuild' => 'getTriggeredByBuild',
        'triggerInfo' => 'getTriggerInfo',
        'uri' => 'getUri',
        'url' => 'getUrl',
        'validationResults' => 'getValidationResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_LOW = 'low';
    const PRIORITY_BELOW_NORMAL = 'belowNormal';
    const PRIORITY_NORMAL = 'normal';
    const PRIORITY_ABOVE_NORMAL = 'aboveNormal';
    const PRIORITY_HIGH = 'high';
    const QUEUE_OPTIONS_NONE = 'none';
    const QUEUE_OPTIONS_DO_NOT_RUN = 'doNotRun';
    const REASON_NONE = 'none';
    const REASON_MANUAL = 'manual';
    const REASON_INDIVIDUAL_CI = 'individualCI';
    const REASON_BATCHED_CI = 'batchedCI';
    const REASON_SCHEDULE = 'schedule';
    const REASON_SCHEDULE_FORCED = 'scheduleForced';
    const REASON_USER_CREATED = 'userCreated';
    const REASON_VALIDATE_SHELVESET = 'validateShelveset';
    const REASON_CHECK_IN_SHELVESET = 'checkInShelveset';
    const REASON_PULL_REQUEST = 'pullRequest';
    const REASON_BUILD_COMPLETION = 'buildCompletion';
    const REASON_RESOURCE_TRIGGER = 'resourceTrigger';
    const REASON_TRIGGERED = 'triggered';
    const REASON_ALL = 'all';
    const RESULT_NONE = 'none';
    const RESULT_SUCCEEDED = 'succeeded';
    const RESULT_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const RESULT_FAILED = 'failed';
    const RESULT_CANCELED = 'canceled';
    const STATUS_NONE = 'none';
    const STATUS_IN_PROGRESS = 'inProgress';
    const STATUS_COMPLETED = 'completed';
    const STATUS_CANCELLING = 'cancelling';
    const STATUS_POSTPONED = 'postponed';
    const STATUS_NOT_STARTED = 'notStarted';
    const STATUS_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_LOW,
            self::PRIORITY_BELOW_NORMAL,
            self::PRIORITY_NORMAL,
            self::PRIORITY_ABOVE_NORMAL,
            self::PRIORITY_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueueOptionsAllowableValues()
    {
        return [
            self::QUEUE_OPTIONS_NONE,
            self::QUEUE_OPTIONS_DO_NOT_RUN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NONE,
            self::REASON_MANUAL,
            self::REASON_INDIVIDUAL_CI,
            self::REASON_BATCHED_CI,
            self::REASON_SCHEDULE,
            self::REASON_SCHEDULE_FORCED,
            self::REASON_USER_CREATED,
            self::REASON_VALIDATE_SHELVESET,
            self::REASON_CHECK_IN_SHELVESET,
            self::REASON_PULL_REQUEST,
            self::REASON_BUILD_COMPLETION,
            self::REASON_RESOURCE_TRIGGER,
            self::REASON_TRIGGERED,
            self::REASON_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_NONE,
            self::RESULT_SUCCEEDED,
            self::RESULT_PARTIALLY_SUCCEEDED,
            self::RESULT_FAILED,
            self::RESULT_CANCELED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLING,
            self::STATUS_POSTPONED,
            self::STATUS_NOT_STARTED,
            self::STATUS_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['agentSpecification'] = isset($data['agentSpecification']) ? $data['agentSpecification'] : null;
        $this->container['buildNumber'] = isset($data['buildNumber']) ? $data['buildNumber'] : null;
        $this->container['buildNumberRevision'] = isset($data['buildNumberRevision']) ? $data['buildNumberRevision'] : null;
        $this->container['controller'] = isset($data['controller']) ? $data['controller'] : null;
        $this->container['definition'] = isset($data['definition']) ? $data['definition'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['deletedBy'] = isset($data['deletedBy']) ? $data['deletedBy'] : null;
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['deletedReason'] = isset($data['deletedReason']) ? $data['deletedReason'] : null;
        $this->container['demands'] = isset($data['demands']) ? $data['demands'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['keepForever'] = isset($data['keepForever']) ? $data['keepForever'] : null;
        $this->container['lastChangedBy'] = isset($data['lastChangedBy']) ? $data['lastChangedBy'] : null;
        $this->container['lastChangedDate'] = isset($data['lastChangedDate']) ? $data['lastChangedDate'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
        $this->container['orchestrationPlan'] = isset($data['orchestrationPlan']) ? $data['orchestrationPlan'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['plans'] = isset($data['plans']) ? $data['plans'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['queueOptions'] = isset($data['queueOptions']) ? $data['queueOptions'] : null;
        $this->container['queuePosition'] = isset($data['queuePosition']) ? $data['queuePosition'] : null;
        $this->container['queueTime'] = isset($data['queueTime']) ? $data['queueTime'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['repository'] = isset($data['repository']) ? $data['repository'] : null;
        $this->container['requestedBy'] = isset($data['requestedBy']) ? $data['requestedBy'] : null;
        $this->container['requestedFor'] = isset($data['requestedFor']) ? $data['requestedFor'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['retainedByRelease'] = isset($data['retainedByRelease']) ? $data['retainedByRelease'] : null;
        $this->container['sourceBranch'] = isset($data['sourceBranch']) ? $data['sourceBranch'] : null;
        $this->container['sourceVersion'] = isset($data['sourceVersion']) ? $data['sourceVersion'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['triggeredByBuild'] = isset($data['triggeredByBuild']) ? $data['triggeredByBuild'] : null;
        $this->container['triggerInfo'] = isset($data['triggerInfo']) ? $data['triggerInfo'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['validationResults'] = isset($data['validationResults']) ? $data['validationResults'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueueOptionsAllowableValues();
        if (!is_null($this->container['queueOptions']) && !in_array($this->container['queueOptions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queueOptions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\ReferenceLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets agentSpecification
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification
     */
    public function getAgentSpecification()
    {
        return $this->container['agentSpecification'];
    }

    /**
     * Sets agentSpecification
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentSpecification $agentSpecification The agent specification for the build.
     *
     * @return $this
     */
    public function setAgentSpecification($agentSpecification)
    {
        $this->container['agentSpecification'] = $agentSpecification;

        return $this;
    }

    /**
     * Gets buildNumber
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['buildNumber'];
    }

    /**
     * Sets buildNumber
     *
     * @param string $buildNumber The build number/name of the build.
     *
     * @return $this
     */
    public function setBuildNumber($buildNumber)
    {
        $this->container['buildNumber'] = $buildNumber;

        return $this;
    }

    /**
     * Gets buildNumberRevision
     *
     * @return int
     */
    public function getBuildNumberRevision()
    {
        return $this->container['buildNumberRevision'];
    }

    /**
     * Sets buildNumberRevision
     *
     * @param int $buildNumberRevision The build number revision.
     *
     * @return $this
     */
    public function setBuildNumberRevision($buildNumberRevision)
    {
        $this->container['buildNumberRevision'] = $buildNumberRevision;

        return $this;
    }

    /**
     * Gets controller
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildController
     */
    public function getController()
    {
        return $this->container['controller'];
    }

    /**
     * Sets controller
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildController $controller The build controller. This is only set if the definition type is Xaml.
     *
     * @return $this
     */
    public function setController($controller)
    {
        $this->container['controller'] = $controller;

        return $this;
    }

    /**
     * Gets definition
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\DefinitionReference
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\DefinitionReference $definition The definition associated with the build.
     *
     * @return $this
     */
    public function setDefinition($definition)
    {
        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Indicates whether the build has been deleted.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets deletedBy
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getDeletedBy()
    {
        return $this->container['deletedBy'];
    }

    /**
     * Sets deletedBy
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef $deletedBy The identity of the process or person that deleted the build.
     *
     * @return $this
     */
    public function setDeletedBy($deletedBy)
    {
        $this->container['deletedBy'] = $deletedBy;

        return $this;
    }

    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate The date the build was deleted.
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets deletedReason
     *
     * @return string
     */
    public function getDeletedReason()
    {
        return $this->container['deletedReason'];
    }

    /**
     * Sets deletedReason
     *
     * @param string $deletedReason The description of how the build was deleted.
     *
     * @return $this
     */
    public function setDeletedReason($deletedReason)
    {
        $this->container['deletedReason'] = $deletedReason;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[]
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Demand[] $demands A list of demands that represents the agent capabilities required by this build.
     *
     * @return $this
     */
    public function setDemands($demands)
    {
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return \DateTime
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param \DateTime $finishTime The time that the build was completed.
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the build.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keepForever
     *
     * @return bool
     */
    public function getKeepForever()
    {
        return $this->container['keepForever'];
    }

    /**
     * Sets keepForever
     *
     * @param bool $keepForever Indicates whether the build should be skipped by retention policies.
     *
     * @return $this
     */
    public function setKeepForever($keepForever)
    {
        $this->container['keepForever'] = $keepForever;

        return $this;
    }

    /**
     * Gets lastChangedBy
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getLastChangedBy()
    {
        return $this->container['lastChangedBy'];
    }

    /**
     * Sets lastChangedBy
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef $lastChangedBy The identity representing the process or person that last changed the build.
     *
     * @return $this
     */
    public function setLastChangedBy($lastChangedBy)
    {
        $this->container['lastChangedBy'] = $lastChangedBy;

        return $this;
    }

    /**
     * Gets lastChangedDate
     *
     * @return \DateTime
     */
    public function getLastChangedDate()
    {
        return $this->container['lastChangedDate'];
    }

    /**
     * Sets lastChangedDate
     *
     * @param \DateTime $lastChangedDate The date the build was last changed.
     *
     * @return $this
     */
    public function setLastChangedDate($lastChangedDate)
    {
        $this->container['lastChangedDate'] = $lastChangedDate;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildLogReference
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildLogReference $logs Information about the build logs.
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets orchestrationPlan
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference
     */
    public function getOrchestrationPlan()
    {
        return $this->container['orchestrationPlan'];
    }

    /**
     * Sets orchestrationPlan
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference $orchestrationPlan The orchestration plan for the build.
     *
     * @return $this
     */
    public function setOrchestrationPlan($orchestrationPlan)
    {
        $this->container['orchestrationPlan'] = $orchestrationPlan;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return string
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param string $parameters The parameters for the build.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets plans
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference[]
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TaskOrchestrationPlanReference[] $plans Orchestration plans associated with the build (build, cleanup)
     *
     * @return $this
     */
    public function setPlans($plans)
    {
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The build's priority.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TeamProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\TeamProjectReference $project The team project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string $quality The quality of the xaml build (good, bad, etc.)
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\AgentPoolQueue $queue The queue. This is only set if the definition type is Build.
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets queueOptions
     *
     * @return string
     */
    public function getQueueOptions()
    {
        return $this->container['queueOptions'];
    }

    /**
     * Sets queueOptions
     *
     * @param string $queueOptions Additional options for queueing the build.
     *
     * @return $this
     */
    public function setQueueOptions($queueOptions)
    {
        $allowedValues = $this->getQueueOptionsAllowableValues();
        if (!is_null($queueOptions) && !in_array($queueOptions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queueOptions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queueOptions'] = $queueOptions;

        return $this;
    }

    /**
     * Gets queuePosition
     *
     * @return int
     */
    public function getQueuePosition()
    {
        return $this->container['queuePosition'];
    }

    /**
     * Sets queuePosition
     *
     * @param int $queuePosition The current position of the build in the queue.
     *
     * @return $this
     */
    public function setQueuePosition($queuePosition)
    {
        $this->container['queuePosition'] = $queuePosition;

        return $this;
    }

    /**
     * Gets queueTime
     *
     * @return \DateTime
     */
    public function getQueueTime()
    {
        return $this->container['queueTime'];
    }

    /**
     * Sets queueTime
     *
     * @param \DateTime $queueTime The time that the build was queued.
     *
     * @return $this
     */
    public function setQueueTime($queueTime)
    {
        $this->container['queueTime'] = $queueTime;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason that the build was created.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRepository
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRepository $repository The repository.
     *
     * @return $this
     */
    public function setRepository($repository)
    {
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets requestedBy
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getRequestedBy()
    {
        return $this->container['requestedBy'];
    }

    /**
     * Sets requestedBy
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef $requestedBy The identity that queued the build.
     *
     * @return $this
     */
    public function setRequestedBy($requestedBy)
    {
        $this->container['requestedBy'] = $requestedBy;

        return $this;
    }

    /**
     * Gets requestedFor
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef
     */
    public function getRequestedFor()
    {
        return $this->container['requestedFor'];
    }

    /**
     * Sets requestedFor
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\IdentityRef $requestedFor The identity on whose behalf the build was queued.
     *
     * @return $this
     */
    public function setRequestedFor($requestedFor)
    {
        $this->container['requestedFor'] = $requestedFor;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The build result.
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets retainedByRelease
     *
     * @return bool
     */
    public function getRetainedByRelease()
    {
        return $this->container['retainedByRelease'];
    }

    /**
     * Sets retainedByRelease
     *
     * @param bool $retainedByRelease Indicates whether the build is retained by a release.
     *
     * @return $this
     */
    public function setRetainedByRelease($retainedByRelease)
    {
        $this->container['retainedByRelease'] = $retainedByRelease;

        return $this;
    }

    /**
     * Gets sourceBranch
     *
     * @return string
     */
    public function getSourceBranch()
    {
        return $this->container['sourceBranch'];
    }

    /**
     * Sets sourceBranch
     *
     * @param string $sourceBranch The source branch.
     *
     * @return $this
     */
    public function setSourceBranch($sourceBranch)
    {
        $this->container['sourceBranch'] = $sourceBranch;

        return $this;
    }

    /**
     * Gets sourceVersion
     *
     * @return string
     */
    public function getSourceVersion()
    {
        return $this->container['sourceVersion'];
    }

    /**
     * Sets sourceVersion
     *
     * @param string $sourceVersion The source version.
     *
     * @return $this
     */
    public function setSourceVersion($sourceVersion)
    {
        $this->container['sourceVersion'] = $sourceVersion;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime The time that the build was started.
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the build.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets triggeredByBuild
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Build
     */
    public function getTriggeredByBuild()
    {
        return $this->container['triggeredByBuild'];
    }

    /**
     * Sets triggeredByBuild
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\Build $triggeredByBuild The build that triggered this build via a Build completion trigger.
     *
     * @return $this
     */
    public function setTriggeredByBuild($triggeredByBuild)
    {
        $this->container['triggeredByBuild'] = $triggeredByBuild;

        return $this;
    }

    /**
     * Gets triggerInfo
     *
     * @return map[string,string]
     */
    public function getTriggerInfo()
    {
        return $this->container['triggerInfo'];
    }

    /**
     * Sets triggerInfo
     *
     * @param map[string,string] $triggerInfo Sourceprovider-specific information about what triggered the build
     *
     * @return $this
     */
    public function setTriggerInfo($triggerInfo)
    {
        $this->container['triggerInfo'] = $triggerInfo;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri The URI of the build.
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The REST URL of the build.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets validationResults
     *
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRequestValidationResult[]
     */
    public function getValidationResults()
    {
        return $this->container['validationResults'];
    }

    /**
     * Sets validationResults
     *
     * @param \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildRequestValidationResult[] $validationResults validationResults
     *
     * @return $this
     */
    public function setValidationResults($validationResults)
    {
        $this->container['validationResults'] = $validationResults;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


