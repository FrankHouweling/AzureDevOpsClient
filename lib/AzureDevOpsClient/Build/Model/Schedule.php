<?php
/**
 * Schedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * Schedule Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Schedule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Schedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branchFilters' => 'string[]',
        'daysToBuild' => 'string',
        'scheduleJobId' => 'string',
        'scheduleOnlyWithChanges' => 'bool',
        'startHours' => 'int',
        'startMinutes' => 'int',
        'timeZoneId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branchFilters' => null,
        'daysToBuild' => null,
        'scheduleJobId' => 'uuid',
        'scheduleOnlyWithChanges' => null,
        'startHours' => 'int32',
        'startMinutes' => 'int32',
        'timeZoneId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branchFilters' => 'branchFilters',
        'daysToBuild' => 'daysToBuild',
        'scheduleJobId' => 'scheduleJobId',
        'scheduleOnlyWithChanges' => 'scheduleOnlyWithChanges',
        'startHours' => 'startHours',
        'startMinutes' => 'startMinutes',
        'timeZoneId' => 'timeZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branchFilters' => 'setBranchFilters',
        'daysToBuild' => 'setDaysToBuild',
        'scheduleJobId' => 'setScheduleJobId',
        'scheduleOnlyWithChanges' => 'setScheduleOnlyWithChanges',
        'startHours' => 'setStartHours',
        'startMinutes' => 'setStartMinutes',
        'timeZoneId' => 'setTimeZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branchFilters' => 'getBranchFilters',
        'daysToBuild' => 'getDaysToBuild',
        'scheduleJobId' => 'getScheduleJobId',
        'scheduleOnlyWithChanges' => 'getScheduleOnlyWithChanges',
        'startHours' => 'getStartHours',
        'startMinutes' => 'getStartMinutes',
        'timeZoneId' => 'getTimeZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DAYS_TO_BUILD_NONE = 'none';
    const DAYS_TO_BUILD_MONDAY = 'monday';
    const DAYS_TO_BUILD_TUESDAY = 'tuesday';
    const DAYS_TO_BUILD_WEDNESDAY = 'wednesday';
    const DAYS_TO_BUILD_THURSDAY = 'thursday';
    const DAYS_TO_BUILD_FRIDAY = 'friday';
    const DAYS_TO_BUILD_SATURDAY = 'saturday';
    const DAYS_TO_BUILD_SUNDAY = 'sunday';
    const DAYS_TO_BUILD_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDaysToBuildAllowableValues()
    {
        return [
            self::DAYS_TO_BUILD_NONE,
            self::DAYS_TO_BUILD_MONDAY,
            self::DAYS_TO_BUILD_TUESDAY,
            self::DAYS_TO_BUILD_WEDNESDAY,
            self::DAYS_TO_BUILD_THURSDAY,
            self::DAYS_TO_BUILD_FRIDAY,
            self::DAYS_TO_BUILD_SATURDAY,
            self::DAYS_TO_BUILD_SUNDAY,
            self::DAYS_TO_BUILD_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branchFilters'] = isset($data['branchFilters']) ? $data['branchFilters'] : null;
        $this->container['daysToBuild'] = isset($data['daysToBuild']) ? $data['daysToBuild'] : null;
        $this->container['scheduleJobId'] = isset($data['scheduleJobId']) ? $data['scheduleJobId'] : null;
        $this->container['scheduleOnlyWithChanges'] = isset($data['scheduleOnlyWithChanges']) ? $data['scheduleOnlyWithChanges'] : null;
        $this->container['startHours'] = isset($data['startHours']) ? $data['startHours'] : null;
        $this->container['startMinutes'] = isset($data['startMinutes']) ? $data['startMinutes'] : null;
        $this->container['timeZoneId'] = isset($data['timeZoneId']) ? $data['timeZoneId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDaysToBuildAllowableValues();
        if (!is_null($this->container['daysToBuild']) && !in_array($this->container['daysToBuild'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'daysToBuild', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branchFilters
     *
     * @return string[]
     */
    public function getBranchFilters()
    {
        return $this->container['branchFilters'];
    }

    /**
     * Sets branchFilters
     *
     * @param string[] $branchFilters branchFilters
     *
     * @return $this
     */
    public function setBranchFilters($branchFilters)
    {
        $this->container['branchFilters'] = $branchFilters;

        return $this;
    }

    /**
     * Gets daysToBuild
     *
     * @return string
     */
    public function getDaysToBuild()
    {
        return $this->container['daysToBuild'];
    }

    /**
     * Sets daysToBuild
     *
     * @param string $daysToBuild Days for a build (flags enum for days of the week)
     *
     * @return $this
     */
    public function setDaysToBuild($daysToBuild)
    {
        $allowedValues = $this->getDaysToBuildAllowableValues();
        if (!is_null($daysToBuild) && !in_array($daysToBuild, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'daysToBuild', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['daysToBuild'] = $daysToBuild;

        return $this;
    }

    /**
     * Gets scheduleJobId
     *
     * @return string
     */
    public function getScheduleJobId()
    {
        return $this->container['scheduleJobId'];
    }

    /**
     * Sets scheduleJobId
     *
     * @param string $scheduleJobId The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it.
     *
     * @return $this
     */
    public function setScheduleJobId($scheduleJobId)
    {
        $this->container['scheduleJobId'] = $scheduleJobId;

        return $this;
    }

    /**
     * Gets scheduleOnlyWithChanges
     *
     * @return bool
     */
    public function getScheduleOnlyWithChanges()
    {
        return $this->container['scheduleOnlyWithChanges'];
    }

    /**
     * Sets scheduleOnlyWithChanges
     *
     * @param bool $scheduleOnlyWithChanges Flag to determine if this schedule should only build if the associated source has been changed.
     *
     * @return $this
     */
    public function setScheduleOnlyWithChanges($scheduleOnlyWithChanges)
    {
        $this->container['scheduleOnlyWithChanges'] = $scheduleOnlyWithChanges;

        return $this;
    }

    /**
     * Gets startHours
     *
     * @return int
     */
    public function getStartHours()
    {
        return $this->container['startHours'];
    }

    /**
     * Sets startHours
     *
     * @param int $startHours Local timezone hour to start
     *
     * @return $this
     */
    public function setStartHours($startHours)
    {
        $this->container['startHours'] = $startHours;

        return $this;
    }

    /**
     * Gets startMinutes
     *
     * @return int
     */
    public function getStartMinutes()
    {
        return $this->container['startMinutes'];
    }

    /**
     * Sets startMinutes
     *
     * @param int $startMinutes Local timezone minute to start
     *
     * @return $this
     */
    public function setStartMinutes($startMinutes)
    {
        $this->container['startMinutes'] = $startMinutes;

        return $this;
    }

    /**
     * Gets timeZoneId
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['timeZoneId'];
    }

    /**
     * Sets timeZoneId
     *
     * @param string $timeZoneId Time zone of the build schedule (String representation of the time zone ID)
     *
     * @return $this
     */
    public function setTimeZoneId($timeZoneId)
    {
        $this->container['timeZoneId'] = $timeZoneId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


