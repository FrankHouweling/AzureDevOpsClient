<?php
/**
 * BuildServer
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Build\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Build\ObjectSerializer;

/**
 * BuildServer Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildServer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildServer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agents' => '\FrankHouweling\AzureDevOpsClient\Build\Model\BuildAgentReference[]',
        'controller' => '\FrankHouweling\AzureDevOpsClient\Build\Model\XamlBuildControllerReference',
        'id' => 'int',
        'isVirtual' => 'bool',
        'messageQueueUrl' => 'string',
        'name' => 'string',
        'requireClientCertificates' => 'bool',
        'status' => 'string',
        'statusChangedDate' => '\DateTime',
        'uri' => 'string',
        'url' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agents' => null,
        'controller' => null,
        'id' => 'int32',
        'isVirtual' => null,
        'messageQueueUrl' => null,
        'name' => null,
        'requireClientCertificates' => null,
        'status' => null,
        'statusChangedDate' => 'date-time',
        'uri' => null,
        'url' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agents' => 'agents',
        'controller' => 'controller',
        'id' => 'id',
        'isVirtual' => 'isVirtual',
        'messageQueueUrl' => 'messageQueueUrl',
        'name' => 'name',
        'requireClientCertificates' => 'requireClientCertificates',
        'status' => 'status',
        'statusChangedDate' => 'statusChangedDate',
        'uri' => 'uri',
        'url' => 'url',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agents' => 'setAgents',
        'controller' => 'setController',
        'id' => 'setId',
        'isVirtual' => 'setIsVirtual',
        'messageQueueUrl' => 'setMessageQueueUrl',
        'name' => 'setName',
        'requireClientCertificates' => 'setRequireClientCertificates',
        'status' => 'setStatus',
        'statusChangedDate' => 'setStatusChangedDate',
        'uri' => 'setUri',
        'url' => 'setUrl',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agents' => 'getAgents',
        'controller' => 'getController',
        'id' => 'getId',
        'isVirtual' => 'getIsVirtual',
        'messageQueueUrl' => 'getMessageQueueUrl',
        'name' => 'getName',
        'requireClientCertificates' => 'getRequireClientCertificates',
        'status' => 'getStatus',
        'statusChangedDate' => 'getStatusChangedDate',
        'uri' => 'getUri',
        'url' => 'getUrl',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ONLINE = 'online';
    const STATUS_OFFLINE = 'offline';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ONLINE,
            self::STATUS_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['controller'] = isset($data['controller']) ? $data['controller'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isVirtual'] = isset($data['isVirtual']) ? $data['isVirtual'] : null;
        $this->container['messageQueueUrl'] = isset($data['messageQueueUrl']) ? $data['messageQueueUrl'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['requireClientCertificates'] = isset($data['requireClientCertificates']) ? $data['requireClientCertificates'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusChangedDate'] = isset($data['statusChangedDate']) ? $data['statusChangedDate'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agents
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\BuildAgentReference[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\BuildAgentReference[] $agents agents
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets controller
     *
     * @return \FrankHouweling\AzureDevOpsClient\Build\Model\XamlBuildControllerReference
     */
    public function getController()
    {
        return $this->container['controller'];
    }

    /**
     * Sets controller
     *
     * @param \FrankHouweling\AzureDevOpsClient\Build\Model\XamlBuildControllerReference $controller controller
     *
     * @return $this
     */
    public function setController($controller)
    {
        $this->container['controller'] = $controller;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isVirtual
     *
     * @return bool
     */
    public function getIsVirtual()
    {
        return $this->container['isVirtual'];
    }

    /**
     * Sets isVirtual
     *
     * @param bool $isVirtual isVirtual
     *
     * @return $this
     */
    public function setIsVirtual($isVirtual)
    {
        $this->container['isVirtual'] = $isVirtual;

        return $this;
    }

    /**
     * Gets messageQueueUrl
     *
     * @return string
     */
    public function getMessageQueueUrl()
    {
        return $this->container['messageQueueUrl'];
    }

    /**
     * Sets messageQueueUrl
     *
     * @param string $messageQueueUrl messageQueueUrl
     *
     * @return $this
     */
    public function setMessageQueueUrl($messageQueueUrl)
    {
        $this->container['messageQueueUrl'] = $messageQueueUrl;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets requireClientCertificates
     *
     * @return bool
     */
    public function getRequireClientCertificates()
    {
        return $this->container['requireClientCertificates'];
    }

    /**
     * Sets requireClientCertificates
     *
     * @param bool $requireClientCertificates requireClientCertificates
     *
     * @return $this
     */
    public function setRequireClientCertificates($requireClientCertificates)
    {
        $this->container['requireClientCertificates'] = $requireClientCertificates;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusChangedDate
     *
     * @return \DateTime
     */
    public function getStatusChangedDate()
    {
        return $this->container['statusChangedDate'];
    }

    /**
     * Sets statusChangedDate
     *
     * @param \DateTime $statusChangedDate statusChangedDate
     *
     * @return $this
     */
    public function setStatusChangedDate($statusChangedDate)
    {
        $this->container['statusChangedDate'] = $statusChangedDate;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


