<?php
/**
 * DefinitionsApi
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Build
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Build\AzureDevOpsClient\Build\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AzureDevOpsClient\Build\ApiException;
use AzureDevOpsClient\Build\Configuration;
use AzureDevOpsClient\Build\HeaderSelector;
use AzureDevOpsClient\Build\ObjectSerializer;

/**
 * DefinitionsApi Class Doc Comment
 *
 * @category Class
 * @package  AzureDevOpsClient\Build
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefinitionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation definitionsCreate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $definitionToCloneId  (optional)
     * @param  int $definitionToCloneRevision  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition
     */
    public function definitionsCreate($organization, $body, $project, $apiVersion, $definitionToCloneId = null, $definitionToCloneRevision = null)
    {
        list($response) = $this->definitionsCreateWithHttpInfo($organization, $body, $project, $apiVersion, $definitionToCloneId, $definitionToCloneRevision);
        return $response;
    }

    /**
     * Operation definitionsCreateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $definitionToCloneId  (optional)
     * @param  int $definitionToCloneRevision  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsCreateWithHttpInfo($organization, $body, $project, $apiVersion, $definitionToCloneId = null, $definitionToCloneRevision = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsCreateRequest($organization, $body, $project, $apiVersion, $definitionToCloneId, $definitionToCloneRevision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsCreateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $definitionToCloneId  (optional)
     * @param  int $definitionToCloneRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsCreateAsync($organization, $body, $project, $apiVersion, $definitionToCloneId = null, $definitionToCloneRevision = null)
    {
        return $this->definitionsCreateAsyncWithHttpInfo($organization, $body, $project, $apiVersion, $definitionToCloneId, $definitionToCloneRevision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $definitionToCloneId  (optional)
     * @param  int $definitionToCloneRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsCreateAsyncWithHttpInfo($organization, $body, $project, $apiVersion, $definitionToCloneId = null, $definitionToCloneRevision = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsCreateRequest($organization, $body, $project, $apiVersion, $definitionToCloneId, $definitionToCloneRevision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsCreate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $definitionToCloneId  (optional)
     * @param  int $definitionToCloneRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsCreateRequest($organization, $body, $project, $apiVersion, $definitionToCloneId = null, $definitionToCloneRevision = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling definitionsCreate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsCreate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsCreate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($definitionToCloneId !== null) {
            $queryParams['definitionToCloneId'] = ObjectSerializer::toQueryValue($definitionToCloneId);
        }
        // query params
        if ($definitionToCloneRevision !== null) {
            $queryParams['definitionToCloneRevision'] = ObjectSerializer::toQueryValue($definitionToCloneRevision);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsDelete
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function definitionsDelete($organization, $project, $definitionId, $apiVersion)
    {
        $this->definitionsDeleteWithHttpInfo($organization, $project, $definitionId, $apiVersion);
    }

    /**
     * Operation definitionsDeleteWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsDeleteWithHttpInfo($organization, $project, $definitionId, $apiVersion)
    {
        $returnType = '';
        $request = $this->definitionsDeleteRequest($organization, $project, $definitionId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsDeleteAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsDeleteAsync($organization, $project, $definitionId, $apiVersion)
    {
        return $this->definitionsDeleteAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsDeleteAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion)
    {
        $returnType = '';
        $request = $this->definitionsDeleteRequest($organization, $project, $definitionId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsDelete'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsDeleteRequest($organization, $project, $definitionId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsDelete'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsDelete'
            );
        }
        // verify the required parameter 'definitionId' is set
        if ($definitionId === null || (is_array($definitionId) && count($definitionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionId when calling definitionsDelete'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsDelete'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions/{definitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($definitionId !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionId' . '}',
                ObjectSerializer::toPathValue($definitionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsGet
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $revision The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $propertyFilters A comma-delimited list of properties to include in the results. (optional)
     * @param  bool $includeLatestBuilds  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition
     */
    public function definitionsGet($organization, $project, $definitionId, $apiVersion, $revision = null, $minMetricsTime = null, $propertyFilters = null, $includeLatestBuilds = null)
    {
        list($response) = $this->definitionsGetWithHttpInfo($organization, $project, $definitionId, $apiVersion, $revision, $minMetricsTime, $propertyFilters, $includeLatestBuilds);
        return $response;
    }

    /**
     * Operation definitionsGetWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $revision The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $propertyFilters A comma-delimited list of properties to include in the results. (optional)
     * @param  bool $includeLatestBuilds  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsGetWithHttpInfo($organization, $project, $definitionId, $apiVersion, $revision = null, $minMetricsTime = null, $propertyFilters = null, $includeLatestBuilds = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsGetRequest($organization, $project, $definitionId, $apiVersion, $revision, $minMetricsTime, $propertyFilters, $includeLatestBuilds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsGetAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $revision The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $propertyFilters A comma-delimited list of properties to include in the results. (optional)
     * @param  bool $includeLatestBuilds  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsGetAsync($organization, $project, $definitionId, $apiVersion, $revision = null, $minMetricsTime = null, $propertyFilters = null, $includeLatestBuilds = null)
    {
        return $this->definitionsGetAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion, $revision, $minMetricsTime, $propertyFilters, $includeLatestBuilds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $revision The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $propertyFilters A comma-delimited list of properties to include in the results. (optional)
     * @param  bool $includeLatestBuilds  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsGetAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion, $revision = null, $minMetricsTime = null, $propertyFilters = null, $includeLatestBuilds = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsGetRequest($organization, $project, $definitionId, $apiVersion, $revision, $minMetricsTime, $propertyFilters, $includeLatestBuilds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsGet'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $revision The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $propertyFilters A comma-delimited list of properties to include in the results. (optional)
     * @param  bool $includeLatestBuilds  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsGetRequest($organization, $project, $definitionId, $apiVersion, $revision = null, $minMetricsTime = null, $propertyFilters = null, $includeLatestBuilds = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsGet'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsGet'
            );
        }
        // verify the required parameter 'definitionId' is set
        if ($definitionId === null || (is_array($definitionId) && count($definitionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionId when calling definitionsGet'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsGet'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions/{definitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($revision !== null) {
            $queryParams['revision'] = ObjectSerializer::toQueryValue($revision);
        }
        // query params
        if ($minMetricsTime !== null) {
            $queryParams['minMetricsTime'] = ObjectSerializer::toQueryValue($minMetricsTime);
        }
        // query params
        if ($propertyFilters !== null) {
            $queryParams['propertyFilters'] = ObjectSerializer::toQueryValue($propertyFilters);
        }
        // query params
        if ($includeLatestBuilds !== null) {
            $queryParams['includeLatestBuilds'] = ObjectSerializer::toQueryValue($includeLatestBuilds);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($definitionId !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionId' . '}',
                ObjectSerializer::toPathValue($definitionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsGetDefinitionRevisions
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionRevision[]
     */
    public function definitionsGetDefinitionRevisions($organization, $project, $definitionId, $apiVersion)
    {
        list($response) = $this->definitionsGetDefinitionRevisionsWithHttpInfo($organization, $project, $definitionId, $apiVersion);
        return $response;
    }

    /**
     * Operation definitionsGetDefinitionRevisionsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionRevision[], HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsGetDefinitionRevisionsWithHttpInfo($organization, $project, $definitionId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionRevision[]';
        $request = $this->definitionsGetDefinitionRevisionsRequest($organization, $project, $definitionId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionRevision[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsGetDefinitionRevisionsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsGetDefinitionRevisionsAsync($organization, $project, $definitionId, $apiVersion)
    {
        return $this->definitionsGetDefinitionRevisionsAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsGetDefinitionRevisionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsGetDefinitionRevisionsAsyncWithHttpInfo($organization, $project, $definitionId, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionRevision[]';
        $request = $this->definitionsGetDefinitionRevisionsRequest($organization, $project, $definitionId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsGetDefinitionRevisions'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.3&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsGetDefinitionRevisionsRequest($organization, $project, $definitionId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsGetDefinitionRevisions'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsGetDefinitionRevisions'
            );
        }
        // verify the required parameter 'definitionId' is set
        if ($definitionId === null || (is_array($definitionId) && count($definitionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionId when calling definitionsGetDefinitionRevisions'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsGetDefinitionRevisions'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions/{definitionId}/revisions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($definitionId !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionId' . '}',
                ObjectSerializer::toPathValue($definitionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsList
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  string $name If specified, filters to definitions whose names match this pattern. (optional)
     * @param  string $repositoryId A repository ID. If specified, filters to definitions that use this repository. (optional)
     * @param  string $repositoryType If specified, filters to definitions that have a repository of this type. (optional)
     * @param  string $queryOrder Indicates the order in which definitions should be returned. (optional)
     * @param  int $top The maximum number of definitions to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $definitionIds A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)
     * @param  string $path If specified, filters to definitions under this folder. (optional)
     * @param  \DateTime $builtAfter If specified, filters to definitions that have builds after this date. (optional)
     * @param  \DateTime $notBuiltAfter If specified, filters to definitions that do not have builds after this date. (optional)
     * @param  bool $includeAllProperties Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)
     * @param  bool $includeLatestBuilds Indicates whether to return the latest and latest completed builds for this definition. (optional)
     * @param  string $taskIdFilter If specified, filters to definitions that use the specified task. (optional)
     * @param  int $processType If specified, filters to definitions with the given process type. (optional)
     * @param  string $yamlFilename If specified, filters to YAML definitions that match the given filename. (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionReference[]
     */
    public function definitionsList($organization, $project, $apiVersion, $name = null, $repositoryId = null, $repositoryType = null, $queryOrder = null, $top = null, $continuationToken = null, $minMetricsTime = null, $definitionIds = null, $path = null, $builtAfter = null, $notBuiltAfter = null, $includeAllProperties = null, $includeLatestBuilds = null, $taskIdFilter = null, $processType = null, $yamlFilename = null)
    {
        list($response) = $this->definitionsListWithHttpInfo($organization, $project, $apiVersion, $name, $repositoryId, $repositoryType, $queryOrder, $top, $continuationToken, $minMetricsTime, $definitionIds, $path, $builtAfter, $notBuiltAfter, $includeAllProperties, $includeLatestBuilds, $taskIdFilter, $processType, $yamlFilename);
        return $response;
    }

    /**
     * Operation definitionsListWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  string $name If specified, filters to definitions whose names match this pattern. (optional)
     * @param  string $repositoryId A repository ID. If specified, filters to definitions that use this repository. (optional)
     * @param  string $repositoryType If specified, filters to definitions that have a repository of this type. (optional)
     * @param  string $queryOrder Indicates the order in which definitions should be returned. (optional)
     * @param  int $top The maximum number of definitions to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $definitionIds A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)
     * @param  string $path If specified, filters to definitions under this folder. (optional)
     * @param  \DateTime $builtAfter If specified, filters to definitions that have builds after this date. (optional)
     * @param  \DateTime $notBuiltAfter If specified, filters to definitions that do not have builds after this date. (optional)
     * @param  bool $includeAllProperties Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)
     * @param  bool $includeLatestBuilds Indicates whether to return the latest and latest completed builds for this definition. (optional)
     * @param  string $taskIdFilter If specified, filters to definitions that use the specified task. (optional)
     * @param  int $processType If specified, filters to definitions with the given process type. (optional)
     * @param  string $yamlFilename If specified, filters to YAML definitions that match the given filename. (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionReference[], HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsListWithHttpInfo($organization, $project, $apiVersion, $name = null, $repositoryId = null, $repositoryType = null, $queryOrder = null, $top = null, $continuationToken = null, $minMetricsTime = null, $definitionIds = null, $path = null, $builtAfter = null, $notBuiltAfter = null, $includeAllProperties = null, $includeLatestBuilds = null, $taskIdFilter = null, $processType = null, $yamlFilename = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionReference[]';
        $request = $this->definitionsListRequest($organization, $project, $apiVersion, $name, $repositoryId, $repositoryType, $queryOrder, $top, $continuationToken, $minMetricsTime, $definitionIds, $path, $builtAfter, $notBuiltAfter, $includeAllProperties, $includeLatestBuilds, $taskIdFilter, $processType, $yamlFilename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionReference[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsListAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  string $name If specified, filters to definitions whose names match this pattern. (optional)
     * @param  string $repositoryId A repository ID. If specified, filters to definitions that use this repository. (optional)
     * @param  string $repositoryType If specified, filters to definitions that have a repository of this type. (optional)
     * @param  string $queryOrder Indicates the order in which definitions should be returned. (optional)
     * @param  int $top The maximum number of definitions to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $definitionIds A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)
     * @param  string $path If specified, filters to definitions under this folder. (optional)
     * @param  \DateTime $builtAfter If specified, filters to definitions that have builds after this date. (optional)
     * @param  \DateTime $notBuiltAfter If specified, filters to definitions that do not have builds after this date. (optional)
     * @param  bool $includeAllProperties Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)
     * @param  bool $includeLatestBuilds Indicates whether to return the latest and latest completed builds for this definition. (optional)
     * @param  string $taskIdFilter If specified, filters to definitions that use the specified task. (optional)
     * @param  int $processType If specified, filters to definitions with the given process type. (optional)
     * @param  string $yamlFilename If specified, filters to YAML definitions that match the given filename. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsListAsync($organization, $project, $apiVersion, $name = null, $repositoryId = null, $repositoryType = null, $queryOrder = null, $top = null, $continuationToken = null, $minMetricsTime = null, $definitionIds = null, $path = null, $builtAfter = null, $notBuiltAfter = null, $includeAllProperties = null, $includeLatestBuilds = null, $taskIdFilter = null, $processType = null, $yamlFilename = null)
    {
        return $this->definitionsListAsyncWithHttpInfo($organization, $project, $apiVersion, $name, $repositoryId, $repositoryType, $queryOrder, $top, $continuationToken, $minMetricsTime, $definitionIds, $path, $builtAfter, $notBuiltAfter, $includeAllProperties, $includeLatestBuilds, $taskIdFilter, $processType, $yamlFilename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  string $name If specified, filters to definitions whose names match this pattern. (optional)
     * @param  string $repositoryId A repository ID. If specified, filters to definitions that use this repository. (optional)
     * @param  string $repositoryType If specified, filters to definitions that have a repository of this type. (optional)
     * @param  string $queryOrder Indicates the order in which definitions should be returned. (optional)
     * @param  int $top The maximum number of definitions to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $definitionIds A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)
     * @param  string $path If specified, filters to definitions under this folder. (optional)
     * @param  \DateTime $builtAfter If specified, filters to definitions that have builds after this date. (optional)
     * @param  \DateTime $notBuiltAfter If specified, filters to definitions that do not have builds after this date. (optional)
     * @param  bool $includeAllProperties Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)
     * @param  bool $includeLatestBuilds Indicates whether to return the latest and latest completed builds for this definition. (optional)
     * @param  string $taskIdFilter If specified, filters to definitions that use the specified task. (optional)
     * @param  int $processType If specified, filters to definitions with the given process type. (optional)
     * @param  string $yamlFilename If specified, filters to YAML definitions that match the given filename. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsListAsyncWithHttpInfo($organization, $project, $apiVersion, $name = null, $repositoryId = null, $repositoryType = null, $queryOrder = null, $top = null, $continuationToken = null, $minMetricsTime = null, $definitionIds = null, $path = null, $builtAfter = null, $notBuiltAfter = null, $includeAllProperties = null, $includeLatestBuilds = null, $taskIdFilter = null, $processType = null, $yamlFilename = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinitionReference[]';
        $request = $this->definitionsListRequest($organization, $project, $apiVersion, $name, $repositoryId, $repositoryType, $queryOrder, $top, $continuationToken, $minMetricsTime, $definitionIds, $path, $builtAfter, $notBuiltAfter, $includeAllProperties, $includeLatestBuilds, $taskIdFilter, $processType, $yamlFilename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsList'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  string $name If specified, filters to definitions whose names match this pattern. (optional)
     * @param  string $repositoryId A repository ID. If specified, filters to definitions that use this repository. (optional)
     * @param  string $repositoryType If specified, filters to definitions that have a repository of this type. (optional)
     * @param  string $queryOrder Indicates the order in which definitions should be returned. (optional)
     * @param  int $top The maximum number of definitions to return. (optional)
     * @param  string $continuationToken A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)
     * @param  \DateTime $minMetricsTime If specified, indicates the date from which metrics should be included. (optional)
     * @param  string $definitionIds A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)
     * @param  string $path If specified, filters to definitions under this folder. (optional)
     * @param  \DateTime $builtAfter If specified, filters to definitions that have builds after this date. (optional)
     * @param  \DateTime $notBuiltAfter If specified, filters to definitions that do not have builds after this date. (optional)
     * @param  bool $includeAllProperties Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)
     * @param  bool $includeLatestBuilds Indicates whether to return the latest and latest completed builds for this definition. (optional)
     * @param  string $taskIdFilter If specified, filters to definitions that use the specified task. (optional)
     * @param  int $processType If specified, filters to definitions with the given process type. (optional)
     * @param  string $yamlFilename If specified, filters to YAML definitions that match the given filename. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsListRequest($organization, $project, $apiVersion, $name = null, $repositoryId = null, $repositoryType = null, $queryOrder = null, $top = null, $continuationToken = null, $minMetricsTime = null, $definitionIds = null, $path = null, $builtAfter = null, $notBuiltAfter = null, $includeAllProperties = null, $includeLatestBuilds = null, $taskIdFilter = null, $processType = null, $yamlFilename = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsList'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsList'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsList'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($repositoryId !== null) {
            $queryParams['repositoryId'] = ObjectSerializer::toQueryValue($repositoryId);
        }
        // query params
        if ($repositoryType !== null) {
            $queryParams['repositoryType'] = ObjectSerializer::toQueryValue($repositoryType);
        }
        // query params
        if ($queryOrder !== null) {
            $queryParams['queryOrder'] = ObjectSerializer::toQueryValue($queryOrder);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($continuationToken !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuationToken);
        }
        // query params
        if ($minMetricsTime !== null) {
            $queryParams['minMetricsTime'] = ObjectSerializer::toQueryValue($minMetricsTime);
        }
        // query params
        if ($definitionIds !== null) {
            $queryParams['definitionIds'] = ObjectSerializer::toQueryValue($definitionIds);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = ObjectSerializer::toQueryValue($path);
        }
        // query params
        if ($builtAfter !== null) {
            $queryParams['builtAfter'] = ObjectSerializer::toQueryValue($builtAfter);
        }
        // query params
        if ($notBuiltAfter !== null) {
            $queryParams['notBuiltAfter'] = ObjectSerializer::toQueryValue($notBuiltAfter);
        }
        // query params
        if ($includeAllProperties !== null) {
            $queryParams['includeAllProperties'] = ObjectSerializer::toQueryValue($includeAllProperties);
        }
        // query params
        if ($includeLatestBuilds !== null) {
            $queryParams['includeLatestBuilds'] = ObjectSerializer::toQueryValue($includeLatestBuilds);
        }
        // query params
        if ($taskIdFilter !== null) {
            $queryParams['taskIdFilter'] = ObjectSerializer::toQueryValue($taskIdFilter);
        }
        // query params
        if ($processType !== null) {
            $queryParams['processType'] = ObjectSerializer::toQueryValue($processType);
        }
        // query params
        if ($yamlFilename !== null) {
            $queryParams['yamlFilename'] = ObjectSerializer::toQueryValue($yamlFilename);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsRestoreDefinition
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The identifier of the definition to restore. (required)
     * @param  bool $deleted When false, restores a deleted definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition
     */
    public function definitionsRestoreDefinition($organization, $project, $definitionId, $deleted, $apiVersion)
    {
        list($response) = $this->definitionsRestoreDefinitionWithHttpInfo($organization, $project, $definitionId, $deleted, $apiVersion);
        return $response;
    }

    /**
     * Operation definitionsRestoreDefinitionWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The identifier of the definition to restore. (required)
     * @param  bool $deleted When false, restores a deleted definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsRestoreDefinitionWithHttpInfo($organization, $project, $definitionId, $deleted, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsRestoreDefinitionRequest($organization, $project, $definitionId, $deleted, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsRestoreDefinitionAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The identifier of the definition to restore. (required)
     * @param  bool $deleted When false, restores a deleted definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsRestoreDefinitionAsync($organization, $project, $definitionId, $deleted, $apiVersion)
    {
        return $this->definitionsRestoreDefinitionAsyncWithHttpInfo($organization, $project, $definitionId, $deleted, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsRestoreDefinitionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The identifier of the definition to restore. (required)
     * @param  bool $deleted When false, restores a deleted definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsRestoreDefinitionAsyncWithHttpInfo($organization, $project, $definitionId, $deleted, $apiVersion)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsRestoreDefinitionRequest($organization, $project, $definitionId, $deleted, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsRestoreDefinition'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The identifier of the definition to restore. (required)
     * @param  bool $deleted When false, restores a deleted definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsRestoreDefinitionRequest($organization, $project, $definitionId, $deleted, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsRestoreDefinition'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsRestoreDefinition'
            );
        }
        // verify the required parameter 'definitionId' is set
        if ($definitionId === null || (is_array($definitionId) && count($definitionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionId when calling definitionsRestoreDefinition'
            );
        }
        // verify the required parameter 'deleted' is set
        if ($deleted === null || (is_array($deleted) && count($deleted) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deleted when calling definitionsRestoreDefinition'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsRestoreDefinition'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions/{definitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deleted !== null) {
            $queryParams['deleted'] = ObjectSerializer::toQueryValue($deleted);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($definitionId !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionId' . '}',
                ObjectSerializer::toPathValue($definitionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation definitionsUpdate
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The new version of the definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $secretsSourceDefinitionId  (optional)
     * @param  int $secretsSourceDefinitionRevision  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition
     */
    public function definitionsUpdate($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId = null, $secretsSourceDefinitionRevision = null)
    {
        list($response) = $this->definitionsUpdateWithHttpInfo($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId, $secretsSourceDefinitionRevision);
        return $response;
    }

    /**
     * Operation definitionsUpdateWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The new version of the definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $secretsSourceDefinitionId  (optional)
     * @param  int $secretsSourceDefinitionRevision  (optional)
     *
     * @throws \AzureDevOpsClient\Build\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function definitionsUpdateWithHttpInfo($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId = null, $secretsSourceDefinitionRevision = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsUpdateRequest($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId, $secretsSourceDefinitionRevision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation definitionsUpdateAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The new version of the definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $secretsSourceDefinitionId  (optional)
     * @param  int $secretsSourceDefinitionRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsUpdateAsync($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId = null, $secretsSourceDefinitionRevision = null)
    {
        return $this->definitionsUpdateAsyncWithHttpInfo($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId, $secretsSourceDefinitionRevision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation definitionsUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The new version of the definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $secretsSourceDefinitionId  (optional)
     * @param  int $secretsSourceDefinitionRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function definitionsUpdateAsyncWithHttpInfo($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId = null, $secretsSourceDefinitionRevision = null)
    {
        $returnType = '\AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition';
        $request = $this->definitionsUpdateRequest($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId, $secretsSourceDefinitionRevision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'definitionsUpdate'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \AzureDevOpsClient\Build\AzureDevOpsClient\Build\Model\BuildDefinition $body The new version of the definition. (required)
     * @param  string $project Project ID or project name (required)
     * @param  int $definitionId The ID of the definition. (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.7&#39; to use this version of the api. (required)
     * @param  int $secretsSourceDefinitionId  (optional)
     * @param  int $secretsSourceDefinitionRevision  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function definitionsUpdateRequest($organization, $body, $project, $definitionId, $apiVersion, $secretsSourceDefinitionId = null, $secretsSourceDefinitionRevision = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling definitionsUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling definitionsUpdate'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling definitionsUpdate'
            );
        }
        // verify the required parameter 'definitionId' is set
        if ($definitionId === null || (is_array($definitionId) && count($definitionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionId when calling definitionsUpdate'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling definitionsUpdate'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/build/definitions/{definitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($secretsSourceDefinitionId !== null) {
            $queryParams['secretsSourceDefinitionId'] = ObjectSerializer::toQueryValue($secretsSourceDefinitionId);
        }
        // query params
        if ($secretsSourceDefinitionRevision !== null) {
            $queryParams['secretsSourceDefinitionRevision'] = ObjectSerializer::toQueryValue($secretsSourceDefinitionRevision);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($definitionId !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionId' . '}',
                ObjectSerializer::toPathValue($definitionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
