<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Account
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Account
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Account\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Account\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Account
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'string',
        'accountName' => 'string',
        'accountOwner' => 'string',
        'accountStatus' => 'string',
        'accountType' => 'string',
        'accountUri' => 'string',
        'createdBy' => 'string',
        'createdDate' => '\DateTime',
        'hasMoved' => 'bool',
        'lastUpdatedBy' => 'string',
        'lastUpdatedDate' => '\DateTime',
        'namespaceId' => 'string',
        'newCollectionId' => 'string',
        'organizationName' => 'string',
        'properties' => '\FrankHouweling\AzureDevOpsClient\Account\Model\PropertiesCollection',
        'statusReason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'uuid',
        'accountName' => null,
        'accountOwner' => 'uuid',
        'accountStatus' => null,
        'accountType' => null,
        'accountUri' => null,
        'createdBy' => 'uuid',
        'createdDate' => 'date-time',
        'hasMoved' => null,
        'lastUpdatedBy' => 'uuid',
        'lastUpdatedDate' => 'date-time',
        'namespaceId' => 'uuid',
        'newCollectionId' => 'uuid',
        'organizationName' => null,
        'properties' => null,
        'statusReason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'accountName' => 'accountName',
        'accountOwner' => 'accountOwner',
        'accountStatus' => 'accountStatus',
        'accountType' => 'accountType',
        'accountUri' => 'accountUri',
        'createdBy' => 'createdBy',
        'createdDate' => 'createdDate',
        'hasMoved' => 'hasMoved',
        'lastUpdatedBy' => 'lastUpdatedBy',
        'lastUpdatedDate' => 'lastUpdatedDate',
        'namespaceId' => 'namespaceId',
        'newCollectionId' => 'newCollectionId',
        'organizationName' => 'organizationName',
        'properties' => 'properties',
        'statusReason' => 'statusReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'accountName' => 'setAccountName',
        'accountOwner' => 'setAccountOwner',
        'accountStatus' => 'setAccountStatus',
        'accountType' => 'setAccountType',
        'accountUri' => 'setAccountUri',
        'createdBy' => 'setCreatedBy',
        'createdDate' => 'setCreatedDate',
        'hasMoved' => 'setHasMoved',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'namespaceId' => 'setNamespaceId',
        'newCollectionId' => 'setNewCollectionId',
        'organizationName' => 'setOrganizationName',
        'properties' => 'setProperties',
        'statusReason' => 'setStatusReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'accountName' => 'getAccountName',
        'accountOwner' => 'getAccountOwner',
        'accountStatus' => 'getAccountStatus',
        'accountType' => 'getAccountType',
        'accountUri' => 'getAccountUri',
        'createdBy' => 'getCreatedBy',
        'createdDate' => 'getCreatedDate',
        'hasMoved' => 'getHasMoved',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'namespaceId' => 'getNamespaceId',
        'newCollectionId' => 'getNewCollectionId',
        'organizationName' => 'getOrganizationName',
        'properties' => 'getProperties',
        'statusReason' => 'getStatusReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_STATUS_NONE = 'none';
    const ACCOUNT_STATUS_ENABLED = 'enabled';
    const ACCOUNT_STATUS_DISABLED = 'disabled';
    const ACCOUNT_STATUS_DELETED = 'deleted';
    const ACCOUNT_STATUS_MOVED = 'moved';
    const ACCOUNT_TYPE_PERSONAL = 'personal';
    const ACCOUNT_TYPE_ORGANIZATION = 'organization';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_NONE,
            self::ACCOUNT_STATUS_ENABLED,
            self::ACCOUNT_STATUS_DISABLED,
            self::ACCOUNT_STATUS_DELETED,
            self::ACCOUNT_STATUS_MOVED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_PERSONAL,
            self::ACCOUNT_TYPE_ORGANIZATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['accountOwner'] = isset($data['accountOwner']) ? $data['accountOwner'] : null;
        $this->container['accountStatus'] = isset($data['accountStatus']) ? $data['accountStatus'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['accountUri'] = isset($data['accountUri']) ? $data['accountUri'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['hasMoved'] = isset($data['hasMoved']) ? $data['hasMoved'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['namespaceId'] = isset($data['namespaceId']) ? $data['namespaceId'] : null;
        $this->container['newCollectionId'] = isset($data['newCollectionId']) ? $data['newCollectionId'] : null;
        $this->container['organizationName'] = isset($data['organizationName']) ? $data['organizationName'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['statusReason'] = isset($data['statusReason']) ? $data['statusReason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['accountStatus']) && !in_array($this->container['accountStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accountStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['accountType']) && !in_array($this->container['accountType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accountType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId Identifier for an Account
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string $accountName Name for an account
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets accountOwner
     *
     * @return string
     */
    public function getAccountOwner()
    {
        return $this->container['accountOwner'];
    }

    /**
     * Sets accountOwner
     *
     * @param string $accountOwner Owner of account
     *
     * @return $this
     */
    public function setAccountOwner($accountOwner)
    {
        $this->container['accountOwner'] = $accountOwner;

        return $this;
    }

    /**
     * Gets accountStatus
     *
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['accountStatus'];
    }

    /**
     * Sets accountStatus
     *
     * @param string $accountStatus Current account status
     *
     * @return $this
     */
    public function setAccountStatus($accountStatus)
    {
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($accountStatus) && !in_array($accountStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accountStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountStatus'] = $accountStatus;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string $accountType Type of account: Personal, Organization
     *
     * @return $this
     */
    public function setAccountType($accountType)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($accountType) && !in_array($accountType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accountType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets accountUri
     *
     * @return string
     */
    public function getAccountUri()
    {
        return $this->container['accountUri'];
    }

    /**
     * Sets accountUri
     *
     * @param string $accountUri Uri for an account
     *
     * @return $this
     */
    public function setAccountUri($accountUri)
    {
        $this->container['accountUri'] = $accountUri;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy Who created the account
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Date account was created
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets hasMoved
     *
     * @return bool
     */
    public function getHasMoved()
    {
        return $this->container['hasMoved'];
    }

    /**
     * Sets hasMoved
     *
     * @param bool $hasMoved hasMoved
     *
     * @return $this
     */
    public function setHasMoved($hasMoved)
    {
        $this->container['hasMoved'] = $hasMoved;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy Identity of last person to update the account
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate Date account was last updated
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets namespaceId
     *
     * @return string
     */
    public function getNamespaceId()
    {
        return $this->container['namespaceId'];
    }

    /**
     * Sets namespaceId
     *
     * @param string $namespaceId Namespace for an account
     *
     * @return $this
     */
    public function setNamespaceId($namespaceId)
    {
        $this->container['namespaceId'] = $namespaceId;

        return $this;
    }

    /**
     * Gets newCollectionId
     *
     * @return string
     */
    public function getNewCollectionId()
    {
        return $this->container['newCollectionId'];
    }

    /**
     * Sets newCollectionId
     *
     * @param string $newCollectionId newCollectionId
     *
     * @return $this
     */
    public function setNewCollectionId($newCollectionId)
    {
        $this->container['newCollectionId'] = $newCollectionId;

        return $this;
    }

    /**
     * Gets organizationName
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organizationName'];
    }

    /**
     * Sets organizationName
     *
     * @param string $organizationName Organization that created the account
     *
     * @return $this
     */
    public function setOrganizationName($organizationName)
    {
        $this->container['organizationName'] = $organizationName;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \FrankHouweling\AzureDevOpsClient\Account\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \FrankHouweling\AzureDevOpsClient\Account\Model\PropertiesCollection $properties Extended properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets statusReason
     *
     * @return string
     */
    public function getStatusReason()
    {
        return $this->container['statusReason'];
    }

    /**
     * Sets statusReason
     *
     * @param string $statusReason Reason for current status
     *
     * @return $this
     */
    public function setStatusReason($statusReason)
    {
        $this->container['statusReason'] = $statusReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


