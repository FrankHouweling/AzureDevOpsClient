<?php
/**
 * ServiceEndpointAuthenticationScheme
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ServiceEndpoint
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceEndpoint
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ServiceEndpoint\ObjectSerializer;

/**
 * ServiceEndpointAuthenticationScheme Class Doc Comment
 *
 * @category Class
 * @description Represents the authentication scheme used to authenticate the endpoint.
 * @package  AzureDevOpsClient\ServiceEndpoint
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceEndpointAuthenticationScheme implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceEndpointAuthenticationScheme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorizationHeaders' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\AuthorizationHeader[]',
        'authorizationUrl' => 'string',
        'clientCertificates' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ClientCertificate[]',
        'dataSourceBindings' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSourceBinding[]',
        'displayName' => 'string',
        'inputDescriptors' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[]',
        'properties' => 'map[string,string]',
        'requiresOAuth2Configuration' => 'bool',
        'scheme' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorizationHeaders' => null,
        'authorizationUrl' => null,
        'clientCertificates' => null,
        'dataSourceBindings' => null,
        'displayName' => null,
        'inputDescriptors' => null,
        'properties' => null,
        'requiresOAuth2Configuration' => null,
        'scheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorizationHeaders' => 'authorizationHeaders',
        'authorizationUrl' => 'authorizationUrl',
        'clientCertificates' => 'clientCertificates',
        'dataSourceBindings' => 'dataSourceBindings',
        'displayName' => 'displayName',
        'inputDescriptors' => 'inputDescriptors',
        'properties' => 'properties',
        'requiresOAuth2Configuration' => 'requiresOAuth2Configuration',
        'scheme' => 'scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorizationHeaders' => 'setAuthorizationHeaders',
        'authorizationUrl' => 'setAuthorizationUrl',
        'clientCertificates' => 'setClientCertificates',
        'dataSourceBindings' => 'setDataSourceBindings',
        'displayName' => 'setDisplayName',
        'inputDescriptors' => 'setInputDescriptors',
        'properties' => 'setProperties',
        'requiresOAuth2Configuration' => 'setRequiresOAuth2Configuration',
        'scheme' => 'setScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorizationHeaders' => 'getAuthorizationHeaders',
        'authorizationUrl' => 'getAuthorizationUrl',
        'clientCertificates' => 'getClientCertificates',
        'dataSourceBindings' => 'getDataSourceBindings',
        'displayName' => 'getDisplayName',
        'inputDescriptors' => 'getInputDescriptors',
        'properties' => 'getProperties',
        'requiresOAuth2Configuration' => 'getRequiresOAuth2Configuration',
        'scheme' => 'getScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorizationHeaders'] = isset($data['authorizationHeaders']) ? $data['authorizationHeaders'] : null;
        $this->container['authorizationUrl'] = isset($data['authorizationUrl']) ? $data['authorizationUrl'] : null;
        $this->container['clientCertificates'] = isset($data['clientCertificates']) ? $data['clientCertificates'] : null;
        $this->container['dataSourceBindings'] = isset($data['dataSourceBindings']) ? $data['dataSourceBindings'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['inputDescriptors'] = isset($data['inputDescriptors']) ? $data['inputDescriptors'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['requiresOAuth2Configuration'] = isset($data['requiresOAuth2Configuration']) ? $data['requiresOAuth2Configuration'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorizationHeaders
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\AuthorizationHeader[]
     */
    public function getAuthorizationHeaders()
    {
        return $this->container['authorizationHeaders'];
    }

    /**
     * Sets authorizationHeaders
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\AuthorizationHeader[] $authorizationHeaders Gets or sets the authorization headers of service endpoint authentication scheme.
     *
     * @return $this
     */
    public function setAuthorizationHeaders($authorizationHeaders)
    {
        $this->container['authorizationHeaders'] = $authorizationHeaders;

        return $this;
    }

    /**
     * Gets authorizationUrl
     *
     * @return string
     */
    public function getAuthorizationUrl()
    {
        return $this->container['authorizationUrl'];
    }

    /**
     * Sets authorizationUrl
     *
     * @param string $authorizationUrl Gets or sets the Authorization url required to authenticate using OAuth2
     *
     * @return $this
     */
    public function setAuthorizationUrl($authorizationUrl)
    {
        $this->container['authorizationUrl'] = $authorizationUrl;

        return $this;
    }

    /**
     * Gets clientCertificates
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ClientCertificate[]
     */
    public function getClientCertificates()
    {
        return $this->container['clientCertificates'];
    }

    /**
     * Sets clientCertificates
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ClientCertificate[] $clientCertificates Gets or sets the certificates of service endpoint authentication scheme.
     *
     * @return $this
     */
    public function setClientCertificates($clientCertificates)
    {
        $this->container['clientCertificates'] = $clientCertificates;

        return $this;
    }

    /**
     * Gets dataSourceBindings
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSourceBinding[]
     */
    public function getDataSourceBindings()
    {
        return $this->container['dataSourceBindings'];
    }

    /**
     * Sets dataSourceBindings
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSourceBinding[] $dataSourceBindings Gets or sets the data source bindings of the endpoint.
     *
     * @return $this
     */
    public function setDataSourceBindings($dataSourceBindings)
    {
        $this->container['dataSourceBindings'] = $dataSourceBindings;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Gets or sets the display name for the service endpoint authentication scheme.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets inputDescriptors
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[]
     */
    public function getInputDescriptors()
    {
        return $this->container['inputDescriptors'];
    }

    /**
     * Sets inputDescriptors
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[] $inputDescriptors Gets or sets the input descriptors for the service endpoint authentication scheme.
     *
     * @return $this
     */
    public function setInputDescriptors($inputDescriptors)
    {
        $this->container['inputDescriptors'] = $inputDescriptors;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties Gets or sets the properties of service endpoint authentication scheme.
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets requiresOAuth2Configuration
     *
     * @return bool
     */
    public function getRequiresOAuth2Configuration()
    {
        return $this->container['requiresOAuth2Configuration'];
    }

    /**
     * Sets requiresOAuth2Configuration
     *
     * @param bool $requiresOAuth2Configuration Gets or sets whether this auth scheme requires OAuth2 configuration or not.
     *
     * @return $this
     */
    public function setRequiresOAuth2Configuration($requiresOAuth2Configuration)
    {
        $this->container['requiresOAuth2Configuration'] = $requiresOAuth2Configuration;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string $scheme Gets or sets the scheme for service endpoint authentication.
     *
     * @return $this
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


