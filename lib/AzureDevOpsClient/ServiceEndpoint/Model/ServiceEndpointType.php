<?php
/**
 * ServiceEndpointType
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\ServiceEndpoint
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ServiceEndpoint
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model;

use \ArrayAccess;
use \AzureDevOpsClient\ServiceEndpoint\ObjectSerializer;

/**
 * ServiceEndpointType Class Doc Comment
 *
 * @category Class
 * @description Represents type of the service endpoint.
 * @package  AzureDevOpsClient\ServiceEndpoint
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceEndpointType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceEndpointType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authenticationSchemes' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ServiceEndpointAuthenticationScheme[]',
        'dataSources' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSource[]',
        'dependencyData' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DependencyData[]',
        'description' => 'string',
        'displayName' => 'string',
        'endpointUrl' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\EndpointUrl',
        'helpLink' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\HelpLink',
        'helpMarkDown' => 'string',
        'iconUrl' => 'string',
        'inputDescriptors' => '\AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[]',
        'name' => 'string',
        'trustedHosts' => 'string[]',
        'uiContributionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authenticationSchemes' => null,
        'dataSources' => null,
        'dependencyData' => null,
        'description' => null,
        'displayName' => null,
        'endpointUrl' => null,
        'helpLink' => null,
        'helpMarkDown' => null,
        'iconUrl' => null,
        'inputDescriptors' => null,
        'name' => null,
        'trustedHosts' => null,
        'uiContributionId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authenticationSchemes' => 'authenticationSchemes',
        'dataSources' => 'dataSources',
        'dependencyData' => 'dependencyData',
        'description' => 'description',
        'displayName' => 'displayName',
        'endpointUrl' => 'endpointUrl',
        'helpLink' => 'helpLink',
        'helpMarkDown' => 'helpMarkDown',
        'iconUrl' => 'iconUrl',
        'inputDescriptors' => 'inputDescriptors',
        'name' => 'name',
        'trustedHosts' => 'trustedHosts',
        'uiContributionId' => 'uiContributionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authenticationSchemes' => 'setAuthenticationSchemes',
        'dataSources' => 'setDataSources',
        'dependencyData' => 'setDependencyData',
        'description' => 'setDescription',
        'displayName' => 'setDisplayName',
        'endpointUrl' => 'setEndpointUrl',
        'helpLink' => 'setHelpLink',
        'helpMarkDown' => 'setHelpMarkDown',
        'iconUrl' => 'setIconUrl',
        'inputDescriptors' => 'setInputDescriptors',
        'name' => 'setName',
        'trustedHosts' => 'setTrustedHosts',
        'uiContributionId' => 'setUiContributionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authenticationSchemes' => 'getAuthenticationSchemes',
        'dataSources' => 'getDataSources',
        'dependencyData' => 'getDependencyData',
        'description' => 'getDescription',
        'displayName' => 'getDisplayName',
        'endpointUrl' => 'getEndpointUrl',
        'helpLink' => 'getHelpLink',
        'helpMarkDown' => 'getHelpMarkDown',
        'iconUrl' => 'getIconUrl',
        'inputDescriptors' => 'getInputDescriptors',
        'name' => 'getName',
        'trustedHosts' => 'getTrustedHosts',
        'uiContributionId' => 'getUiContributionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authenticationSchemes'] = isset($data['authenticationSchemes']) ? $data['authenticationSchemes'] : null;
        $this->container['dataSources'] = isset($data['dataSources']) ? $data['dataSources'] : null;
        $this->container['dependencyData'] = isset($data['dependencyData']) ? $data['dependencyData'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['endpointUrl'] = isset($data['endpointUrl']) ? $data['endpointUrl'] : null;
        $this->container['helpLink'] = isset($data['helpLink']) ? $data['helpLink'] : null;
        $this->container['helpMarkDown'] = isset($data['helpMarkDown']) ? $data['helpMarkDown'] : null;
        $this->container['iconUrl'] = isset($data['iconUrl']) ? $data['iconUrl'] : null;
        $this->container['inputDescriptors'] = isset($data['inputDescriptors']) ? $data['inputDescriptors'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['trustedHosts'] = isset($data['trustedHosts']) ? $data['trustedHosts'] : null;
        $this->container['uiContributionId'] = isset($data['uiContributionId']) ? $data['uiContributionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authenticationSchemes
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ServiceEndpointAuthenticationScheme[]
     */
    public function getAuthenticationSchemes()
    {
        return $this->container['authenticationSchemes'];
    }

    /**
     * Sets authenticationSchemes
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\ServiceEndpointAuthenticationScheme[] $authenticationSchemes Authentication scheme of service endpoint type.
     *
     * @return $this
     */
    public function setAuthenticationSchemes($authenticationSchemes)
    {
        $this->container['authenticationSchemes'] = $authenticationSchemes;

        return $this;
    }

    /**
     * Gets dataSources
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSource[]
     */
    public function getDataSources()
    {
        return $this->container['dataSources'];
    }

    /**
     * Sets dataSources
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DataSource[] $dataSources Data sources of service endpoint type.
     *
     * @return $this
     */
    public function setDataSources($dataSources)
    {
        $this->container['dataSources'] = $dataSources;

        return $this;
    }

    /**
     * Gets dependencyData
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DependencyData[]
     */
    public function getDependencyData()
    {
        return $this->container['dependencyData'];
    }

    /**
     * Sets dependencyData
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\DependencyData[] $dependencyData Dependency data of service endpoint type.
     *
     * @return $this
     */
    public function setDependencyData($dependencyData)
    {
        $this->container['dependencyData'] = $dependencyData;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Gets or sets the description of service endpoint type.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Gets or sets the display name of service endpoint type.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets endpointUrl
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\EndpointUrl
     */
    public function getEndpointUrl()
    {
        return $this->container['endpointUrl'];
    }

    /**
     * Sets endpointUrl
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\EndpointUrl $endpointUrl Gets or sets the endpoint url of service endpoint type.
     *
     * @return $this
     */
    public function setEndpointUrl($endpointUrl)
    {
        $this->container['endpointUrl'] = $endpointUrl;

        return $this;
    }

    /**
     * Gets helpLink
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\HelpLink
     */
    public function getHelpLink()
    {
        return $this->container['helpLink'];
    }

    /**
     * Sets helpLink
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\HelpLink $helpLink Gets or sets the help link of service endpoint type.
     *
     * @return $this
     */
    public function setHelpLink($helpLink)
    {
        $this->container['helpLink'] = $helpLink;

        return $this;
    }

    /**
     * Gets helpMarkDown
     *
     * @return string
     */
    public function getHelpMarkDown()
    {
        return $this->container['helpMarkDown'];
    }

    /**
     * Sets helpMarkDown
     *
     * @param string $helpMarkDown Gets or sets the help text shown at the endpoint create dialog.
     *
     * @return $this
     */
    public function setHelpMarkDown($helpMarkDown)
    {
        $this->container['helpMarkDown'] = $helpMarkDown;

        return $this;
    }

    /**
     * Gets iconUrl
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['iconUrl'];
    }

    /**
     * Sets iconUrl
     *
     * @param string $iconUrl Gets or sets the icon url of service endpoint type.
     *
     * @return $this
     */
    public function setIconUrl($iconUrl)
    {
        $this->container['iconUrl'] = $iconUrl;

        return $this;
    }

    /**
     * Gets inputDescriptors
     *
     * @return \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[]
     */
    public function getInputDescriptors()
    {
        return $this->container['inputDescriptors'];
    }

    /**
     * Sets inputDescriptors
     *
     * @param \AzureDevOpsClient\ServiceEndpoint\AzureDevOpsClient\ServiceEndpoint\Model\InputDescriptor[] $inputDescriptors Input descriptor of service endpoint type.
     *
     * @return $this
     */
    public function setInputDescriptors($inputDescriptors)
    {
        $this->container['inputDescriptors'] = $inputDescriptors;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets or sets the name of service endpoint type.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trustedHosts
     *
     * @return string[]
     */
    public function getTrustedHosts()
    {
        return $this->container['trustedHosts'];
    }

    /**
     * Sets trustedHosts
     *
     * @param string[] $trustedHosts Trusted hosts of a service endpoint type.
     *
     * @return $this
     */
    public function setTrustedHosts($trustedHosts)
    {
        $this->container['trustedHosts'] = $trustedHosts;

        return $this;
    }

    /**
     * Gets uiContributionId
     *
     * @return string
     */
    public function getUiContributionId()
    {
        return $this->container['uiContributionId'];
    }

    /**
     * Sets uiContributionId
     *
     * @param string $uiContributionId Gets or sets the ui contribution id of service endpoint type.
     *
     * @return $this
     */
    public function setUiContributionId($uiContributionId)
    {
        $this->container['uiContributionId'] = $uiContributionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


