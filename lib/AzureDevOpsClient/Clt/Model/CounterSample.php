<?php
/**
 * CounterSample
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * CounterSample Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CounterSample implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CounterSample';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseValue' => 'int',
        'computedValue' => 'string',
        'counterFrequency' => 'int',
        'counterInstanceId' => 'string',
        'counterType' => 'string',
        'intervalEndDate' => '\DateTime',
        'intervalNumber' => 'int',
        'rawValue' => 'int',
        'systemFrequency' => 'int',
        'timeStamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baseValue' => 'int64',
        'computedValue' => 'Single',
        'counterFrequency' => 'int64',
        'counterInstanceId' => null,
        'counterType' => null,
        'intervalEndDate' => 'date-time',
        'intervalNumber' => 'int32',
        'rawValue' => 'int64',
        'systemFrequency' => 'int64',
        'timeStamp' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baseValue' => 'baseValue',
        'computedValue' => 'computedValue',
        'counterFrequency' => 'counterFrequency',
        'counterInstanceId' => 'counterInstanceId',
        'counterType' => 'counterType',
        'intervalEndDate' => 'intervalEndDate',
        'intervalNumber' => 'intervalNumber',
        'rawValue' => 'rawValue',
        'systemFrequency' => 'systemFrequency',
        'timeStamp' => 'timeStamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baseValue' => 'setBaseValue',
        'computedValue' => 'setComputedValue',
        'counterFrequency' => 'setCounterFrequency',
        'counterInstanceId' => 'setCounterInstanceId',
        'counterType' => 'setCounterType',
        'intervalEndDate' => 'setIntervalEndDate',
        'intervalNumber' => 'setIntervalNumber',
        'rawValue' => 'setRawValue',
        'systemFrequency' => 'setSystemFrequency',
        'timeStamp' => 'setTimeStamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baseValue' => 'getBaseValue',
        'computedValue' => 'getComputedValue',
        'counterFrequency' => 'getCounterFrequency',
        'counterInstanceId' => 'getCounterInstanceId',
        'counterType' => 'getCounterType',
        'intervalEndDate' => 'getIntervalEndDate',
        'intervalNumber' => 'getIntervalNumber',
        'rawValue' => 'getRawValue',
        'systemFrequency' => 'getSystemFrequency',
        'timeStamp' => 'getTimeStamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseValue'] = isset($data['baseValue']) ? $data['baseValue'] : null;
        $this->container['computedValue'] = isset($data['computedValue']) ? $data['computedValue'] : null;
        $this->container['counterFrequency'] = isset($data['counterFrequency']) ? $data['counterFrequency'] : null;
        $this->container['counterInstanceId'] = isset($data['counterInstanceId']) ? $data['counterInstanceId'] : null;
        $this->container['counterType'] = isset($data['counterType']) ? $data['counterType'] : null;
        $this->container['intervalEndDate'] = isset($data['intervalEndDate']) ? $data['intervalEndDate'] : null;
        $this->container['intervalNumber'] = isset($data['intervalNumber']) ? $data['intervalNumber'] : null;
        $this->container['rawValue'] = isset($data['rawValue']) ? $data['rawValue'] : null;
        $this->container['systemFrequency'] = isset($data['systemFrequency']) ? $data['systemFrequency'] : null;
        $this->container['timeStamp'] = isset($data['timeStamp']) ? $data['timeStamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baseValue
     *
     * @return int
     */
    public function getBaseValue()
    {
        return $this->container['baseValue'];
    }

    /**
     * Sets baseValue
     *
     * @param int $baseValue baseValue
     *
     * @return $this
     */
    public function setBaseValue($baseValue)
    {
        $this->container['baseValue'] = $baseValue;

        return $this;
    }

    /**
     * Gets computedValue
     *
     * @return string
     */
    public function getComputedValue()
    {
        return $this->container['computedValue'];
    }

    /**
     * Sets computedValue
     *
     * @param string $computedValue computedValue
     *
     * @return $this
     */
    public function setComputedValue($computedValue)
    {
        $this->container['computedValue'] = $computedValue;

        return $this;
    }

    /**
     * Gets counterFrequency
     *
     * @return int
     */
    public function getCounterFrequency()
    {
        return $this->container['counterFrequency'];
    }

    /**
     * Sets counterFrequency
     *
     * @param int $counterFrequency counterFrequency
     *
     * @return $this
     */
    public function setCounterFrequency($counterFrequency)
    {
        $this->container['counterFrequency'] = $counterFrequency;

        return $this;
    }

    /**
     * Gets counterInstanceId
     *
     * @return string
     */
    public function getCounterInstanceId()
    {
        return $this->container['counterInstanceId'];
    }

    /**
     * Sets counterInstanceId
     *
     * @param string $counterInstanceId counterInstanceId
     *
     * @return $this
     */
    public function setCounterInstanceId($counterInstanceId)
    {
        $this->container['counterInstanceId'] = $counterInstanceId;

        return $this;
    }

    /**
     * Gets counterType
     *
     * @return string
     */
    public function getCounterType()
    {
        return $this->container['counterType'];
    }

    /**
     * Sets counterType
     *
     * @param string $counterType counterType
     *
     * @return $this
     */
    public function setCounterType($counterType)
    {
        $this->container['counterType'] = $counterType;

        return $this;
    }

    /**
     * Gets intervalEndDate
     *
     * @return \DateTime
     */
    public function getIntervalEndDate()
    {
        return $this->container['intervalEndDate'];
    }

    /**
     * Sets intervalEndDate
     *
     * @param \DateTime $intervalEndDate intervalEndDate
     *
     * @return $this
     */
    public function setIntervalEndDate($intervalEndDate)
    {
        $this->container['intervalEndDate'] = $intervalEndDate;

        return $this;
    }

    /**
     * Gets intervalNumber
     *
     * @return int
     */
    public function getIntervalNumber()
    {
        return $this->container['intervalNumber'];
    }

    /**
     * Sets intervalNumber
     *
     * @param int $intervalNumber intervalNumber
     *
     * @return $this
     */
    public function setIntervalNumber($intervalNumber)
    {
        $this->container['intervalNumber'] = $intervalNumber;

        return $this;
    }

    /**
     * Gets rawValue
     *
     * @return int
     */
    public function getRawValue()
    {
        return $this->container['rawValue'];
    }

    /**
     * Sets rawValue
     *
     * @param int $rawValue rawValue
     *
     * @return $this
     */
    public function setRawValue($rawValue)
    {
        $this->container['rawValue'] = $rawValue;

        return $this;
    }

    /**
     * Gets systemFrequency
     *
     * @return int
     */
    public function getSystemFrequency()
    {
        return $this->container['systemFrequency'];
    }

    /**
     * Sets systemFrequency
     *
     * @param int $systemFrequency systemFrequency
     *
     * @return $this
     */
    public function setSystemFrequency($systemFrequency)
    {
        $this->container['systemFrequency'] = $systemFrequency;

        return $this;
    }

    /**
     * Gets timeStamp
     *
     * @return int
     */
    public function getTimeStamp()
    {
        return $this->container['timeStamp'];
    }

    /**
     * Sets timeStamp
     *
     * @param int $timeStamp timeStamp
     *
     * @return $this
     */
    public function setTimeStamp($timeStamp)
    {
        $this->container['timeStamp'] = $timeStamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


