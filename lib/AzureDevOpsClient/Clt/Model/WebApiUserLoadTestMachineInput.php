<?php
/**
 * WebApiUserLoadTestMachineInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * WebApiUserLoadTestMachineInput Class Doc Comment
 *
 * @category Class
 * @description This can eventually evolve as the ultimate JSON file that user can use to configure their machine(s) against CLT
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebApiUserLoadTestMachineInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebApiUserLoadTestMachineInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'machineGroupId' => 'string',
        'machineType' => 'string',
        'setupConfiguration' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\WebApiSetupParamaters',
        'supportedRunTypes' => 'object[]',
        'agentGroupName' => 'string',
        'tenantId' => 'string',
        'userLoadAgentResourcesUri' => 'string',
        'vstsAccountUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'machineGroupId' => null,
        'machineType' => null,
        'setupConfiguration' => null,
        'supportedRunTypes' => null,
        'agentGroupName' => null,
        'tenantId' => null,
        'userLoadAgentResourcesUri' => null,
        'vstsAccountUri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'machineGroupId' => 'machineGroupId',
        'machineType' => 'machineType',
        'setupConfiguration' => 'setupConfiguration',
        'supportedRunTypes' => 'supportedRunTypes',
        'agentGroupName' => 'agentGroupName',
        'tenantId' => 'tenantId',
        'userLoadAgentResourcesUri' => 'userLoadAgentResourcesUri',
        'vstsAccountUri' => 'vstsAccountUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'machineGroupId' => 'setMachineGroupId',
        'machineType' => 'setMachineType',
        'setupConfiguration' => 'setSetupConfiguration',
        'supportedRunTypes' => 'setSupportedRunTypes',
        'agentGroupName' => 'setAgentGroupName',
        'tenantId' => 'setTenantId',
        'userLoadAgentResourcesUri' => 'setUserLoadAgentResourcesUri',
        'vstsAccountUri' => 'setVstsAccountUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'machineGroupId' => 'getMachineGroupId',
        'machineType' => 'getMachineType',
        'setupConfiguration' => 'getSetupConfiguration',
        'supportedRunTypes' => 'getSupportedRunTypes',
        'agentGroupName' => 'getAgentGroupName',
        'tenantId' => 'getTenantId',
        'userLoadAgentResourcesUri' => 'getUserLoadAgentResourcesUri',
        'vstsAccountUri' => 'getVstsAccountUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MACHINE_TYPE__DEFAULT = 'default';
    const MACHINE_TYPE_CLT_LOAD_AGENT = 'cltLoadAgent';
    const MACHINE_TYPE_USER_LOAD_AGENT = 'userLoadAgent';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMachineTypeAllowableValues()
    {
        return [
            self::MACHINE_TYPE__DEFAULT,
            self::MACHINE_TYPE_CLT_LOAD_AGENT,
            self::MACHINE_TYPE_USER_LOAD_AGENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['machineGroupId'] = isset($data['machineGroupId']) ? $data['machineGroupId'] : null;
        $this->container['machineType'] = isset($data['machineType']) ? $data['machineType'] : null;
        $this->container['setupConfiguration'] = isset($data['setupConfiguration']) ? $data['setupConfiguration'] : null;
        $this->container['supportedRunTypes'] = isset($data['supportedRunTypes']) ? $data['supportedRunTypes'] : null;
        $this->container['agentGroupName'] = isset($data['agentGroupName']) ? $data['agentGroupName'] : null;
        $this->container['tenantId'] = isset($data['tenantId']) ? $data['tenantId'] : null;
        $this->container['userLoadAgentResourcesUri'] = isset($data['userLoadAgentResourcesUri']) ? $data['userLoadAgentResourcesUri'] : null;
        $this->container['vstsAccountUri'] = isset($data['vstsAccountUri']) ? $data['vstsAccountUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMachineTypeAllowableValues();
        if (!is_null($this->container['machineType']) && !in_array($this->container['machineType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'machineType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets machineGroupId
     *
     * @return string
     */
    public function getMachineGroupId()
    {
        return $this->container['machineGroupId'];
    }

    /**
     * Sets machineGroupId
     *
     * @param string $machineGroupId machineGroupId
     *
     * @return $this
     */
    public function setMachineGroupId($machineGroupId)
    {
        $this->container['machineGroupId'] = $machineGroupId;

        return $this;
    }

    /**
     * Gets machineType
     *
     * @return string
     */
    public function getMachineType()
    {
        return $this->container['machineType'];
    }

    /**
     * Sets machineType
     *
     * @param string $machineType machineType
     *
     * @return $this
     */
    public function setMachineType($machineType)
    {
        $allowedValues = $this->getMachineTypeAllowableValues();
        if (!is_null($machineType) && !in_array($machineType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'machineType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['machineType'] = $machineType;

        return $this;
    }

    /**
     * Gets setupConfiguration
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\WebApiSetupParamaters
     */
    public function getSetupConfiguration()
    {
        return $this->container['setupConfiguration'];
    }

    /**
     * Sets setupConfiguration
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\WebApiSetupParamaters $setupConfiguration setupConfiguration
     *
     * @return $this
     */
    public function setSetupConfiguration($setupConfiguration)
    {
        $this->container['setupConfiguration'] = $setupConfiguration;

        return $this;
    }

    /**
     * Gets supportedRunTypes
     *
     * @return object[]
     */
    public function getSupportedRunTypes()
    {
        return $this->container['supportedRunTypes'];
    }

    /**
     * Sets supportedRunTypes
     *
     * @param object[] $supportedRunTypes supportedRunTypes
     *
     * @return $this
     */
    public function setSupportedRunTypes($supportedRunTypes)
    {
        $this->container['supportedRunTypes'] = $supportedRunTypes;

        return $this;
    }

    /**
     * Gets agentGroupName
     *
     * @return string
     */
    public function getAgentGroupName()
    {
        return $this->container['agentGroupName'];
    }

    /**
     * Sets agentGroupName
     *
     * @param string $agentGroupName agentGroupName
     *
     * @return $this
     */
    public function setAgentGroupName($agentGroupName)
    {
        $this->container['agentGroupName'] = $agentGroupName;

        return $this;
    }

    /**
     * Gets tenantId
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenantId'];
    }

    /**
     * Sets tenantId
     *
     * @param string $tenantId tenantId
     *
     * @return $this
     */
    public function setTenantId($tenantId)
    {
        $this->container['tenantId'] = $tenantId;

        return $this;
    }

    /**
     * Gets userLoadAgentResourcesUri
     *
     * @return string
     */
    public function getUserLoadAgentResourcesUri()
    {
        return $this->container['userLoadAgentResourcesUri'];
    }

    /**
     * Sets userLoadAgentResourcesUri
     *
     * @param string $userLoadAgentResourcesUri userLoadAgentResourcesUri
     *
     * @return $this
     */
    public function setUserLoadAgentResourcesUri($userLoadAgentResourcesUri)
    {
        $this->container['userLoadAgentResourcesUri'] = $userLoadAgentResourcesUri;

        return $this;
    }

    /**
     * Gets vstsAccountUri
     *
     * @return string
     */
    public function getVstsAccountUri()
    {
        return $this->container['vstsAccountUri'];
    }

    /**
     * Sets vstsAccountUri
     *
     * @param string $vstsAccountUri vstsAccountUri
     *
     * @return $this
     */
    public function setVstsAccountUri($vstsAccountUri)
    {
        $this->container['vstsAccountUri'] = $vstsAccountUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


