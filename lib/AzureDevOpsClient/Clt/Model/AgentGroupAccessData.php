<?php
/**
 * AgentGroupAccessData
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * AgentGroupAccessData Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentGroupAccessData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgentGroupAccessData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'details' => 'string',
        'storageConnectionString' => 'string',
        'storageEndPoint' => 'string',
        'storageName' => 'string',
        'storageType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'details' => null,
        'storageConnectionString' => null,
        'storageEndPoint' => null,
        'storageName' => null,
        'storageType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'details' => 'details',
        'storageConnectionString' => 'storageConnectionString',
        'storageEndPoint' => 'storageEndPoint',
        'storageName' => 'storageName',
        'storageType' => 'storageType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'details' => 'setDetails',
        'storageConnectionString' => 'setStorageConnectionString',
        'storageEndPoint' => 'setStorageEndPoint',
        'storageName' => 'setStorageName',
        'storageType' => 'setStorageType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'details' => 'getDetails',
        'storageConnectionString' => 'getStorageConnectionString',
        'storageEndPoint' => 'getStorageEndPoint',
        'storageName' => 'getStorageName',
        'storageType' => 'getStorageType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['storageConnectionString'] = isset($data['storageConnectionString']) ? $data['storageConnectionString'] : null;
        $this->container['storageEndPoint'] = isset($data['storageEndPoint']) ? $data['storageEndPoint'] : null;
        $this->container['storageName'] = isset($data['storageName']) ? $data['storageName'] : null;
        $this->container['storageType'] = isset($data['storageType']) ? $data['storageType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details Type Specific details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets storageConnectionString
     *
     * @return string
     */
    public function getStorageConnectionString()
    {
        return $this->container['storageConnectionString'];
    }

    /**
     * Sets storageConnectionString
     *
     * @param string $storageConnectionString Access string
     *
     * @return $this
     */
    public function setStorageConnectionString($storageConnectionString)
    {
        $this->container['storageConnectionString'] = $storageConnectionString;

        return $this;
    }

    /**
     * Gets storageEndPoint
     *
     * @return string
     */
    public function getStorageEndPoint()
    {
        return $this->container['storageEndPoint'];
    }

    /**
     * Sets storageEndPoint
     *
     * @param string $storageEndPoint Endpoint for the service
     *
     * @return $this
     */
    public function setStorageEndPoint($storageEndPoint)
    {
        $this->container['storageEndPoint'] = $storageEndPoint;

        return $this;
    }

    /**
     * Gets storageName
     *
     * @return string
     */
    public function getStorageName()
    {
        return $this->container['storageName'];
    }

    /**
     * Sets storageName
     *
     * @param string $storageName Identifier for the storage (eg. table name)
     *
     * @return $this
     */
    public function setStorageName($storageName)
    {
        $this->container['storageName'] = $storageName;

        return $this;
    }

    /**
     * Gets storageType
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storageType'];
    }

    /**
     * Sets storageType
     *
     * @param string $storageType Type of the store (table, queue, blob)
     *
     * @return $this
     */
    public function setStorageType($storageType)
    {
        $this->container['storageType'] = $storageType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


