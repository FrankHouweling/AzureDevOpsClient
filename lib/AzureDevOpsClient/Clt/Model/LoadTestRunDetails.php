<?php
/**
 * LoadTestRunDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * LoadTestRunDetails Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoadTestRunDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoadTestRunDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agentCount' => 'int',
        'coreCount' => 'int',
        'coresPerAgent' => 'int',
        'duration' => 'int',
        'loadGeneratorMachinesType' => 'string',
        'samplingInterval' => 'int',
        'warmUpDuration' => 'int',
        'virtualUserCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agentCount' => 'int32',
        'coreCount' => 'int32',
        'coresPerAgent' => 'int32',
        'duration' => 'int32',
        'loadGeneratorMachinesType' => null,
        'samplingInterval' => 'int32',
        'warmUpDuration' => 'int32',
        'virtualUserCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agentCount' => 'agentCount',
        'coreCount' => 'coreCount',
        'coresPerAgent' => 'coresPerAgent',
        'duration' => 'duration',
        'loadGeneratorMachinesType' => 'loadGeneratorMachinesType',
        'samplingInterval' => 'samplingInterval',
        'warmUpDuration' => 'warmUpDuration',
        'virtualUserCount' => 'virtualUserCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agentCount' => 'setAgentCount',
        'coreCount' => 'setCoreCount',
        'coresPerAgent' => 'setCoresPerAgent',
        'duration' => 'setDuration',
        'loadGeneratorMachinesType' => 'setLoadGeneratorMachinesType',
        'samplingInterval' => 'setSamplingInterval',
        'warmUpDuration' => 'setWarmUpDuration',
        'virtualUserCount' => 'setVirtualUserCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agentCount' => 'getAgentCount',
        'coreCount' => 'getCoreCount',
        'coresPerAgent' => 'getCoresPerAgent',
        'duration' => 'getDuration',
        'loadGeneratorMachinesType' => 'getLoadGeneratorMachinesType',
        'samplingInterval' => 'getSamplingInterval',
        'warmUpDuration' => 'getWarmUpDuration',
        'virtualUserCount' => 'getVirtualUserCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOAD_GENERATOR_MACHINES_TYPE__DEFAULT = 'default';
    const LOAD_GENERATOR_MACHINES_TYPE_CLT_LOAD_AGENT = 'cltLoadAgent';
    const LOAD_GENERATOR_MACHINES_TYPE_USER_LOAD_AGENT = 'userLoadAgent';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoadGeneratorMachinesTypeAllowableValues()
    {
        return [
            self::LOAD_GENERATOR_MACHINES_TYPE__DEFAULT,
            self::LOAD_GENERATOR_MACHINES_TYPE_CLT_LOAD_AGENT,
            self::LOAD_GENERATOR_MACHINES_TYPE_USER_LOAD_AGENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agentCount'] = isset($data['agentCount']) ? $data['agentCount'] : null;
        $this->container['coreCount'] = isset($data['coreCount']) ? $data['coreCount'] : null;
        $this->container['coresPerAgent'] = isset($data['coresPerAgent']) ? $data['coresPerAgent'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['loadGeneratorMachinesType'] = isset($data['loadGeneratorMachinesType']) ? $data['loadGeneratorMachinesType'] : null;
        $this->container['samplingInterval'] = isset($data['samplingInterval']) ? $data['samplingInterval'] : null;
        $this->container['warmUpDuration'] = isset($data['warmUpDuration']) ? $data['warmUpDuration'] : null;
        $this->container['virtualUserCount'] = isset($data['virtualUserCount']) ? $data['virtualUserCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLoadGeneratorMachinesTypeAllowableValues();
        if (!is_null($this->container['loadGeneratorMachinesType']) && !in_array($this->container['loadGeneratorMachinesType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'loadGeneratorMachinesType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agentCount
     *
     * @return int
     */
    public function getAgentCount()
    {
        return $this->container['agentCount'];
    }

    /**
     * Sets agentCount
     *
     * @param int $agentCount agentCount
     *
     * @return $this
     */
    public function setAgentCount($agentCount)
    {
        $this->container['agentCount'] = $agentCount;

        return $this;
    }

    /**
     * Gets coreCount
     *
     * @return int
     */
    public function getCoreCount()
    {
        return $this->container['coreCount'];
    }

    /**
     * Sets coreCount
     *
     * @param int $coreCount coreCount
     *
     * @return $this
     */
    public function setCoreCount($coreCount)
    {
        $this->container['coreCount'] = $coreCount;

        return $this;
    }

    /**
     * Gets coresPerAgent
     *
     * @return int
     */
    public function getCoresPerAgent()
    {
        return $this->container['coresPerAgent'];
    }

    /**
     * Sets coresPerAgent
     *
     * @param int $coresPerAgent coresPerAgent
     *
     * @return $this
     */
    public function setCoresPerAgent($coresPerAgent)
    {
        $this->container['coresPerAgent'] = $coresPerAgent;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets loadGeneratorMachinesType
     *
     * @return string
     */
    public function getLoadGeneratorMachinesType()
    {
        return $this->container['loadGeneratorMachinesType'];
    }

    /**
     * Sets loadGeneratorMachinesType
     *
     * @param string $loadGeneratorMachinesType loadGeneratorMachinesType
     *
     * @return $this
     */
    public function setLoadGeneratorMachinesType($loadGeneratorMachinesType)
    {
        $allowedValues = $this->getLoadGeneratorMachinesTypeAllowableValues();
        if (!is_null($loadGeneratorMachinesType) && !in_array($loadGeneratorMachinesType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'loadGeneratorMachinesType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loadGeneratorMachinesType'] = $loadGeneratorMachinesType;

        return $this;
    }

    /**
     * Gets samplingInterval
     *
     * @return int
     */
    public function getSamplingInterval()
    {
        return $this->container['samplingInterval'];
    }

    /**
     * Sets samplingInterval
     *
     * @param int $samplingInterval samplingInterval
     *
     * @return $this
     */
    public function setSamplingInterval($samplingInterval)
    {
        $this->container['samplingInterval'] = $samplingInterval;

        return $this;
    }

    /**
     * Gets warmUpDuration
     *
     * @return int
     */
    public function getWarmUpDuration()
    {
        return $this->container['warmUpDuration'];
    }

    /**
     * Sets warmUpDuration
     *
     * @param int $warmUpDuration warmUpDuration
     *
     * @return $this
     */
    public function setWarmUpDuration($warmUpDuration)
    {
        $this->container['warmUpDuration'] = $warmUpDuration;

        return $this;
    }

    /**
     * Gets virtualUserCount
     *
     * @return int
     */
    public function getVirtualUserCount()
    {
        return $this->container['virtualUserCount'];
    }

    /**
     * Sets virtualUserCount
     *
     * @param int $virtualUserCount virtualUserCount
     *
     * @return $this
     */
    public function setVirtualUserCount($virtualUserCount)
    {
        $this->container['virtualUserCount'] = $virtualUserCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


