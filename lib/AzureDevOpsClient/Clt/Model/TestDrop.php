<?php
/**
 * TestDrop
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * TestDrop Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestDrop implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestDrop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessData' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData',
        'createdDate' => '\DateTime',
        'dropType' => 'string',
        'id' => 'string',
        'loadTestDefinition' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestDefinition',
        'testRunId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accessData' => null,
        'createdDate' => 'date-time',
        'dropType' => null,
        'id' => null,
        'loadTestDefinition' => null,
        'testRunId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessData' => 'accessData',
        'createdDate' => 'createdDate',
        'dropType' => 'dropType',
        'id' => 'id',
        'loadTestDefinition' => 'loadTestDefinition',
        'testRunId' => 'testRunId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessData' => 'setAccessData',
        'createdDate' => 'setCreatedDate',
        'dropType' => 'setDropType',
        'id' => 'setId',
        'loadTestDefinition' => 'setLoadTestDefinition',
        'testRunId' => 'setTestRunId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessData' => 'getAccessData',
        'createdDate' => 'getCreatedDate',
        'dropType' => 'getDropType',
        'id' => 'getId',
        'loadTestDefinition' => 'getLoadTestDefinition',
        'testRunId' => 'getTestRunId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessData'] = isset($data['accessData']) ? $data['accessData'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['dropType'] = isset($data['dropType']) ? $data['dropType'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['loadTestDefinition'] = isset($data['loadTestDefinition']) ? $data['loadTestDefinition'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessData
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData
     */
    public function getAccessData()
    {
        return $this->container['accessData'];
    }

    /**
     * Sets accessData
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData $accessData Data for accessing the drop and not persisted in storage
     *
     * @return $this
     */
    public function setAccessData($accessData)
    {
        $this->container['accessData'] = $accessData;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Time at which the drop is created
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets dropType
     *
     * @return string
     */
    public function getDropType()
    {
        return $this->container['dropType'];
    }

    /**
     * Sets dropType
     *
     * @param string $dropType Identifies the type of drop
     *
     * @return $this
     */
    public function setDropType($dropType)
    {
        $this->container['dropType'] = $dropType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Drop Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets loadTestDefinition
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestDefinition
     */
    public function getLoadTestDefinition()
    {
        return $this->container['loadTestDefinition'];
    }

    /**
     * Sets loadTestDefinition
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestDefinition $loadTestDefinition LoadTest definition of the run for which testdrop is created
     *
     * @return $this
     */
    public function setLoadTestDefinition($loadTestDefinition)
    {
        $this->container['loadTestDefinition'] = $loadTestDefinition;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return string
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param string $testRunId Test Run Id
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


