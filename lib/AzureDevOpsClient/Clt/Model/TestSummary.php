<?php
/**
 * TestSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * TestSummary Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'averageTestTime' => 'double',
        'failedTests' => 'int',
        'passedTests' => 'int',
        'percentileData' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\SummaryPercentileData[]',
        'scenarioName' => 'string',
        'testName' => 'string',
        'totalTests' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'averageTestTime' => 'double',
        'failedTests' => 'int32',
        'passedTests' => 'int32',
        'percentileData' => null,
        'scenarioName' => null,
        'testName' => null,
        'totalTests' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'averageTestTime' => 'averageTestTime',
        'failedTests' => 'failedTests',
        'passedTests' => 'passedTests',
        'percentileData' => 'percentileData',
        'scenarioName' => 'scenarioName',
        'testName' => 'testName',
        'totalTests' => 'totalTests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'averageTestTime' => 'setAverageTestTime',
        'failedTests' => 'setFailedTests',
        'passedTests' => 'setPassedTests',
        'percentileData' => 'setPercentileData',
        'scenarioName' => 'setScenarioName',
        'testName' => 'setTestName',
        'totalTests' => 'setTotalTests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'averageTestTime' => 'getAverageTestTime',
        'failedTests' => 'getFailedTests',
        'passedTests' => 'getPassedTests',
        'percentileData' => 'getPercentileData',
        'scenarioName' => 'getScenarioName',
        'testName' => 'getTestName',
        'totalTests' => 'getTotalTests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['averageTestTime'] = isset($data['averageTestTime']) ? $data['averageTestTime'] : null;
        $this->container['failedTests'] = isset($data['failedTests']) ? $data['failedTests'] : null;
        $this->container['passedTests'] = isset($data['passedTests']) ? $data['passedTests'] : null;
        $this->container['percentileData'] = isset($data['percentileData']) ? $data['percentileData'] : null;
        $this->container['scenarioName'] = isset($data['scenarioName']) ? $data['scenarioName'] : null;
        $this->container['testName'] = isset($data['testName']) ? $data['testName'] : null;
        $this->container['totalTests'] = isset($data['totalTests']) ? $data['totalTests'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets averageTestTime
     *
     * @return double
     */
    public function getAverageTestTime()
    {
        return $this->container['averageTestTime'];
    }

    /**
     * Sets averageTestTime
     *
     * @param double $averageTestTime averageTestTime
     *
     * @return $this
     */
    public function setAverageTestTime($averageTestTime)
    {
        $this->container['averageTestTime'] = $averageTestTime;

        return $this;
    }

    /**
     * Gets failedTests
     *
     * @return int
     */
    public function getFailedTests()
    {
        return $this->container['failedTests'];
    }

    /**
     * Sets failedTests
     *
     * @param int $failedTests failedTests
     *
     * @return $this
     */
    public function setFailedTests($failedTests)
    {
        $this->container['failedTests'] = $failedTests;

        return $this;
    }

    /**
     * Gets passedTests
     *
     * @return int
     */
    public function getPassedTests()
    {
        return $this->container['passedTests'];
    }

    /**
     * Sets passedTests
     *
     * @param int $passedTests passedTests
     *
     * @return $this
     */
    public function setPassedTests($passedTests)
    {
        $this->container['passedTests'] = $passedTests;

        return $this;
    }

    /**
     * Gets percentileData
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\SummaryPercentileData[]
     */
    public function getPercentileData()
    {
        return $this->container['percentileData'];
    }

    /**
     * Sets percentileData
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\SummaryPercentileData[] $percentileData percentileData
     *
     * @return $this
     */
    public function setPercentileData($percentileData)
    {
        $this->container['percentileData'] = $percentileData;

        return $this;
    }

    /**
     * Gets scenarioName
     *
     * @return string
     */
    public function getScenarioName()
    {
        return $this->container['scenarioName'];
    }

    /**
     * Sets scenarioName
     *
     * @param string $scenarioName scenarioName
     *
     * @return $this
     */
    public function setScenarioName($scenarioName)
    {
        $this->container['scenarioName'] = $scenarioName;

        return $this;
    }

    /**
     * Gets testName
     *
     * @return string
     */
    public function getTestName()
    {
        return $this->container['testName'];
    }

    /**
     * Sets testName
     *
     * @param string $testName testName
     *
     * @return $this
     */
    public function setTestName($testName)
    {
        $this->container['testName'] = $testName;

        return $this;
    }

    /**
     * Gets totalTests
     *
     * @return int
     */
    public function getTotalTests()
    {
        return $this->container['totalTests'];
    }

    /**
     * Sets totalTests
     *
     * @param int $totalTests totalTests
     *
     * @return $this
     */
    public function setTotalTests($totalTests)
    {
        $this->container['totalTests'] = $totalTests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


