<?php
/**
 * TestDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * TestDefinition Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessData' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData',
        'createdBy' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef',
        'createdDate' => '\DateTime',
        'id' => 'string',
        'lastModifiedBy' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef',
        'lastModifiedDate' => '\DateTime',
        'loadTestType' => 'string',
        'name' => 'string',
        'description' => 'string',
        'loadGenerationGeoLocations' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\LoadGenerationGeoLocation[]',
        'loadTestDefinitionSource' => 'string',
        'runSettings' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestRunSettings',
        'staticAgentRunSettings' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\StaticAgentRunSetting',
        'testDetails' => '\FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accessData' => null,
        'createdBy' => null,
        'createdDate' => 'date-time',
        'id' => null,
        'lastModifiedBy' => null,
        'lastModifiedDate' => 'date-time',
        'loadTestType' => null,
        'name' => null,
        'description' => null,
        'loadGenerationGeoLocations' => null,
        'loadTestDefinitionSource' => null,
        'runSettings' => null,
        'staticAgentRunSettings' => null,
        'testDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessData' => 'accessData',
        'createdBy' => 'createdBy',
        'createdDate' => 'createdDate',
        'id' => 'id',
        'lastModifiedBy' => 'lastModifiedBy',
        'lastModifiedDate' => 'lastModifiedDate',
        'loadTestType' => 'loadTestType',
        'name' => 'name',
        'description' => 'description',
        'loadGenerationGeoLocations' => 'loadGenerationGeoLocations',
        'loadTestDefinitionSource' => 'loadTestDefinitionSource',
        'runSettings' => 'runSettings',
        'staticAgentRunSettings' => 'staticAgentRunSettings',
        'testDetails' => 'testDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessData' => 'setAccessData',
        'createdBy' => 'setCreatedBy',
        'createdDate' => 'setCreatedDate',
        'id' => 'setId',
        'lastModifiedBy' => 'setLastModifiedBy',
        'lastModifiedDate' => 'setLastModifiedDate',
        'loadTestType' => 'setLoadTestType',
        'name' => 'setName',
        'description' => 'setDescription',
        'loadGenerationGeoLocations' => 'setLoadGenerationGeoLocations',
        'loadTestDefinitionSource' => 'setLoadTestDefinitionSource',
        'runSettings' => 'setRunSettings',
        'staticAgentRunSettings' => 'setStaticAgentRunSettings',
        'testDetails' => 'setTestDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessData' => 'getAccessData',
        'createdBy' => 'getCreatedBy',
        'createdDate' => 'getCreatedDate',
        'id' => 'getId',
        'lastModifiedBy' => 'getLastModifiedBy',
        'lastModifiedDate' => 'getLastModifiedDate',
        'loadTestType' => 'getLoadTestType',
        'name' => 'getName',
        'description' => 'getDescription',
        'loadGenerationGeoLocations' => 'getLoadGenerationGeoLocations',
        'loadTestDefinitionSource' => 'getLoadTestDefinitionSource',
        'runSettings' => 'getRunSettings',
        'staticAgentRunSettings' => 'getStaticAgentRunSettings',
        'testDetails' => 'getTestDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOAD_TEST_TYPE_VISUAL_STUDIO_LOAD_TEST = 'visualStudioLoadTest';
    const LOAD_TEST_TYPE_J_METER = 'jMeter';
    const LOAD_TEST_TYPE_OLD_LOAD_TEST_FILE = 'oldLoadTestFile';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoadTestTypeAllowableValues()
    {
        return [
            self::LOAD_TEST_TYPE_VISUAL_STUDIO_LOAD_TEST,
            self::LOAD_TEST_TYPE_J_METER,
            self::LOAD_TEST_TYPE_OLD_LOAD_TEST_FILE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessData'] = isset($data['accessData']) ? $data['accessData'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastModifiedBy'] = isset($data['lastModifiedBy']) ? $data['lastModifiedBy'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['loadTestType'] = isset($data['loadTestType']) ? $data['loadTestType'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['loadGenerationGeoLocations'] = isset($data['loadGenerationGeoLocations']) ? $data['loadGenerationGeoLocations'] : null;
        $this->container['loadTestDefinitionSource'] = isset($data['loadTestDefinitionSource']) ? $data['loadTestDefinitionSource'] : null;
        $this->container['runSettings'] = isset($data['runSettings']) ? $data['runSettings'] : null;
        $this->container['staticAgentRunSettings'] = isset($data['staticAgentRunSettings']) ? $data['staticAgentRunSettings'] : null;
        $this->container['testDetails'] = isset($data['testDetails']) ? $data['testDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLoadTestTypeAllowableValues();
        if (!is_null($this->container['loadTestType']) && !in_array($this->container['loadTestType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'loadTestType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessData
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData
     */
    public function getAccessData()
    {
        return $this->container['accessData'];
    }

    /**
     * Sets accessData
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\DropAccessData $accessData Data for accessing the drop and not persisted in storage
     *
     * @return $this
     */
    public function setAccessData($accessData)
    {
        $this->container['accessData'] = $accessData;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef
     */
    public function getLastModifiedBy()
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\IdentityRef $lastModifiedBy lastModifiedBy
     *
     * @return $this
     */
    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \DateTime $lastModifiedDate lastModifiedDate
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets loadTestType
     *
     * @return string
     */
    public function getLoadTestType()
    {
        return $this->container['loadTestType'];
    }

    /**
     * Sets loadTestType
     *
     * @param string $loadTestType loadTestType
     *
     * @return $this
     */
    public function setLoadTestType($loadTestType)
    {
        $allowedValues = $this->getLoadTestTypeAllowableValues();
        if (!is_null($loadTestType) && !in_array($loadTestType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'loadTestType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loadTestType'] = $loadTestType;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets loadGenerationGeoLocations
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadGenerationGeoLocation[]
     */
    public function getLoadGenerationGeoLocations()
    {
        return $this->container['loadGenerationGeoLocations'];
    }

    /**
     * Sets loadGenerationGeoLocations
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadGenerationGeoLocation[] $loadGenerationGeoLocations Geo location from where load is generated
     *
     * @return $this
     */
    public function setLoadGenerationGeoLocations($loadGenerationGeoLocations)
    {
        $this->container['loadGenerationGeoLocations'] = $loadGenerationGeoLocations;

        return $this;
    }

    /**
     * Gets loadTestDefinitionSource
     *
     * @return string
     */
    public function getLoadTestDefinitionSource()
    {
        return $this->container['loadTestDefinitionSource'];
    }

    /**
     * Sets loadTestDefinitionSource
     *
     * @param string $loadTestDefinitionSource loadTestDefinitionSource
     *
     * @return $this
     */
    public function setLoadTestDefinitionSource($loadTestDefinitionSource)
    {
        $this->container['loadTestDefinitionSource'] = $loadTestDefinitionSource;

        return $this;
    }

    /**
     * Gets runSettings
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestRunSettings
     */
    public function getRunSettings()
    {
        return $this->container['runSettings'];
    }

    /**
     * Sets runSettings
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTestRunSettings $runSettings runSettings
     *
     * @return $this
     */
    public function setRunSettings($runSettings)
    {
        $this->container['runSettings'] = $runSettings;

        return $this;
    }

    /**
     * Gets staticAgentRunSettings
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\StaticAgentRunSetting
     */
    public function getStaticAgentRunSettings()
    {
        return $this->container['staticAgentRunSettings'];
    }

    /**
     * Sets staticAgentRunSettings
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\StaticAgentRunSetting $staticAgentRunSettings staticAgentRunSettings
     *
     * @return $this
     */
    public function setStaticAgentRunSettings($staticAgentRunSettings)
    {
        $this->container['staticAgentRunSettings'] = $staticAgentRunSettings;

        return $this;
    }

    /**
     * Gets testDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTest
     */
    public function getTestDetails()
    {
        return $this->container['testDetails'];
    }

    /**
     * Sets testDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\Clt\Model\LoadTest $testDetails testDetails
     *
     * @return $this
     */
    public function setTestDetails($testDetails)
    {
        $this->container['testDetails'] = $testDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


