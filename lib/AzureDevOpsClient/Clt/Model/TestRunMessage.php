<?php
/**
 * TestRunMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudLoadTest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Clt\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Clt\ObjectSerializer;

/**
 * TestRunMessage Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Clt
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestRunMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestRunMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agentId' => 'string',
        'errorCode' => 'string',
        'loggedDate' => '\DateTime',
        'message' => 'string',
        'messageId' => 'string',
        'messageSource' => 'string',
        'messageType' => 'string',
        'testRunId' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agentId' => null,
        'errorCode' => null,
        'loggedDate' => 'date-time',
        'message' => null,
        'messageId' => null,
        'messageSource' => null,
        'messageType' => null,
        'testRunId' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agentId' => 'agentId',
        'errorCode' => 'errorCode',
        'loggedDate' => 'loggedDate',
        'message' => 'message',
        'messageId' => 'messageId',
        'messageSource' => 'messageSource',
        'messageType' => 'messageType',
        'testRunId' => 'testRunId',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agentId' => 'setAgentId',
        'errorCode' => 'setErrorCode',
        'loggedDate' => 'setLoggedDate',
        'message' => 'setMessage',
        'messageId' => 'setMessageId',
        'messageSource' => 'setMessageSource',
        'messageType' => 'setMessageType',
        'testRunId' => 'setTestRunId',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agentId' => 'getAgentId',
        'errorCode' => 'getErrorCode',
        'loggedDate' => 'getLoggedDate',
        'message' => 'getMessage',
        'messageId' => 'getMessageId',
        'messageSource' => 'getMessageSource',
        'messageType' => 'getMessageType',
        'testRunId' => 'getTestRunId',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_SOURCE_SETUP_SCRIPT = 'setupScript';
    const MESSAGE_SOURCE_CLEANUP_SCRIPT = 'cleanupScript';
    const MESSAGE_SOURCE_VALIDATION = 'validation';
    const MESSAGE_SOURCE_OTHER = 'other';
    const MESSAGE_SOURCE_AUT_COUNTER_COLLECTION = 'autCounterCollection';
    const MESSAGE_TYPE_INFO = 'info';
    const MESSAGE_TYPE_OUTPUT = 'output';
    const MESSAGE_TYPE_ERROR = 'error';
    const MESSAGE_TYPE_WARNING = 'warning';
    const MESSAGE_TYPE_CRITICAL = 'critical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageSourceAllowableValues()
    {
        return [
            self::MESSAGE_SOURCE_SETUP_SCRIPT,
            self::MESSAGE_SOURCE_CLEANUP_SCRIPT,
            self::MESSAGE_SOURCE_VALIDATION,
            self::MESSAGE_SOURCE_OTHER,
            self::MESSAGE_SOURCE_AUT_COUNTER_COLLECTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_INFO,
            self::MESSAGE_TYPE_OUTPUT,
            self::MESSAGE_TYPE_ERROR,
            self::MESSAGE_TYPE_WARNING,
            self::MESSAGE_TYPE_CRITICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agentId'] = isset($data['agentId']) ? $data['agentId'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['loggedDate'] = isset($data['loggedDate']) ? $data['loggedDate'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['messageId'] = isset($data['messageId']) ? $data['messageId'] : null;
        $this->container['messageSource'] = isset($data['messageSource']) ? $data['messageSource'] : null;
        $this->container['messageType'] = isset($data['messageType']) ? $data['messageType'] : null;
        $this->container['testRunId'] = isset($data['testRunId']) ? $data['testRunId'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMessageSourceAllowableValues();
        if (!is_null($this->container['messageSource']) && !in_array($this->container['messageSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'messageSource', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['messageType']) && !in_array($this->container['messageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'messageType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agentId
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agentId'];
    }

    /**
     * Sets agentId
     *
     * @param string $agentId Agent Id
     *
     * @return $this
     */
    public function setAgentId($agentId)
    {
        $this->container['agentId'] = $agentId;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets loggedDate
     *
     * @return \DateTime
     */
    public function getLoggedDate()
    {
        return $this->container['loggedDate'];
    }

    /**
     * Sets loggedDate
     *
     * @param \DateTime $loggedDate loggedDate
     *
     * @return $this
     */
    public function setLoggedDate($loggedDate)
    {
        $this->container['loggedDate'] = $loggedDate;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string $messageId Message Id
     *
     * @return $this
     */
    public function setMessageId($messageId)
    {
        $this->container['messageId'] = $messageId;

        return $this;
    }

    /**
     * Gets messageSource
     *
     * @return string
     */
    public function getMessageSource()
    {
        return $this->container['messageSource'];
    }

    /**
     * Sets messageSource
     *
     * @param string $messageSource messageSource
     *
     * @return $this
     */
    public function setMessageSource($messageSource)
    {
        $allowedValues = $this->getMessageSourceAllowableValues();
        if (!is_null($messageSource) && !in_array($messageSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'messageSource', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageSource'] = $messageSource;

        return $this;
    }

    /**
     * Gets messageType
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['messageType'];
    }

    /**
     * Sets messageType
     *
     * @param string $messageType messageType
     *
     * @return $this
     */
    public function setMessageType($messageType)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($messageType) && !in_array($messageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'messageType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageType'] = $messageType;

        return $this;
    }

    /**
     * Gets testRunId
     *
     * @return string
     */
    public function getTestRunId()
    {
        return $this->container['testRunId'];
    }

    /**
     * Sets testRunId
     *
     * @param string $testRunId Id of the test run
     *
     * @return $this
     */
    public function setTestRunId($testRunId)
    {
        $this->container['testRunId'] = $testRunId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


