<?php
/**
 * ProcessWorkItemType
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Processes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Processes\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Processes\ObjectSerializer;

/**
 * ProcessWorkItemType Class Doc Comment
 *
 * @category Class
 * @description Class that describes a work item type object
 * @package  FrankHouweling\AzureDevOpsClient\Processes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessWorkItemType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessWorkItemType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'behaviors' => '\FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemTypeBehavior[]',
        'color' => 'string',
        'customization' => 'string',
        'description' => 'string',
        'icon' => 'string',
        'inherits' => 'string',
        'isDisabled' => 'bool',
        'layout' => '\FrankHouweling\AzureDevOpsClient\Processes\Model\FormLayout',
        'name' => 'string',
        'referenceName' => 'string',
        'states' => '\FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemStateResultModel[]',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'behaviors' => null,
        'color' => null,
        'customization' => null,
        'description' => null,
        'icon' => null,
        'inherits' => null,
        'isDisabled' => null,
        'layout' => null,
        'name' => null,
        'referenceName' => null,
        'states' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'behaviors' => 'behaviors',
        'color' => 'color',
        'customization' => 'customization',
        'description' => 'description',
        'icon' => 'icon',
        'inherits' => 'inherits',
        'isDisabled' => 'isDisabled',
        'layout' => 'layout',
        'name' => 'name',
        'referenceName' => 'referenceName',
        'states' => 'states',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'behaviors' => 'setBehaviors',
        'color' => 'setColor',
        'customization' => 'setCustomization',
        'description' => 'setDescription',
        'icon' => 'setIcon',
        'inherits' => 'setInherits',
        'isDisabled' => 'setIsDisabled',
        'layout' => 'setLayout',
        'name' => 'setName',
        'referenceName' => 'setReferenceName',
        'states' => 'setStates',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'behaviors' => 'getBehaviors',
        'color' => 'getColor',
        'customization' => 'getCustomization',
        'description' => 'getDescription',
        'icon' => 'getIcon',
        'inherits' => 'getInherits',
        'isDisabled' => 'getIsDisabled',
        'layout' => 'getLayout',
        'name' => 'getName',
        'referenceName' => 'getReferenceName',
        'states' => 'getStates',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CUSTOMIZATION_SYSTEM = 'system';
    const CUSTOMIZATION_INHERITED = 'inherited';
    const CUSTOMIZATION_CUSTOM = 'custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomizationAllowableValues()
    {
        return [
            self::CUSTOMIZATION_SYSTEM,
            self::CUSTOMIZATION_INHERITED,
            self::CUSTOMIZATION_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['behaviors'] = isset($data['behaviors']) ? $data['behaviors'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['customization'] = isset($data['customization']) ? $data['customization'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['inherits'] = isset($data['inherits']) ? $data['inherits'] : null;
        $this->container['isDisabled'] = isset($data['isDisabled']) ? $data['isDisabled'] : null;
        $this->container['layout'] = isset($data['layout']) ? $data['layout'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['referenceName'] = isset($data['referenceName']) ? $data['referenceName'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCustomizationAllowableValues();
        if (!is_null($this->container['customization']) && !in_array($this->container['customization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customization', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets behaviors
     *
     * @return \FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemTypeBehavior[]
     */
    public function getBehaviors()
    {
        return $this->container['behaviors'];
    }

    /**
     * Sets behaviors
     *
     * @param \FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemTypeBehavior[] $behaviors behaviors
     *
     * @return $this
     */
    public function setBehaviors($behaviors)
    {
        $this->container['behaviors'] = $behaviors;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color Color hexadecimal code to represent the work item type
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets customization
     *
     * @return string
     */
    public function getCustomization()
    {
        return $this->container['customization'];
    }

    /**
     * Sets customization
     *
     * @param string $customization Indicates the type of customization on this work item System work item types are inherited from parent process but not modified Inherited work item types are modified work item that were inherited from parent process Custom work item types are work item types that were created in the current process
     *
     * @return $this
     */
    public function setCustomization($customization)
    {
        $allowedValues = $this->getCustomizationAllowableValues();
        if (!is_null($customization) && !in_array($customization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customization', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customization'] = $customization;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the work item type
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon Icon to represent the work item typ
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets inherits
     *
     * @return string
     */
    public function getInherits()
    {
        return $this->container['inherits'];
    }

    /**
     * Sets inherits
     *
     * @param string $inherits Reference name of the parent work item type
     *
     * @return $this
     */
    public function setInherits($inherits)
    {
        $this->container['inherits'] = $inherits;

        return $this;
    }

    /**
     * Gets isDisabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['isDisabled'];
    }

    /**
     * Sets isDisabled
     *
     * @param bool $isDisabled Indicates if a work item type is disabled
     *
     * @return $this
     */
    public function setIsDisabled($isDisabled)
    {
        $this->container['isDisabled'] = $isDisabled;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return \FrankHouweling\AzureDevOpsClient\Processes\Model\FormLayout
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param \FrankHouweling\AzureDevOpsClient\Processes\Model\FormLayout $layout layout
     *
     * @return $this
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the work item type
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets referenceName
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['referenceName'];
    }

    /**
     * Sets referenceName
     *
     * @param string $referenceName Reference name of work item type
     *
     * @return $this
     */
    public function setReferenceName($referenceName)
    {
        $this->container['referenceName'] = $referenceName;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemStateResultModel[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \FrankHouweling\AzureDevOpsClient\Processes\Model\WorkItemStateResultModel[] $states states
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url of the work item type
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


