<?php
/**
 * FeedInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Search
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Search
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Search\AzureDevOpsClient\Search\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Search\ObjectSerializer;

/**
 * FeedInfo Class Doc Comment
 *
 * @category Class
 * @description Defines the details of a feed.
 * @package  AzureDevOpsClient\Search
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeedInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeedInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'collectionId' => 'string',
        'collectionName' => 'string',
        'feedId' => 'string',
        'feedName' => 'string',
        'latestMatchedVersion' => 'string',
        'latestVersion' => 'string',
        'packageUrl' => 'string',
        'views' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'collectionId' => null,
        'collectionName' => null,
        'feedId' => null,
        'feedName' => null,
        'latestMatchedVersion' => null,
        'latestVersion' => null,
        'packageUrl' => null,
        'views' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collectionId' => 'collectionId',
        'collectionName' => 'collectionName',
        'feedId' => 'feedId',
        'feedName' => 'feedName',
        'latestMatchedVersion' => 'latestMatchedVersion',
        'latestVersion' => 'latestVersion',
        'packageUrl' => 'packageUrl',
        'views' => 'views'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collectionId' => 'setCollectionId',
        'collectionName' => 'setCollectionName',
        'feedId' => 'setFeedId',
        'feedName' => 'setFeedName',
        'latestMatchedVersion' => 'setLatestMatchedVersion',
        'latestVersion' => 'setLatestVersion',
        'packageUrl' => 'setPackageUrl',
        'views' => 'setViews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collectionId' => 'getCollectionId',
        'collectionName' => 'getCollectionName',
        'feedId' => 'getFeedId',
        'feedName' => 'getFeedName',
        'latestMatchedVersion' => 'getLatestMatchedVersion',
        'latestVersion' => 'getLatestVersion',
        'packageUrl' => 'getPackageUrl',
        'views' => 'getViews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collectionId'] = isset($data['collectionId']) ? $data['collectionId'] : null;
        $this->container['collectionName'] = isset($data['collectionName']) ? $data['collectionName'] : null;
        $this->container['feedId'] = isset($data['feedId']) ? $data['feedId'] : null;
        $this->container['feedName'] = isset($data['feedName']) ? $data['feedName'] : null;
        $this->container['latestMatchedVersion'] = isset($data['latestMatchedVersion']) ? $data['latestMatchedVersion'] : null;
        $this->container['latestVersion'] = isset($data['latestVersion']) ? $data['latestVersion'] : null;
        $this->container['packageUrl'] = isset($data['packageUrl']) ? $data['packageUrl'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collectionId
     *
     * @return string
     */
    public function getCollectionId()
    {
        return $this->container['collectionId'];
    }

    /**
     * Sets collectionId
     *
     * @param string $collectionId Id of the collection.
     *
     * @return $this
     */
    public function setCollectionId($collectionId)
    {
        $this->container['collectionId'] = $collectionId;

        return $this;
    }

    /**
     * Gets collectionName
     *
     * @return string
     */
    public function getCollectionName()
    {
        return $this->container['collectionName'];
    }

    /**
     * Sets collectionName
     *
     * @param string $collectionName Name of the collection.
     *
     * @return $this
     */
    public function setCollectionName($collectionName)
    {
        $this->container['collectionName'] = $collectionName;

        return $this;
    }

    /**
     * Gets feedId
     *
     * @return string
     */
    public function getFeedId()
    {
        return $this->container['feedId'];
    }

    /**
     * Sets feedId
     *
     * @param string $feedId Id of the feed.
     *
     * @return $this
     */
    public function setFeedId($feedId)
    {
        $this->container['feedId'] = $feedId;

        return $this;
    }

    /**
     * Gets feedName
     *
     * @return string
     */
    public function getFeedName()
    {
        return $this->container['feedName'];
    }

    /**
     * Sets feedName
     *
     * @param string $feedName Name of the feed.
     *
     * @return $this
     */
    public function setFeedName($feedName)
    {
        $this->container['feedName'] = $feedName;

        return $this;
    }

    /**
     * Gets latestMatchedVersion
     *
     * @return string
     */
    public function getLatestMatchedVersion()
    {
        return $this->container['latestMatchedVersion'];
    }

    /**
     * Sets latestMatchedVersion
     *
     * @param string $latestMatchedVersion Latest matched version of package in this Feed.
     *
     * @return $this
     */
    public function setLatestMatchedVersion($latestMatchedVersion)
    {
        $this->container['latestMatchedVersion'] = $latestMatchedVersion;

        return $this;
    }

    /**
     * Gets latestVersion
     *
     * @return string
     */
    public function getLatestVersion()
    {
        return $this->container['latestVersion'];
    }

    /**
     * Sets latestVersion
     *
     * @param string $latestVersion Latest version of package in this Feed.
     *
     * @return $this
     */
    public function setLatestVersion($latestVersion)
    {
        $this->container['latestVersion'] = $latestVersion;

        return $this;
    }

    /**
     * Gets packageUrl
     *
     * @return string
     */
    public function getPackageUrl()
    {
        return $this->container['packageUrl'];
    }

    /**
     * Sets packageUrl
     *
     * @param string $packageUrl Url of package in this Feed.
     *
     * @return $this
     */
    public function setPackageUrl($packageUrl)
    {
        $this->container['packageUrl'] = $packageUrl;

        return $this;
    }

    /**
     * Gets views
     *
     * @return string[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param string[] $views List of views which contain the matched package.
     *
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


