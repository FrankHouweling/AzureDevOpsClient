<?php
/**
 * ArtifactDetailsApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\Artifacts\ApiException;
use FrankHouweling\AzureDevOpsClient\Artifacts\Configuration;
use FrankHouweling\AzureDevOpsClient\Artifacts\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * ArtifactDetailsApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArtifactDetailsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation artifactDetailsGetBadge
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function artifactDetailsGetBadge($organization, $feedId, $packageId, $project, $apiVersion)
    {
        list($response) = $this->artifactDetailsGetBadgeWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation artifactDetailsGetBadgeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetBadgeWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->artifactDetailsGetBadgeRequest($organization, $feedId, $packageId, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetBadgeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetBadgeAsync($organization, $feedId, $packageId, $project, $apiVersion)
    {
        return $this->artifactDetailsGetBadgeAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetBadgeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetBadgeAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->artifactDetailsGetBadgeRequest($organization, $feedId, $packageId, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetBadge'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetBadgeRequest($organization, $feedId, $packageId, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetBadge'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetBadge'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsGetBadge'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetBadge'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetBadge'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/public/packaging/Feeds/{feedId}/Packages/{packageId}/badge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/svg+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/svg+xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsGetPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId The package Id (GUID Id, not the package name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package
     */
    public function artifactDetailsGetPackage($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions = null, $includeUrls = null, $isListed = null, $isRelease = null, $includeDeleted = null, $includeDescription = null)
    {
        list($response) = $this->artifactDetailsGetPackageWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions, $includeUrls, $isListed, $isRelease, $includeDeleted, $includeDescription);
        return $response;
    }

    /**
     * Operation artifactDetailsGetPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId The package Id (GUID Id, not the package name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetPackageWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions = null, $includeUrls = null, $isListed = null, $isRelease = null, $includeDeleted = null, $includeDescription = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package';
        $request = $this->artifactDetailsGetPackageRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions, $includeUrls, $isListed, $isRelease, $includeDeleted, $includeDescription);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId The package Id (GUID Id, not the package name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageAsync($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions = null, $includeUrls = null, $isListed = null, $isRelease = null, $includeDeleted = null, $includeDescription = null)
    {
        return $this->artifactDetailsGetPackageAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions, $includeUrls, $isListed, $isRelease, $includeDeleted, $includeDescription)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId The package Id (GUID Id, not the package name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions = null, $includeUrls = null, $isListed = null, $isRelease = null, $includeDeleted = null, $includeDescription = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package';
        $request = $this->artifactDetailsGetPackageRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions, $includeUrls, $isListed, $isRelease, $includeDeleted, $includeDescription);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId The package Id (GUID Id, not the package name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true.  Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetPackageRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeAllVersions = null, $includeUrls = null, $isListed = null, $isRelease = null, $includeDeleted = null, $includeDescription = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetPackage'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsGetPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packages/{packageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeAllVersions !== null) {
            $queryParams['includeAllVersions'] = ObjectSerializer::toQueryValue($includeAllVersions);
        }
        // query params
        if ($includeUrls !== null) {
            $queryParams['includeUrls'] = ObjectSerializer::toQueryValue($includeUrls);
        }
        // query params
        if ($isListed !== null) {
            $queryParams['isListed'] = ObjectSerializer::toQueryValue($isListed);
        }
        // query params
        if ($isRelease !== null) {
            $queryParams['isRelease'] = ObjectSerializer::toQueryValue($isRelease);
        }
        // query params
        if ($includeDeleted !== null) {
            $queryParams['includeDeleted'] = ObjectSerializer::toQueryValue($includeDeleted);
        }
        // query params
        if ($includeDescription !== null) {
            $queryParams['includeDescription'] = ObjectSerializer::toQueryValue($includeDescription);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsGetPackageVersion
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion
     */
    public function artifactDetailsGetPackageVersion($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        list($response) = $this->artifactDetailsGetPackageVersionWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);
        return $response;
    }

    /**
     * Operation artifactDetailsGetPackageVersionWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetPackageVersionWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion';
        $request = $this->artifactDetailsGetPackageVersionRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetPackageVersionAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionAsync($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        return $this->artifactDetailsGetPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetPackageVersionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion';
        $request = $this->artifactDetailsGetPackageVersionRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetPackageVersion'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted This does not have any effect on the requested package version, for other versions returned specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetPackageVersionRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetPackageVersion'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetPackageVersion'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsGetPackageVersion'
            );
        }
        // verify the required parameter 'packageVersionId' is set
        if ($packageVersionId === null || (is_array($packageVersionId) && count($packageVersionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersionId when calling artifactDetailsGetPackageVersion'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetPackageVersion'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetPackageVersion'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions/{packageVersionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeUrls !== null) {
            $queryParams['includeUrls'] = ObjectSerializer::toQueryValue($includeUrls);
        }
        // query params
        if ($isListed !== null) {
            $queryParams['isListed'] = ObjectSerializer::toQueryValue($isListed);
        }
        // query params
        if ($isDeleted !== null) {
            $queryParams['isDeleted'] = ObjectSerializer::toQueryValue($isDeleted);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($packageVersionId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersionId' . '}',
                ObjectSerializer::toPathValue($packageVersionId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsGetPackageVersionProvenance
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionProvenance
     */
    public function artifactDetailsGetPackageVersionProvenance($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
    {
        list($response) = $this->artifactDetailsGetPackageVersionProvenanceWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation artifactDetailsGetPackageVersionProvenanceWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionProvenance, HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetPackageVersionProvenanceWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionProvenance';
        $request = $this->artifactDetailsGetPackageVersionProvenanceRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionProvenance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetPackageVersionProvenanceAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionProvenanceAsync($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
    {
        return $this->artifactDetailsGetPackageVersionProvenanceAsyncWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetPackageVersionProvenanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionProvenanceAsyncWithHttpInfo($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionProvenance';
        $request = $this->artifactDetailsGetPackageVersionProvenanceRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetPackageVersionProvenance'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $packageVersionId Id of the package version (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetPackageVersionProvenanceRequest($organization, $feedId, $packageId, $packageVersionId, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetPackageVersionProvenance'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetPackageVersionProvenance'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsGetPackageVersionProvenance'
            );
        }
        // verify the required parameter 'packageVersionId' is set
        if ($packageVersionId === null || (is_array($packageVersionId) && count($packageVersionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersionId when calling artifactDetailsGetPackageVersionProvenance'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetPackageVersionProvenance'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetPackageVersionProvenance'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/Versions/{packageVersionId}/provenance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($packageVersionId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersionId' . '}',
                ObjectSerializer::toPathValue($packageVersionId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsGetPackageVersions
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion[]
     */
    public function artifactDetailsGetPackageVersions($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        list($response) = $this->artifactDetailsGetPackageVersionsWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);
        return $response;
    }

    /**
     * Operation artifactDetailsGetPackageVersionsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetPackageVersionsWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion[]';
        $request = $this->artifactDetailsGetPackageVersionsRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetPackageVersionsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionsAsync($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        return $this->artifactDetailsGetPackageVersionsAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetPackageVersionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackageVersionsAsyncWithHttpInfo($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersion[]';
        $request = $this->artifactDetailsGetPackageVersionsRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls, $isListed, $isDeleted);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetPackageVersions'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $packageId Id of the package (GUID Id, not name). (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  bool $includeUrls True to include urls for each version. Default is true. (optional)
     * @param  bool $isListed Only applicable for NuGet packages. If false, delisted package versions will be returned. (optional)
     * @param  bool $isDeleted If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetPackageVersionsRequest($organization, $feedId, $packageId, $project, $apiVersion, $includeUrls = null, $isListed = null, $isDeleted = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetPackageVersions'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetPackageVersions'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsGetPackageVersions'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetPackageVersions'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetPackageVersions'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeUrls !== null) {
            $queryParams['includeUrls'] = ObjectSerializer::toQueryValue($includeUrls);
        }
        // query params
        if ($isListed !== null) {
            $queryParams['isListed'] = ObjectSerializer::toQueryValue($isListed);
        }
        // query params
        if ($isDeleted !== null) {
            $queryParams['isDeleted'] = ObjectSerializer::toQueryValue($isDeleted);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsGetPackages
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $protocolType One of the supported artifact package types. (optional)
     * @param  string $packageNameQuery Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints. (optional)
     * @param  string $normalizedPackageName [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $getTopPackageVersions Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions&#x3D;true (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     * @param  int $top Get the top N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  int $skip Skip the first N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $isCached [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  string $directUpstreamId Filter results to return packages from a specific upstream. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package[]
     */
    public function artifactDetailsGetPackages($organization, $feedId, $project, $apiVersion, $protocolType = null, $packageNameQuery = null, $normalizedPackageName = null, $includeUrls = null, $includeAllVersions = null, $isListed = null, $getTopPackageVersions = null, $isRelease = null, $includeDescription = null, $top = null, $skip = null, $includeDeleted = null, $isCached = null, $directUpstreamId = null)
    {
        list($response) = $this->artifactDetailsGetPackagesWithHttpInfo($organization, $feedId, $project, $apiVersion, $protocolType, $packageNameQuery, $normalizedPackageName, $includeUrls, $includeAllVersions, $isListed, $getTopPackageVersions, $isRelease, $includeDescription, $top, $skip, $includeDeleted, $isCached, $directUpstreamId);
        return $response;
    }

    /**
     * Operation artifactDetailsGetPackagesWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $protocolType One of the supported artifact package types. (optional)
     * @param  string $packageNameQuery Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints. (optional)
     * @param  string $normalizedPackageName [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $getTopPackageVersions Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions&#x3D;true (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     * @param  int $top Get the top N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  int $skip Skip the first N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $isCached [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  string $directUpstreamId Filter results to return packages from a specific upstream. (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package[], HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsGetPackagesWithHttpInfo($organization, $feedId, $project, $apiVersion, $protocolType = null, $packageNameQuery = null, $normalizedPackageName = null, $includeUrls = null, $includeAllVersions = null, $isListed = null, $getTopPackageVersions = null, $isRelease = null, $includeDescription = null, $top = null, $skip = null, $includeDeleted = null, $isCached = null, $directUpstreamId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package[]';
        $request = $this->artifactDetailsGetPackagesRequest($organization, $feedId, $project, $apiVersion, $protocolType, $packageNameQuery, $normalizedPackageName, $includeUrls, $includeAllVersions, $isListed, $getTopPackageVersions, $isRelease, $includeDescription, $top, $skip, $includeDeleted, $isCached, $directUpstreamId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsGetPackagesAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $protocolType One of the supported artifact package types. (optional)
     * @param  string $packageNameQuery Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints. (optional)
     * @param  string $normalizedPackageName [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $getTopPackageVersions Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions&#x3D;true (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     * @param  int $top Get the top N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  int $skip Skip the first N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $isCached [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  string $directUpstreamId Filter results to return packages from a specific upstream. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackagesAsync($organization, $feedId, $project, $apiVersion, $protocolType = null, $packageNameQuery = null, $normalizedPackageName = null, $includeUrls = null, $includeAllVersions = null, $isListed = null, $getTopPackageVersions = null, $isRelease = null, $includeDescription = null, $top = null, $skip = null, $includeDeleted = null, $isCached = null, $directUpstreamId = null)
    {
        return $this->artifactDetailsGetPackagesAsyncWithHttpInfo($organization, $feedId, $project, $apiVersion, $protocolType, $packageNameQuery, $normalizedPackageName, $includeUrls, $includeAllVersions, $isListed, $getTopPackageVersions, $isRelease, $includeDescription, $top, $skip, $includeDeleted, $isCached, $directUpstreamId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsGetPackagesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $protocolType One of the supported artifact package types. (optional)
     * @param  string $packageNameQuery Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints. (optional)
     * @param  string $normalizedPackageName [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $getTopPackageVersions Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions&#x3D;true (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     * @param  int $top Get the top N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  int $skip Skip the first N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $isCached [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  string $directUpstreamId Filter results to return packages from a specific upstream. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsGetPackagesAsyncWithHttpInfo($organization, $feedId, $project, $apiVersion, $protocolType = null, $packageNameQuery = null, $normalizedPackageName = null, $includeUrls = null, $includeAllVersions = null, $isListed = null, $getTopPackageVersions = null, $isRelease = null, $includeDescription = null, $top = null, $skip = null, $includeDeleted = null, $isCached = null, $directUpstreamId = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\Package[]';
        $request = $this->artifactDetailsGetPackagesRequest($organization, $feedId, $project, $apiVersion, $protocolType, $packageNameQuery, $normalizedPackageName, $includeUrls, $includeAllVersions, $isListed, $getTopPackageVersions, $isRelease, $includeDescription, $top, $skip, $includeDeleted, $isCached, $directUpstreamId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsGetPackages'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or Id of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     * @param  string $protocolType One of the supported artifact package types. (optional)
     * @param  string $packageNameQuery Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints. (optional)
     * @param  string $normalizedPackageName [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  bool $includeUrls True to return REST Urls with the response. Default is True. (optional)
     * @param  bool $includeAllVersions True to return all versions of the package in the response. Default is false (latest version only). (optional)
     * @param  bool $isListed Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages). (optional)
     * @param  bool $getTopPackageVersions Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions&#x3D;true (optional)
     * @param  bool $isRelease Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning). (optional)
     * @param  bool $includeDescription Return the description for every version of each package in the response. Default is False. (optional)
     * @param  int $top Get the top N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  int $skip Skip the first N packages (or package versions where getTopPackageVersions&#x3D;true) (optional)
     * @param  bool $includeDeleted Return deleted or unpublished versions of packages in the response. Default is False. (optional)
     * @param  bool $isCached [Obsolete] Used for legacy scenarios and may be removed in future versions. (optional)
     * @param  string $directUpstreamId Filter results to return packages from a specific upstream. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsGetPackagesRequest($organization, $feedId, $project, $apiVersion, $protocolType = null, $packageNameQuery = null, $normalizedPackageName = null, $includeUrls = null, $includeAllVersions = null, $isListed = null, $getTopPackageVersions = null, $isRelease = null, $includeDescription = null, $top = null, $skip = null, $includeDeleted = null, $isCached = null, $directUpstreamId = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsGetPackages'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsGetPackages'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsGetPackages'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsGetPackages'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($protocolType !== null) {
            $queryParams['protocolType'] = ObjectSerializer::toQueryValue($protocolType);
        }
        // query params
        if ($packageNameQuery !== null) {
            $queryParams['packageNameQuery'] = ObjectSerializer::toQueryValue($packageNameQuery);
        }
        // query params
        if ($normalizedPackageName !== null) {
            $queryParams['normalizedPackageName'] = ObjectSerializer::toQueryValue($normalizedPackageName);
        }
        // query params
        if ($includeUrls !== null) {
            $queryParams['includeUrls'] = ObjectSerializer::toQueryValue($includeUrls);
        }
        // query params
        if ($includeAllVersions !== null) {
            $queryParams['includeAllVersions'] = ObjectSerializer::toQueryValue($includeAllVersions);
        }
        // query params
        if ($isListed !== null) {
            $queryParams['isListed'] = ObjectSerializer::toQueryValue($isListed);
        }
        // query params
        if ($getTopPackageVersions !== null) {
            $queryParams['getTopPackageVersions'] = ObjectSerializer::toQueryValue($getTopPackageVersions);
        }
        // query params
        if ($isRelease !== null) {
            $queryParams['isRelease'] = ObjectSerializer::toQueryValue($isRelease);
        }
        // query params
        if ($includeDescription !== null) {
            $queryParams['includeDescription'] = ObjectSerializer::toQueryValue($includeDescription);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($includeDeleted !== null) {
            $queryParams['includeDeleted'] = ObjectSerializer::toQueryValue($includeDeleted);
        }
        // query params
        if ($isCached !== null) {
            $queryParams['isCached'] = ObjectSerializer::toQueryValue($isCached);
        }
        // query params
        if ($directUpstreamId !== null) {
            $queryParams['directUpstreamId'] = ObjectSerializer::toQueryValue($directUpstreamId);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsQueryPackageMetrics
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetrics[]
     */
    public function artifactDetailsQueryPackageMetrics($organization, $body, $feedId, $project, $apiVersion)
    {
        list($response) = $this->artifactDetailsQueryPackageMetricsWithHttpInfo($organization, $body, $feedId, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation artifactDetailsQueryPackageMetricsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetrics[], HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsQueryPackageMetricsWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetrics[]';
        $request = $this->artifactDetailsQueryPackageMetricsRequest($organization, $body, $feedId, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetrics[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsQueryPackageMetricsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsQueryPackageMetricsAsync($organization, $body, $feedId, $project, $apiVersion)
    {
        return $this->artifactDetailsQueryPackageMetricsAsyncWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsQueryPackageMetricsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsQueryPackageMetricsAsyncWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetrics[]';
        $request = $this->artifactDetailsQueryPackageMetricsRequest($organization, $body, $feedId, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsQueryPackageMetrics'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsQueryPackageMetricsRequest($organization, $body, $feedId, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsQueryPackageMetrics'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling artifactDetailsQueryPackageMetrics'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsQueryPackageMetrics'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsQueryPackageMetrics'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsQueryPackageMetrics'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packagemetricsbatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation artifactDetailsQueryPackageVersionMetrics
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetrics[]
     */
    public function artifactDetailsQueryPackageVersionMetrics($organization, $body, $feedId, $packageId, $project, $apiVersion)
    {
        list($response) = $this->artifactDetailsQueryPackageVersionMetricsWithHttpInfo($organization, $body, $feedId, $packageId, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation artifactDetailsQueryPackageVersionMetricsWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Artifacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetrics[], HTTP status code, HTTP response headers (array of strings)
     */
    public function artifactDetailsQueryPackageVersionMetricsWithHttpInfo($organization, $body, $feedId, $packageId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetrics[]';
        $request = $this->artifactDetailsQueryPackageVersionMetricsRequest($organization, $body, $feedId, $packageId, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetrics[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artifactDetailsQueryPackageVersionMetricsAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsQueryPackageVersionMetricsAsync($organization, $body, $feedId, $packageId, $project, $apiVersion)
    {
        return $this->artifactDetailsQueryPackageVersionMetricsAsyncWithHttpInfo($organization, $body, $feedId, $packageId, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artifactDetailsQueryPackageVersionMetricsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artifactDetailsQueryPackageVersionMetricsAsyncWithHttpInfo($organization, $body, $feedId, $packageId, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetrics[]';
        $request = $this->artifactDetailsQueryPackageVersionMetricsRequest($organization, $body, $feedId, $packageId, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artifactDetailsQueryPackageVersionMetrics'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageVersionMetricsQuery $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageId  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function artifactDetailsQueryPackageVersionMetricsRequest($organization, $body, $feedId, $packageId, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }
        // verify the required parameter 'packageId' is set
        if ($packageId === null || (is_array($packageId) && count($packageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageId when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling artifactDetailsQueryPackageVersionMetrics'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versionmetricsbatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageId !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($packageId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token) OR HTTP Basic Authentication with personal access token
        if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
			$headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
		}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
