<?php
/**
 * MinimalPackageVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * MinimalPackageVersion Class Doc Comment
 *
 * @category Class
 * @description Core data about any package, including its id and version information and basic state.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MinimalPackageVersion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MinimalPackageVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'directUpstreamSourceId' => 'string',
        'id' => 'string',
        'isCachedVersion' => 'bool',
        'isDeleted' => 'bool',
        'isLatest' => 'bool',
        'isListed' => 'bool',
        'normalizedVersion' => 'string',
        'packageDescription' => 'string',
        'publishDate' => '\DateTime',
        'storageId' => 'string',
        'version' => 'string',
        'views' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'directUpstreamSourceId' => 'uuid',
        'id' => 'uuid',
        'isCachedVersion' => null,
        'isDeleted' => null,
        'isLatest' => null,
        'isListed' => null,
        'normalizedVersion' => null,
        'packageDescription' => null,
        'publishDate' => 'date-time',
        'storageId' => null,
        'version' => null,
        'views' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'directUpstreamSourceId' => 'directUpstreamSourceId',
        'id' => 'id',
        'isCachedVersion' => 'isCachedVersion',
        'isDeleted' => 'isDeleted',
        'isLatest' => 'isLatest',
        'isListed' => 'isListed',
        'normalizedVersion' => 'normalizedVersion',
        'packageDescription' => 'packageDescription',
        'publishDate' => 'publishDate',
        'storageId' => 'storageId',
        'version' => 'version',
        'views' => 'views'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'directUpstreamSourceId' => 'setDirectUpstreamSourceId',
        'id' => 'setId',
        'isCachedVersion' => 'setIsCachedVersion',
        'isDeleted' => 'setIsDeleted',
        'isLatest' => 'setIsLatest',
        'isListed' => 'setIsListed',
        'normalizedVersion' => 'setNormalizedVersion',
        'packageDescription' => 'setPackageDescription',
        'publishDate' => 'setPublishDate',
        'storageId' => 'setStorageId',
        'version' => 'setVersion',
        'views' => 'setViews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'directUpstreamSourceId' => 'getDirectUpstreamSourceId',
        'id' => 'getId',
        'isCachedVersion' => 'getIsCachedVersion',
        'isDeleted' => 'getIsDeleted',
        'isLatest' => 'getIsLatest',
        'isListed' => 'getIsListed',
        'normalizedVersion' => 'getNormalizedVersion',
        'packageDescription' => 'getPackageDescription',
        'publishDate' => 'getPublishDate',
        'storageId' => 'getStorageId',
        'version' => 'getVersion',
        'views' => 'getViews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['directUpstreamSourceId'] = isset($data['directUpstreamSourceId']) ? $data['directUpstreamSourceId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isCachedVersion'] = isset($data['isCachedVersion']) ? $data['isCachedVersion'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['isLatest'] = isset($data['isLatest']) ? $data['isLatest'] : null;
        $this->container['isListed'] = isset($data['isListed']) ? $data['isListed'] : null;
        $this->container['normalizedVersion'] = isset($data['normalizedVersion']) ? $data['normalizedVersion'] : null;
        $this->container['packageDescription'] = isset($data['packageDescription']) ? $data['packageDescription'] : null;
        $this->container['publishDate'] = isset($data['publishDate']) ? $data['publishDate'] : null;
        $this->container['storageId'] = isset($data['storageId']) ? $data['storageId'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets directUpstreamSourceId
     *
     * @return string
     */
    public function getDirectUpstreamSourceId()
    {
        return $this->container['directUpstreamSourceId'];
    }

    /**
     * Sets directUpstreamSourceId
     *
     * @param string $directUpstreamSourceId Upstream source this package was ingested from.
     *
     * @return $this
     */
    public function setDirectUpstreamSourceId($directUpstreamSourceId)
    {
        $this->container['directUpstreamSourceId'] = $directUpstreamSourceId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id for the package.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isCachedVersion
     *
     * @return bool
     */
    public function getIsCachedVersion()
    {
        return $this->container['isCachedVersion'];
    }

    /**
     * Sets isCachedVersion
     *
     * @param bool $isCachedVersion [Obsolete] Used for legacy scenarios and may be removed in future versions.
     *
     * @return $this
     */
    public function setIsCachedVersion($isCachedVersion)
    {
        $this->container['isCachedVersion'] = $isCachedVersion;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted True if this package has been deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets isLatest
     *
     * @return bool
     */
    public function getIsLatest()
    {
        return $this->container['isLatest'];
    }

    /**
     * Sets isLatest
     *
     * @param bool $isLatest True if this is the latest version of the package by package type sort order.
     *
     * @return $this
     */
    public function setIsLatest($isLatest)
    {
        $this->container['isLatest'] = $isLatest;

        return $this;
    }

    /**
     * Gets isListed
     *
     * @return bool
     */
    public function getIsListed()
    {
        return $this->container['isListed'];
    }

    /**
     * Sets isListed
     *
     * @param bool $isListed (NuGet Only) True if this package is listed.
     *
     * @return $this
     */
    public function setIsListed($isListed)
    {
        $this->container['isListed'] = $isListed;

        return $this;
    }

    /**
     * Gets normalizedVersion
     *
     * @return string
     */
    public function getNormalizedVersion()
    {
        return $this->container['normalizedVersion'];
    }

    /**
     * Sets normalizedVersion
     *
     * @param string $normalizedVersion Normalized version using normalization rules specific to a package type.
     *
     * @return $this
     */
    public function setNormalizedVersion($normalizedVersion)
    {
        $this->container['normalizedVersion'] = $normalizedVersion;

        return $this;
    }

    /**
     * Gets packageDescription
     *
     * @return string
     */
    public function getPackageDescription()
    {
        return $this->container['packageDescription'];
    }

    /**
     * Sets packageDescription
     *
     * @param string $packageDescription Package description.
     *
     * @return $this
     */
    public function setPackageDescription($packageDescription)
    {
        $this->container['packageDescription'] = $packageDescription;

        return $this;
    }

    /**
     * Gets publishDate
     *
     * @return \DateTime
     */
    public function getPublishDate()
    {
        return $this->container['publishDate'];
    }

    /**
     * Sets publishDate
     *
     * @param \DateTime $publishDate UTC Date the package was published to the service.
     *
     * @return $this
     */
    public function setPublishDate($publishDate)
    {
        $this->container['publishDate'] = $publishDate;

        return $this;
    }

    /**
     * Gets storageId
     *
     * @return string
     */
    public function getStorageId()
    {
        return $this->container['storageId'];
    }

    /**
     * Sets storageId
     *
     * @param string $storageId Internal storage id.
     *
     * @return $this
     */
    public function setStorageId($storageId)
    {
        $this->container['storageId'] = $storageId;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Display version.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[] $views List of views containing this package version.
     *
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


