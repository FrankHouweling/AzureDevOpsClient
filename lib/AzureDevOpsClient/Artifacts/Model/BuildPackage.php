<?php
/**
 * BuildPackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * BuildPackage Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildPackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuildPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feedName' => 'string',
        'packageDescription' => 'string',
        'packageName' => 'string',
        'packageVersion' => 'string',
        'projectId' => 'string',
        'protocolType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feedName' => null,
        'packageDescription' => null,
        'packageName' => null,
        'packageVersion' => null,
        'projectId' => 'uuid',
        'protocolType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feedName' => 'feedName',
        'packageDescription' => 'packageDescription',
        'packageName' => 'packageName',
        'packageVersion' => 'packageVersion',
        'projectId' => 'projectId',
        'protocolType' => 'protocolType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feedName' => 'setFeedName',
        'packageDescription' => 'setPackageDescription',
        'packageName' => 'setPackageName',
        'packageVersion' => 'setPackageVersion',
        'projectId' => 'setProjectId',
        'protocolType' => 'setProtocolType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feedName' => 'getFeedName',
        'packageDescription' => 'getPackageDescription',
        'packageName' => 'getPackageName',
        'packageVersion' => 'getPackageVersion',
        'projectId' => 'getProjectId',
        'protocolType' => 'getProtocolType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feedName'] = isset($data['feedName']) ? $data['feedName'] : null;
        $this->container['packageDescription'] = isset($data['packageDescription']) ? $data['packageDescription'] : null;
        $this->container['packageName'] = isset($data['packageName']) ? $data['packageName'] : null;
        $this->container['packageVersion'] = isset($data['packageVersion']) ? $data['packageVersion'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['protocolType'] = isset($data['protocolType']) ? $data['protocolType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feedName
     *
     * @return string
     */
    public function getFeedName()
    {
        return $this->container['feedName'];
    }

    /**
     * Sets feedName
     *
     * @param string $feedName Display name of the feed.
     *
     * @return $this
     */
    public function setFeedName($feedName)
    {
        $this->container['feedName'] = $feedName;

        return $this;
    }

    /**
     * Gets packageDescription
     *
     * @return string
     */
    public function getPackageDescription()
    {
        return $this->container['packageDescription'];
    }

    /**
     * Sets packageDescription
     *
     * @param string $packageDescription Package version description.
     *
     * @return $this
     */
    public function setPackageDescription($packageDescription)
    {
        $this->container['packageDescription'] = $packageDescription;

        return $this;
    }

    /**
     * Gets packageName
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['packageName'];
    }

    /**
     * Sets packageName
     *
     * @param string $packageName Display name of the package.
     *
     * @return $this
     */
    public function setPackageName($packageName)
    {
        $this->container['packageName'] = $packageName;

        return $this;
    }

    /**
     * Gets packageVersion
     *
     * @return string
     */
    public function getPackageVersion()
    {
        return $this->container['packageVersion'];
    }

    /**
     * Sets packageVersion
     *
     * @param string $packageVersion Version of the package.
     *
     * @return $this
     */
    public function setPackageVersion($packageVersion)
    {
        $this->container['packageVersion'] = $packageVersion;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId TFS project id.
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets protocolType
     *
     * @return string
     */
    public function getProtocolType()
    {
        return $this->container['protocolType'];
    }

    /**
     * Sets protocolType
     *
     * @param string $protocolType Type of the package.
     *
     * @return $this
     */
    public function setProtocolType($protocolType)
    {
        $this->container['protocolType'] = $protocolType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


