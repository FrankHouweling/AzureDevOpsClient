<?php
/**
 * Package
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * Package Class Doc Comment
 *
 * @category Class
 * @description A package, which is a container for one or more package versions.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Package implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks',
        'id' => 'string',
        'isCached' => 'bool',
        'name' => 'string',
        'normalizedName' => 'string',
        'protocolType' => 'string',
        'starCount' => 'int',
        'url' => 'string',
        'versions' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'id' => 'uuid',
        'isCached' => null,
        'name' => null,
        'normalizedName' => null,
        'protocolType' => null,
        'starCount' => 'int32',
        'url' => null,
        'versions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'id' => 'id',
        'isCached' => 'isCached',
        'name' => 'name',
        'normalizedName' => 'normalizedName',
        'protocolType' => 'protocolType',
        'starCount' => 'starCount',
        'url' => 'url',
        'versions' => 'versions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'isCached' => 'setIsCached',
        'name' => 'setName',
        'normalizedName' => 'setNormalizedName',
        'protocolType' => 'setProtocolType',
        'starCount' => 'setStarCount',
        'url' => 'setUrl',
        'versions' => 'setVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'isCached' => 'getIsCached',
        'name' => 'getName',
        'normalizedName' => 'getNormalizedName',
        'protocolType' => 'getProtocolType',
        'starCount' => 'getStarCount',
        'url' => 'getUrl',
        'versions' => 'getVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isCached'] = isset($data['isCached']) ? $data['isCached'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['normalizedName'] = isset($data['normalizedName']) ? $data['normalizedName'] : null;
        $this->container['protocolType'] = isset($data['protocolType']) ? $data['protocolType'] : null;
        $this->container['starCount'] = isset($data['starCount']) ? $data['starCount'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks $links Related REST links.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id of the package.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isCached
     *
     * @return bool
     */
    public function getIsCached()
    {
        return $this->container['isCached'];
    }

    /**
     * Sets isCached
     *
     * @param bool $isCached Used for legacy scenarios and may be removed in future versions.
     *
     * @return $this
     */
    public function setIsCached($isCached)
    {
        $this->container['isCached'] = $isCached;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The display name of the package.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets normalizedName
     *
     * @return string
     */
    public function getNormalizedName()
    {
        return $this->container['normalizedName'];
    }

    /**
     * Sets normalizedName
     *
     * @param string $normalizedName The normalized name representing the identity of this package within its package type.
     *
     * @return $this
     */
    public function setNormalizedName($normalizedName)
    {
        $this->container['normalizedName'] = $normalizedName;

        return $this;
    }

    /**
     * Gets protocolType
     *
     * @return string
     */
    public function getProtocolType()
    {
        return $this->container['protocolType'];
    }

    /**
     * Sets protocolType
     *
     * @param string $protocolType Type of the package.
     *
     * @return $this
     */
    public function setProtocolType($protocolType)
    {
        $this->container['protocolType'] = $protocolType;

        return $this;
    }

    /**
     * Gets starCount
     *
     * @return int
     */
    public function getStarCount()
    {
        return $this->container['starCount'];
    }

    /**
     * Sets starCount
     *
     * @param int $starCount [Obsolete] - this field is unused and will be removed in a future release.
     *
     * @return $this
     */
    public function setStarCount($starCount)
    {
        $this->container['starCount'] = $starCount;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Url for this package.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[] $versions All versions for this package within its feed.
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


