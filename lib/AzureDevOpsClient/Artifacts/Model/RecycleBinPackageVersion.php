<?php
/**
 * RecycleBinPackageVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * RecycleBinPackageVersion Class Doc Comment
 *
 * @category Class
 * @description A single package version within the recycle bin.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecycleBinPackageVersion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecycleBinPackageVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks',
        'author' => 'string',
        'deletedDate' => '\DateTime',
        'dependencies' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageDependency[]',
        'description' => 'string',
        'files' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageFile[]',
        'otherVersions' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[]',
        'protocolMetadata' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProtocolMetadata',
        'sourceChain' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]',
        'summary' => 'string',
        'tags' => 'string[]',
        'url' => 'string',
        'directUpstreamSourceId' => 'string',
        'id' => 'string',
        'isCachedVersion' => 'bool',
        'isDeleted' => 'bool',
        'isLatest' => 'bool',
        'isListed' => 'bool',
        'normalizedVersion' => 'string',
        'packageDescription' => 'string',
        'publishDate' => '\DateTime',
        'storageId' => 'string',
        'version' => 'string',
        'views' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[]',
        'scheduledPermanentDeleteDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'author' => null,
        'deletedDate' => 'date-time',
        'dependencies' => null,
        'description' => null,
        'files' => null,
        'otherVersions' => null,
        'protocolMetadata' => null,
        'sourceChain' => null,
        'summary' => null,
        'tags' => null,
        'url' => null,
        'directUpstreamSourceId' => 'uuid',
        'id' => 'uuid',
        'isCachedVersion' => null,
        'isDeleted' => null,
        'isLatest' => null,
        'isListed' => null,
        'normalizedVersion' => null,
        'packageDescription' => null,
        'publishDate' => 'date-time',
        'storageId' => null,
        'version' => null,
        'views' => null,
        'scheduledPermanentDeleteDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'author' => 'author',
        'deletedDate' => 'deletedDate',
        'dependencies' => 'dependencies',
        'description' => 'description',
        'files' => 'files',
        'otherVersions' => 'otherVersions',
        'protocolMetadata' => 'protocolMetadata',
        'sourceChain' => 'sourceChain',
        'summary' => 'summary',
        'tags' => 'tags',
        'url' => 'url',
        'directUpstreamSourceId' => 'directUpstreamSourceId',
        'id' => 'id',
        'isCachedVersion' => 'isCachedVersion',
        'isDeleted' => 'isDeleted',
        'isLatest' => 'isLatest',
        'isListed' => 'isListed',
        'normalizedVersion' => 'normalizedVersion',
        'packageDescription' => 'packageDescription',
        'publishDate' => 'publishDate',
        'storageId' => 'storageId',
        'version' => 'version',
        'views' => 'views',
        'scheduledPermanentDeleteDate' => 'scheduledPermanentDeleteDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'author' => 'setAuthor',
        'deletedDate' => 'setDeletedDate',
        'dependencies' => 'setDependencies',
        'description' => 'setDescription',
        'files' => 'setFiles',
        'otherVersions' => 'setOtherVersions',
        'protocolMetadata' => 'setProtocolMetadata',
        'sourceChain' => 'setSourceChain',
        'summary' => 'setSummary',
        'tags' => 'setTags',
        'url' => 'setUrl',
        'directUpstreamSourceId' => 'setDirectUpstreamSourceId',
        'id' => 'setId',
        'isCachedVersion' => 'setIsCachedVersion',
        'isDeleted' => 'setIsDeleted',
        'isLatest' => 'setIsLatest',
        'isListed' => 'setIsListed',
        'normalizedVersion' => 'setNormalizedVersion',
        'packageDescription' => 'setPackageDescription',
        'publishDate' => 'setPublishDate',
        'storageId' => 'setStorageId',
        'version' => 'setVersion',
        'views' => 'setViews',
        'scheduledPermanentDeleteDate' => 'setScheduledPermanentDeleteDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'author' => 'getAuthor',
        'deletedDate' => 'getDeletedDate',
        'dependencies' => 'getDependencies',
        'description' => 'getDescription',
        'files' => 'getFiles',
        'otherVersions' => 'getOtherVersions',
        'protocolMetadata' => 'getProtocolMetadata',
        'sourceChain' => 'getSourceChain',
        'summary' => 'getSummary',
        'tags' => 'getTags',
        'url' => 'getUrl',
        'directUpstreamSourceId' => 'getDirectUpstreamSourceId',
        'id' => 'getId',
        'isCachedVersion' => 'getIsCachedVersion',
        'isDeleted' => 'getIsDeleted',
        'isLatest' => 'getIsLatest',
        'isListed' => 'getIsListed',
        'normalizedVersion' => 'getNormalizedVersion',
        'packageDescription' => 'getPackageDescription',
        'publishDate' => 'getPublishDate',
        'storageId' => 'getStorageId',
        'version' => 'getVersion',
        'views' => 'getViews',
        'scheduledPermanentDeleteDate' => 'getScheduledPermanentDeleteDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['dependencies'] = isset($data['dependencies']) ? $data['dependencies'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['otherVersions'] = isset($data['otherVersions']) ? $data['otherVersions'] : null;
        $this->container['protocolMetadata'] = isset($data['protocolMetadata']) ? $data['protocolMetadata'] : null;
        $this->container['sourceChain'] = isset($data['sourceChain']) ? $data['sourceChain'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['directUpstreamSourceId'] = isset($data['directUpstreamSourceId']) ? $data['directUpstreamSourceId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isCachedVersion'] = isset($data['isCachedVersion']) ? $data['isCachedVersion'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['isLatest'] = isset($data['isLatest']) ? $data['isLatest'] : null;
        $this->container['isListed'] = isset($data['isListed']) ? $data['isListed'] : null;
        $this->container['normalizedVersion'] = isset($data['normalizedVersion']) ? $data['normalizedVersion'] : null;
        $this->container['packageDescription'] = isset($data['packageDescription']) ? $data['packageDescription'] : null;
        $this->container['publishDate'] = isset($data['publishDate']) ? $data['publishDate'] : null;
        $this->container['storageId'] = isset($data['storageId']) ? $data['storageId'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
        $this->container['scheduledPermanentDeleteDate'] = isset($data['scheduledPermanentDeleteDate']) ? $data['scheduledPermanentDeleteDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks $links Related links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author Package version author.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate UTC date that this package version was deleted.
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets dependencies
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageDependency[]
     */
    public function getDependencies()
    {
        return $this->container['dependencies'];
    }

    /**
     * Sets dependencies
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageDependency[] $dependencies List of dependencies for this package version.
     *
     * @return $this
     */
    public function setDependencies($dependencies)
    {
        $this->container['dependencies'] = $dependencies;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Package version description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageFile[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\PackageFile[] $files Files associated with this package version, only relevant for multi-file package types.
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets otherVersions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[]
     */
    public function getOtherVersions()
    {
        return $this->container['otherVersions'];
    }

    /**
     * Sets otherVersions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\MinimalPackageVersion[] $otherVersions Other versions of this package.
     *
     * @return $this
     */
    public function setOtherVersions($otherVersions)
    {
        $this->container['otherVersions'] = $otherVersions;

        return $this;
    }

    /**
     * Gets protocolMetadata
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProtocolMetadata
     */
    public function getProtocolMetadata()
    {
        return $this->container['protocolMetadata'];
    }

    /**
     * Sets protocolMetadata
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProtocolMetadata $protocolMetadata Extended data specific to a package type.
     *
     * @return $this
     */
    public function setProtocolMetadata($protocolMetadata)
    {
        $this->container['protocolMetadata'] = $protocolMetadata;

        return $this;
    }

    /**
     * Gets sourceChain
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]
     */
    public function getSourceChain()
    {
        return $this->container['sourceChain'];
    }

    /**
     * Sets sourceChain
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[] $sourceChain List of upstream sources through which a package version moved to land in this feed.
     *
     * @return $this
     */
    public function setSourceChain($sourceChain)
    {
        $this->container['sourceChain'] = $sourceChain;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary Package version summary.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Package version tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Package version url.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets directUpstreamSourceId
     *
     * @return string
     */
    public function getDirectUpstreamSourceId()
    {
        return $this->container['directUpstreamSourceId'];
    }

    /**
     * Sets directUpstreamSourceId
     *
     * @param string $directUpstreamSourceId Upstream source this package was ingested from.
     *
     * @return $this
     */
    public function setDirectUpstreamSourceId($directUpstreamSourceId)
    {
        $this->container['directUpstreamSourceId'] = $directUpstreamSourceId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id for the package.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isCachedVersion
     *
     * @return bool
     */
    public function getIsCachedVersion()
    {
        return $this->container['isCachedVersion'];
    }

    /**
     * Sets isCachedVersion
     *
     * @param bool $isCachedVersion [Obsolete] Used for legacy scenarios and may be removed in future versions.
     *
     * @return $this
     */
    public function setIsCachedVersion($isCachedVersion)
    {
        $this->container['isCachedVersion'] = $isCachedVersion;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted True if this package has been deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets isLatest
     *
     * @return bool
     */
    public function getIsLatest()
    {
        return $this->container['isLatest'];
    }

    /**
     * Sets isLatest
     *
     * @param bool $isLatest True if this is the latest version of the package by package type sort order.
     *
     * @return $this
     */
    public function setIsLatest($isLatest)
    {
        $this->container['isLatest'] = $isLatest;

        return $this;
    }

    /**
     * Gets isListed
     *
     * @return bool
     */
    public function getIsListed()
    {
        return $this->container['isListed'];
    }

    /**
     * Sets isListed
     *
     * @param bool $isListed (NuGet Only) True if this package is listed.
     *
     * @return $this
     */
    public function setIsListed($isListed)
    {
        $this->container['isListed'] = $isListed;

        return $this;
    }

    /**
     * Gets normalizedVersion
     *
     * @return string
     */
    public function getNormalizedVersion()
    {
        return $this->container['normalizedVersion'];
    }

    /**
     * Sets normalizedVersion
     *
     * @param string $normalizedVersion Normalized version using normalization rules specific to a package type.
     *
     * @return $this
     */
    public function setNormalizedVersion($normalizedVersion)
    {
        $this->container['normalizedVersion'] = $normalizedVersion;

        return $this;
    }

    /**
     * Gets packageDescription
     *
     * @return string
     */
    public function getPackageDescription()
    {
        return $this->container['packageDescription'];
    }

    /**
     * Sets packageDescription
     *
     * @param string $packageDescription Package description.
     *
     * @return $this
     */
    public function setPackageDescription($packageDescription)
    {
        $this->container['packageDescription'] = $packageDescription;

        return $this;
    }

    /**
     * Gets publishDate
     *
     * @return \DateTime
     */
    public function getPublishDate()
    {
        return $this->container['publishDate'];
    }

    /**
     * Sets publishDate
     *
     * @param \DateTime $publishDate UTC Date the package was published to the service.
     *
     * @return $this
     */
    public function setPublishDate($publishDate)
    {
        $this->container['publishDate'] = $publishDate;

        return $this;
    }

    /**
     * Gets storageId
     *
     * @return string
     */
    public function getStorageId()
    {
        return $this->container['storageId'];
    }

    /**
     * Sets storageId
     *
     * @param string $storageId Internal storage id.
     *
     * @return $this
     */
    public function setStorageId($storageId)
    {
        $this->container['storageId'] = $storageId;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Display version.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[]
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView[] $views List of views containing this package version.
     *
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets scheduledPermanentDeleteDate
     *
     * @return \DateTime
     */
    public function getScheduledPermanentDeleteDate()
    {
        return $this->container['scheduledPermanentDeleteDate'];
    }

    /**
     * Sets scheduledPermanentDeleteDate
     *
     * @param \DateTime $scheduledPermanentDeleteDate UTC date on which the package will automatically be removed from the recycle bin and permanently deleted.
     *
     * @return $this
     */
    public function setScheduledPermanentDeleteDate($scheduledPermanentDeleteDate)
    {
        $this->container['scheduledPermanentDeleteDate'] = $scheduledPermanentDeleteDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


