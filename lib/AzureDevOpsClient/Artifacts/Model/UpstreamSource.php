<?php
/**
 * UpstreamSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * UpstreamSource Class Doc Comment
 *
 * @category Class
 * @description Upstream source definition, including its Identity, package type, and other associated information.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpstreamSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpstreamSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deletedDate' => '\DateTime',
        'displayLocation' => 'string',
        'id' => 'string',
        'internalUpstreamCollectionId' => 'string',
        'internalUpstreamFeedId' => 'string',
        'internalUpstreamProjectId' => 'string',
        'internalUpstreamViewId' => 'string',
        'location' => 'string',
        'name' => 'string',
        'protocol' => 'string',
        'status' => 'string',
        'statusDetails' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamStatusDetail[]',
        'upstreamSourceType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deletedDate' => 'date-time',
        'displayLocation' => null,
        'id' => 'uuid',
        'internalUpstreamCollectionId' => 'uuid',
        'internalUpstreamFeedId' => 'uuid',
        'internalUpstreamProjectId' => 'uuid',
        'internalUpstreamViewId' => 'uuid',
        'location' => null,
        'name' => null,
        'protocol' => null,
        'status' => null,
        'statusDetails' => null,
        'upstreamSourceType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deletedDate' => 'deletedDate',
        'displayLocation' => 'displayLocation',
        'id' => 'id',
        'internalUpstreamCollectionId' => 'internalUpstreamCollectionId',
        'internalUpstreamFeedId' => 'internalUpstreamFeedId',
        'internalUpstreamProjectId' => 'internalUpstreamProjectId',
        'internalUpstreamViewId' => 'internalUpstreamViewId',
        'location' => 'location',
        'name' => 'name',
        'protocol' => 'protocol',
        'status' => 'status',
        'statusDetails' => 'statusDetails',
        'upstreamSourceType' => 'upstreamSourceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deletedDate' => 'setDeletedDate',
        'displayLocation' => 'setDisplayLocation',
        'id' => 'setId',
        'internalUpstreamCollectionId' => 'setInternalUpstreamCollectionId',
        'internalUpstreamFeedId' => 'setInternalUpstreamFeedId',
        'internalUpstreamProjectId' => 'setInternalUpstreamProjectId',
        'internalUpstreamViewId' => 'setInternalUpstreamViewId',
        'location' => 'setLocation',
        'name' => 'setName',
        'protocol' => 'setProtocol',
        'status' => 'setStatus',
        'statusDetails' => 'setStatusDetails',
        'upstreamSourceType' => 'setUpstreamSourceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deletedDate' => 'getDeletedDate',
        'displayLocation' => 'getDisplayLocation',
        'id' => 'getId',
        'internalUpstreamCollectionId' => 'getInternalUpstreamCollectionId',
        'internalUpstreamFeedId' => 'getInternalUpstreamFeedId',
        'internalUpstreamProjectId' => 'getInternalUpstreamProjectId',
        'internalUpstreamViewId' => 'getInternalUpstreamViewId',
        'location' => 'getLocation',
        'name' => 'getName',
        'protocol' => 'getProtocol',
        'status' => 'getStatus',
        'statusDetails' => 'getStatusDetails',
        'upstreamSourceType' => 'getUpstreamSourceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OK = 'ok';
    const STATUS_DISABLED = 'disabled';
    const UPSTREAM_SOURCE_TYPE__PUBLIC = 'public';
    const UPSTREAM_SOURCE_TYPE_INTERNAL = 'internal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OK,
            self::STATUS_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpstreamSourceTypeAllowableValues()
    {
        return [
            self::UPSTREAM_SOURCE_TYPE__PUBLIC,
            self::UPSTREAM_SOURCE_TYPE_INTERNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['displayLocation'] = isset($data['displayLocation']) ? $data['displayLocation'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internalUpstreamCollectionId'] = isset($data['internalUpstreamCollectionId']) ? $data['internalUpstreamCollectionId'] : null;
        $this->container['internalUpstreamFeedId'] = isset($data['internalUpstreamFeedId']) ? $data['internalUpstreamFeedId'] : null;
        $this->container['internalUpstreamProjectId'] = isset($data['internalUpstreamProjectId']) ? $data['internalUpstreamProjectId'] : null;
        $this->container['internalUpstreamViewId'] = isset($data['internalUpstreamViewId']) ? $data['internalUpstreamViewId'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusDetails'] = isset($data['statusDetails']) ? $data['statusDetails'] : null;
        $this->container['upstreamSourceType'] = isset($data['upstreamSourceType']) ? $data['upstreamSourceType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpstreamSourceTypeAllowableValues();
        if (!is_null($this->container['upstreamSourceType']) && !in_array($this->container['upstreamSourceType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'upstreamSourceType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate UTC date that this upstream was deleted.
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets displayLocation
     *
     * @return string
     */
    public function getDisplayLocation()
    {
        return $this->container['displayLocation'];
    }

    /**
     * Sets displayLocation
     *
     * @param string $displayLocation Locator for connecting to the upstream source in a user friendly format, that may potentially change over time
     *
     * @return $this
     */
    public function setDisplayLocation($displayLocation)
    {
        $this->container['displayLocation'] = $displayLocation;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identity of the upstream source.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internalUpstreamCollectionId
     *
     * @return string
     */
    public function getInternalUpstreamCollectionId()
    {
        return $this->container['internalUpstreamCollectionId'];
    }

    /**
     * Sets internalUpstreamCollectionId
     *
     * @param string $internalUpstreamCollectionId For an internal upstream type, track the Azure DevOps organization that contains it.
     *
     * @return $this
     */
    public function setInternalUpstreamCollectionId($internalUpstreamCollectionId)
    {
        $this->container['internalUpstreamCollectionId'] = $internalUpstreamCollectionId;

        return $this;
    }

    /**
     * Gets internalUpstreamFeedId
     *
     * @return string
     */
    public function getInternalUpstreamFeedId()
    {
        return $this->container['internalUpstreamFeedId'];
    }

    /**
     * Sets internalUpstreamFeedId
     *
     * @param string $internalUpstreamFeedId For an internal upstream type, track the feed id being referenced.
     *
     * @return $this
     */
    public function setInternalUpstreamFeedId($internalUpstreamFeedId)
    {
        $this->container['internalUpstreamFeedId'] = $internalUpstreamFeedId;

        return $this;
    }

    /**
     * Gets internalUpstreamProjectId
     *
     * @return string
     */
    public function getInternalUpstreamProjectId()
    {
        return $this->container['internalUpstreamProjectId'];
    }

    /**
     * Sets internalUpstreamProjectId
     *
     * @param string $internalUpstreamProjectId For an internal upstream type, track the project of the feed being referenced.
     *
     * @return $this
     */
    public function setInternalUpstreamProjectId($internalUpstreamProjectId)
    {
        $this->container['internalUpstreamProjectId'] = $internalUpstreamProjectId;

        return $this;
    }

    /**
     * Gets internalUpstreamViewId
     *
     * @return string
     */
    public function getInternalUpstreamViewId()
    {
        return $this->container['internalUpstreamViewId'];
    }

    /**
     * Sets internalUpstreamViewId
     *
     * @param string $internalUpstreamViewId For an internal upstream type, track the view of the feed being referenced.
     *
     * @return $this
     */
    public function setInternalUpstreamViewId($internalUpstreamViewId)
    {
        $this->container['internalUpstreamViewId'] = $internalUpstreamViewId;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Consistent locator for connecting to the upstream source.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol Package type associated with the upstream source.
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Specifies the status of the upstream.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusDetails
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamStatusDetail[]
     */
    public function getStatusDetails()
    {
        return $this->container['statusDetails'];
    }

    /**
     * Sets statusDetails
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamStatusDetail[] $statusDetails Provides a human-readable reason for the status of the upstream.
     *
     * @return $this
     */
    public function setStatusDetails($statusDetails)
    {
        $this->container['statusDetails'] = $statusDetails;

        return $this;
    }

    /**
     * Gets upstreamSourceType
     *
     * @return string
     */
    public function getUpstreamSourceType()
    {
        return $this->container['upstreamSourceType'];
    }

    /**
     * Sets upstreamSourceType
     *
     * @param string $upstreamSourceType Source type, such as Public or Internal.
     *
     * @return $this
     */
    public function setUpstreamSourceType($upstreamSourceType)
    {
        $allowedValues = $this->getUpstreamSourceTypeAllowableValues();
        if (!is_null($upstreamSourceType) && !in_array($upstreamSourceType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'upstreamSourceType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upstreamSourceType'] = $upstreamSourceType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


