<?php
/**
 * FeedUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * FeedUpdate Class Doc Comment
 *
 * @category Class
 * @description Update a feed definition with these new values.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeedUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeedUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowUpstreamNameConflict' => 'bool',
        'badgesEnabled' => 'bool',
        'defaultViewId' => 'string',
        'description' => 'string',
        'hideDeletedPackageVersions' => 'bool',
        'id' => 'string',
        'name' => 'string',
        'upstreamEnabled' => 'bool',
        'upstreamSources' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allowUpstreamNameConflict' => null,
        'badgesEnabled' => null,
        'defaultViewId' => 'uuid',
        'description' => null,
        'hideDeletedPackageVersions' => null,
        'id' => 'uuid',
        'name' => null,
        'upstreamEnabled' => null,
        'upstreamSources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowUpstreamNameConflict' => 'allowUpstreamNameConflict',
        'badgesEnabled' => 'badgesEnabled',
        'defaultViewId' => 'defaultViewId',
        'description' => 'description',
        'hideDeletedPackageVersions' => 'hideDeletedPackageVersions',
        'id' => 'id',
        'name' => 'name',
        'upstreamEnabled' => 'upstreamEnabled',
        'upstreamSources' => 'upstreamSources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowUpstreamNameConflict' => 'setAllowUpstreamNameConflict',
        'badgesEnabled' => 'setBadgesEnabled',
        'defaultViewId' => 'setDefaultViewId',
        'description' => 'setDescription',
        'hideDeletedPackageVersions' => 'setHideDeletedPackageVersions',
        'id' => 'setId',
        'name' => 'setName',
        'upstreamEnabled' => 'setUpstreamEnabled',
        'upstreamSources' => 'setUpstreamSources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowUpstreamNameConflict' => 'getAllowUpstreamNameConflict',
        'badgesEnabled' => 'getBadgesEnabled',
        'defaultViewId' => 'getDefaultViewId',
        'description' => 'getDescription',
        'hideDeletedPackageVersions' => 'getHideDeletedPackageVersions',
        'id' => 'getId',
        'name' => 'getName',
        'upstreamEnabled' => 'getUpstreamEnabled',
        'upstreamSources' => 'getUpstreamSources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowUpstreamNameConflict'] = isset($data['allowUpstreamNameConflict']) ? $data['allowUpstreamNameConflict'] : null;
        $this->container['badgesEnabled'] = isset($data['badgesEnabled']) ? $data['badgesEnabled'] : null;
        $this->container['defaultViewId'] = isset($data['defaultViewId']) ? $data['defaultViewId'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hideDeletedPackageVersions'] = isset($data['hideDeletedPackageVersions']) ? $data['hideDeletedPackageVersions'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['upstreamEnabled'] = isset($data['upstreamEnabled']) ? $data['upstreamEnabled'] : null;
        $this->container['upstreamSources'] = isset($data['upstreamSources']) ? $data['upstreamSources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowUpstreamNameConflict
     *
     * @return bool
     */
    public function getAllowUpstreamNameConflict()
    {
        return $this->container['allowUpstreamNameConflict'];
    }

    /**
     * Sets allowUpstreamNameConflict
     *
     * @param bool $allowUpstreamNameConflict If set, the feed will allow upload of packages that exist on the upstream
     *
     * @return $this
     */
    public function setAllowUpstreamNameConflict($allowUpstreamNameConflict)
    {
        $this->container['allowUpstreamNameConflict'] = $allowUpstreamNameConflict;

        return $this;
    }

    /**
     * Gets badgesEnabled
     *
     * @return bool
     */
    public function getBadgesEnabled()
    {
        return $this->container['badgesEnabled'];
    }

    /**
     * Sets badgesEnabled
     *
     * @param bool $badgesEnabled If set, this feed supports generation of package badges.
     *
     * @return $this
     */
    public function setBadgesEnabled($badgesEnabled)
    {
        $this->container['badgesEnabled'] = $badgesEnabled;

        return $this;
    }

    /**
     * Gets defaultViewId
     *
     * @return string
     */
    public function getDefaultViewId()
    {
        return $this->container['defaultViewId'];
    }

    /**
     * Sets defaultViewId
     *
     * @param string $defaultViewId The view that the feed administrator has indicated is the default experience for readers.
     *
     * @return $this
     */
    public function setDefaultViewId($defaultViewId)
    {
        $this->container['defaultViewId'] = $defaultViewId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description for the feed.  Descriptions must not exceed 255 characters.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hideDeletedPackageVersions
     *
     * @return bool
     */
    public function getHideDeletedPackageVersions()
    {
        return $this->container['hideDeletedPackageVersions'];
    }

    /**
     * Sets hideDeletedPackageVersions
     *
     * @param bool $hideDeletedPackageVersions If set, feed will hide all deleted/unpublished versions
     *
     * @return $this
     */
    public function setHideDeletedPackageVersions($hideDeletedPackageVersions)
    {
        $this->container['hideDeletedPackageVersions'] = $hideDeletedPackageVersions;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A GUID that uniquely identifies this feed.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A name for the feed. feed names must follow these rules: <list type=\"bullet\"><item><description> Must not exceed 64 characters </description></item><item><description> Must not contain whitespaces </description></item><item><description> Must not start with an underscore or a period </description></item><item><description> Must not end with a period </description></item><item><description> Must not contain any of the following illegal characters: <![CDATA[ @, ~, ;, {, }, \\, +, =, <, >, |, /, \\\\, ?, :, &, $, *, \\\", #, [, ] ]]></description></item></list>
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets upstreamEnabled
     *
     * @return bool
     */
    public function getUpstreamEnabled()
    {
        return $this->container['upstreamEnabled'];
    }

    /**
     * Sets upstreamEnabled
     *
     * @param bool $upstreamEnabled OBSOLETE: If set, the feed can proxy packages from an upstream feed
     *
     * @return $this
     */
    public function setUpstreamEnabled($upstreamEnabled)
    {
        $this->container['upstreamEnabled'] = $upstreamEnabled;

        return $this;
    }

    /**
     * Gets upstreamSources
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]
     */
    public function getUpstreamSources()
    {
        return $this->container['upstreamSources'];
    }

    /**
     * Sets upstreamSources
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[] $upstreamSources A list of sources that this feed will fetch packages from.  An empty list indicates that this feed will not search any additional sources for packages.
     *
     * @return $this
     */
    public function setUpstreamSources($upstreamSources)
    {
        $this->container['upstreamSources'] = $upstreamSources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


