<?php
/**
 * Feed
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Artifacts\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Artifacts\ObjectSerializer;

/**
 * Feed Class Doc Comment
 *
 * @category Class
 * @description A container for artifacts.
 * @package  FrankHouweling\AzureDevOpsClient\Artifacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Feed implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Feed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capabilities' => 'string',
        'fullyQualifiedId' => 'string',
        'fullyQualifiedName' => 'string',
        'id' => 'string',
        'isReadOnly' => 'bool',
        'name' => 'string',
        'project' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProjectReference',
        'upstreamEnabled' => 'bool',
        'upstreamSources' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]',
        'view' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView',
        'viewId' => 'string',
        'viewName' => 'string',
        'links' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks',
        'badgesEnabled' => 'bool',
        'defaultViewId' => 'string',
        'deletedDate' => '\DateTime',
        'description' => 'string',
        'hideDeletedPackageVersions' => 'bool',
        'permanentDeletedDate' => '\DateTime',
        'permissions' => '\FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedPermission[]',
        'scheduledPermanentDeleteDate' => '\DateTime',
        'upstreamEnabledChangedDate' => '\DateTime',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capabilities' => null,
        'fullyQualifiedId' => null,
        'fullyQualifiedName' => null,
        'id' => 'uuid',
        'isReadOnly' => null,
        'name' => null,
        'project' => null,
        'upstreamEnabled' => null,
        'upstreamSources' => null,
        'view' => null,
        'viewId' => 'uuid',
        'viewName' => null,
        'links' => null,
        'badgesEnabled' => null,
        'defaultViewId' => 'uuid',
        'deletedDate' => 'date-time',
        'description' => null,
        'hideDeletedPackageVersions' => null,
        'permanentDeletedDate' => 'date-time',
        'permissions' => null,
        'scheduledPermanentDeleteDate' => 'date-time',
        'upstreamEnabledChangedDate' => 'date-time',
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capabilities' => 'capabilities',
        'fullyQualifiedId' => 'fullyQualifiedId',
        'fullyQualifiedName' => 'fullyQualifiedName',
        'id' => 'id',
        'isReadOnly' => 'isReadOnly',
        'name' => 'name',
        'project' => 'project',
        'upstreamEnabled' => 'upstreamEnabled',
        'upstreamSources' => 'upstreamSources',
        'view' => 'view',
        'viewId' => 'viewId',
        'viewName' => 'viewName',
        'links' => '_links',
        'badgesEnabled' => 'badgesEnabled',
        'defaultViewId' => 'defaultViewId',
        'deletedDate' => 'deletedDate',
        'description' => 'description',
        'hideDeletedPackageVersions' => 'hideDeletedPackageVersions',
        'permanentDeletedDate' => 'permanentDeletedDate',
        'permissions' => 'permissions',
        'scheduledPermanentDeleteDate' => 'scheduledPermanentDeleteDate',
        'upstreamEnabledChangedDate' => 'upstreamEnabledChangedDate',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capabilities' => 'setCapabilities',
        'fullyQualifiedId' => 'setFullyQualifiedId',
        'fullyQualifiedName' => 'setFullyQualifiedName',
        'id' => 'setId',
        'isReadOnly' => 'setIsReadOnly',
        'name' => 'setName',
        'project' => 'setProject',
        'upstreamEnabled' => 'setUpstreamEnabled',
        'upstreamSources' => 'setUpstreamSources',
        'view' => 'setView',
        'viewId' => 'setViewId',
        'viewName' => 'setViewName',
        'links' => 'setLinks',
        'badgesEnabled' => 'setBadgesEnabled',
        'defaultViewId' => 'setDefaultViewId',
        'deletedDate' => 'setDeletedDate',
        'description' => 'setDescription',
        'hideDeletedPackageVersions' => 'setHideDeletedPackageVersions',
        'permanentDeletedDate' => 'setPermanentDeletedDate',
        'permissions' => 'setPermissions',
        'scheduledPermanentDeleteDate' => 'setScheduledPermanentDeleteDate',
        'upstreamEnabledChangedDate' => 'setUpstreamEnabledChangedDate',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capabilities' => 'getCapabilities',
        'fullyQualifiedId' => 'getFullyQualifiedId',
        'fullyQualifiedName' => 'getFullyQualifiedName',
        'id' => 'getId',
        'isReadOnly' => 'getIsReadOnly',
        'name' => 'getName',
        'project' => 'getProject',
        'upstreamEnabled' => 'getUpstreamEnabled',
        'upstreamSources' => 'getUpstreamSources',
        'view' => 'getView',
        'viewId' => 'getViewId',
        'viewName' => 'getViewName',
        'links' => 'getLinks',
        'badgesEnabled' => 'getBadgesEnabled',
        'defaultViewId' => 'getDefaultViewId',
        'deletedDate' => 'getDeletedDate',
        'description' => 'getDescription',
        'hideDeletedPackageVersions' => 'getHideDeletedPackageVersions',
        'permanentDeletedDate' => 'getPermanentDeletedDate',
        'permissions' => 'getPermissions',
        'scheduledPermanentDeleteDate' => 'getScheduledPermanentDeleteDate',
        'upstreamEnabledChangedDate' => 'getUpstreamEnabledChangedDate',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CAPABILITIES_NONE = 'none';
    const CAPABILITIES_UPSTREAM_V2 = 'upstreamV2';
    const CAPABILITIES_UNDER_MAINTENANCE = 'underMaintenance';
    const CAPABILITIES_DEFAULT_CAPABILITIES = 'defaultCapabilities';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilitiesAllowableValues()
    {
        return [
            self::CAPABILITIES_NONE,
            self::CAPABILITIES_UPSTREAM_V2,
            self::CAPABILITIES_UNDER_MAINTENANCE,
            self::CAPABILITIES_DEFAULT_CAPABILITIES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['fullyQualifiedId'] = isset($data['fullyQualifiedId']) ? $data['fullyQualifiedId'] : null;
        $this->container['fullyQualifiedName'] = isset($data['fullyQualifiedName']) ? $data['fullyQualifiedName'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isReadOnly'] = isset($data['isReadOnly']) ? $data['isReadOnly'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['upstreamEnabled'] = isset($data['upstreamEnabled']) ? $data['upstreamEnabled'] : null;
        $this->container['upstreamSources'] = isset($data['upstreamSources']) ? $data['upstreamSources'] : null;
        $this->container['view'] = isset($data['view']) ? $data['view'] : null;
        $this->container['viewId'] = isset($data['viewId']) ? $data['viewId'] : null;
        $this->container['viewName'] = isset($data['viewName']) ? $data['viewName'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['badgesEnabled'] = isset($data['badgesEnabled']) ? $data['badgesEnabled'] : null;
        $this->container['defaultViewId'] = isset($data['defaultViewId']) ? $data['defaultViewId'] : null;
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hideDeletedPackageVersions'] = isset($data['hideDeletedPackageVersions']) ? $data['hideDeletedPackageVersions'] : null;
        $this->container['permanentDeletedDate'] = isset($data['permanentDeletedDate']) ? $data['permanentDeletedDate'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['scheduledPermanentDeleteDate'] = isset($data['scheduledPermanentDeleteDate']) ? $data['scheduledPermanentDeleteDate'] : null;
        $this->container['upstreamEnabledChangedDate'] = isset($data['upstreamEnabledChangedDate']) ? $data['upstreamEnabledChangedDate'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCapabilitiesAllowableValues();
        if (!is_null($this->container['capabilities']) && !in_array($this->container['capabilities'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'capabilities', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capabilities
     *
     * @return string
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string $capabilities Supported capabilities of a feed.
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $allowedValues = $this->getCapabilitiesAllowableValues();
        if (!is_null($capabilities) && !in_array($capabilities, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capabilities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets fullyQualifiedId
     *
     * @return string
     */
    public function getFullyQualifiedId()
    {
        return $this->container['fullyQualifiedId'];
    }

    /**
     * Sets fullyQualifiedId
     *
     * @param string $fullyQualifiedId This will either be the feed GUID or the feed GUID and view GUID depending on how the feed was accessed.
     *
     * @return $this
     */
    public function setFullyQualifiedId($fullyQualifiedId)
    {
        $this->container['fullyQualifiedId'] = $fullyQualifiedId;

        return $this;
    }

    /**
     * Gets fullyQualifiedName
     *
     * @return string
     */
    public function getFullyQualifiedName()
    {
        return $this->container['fullyQualifiedName'];
    }

    /**
     * Sets fullyQualifiedName
     *
     * @param string $fullyQualifiedName Full name of the view, in feed@view format.
     *
     * @return $this
     */
    public function setFullyQualifiedName($fullyQualifiedName)
    {
        $this->container['fullyQualifiedName'] = $fullyQualifiedName;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A GUID that uniquely identifies this feed.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isReadOnly
     *
     * @return bool
     */
    public function getIsReadOnly()
    {
        return $this->container['isReadOnly'];
    }

    /**
     * Sets isReadOnly
     *
     * @param bool $isReadOnly If set, all packages in the feed are immutable.  It is important to note that feed views are immutable; therefore, this flag will always be set for views.
     *
     * @return $this
     */
    public function setIsReadOnly($isReadOnly)
    {
        $this->container['isReadOnly'] = $isReadOnly;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A name for the feed. feed names must follow these rules: <list type=\"bullet\"><item><description> Must not exceed 64 characters </description></item><item><description> Must not contain whitespaces </description></item><item><description> Must not start with an underscore or a period </description></item><item><description> Must not end with a period </description></item><item><description> Must not contain any of the following illegal characters: <![CDATA[ @, ~, ;, {, }, \\, +, =, <, >, |, /, \\\\, ?, :, &, $, *, \\\", #, [, ] ]]></description></item></list>
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ProjectReference $project The project that this feed is associated with.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets upstreamEnabled
     *
     * @return bool
     */
    public function getUpstreamEnabled()
    {
        return $this->container['upstreamEnabled'];
    }

    /**
     * Sets upstreamEnabled
     *
     * @param bool $upstreamEnabled OBSOLETE: This should always be true.  Setting to false will override all sources in UpstreamSources.
     *
     * @return $this
     */
    public function setUpstreamEnabled($upstreamEnabled)
    {
        $this->container['upstreamEnabled'] = $upstreamEnabled;

        return $this;
    }

    /**
     * Gets upstreamSources
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[]
     */
    public function getUpstreamSources()
    {
        return $this->container['upstreamSources'];
    }

    /**
     * Sets upstreamSources
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\UpstreamSource[] $upstreamSources A list of sources that this feed will fetch packages from.  An empty list indicates that this feed will not search any additional sources for packages.
     *
     * @return $this
     */
    public function setUpstreamSources($upstreamSources)
    {
        $this->container['upstreamSources'] = $upstreamSources;

        return $this;
    }

    /**
     * Gets view
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedView $view Definition of the view.
     *
     * @return $this
     */
    public function setView($view)
    {
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets viewId
     *
     * @return string
     */
    public function getViewId()
    {
        return $this->container['viewId'];
    }

    /**
     * Sets viewId
     *
     * @param string $viewId View Id.
     *
     * @return $this
     */
    public function setViewId($viewId)
    {
        $this->container['viewId'] = $viewId;

        return $this;
    }

    /**
     * Gets viewName
     *
     * @return string
     */
    public function getViewName()
    {
        return $this->container['viewName'];
    }

    /**
     * Sets viewName
     *
     * @param string $viewName View name.
     *
     * @return $this
     */
    public function setViewName($viewName)
    {
        $this->container['viewName'] = $viewName;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\ReferenceLinks $links Related REST links.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets badgesEnabled
     *
     * @return bool
     */
    public function getBadgesEnabled()
    {
        return $this->container['badgesEnabled'];
    }

    /**
     * Sets badgesEnabled
     *
     * @param bool $badgesEnabled If set, this feed supports generation of package badges.
     *
     * @return $this
     */
    public function setBadgesEnabled($badgesEnabled)
    {
        $this->container['badgesEnabled'] = $badgesEnabled;

        return $this;
    }

    /**
     * Gets defaultViewId
     *
     * @return string
     */
    public function getDefaultViewId()
    {
        return $this->container['defaultViewId'];
    }

    /**
     * Sets defaultViewId
     *
     * @param string $defaultViewId The view that the feed administrator has indicated is the default experience for readers.
     *
     * @return $this
     */
    public function setDefaultViewId($defaultViewId)
    {
        $this->container['defaultViewId'] = $defaultViewId;

        return $this;
    }

    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate The date that this feed was deleted.
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description for the feed.  Descriptions must not exceed 255 characters.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hideDeletedPackageVersions
     *
     * @return bool
     */
    public function getHideDeletedPackageVersions()
    {
        return $this->container['hideDeletedPackageVersions'];
    }

    /**
     * Sets hideDeletedPackageVersions
     *
     * @param bool $hideDeletedPackageVersions If set, the feed will hide all deleted/unpublished versions
     *
     * @return $this
     */
    public function setHideDeletedPackageVersions($hideDeletedPackageVersions)
    {
        $this->container['hideDeletedPackageVersions'] = $hideDeletedPackageVersions;

        return $this;
    }

    /**
     * Gets permanentDeletedDate
     *
     * @return \DateTime
     */
    public function getPermanentDeletedDate()
    {
        return $this->container['permanentDeletedDate'];
    }

    /**
     * Sets permanentDeletedDate
     *
     * @param \DateTime $permanentDeletedDate The date that this feed was permanently deleted.
     *
     * @return $this
     */
    public function setPermanentDeletedDate($permanentDeletedDate)
    {
        $this->container['permanentDeletedDate'] = $permanentDeletedDate;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedPermission[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \FrankHouweling\AzureDevOpsClient\Artifacts\Model\FeedPermission[] $permissions Explicit permissions for the feed.
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets scheduledPermanentDeleteDate
     *
     * @return \DateTime
     */
    public function getScheduledPermanentDeleteDate()
    {
        return $this->container['scheduledPermanentDeleteDate'];
    }

    /**
     * Sets scheduledPermanentDeleteDate
     *
     * @param \DateTime $scheduledPermanentDeleteDate The date that this feed is scheduled to be permanently deleted.
     *
     * @return $this
     */
    public function setScheduledPermanentDeleteDate($scheduledPermanentDeleteDate)
    {
        $this->container['scheduledPermanentDeleteDate'] = $scheduledPermanentDeleteDate;

        return $this;
    }

    /**
     * Gets upstreamEnabledChangedDate
     *
     * @return \DateTime
     */
    public function getUpstreamEnabledChangedDate()
    {
        return $this->container['upstreamEnabledChangedDate'];
    }

    /**
     * Sets upstreamEnabledChangedDate
     *
     * @param \DateTime $upstreamEnabledChangedDate If set, time that the UpstreamEnabled property was changed. Will be null if UpstreamEnabled was never changed after Feed creation.
     *
     * @return $this
     */
    public function setUpstreamEnabledChangedDate($upstreamEnabledChangedDate)
    {
        $this->container['upstreamEnabledChangedDate'] = $upstreamEnabledChangedDate;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL of the base feed in GUID form.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


