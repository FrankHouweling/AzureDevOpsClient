<?php
/**
 * Page
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\ProcessDefinitions
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ObjectSerializer;

/**
 * Page Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\ProcessDefinitions
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Page implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Page';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contribution' => '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WitContribution',
        'id' => 'string',
        'inherited' => 'bool',
        'isContribution' => 'bool',
        'label' => 'string',
        'locked' => 'bool',
        'order' => 'int',
        'overridden' => 'bool',
        'pageType' => 'string',
        'sections' => '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\Section[]',
        'visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contribution' => null,
        'id' => null,
        'inherited' => null,
        'isContribution' => null,
        'label' => null,
        'locked' => null,
        'order' => 'int32',
        'overridden' => null,
        'pageType' => null,
        'sections' => null,
        'visible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contribution' => 'contribution',
        'id' => 'id',
        'inherited' => 'inherited',
        'isContribution' => 'isContribution',
        'label' => 'label',
        'locked' => 'locked',
        'order' => 'order',
        'overridden' => 'overridden',
        'pageType' => 'pageType',
        'sections' => 'sections',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contribution' => 'setContribution',
        'id' => 'setId',
        'inherited' => 'setInherited',
        'isContribution' => 'setIsContribution',
        'label' => 'setLabel',
        'locked' => 'setLocked',
        'order' => 'setOrder',
        'overridden' => 'setOverridden',
        'pageType' => 'setPageType',
        'sections' => 'setSections',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contribution' => 'getContribution',
        'id' => 'getId',
        'inherited' => 'getInherited',
        'isContribution' => 'getIsContribution',
        'label' => 'getLabel',
        'locked' => 'getLocked',
        'order' => 'getOrder',
        'overridden' => 'getOverridden',
        'pageType' => 'getPageType',
        'sections' => 'getSections',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAGE_TYPE_CUSTOM = 'custom';
    const PAGE_TYPE_HISTORY = 'history';
    const PAGE_TYPE_LINKS = 'links';
    const PAGE_TYPE_ATTACHMENTS = 'attachments';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageTypeAllowableValues()
    {
        return [
            self::PAGE_TYPE_CUSTOM,
            self::PAGE_TYPE_HISTORY,
            self::PAGE_TYPE_LINKS,
            self::PAGE_TYPE_ATTACHMENTS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contribution'] = isset($data['contribution']) ? $data['contribution'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inherited'] = isset($data['inherited']) ? $data['inherited'] : null;
        $this->container['isContribution'] = isset($data['isContribution']) ? $data['isContribution'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['overridden'] = isset($data['overridden']) ? $data['overridden'] : null;
        $this->container['pageType'] = isset($data['pageType']) ? $data['pageType'] : null;
        $this->container['sections'] = isset($data['sections']) ? $data['sections'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPageTypeAllowableValues();
        if (!is_null($this->container['pageType']) && !in_array($this->container['pageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pageType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contribution
     *
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WitContribution
     */
    public function getContribution()
    {
        return $this->container['contribution'];
    }

    /**
     * Sets contribution
     *
     * @param \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WitContribution $contribution Contribution for the page.
     *
     * @return $this
     */
    public function setContribution($contribution)
    {
        $this->container['contribution'] = $contribution;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id for the layout node.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inherited
     *
     * @return bool
     */
    public function getInherited()
    {
        return $this->container['inherited'];
    }

    /**
     * Sets inherited
     *
     * @param bool $inherited A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
     *
     * @return $this
     */
    public function setInherited($inherited)
    {
        $this->container['inherited'] = $inherited;

        return $this;
    }

    /**
     * Gets isContribution
     *
     * @return bool
     */
    public function getIsContribution()
    {
        return $this->container['isContribution'];
    }

    /**
     * Sets isContribution
     *
     * @param bool $isContribution A value indicating if the layout node is contribution are not.
     *
     * @return $this
     */
    public function setIsContribution($isContribution)
    {
        $this->container['isContribution'] = $isContribution;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The label for the page.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked A value indicating whether any user operations are permitted on this page and the contents of this page
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order Order in which the page should appear in the layout.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets overridden
     *
     * @return bool
     */
    public function getOverridden()
    {
        return $this->container['overridden'];
    }

    /**
     * Sets overridden
     *
     * @param bool $overridden A value indicating whether this layout node has been overridden by a child layout.
     *
     * @return $this
     */
    public function setOverridden($overridden)
    {
        $this->container['overridden'] = $overridden;

        return $this;
    }

    /**
     * Gets pageType
     *
     * @return string
     */
    public function getPageType()
    {
        return $this->container['pageType'];
    }

    /**
     * Sets pageType
     *
     * @param string $pageType The icon for the page.
     *
     * @return $this
     */
    public function setPageType($pageType)
    {
        $allowedValues = $this->getPageTypeAllowableValues();
        if (!is_null($pageType) && !in_array($pageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pageType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pageType'] = $pageType;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\Section[]
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\Section[] $sections The sections of the page.
     *
     * @return $this
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible A value indicating if the page should be hidden or not.
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


