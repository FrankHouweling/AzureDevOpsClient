<?php
/**
 * WorkItemTypesApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\ProcessDefinitions
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTracking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException;
use FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Configuration;
use FrankHouweling\AzureDevOpsClient\ProcessDefinitions\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ObjectSerializer;

/**
 * WorkItemTypesApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\ProcessDefinitions
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkItemTypesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation add
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior
     */
    public function add($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        list($response) = $this->addWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);
        return $response;
    }

    /**
     * Operation addWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->addRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsync($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        return $this->addAsyncWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsyncWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->addRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'add'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling add'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling add'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling add'
            );
        }
        // verify the required parameter 'witRefNameForBehaviors' is set
        if ($witRefNameForBehaviors === null || (is_array($witRefNameForBehaviors) && count($witRefNameForBehaviors) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefNameForBehaviors when calling add'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling add'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefNameForBehaviors}/behaviors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefNameForBehaviors !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefNameForBehaviors' . '}',
                ObjectSerializer::toPathValue($witRefNameForBehaviors),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation create
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel
     */
    public function create($organization, $body, $processId, $apiVersion)
    {
        list($response) = $this->createWithHttpInfo($organization, $body, $processId, $apiVersion);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithHttpInfo($organization, $body, $processId, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->createRequest($organization, $body, $processId, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsync($organization, $body, $processId, $apiVersion)
    {
        return $this->createAsyncWithHttpInfo($organization, $body, $processId, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsyncWithHttpInfo($organization, $body, $processId, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->createRequest($organization, $body, $processId, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'create'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRequest($organization, $body, $processId, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling create'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling create'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling create'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling create'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delete
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function delete($organization, $processId, $witRefName, $apiVersion)
    {
        $this->deleteWithHttpInfo($organization, $processId, $witRefName, $apiVersion);
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWithHttpInfo($organization, $processId, $witRefName, $apiVersion)
    {
        $returnType = '';
        $request = $this->deleteRequest($organization, $processId, $witRefName, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsync($organization, $processId, $witRefName, $apiVersion)
    {
        return $this->deleteAsyncWithHttpInfo($organization, $processId, $witRefName, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncWithHttpInfo($organization, $processId, $witRefName, $apiVersion)
    {
        $returnType = '';
        $request = $this->deleteRequest($organization, $processId, $witRefName, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRequest($organization, $processId, $witRefName, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling delete'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling delete'
            );
        }
        // verify the required parameter 'witRefName' is set
        if ($witRefName === null || (is_array($witRefName) && count($witRefName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefName when calling delete'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling delete'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefName !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefName' . '}',
                ObjectSerializer::toPathValue($witRefName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBehaviorForWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior
     */
    public function getBehaviorForWorkItemType($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        list($response) = $this->getBehaviorForWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);
        return $response;
    }

    /**
     * Operation getBehaviorForWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBehaviorForWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->getBehaviorForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBehaviorForWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBehaviorForWorkItemTypeAsync($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        return $this->getBehaviorForWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBehaviorForWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBehaviorForWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->getBehaviorForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBehaviorForWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBehaviorForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling getBehaviorForWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling getBehaviorForWorkItemType'
            );
        }
        // verify the required parameter 'witRefNameForBehaviors' is set
        if ($witRefNameForBehaviors === null || (is_array($witRefNameForBehaviors) && count($witRefNameForBehaviors) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefNameForBehaviors when calling getBehaviorForWorkItemType'
            );
        }
        // verify the required parameter 'behaviorRefName' is set
        if ($behaviorRefName === null || (is_array($behaviorRefName) && count($behaviorRefName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $behaviorRefName when calling getBehaviorForWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling getBehaviorForWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefNameForBehaviors}/behaviors/{behaviorRefName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefNameForBehaviors !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefNameForBehaviors' . '}',
                ObjectSerializer::toPathValue($witRefNameForBehaviors),
                $resourcePath
            );
        }
        // path params
        if ($behaviorRefName !== null) {
            $resourcePath = str_replace(
                '{' . 'behaviorRefName' . '}',
                ObjectSerializer::toPathValue($behaviorRefName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBehaviorsForWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior[]
     */
    public function getBehaviorsForWorkItemType($organization, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        list($response) = $this->getBehaviorsForWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $apiVersion);
        return $response;
    }

    /**
     * Operation getBehaviorsForWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBehaviorsForWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior[]';
        $request = $this->getBehaviorsForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBehaviorsForWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBehaviorsForWorkItemTypeAsync($organization, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        return $this->getBehaviorsForWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBehaviorsForWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBehaviorsForWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior[]';
        $request = $this->getBehaviorsForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBehaviorsForWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBehaviorsForWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling getBehaviorsForWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling getBehaviorsForWorkItemType'
            );
        }
        // verify the required parameter 'witRefNameForBehaviors' is set
        if ($witRefNameForBehaviors === null || (is_array($witRefNameForBehaviors) && count($witRefNameForBehaviors) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefNameForBehaviors when calling getBehaviorsForWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling getBehaviorsForWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefNameForBehaviors}/behaviors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefNameForBehaviors !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefNameForBehaviors' . '}',
                ObjectSerializer::toPathValue($witRefNameForBehaviors),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel
     */
    public function getWorkItemType($organization, $processId, $witRefName, $apiVersion, $expand = null)
    {
        list($response) = $this->getWorkItemTypeWithHttpInfo($organization, $processId, $witRefName, $apiVersion, $expand);
        return $response;
    }

    /**
     * Operation getWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkItemTypeWithHttpInfo($organization, $processId, $witRefName, $apiVersion, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->getWorkItemTypeRequest($organization, $processId, $witRefName, $apiVersion, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkItemTypeAsync($organization, $processId, $witRefName, $apiVersion, $expand = null)
    {
        return $this->getWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefName, $apiVersion, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefName, $apiVersion, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->getWorkItemTypeRequest($organization, $processId, $witRefName, $apiVersion, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkItemTypeRequest($organization, $processId, $witRefName, $apiVersion, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling getWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling getWorkItemType'
            );
        }
        // verify the required parameter 'witRefName' is set
        if ($witRefName === null || (is_array($witRefName) && count($witRefName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefName when calling getWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling getWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefName !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefName' . '}',
                ObjectSerializer::toPathValue($witRefName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkItemTypes
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel[]
     */
    public function getWorkItemTypes($organization, $processId, $apiVersion, $expand = null)
    {
        list($response) = $this->getWorkItemTypesWithHttpInfo($organization, $processId, $apiVersion, $expand);
        return $response;
    }

    /**
     * Operation getWorkItemTypesWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkItemTypesWithHttpInfo($organization, $processId, $apiVersion, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel[]';
        $request = $this->getWorkItemTypesRequest($organization, $processId, $apiVersion, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkItemTypesAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkItemTypesAsync($organization, $processId, $apiVersion, $expand = null)
    {
        return $this->getWorkItemTypesAsyncWithHttpInfo($organization, $processId, $apiVersion, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkItemTypesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkItemTypesAsyncWithHttpInfo($organization, $processId, $apiVersion, $expand = null)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel[]';
        $request = $this->getWorkItemTypesRequest($organization, $processId, $apiVersion, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkItemTypes'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     * @param  string $expand  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkItemTypesRequest($organization, $processId, $apiVersion, $expand = null)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling getWorkItemTypes'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling getWorkItemTypes'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling getWorkItemTypes'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeBehaviorFromWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeBehaviorFromWorkItemType($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        $this->removeBehaviorFromWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);
    }

    /**
     * Operation removeBehaviorFromWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeBehaviorFromWorkItemTypeWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        $returnType = '';
        $request = $this->removeBehaviorFromWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeBehaviorFromWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBehaviorFromWorkItemTypeAsync($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        return $this->removeBehaviorFromWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeBehaviorFromWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBehaviorFromWorkItemTypeAsyncWithHttpInfo($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        $returnType = '';
        $request = $this->removeBehaviorFromWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeBehaviorFromWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $behaviorRefName The reference name of the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeBehaviorFromWorkItemTypeRequest($organization, $processId, $witRefNameForBehaviors, $behaviorRefName, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling removeBehaviorFromWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling removeBehaviorFromWorkItemType'
            );
        }
        // verify the required parameter 'witRefNameForBehaviors' is set
        if ($witRefNameForBehaviors === null || (is_array($witRefNameForBehaviors) && count($witRefNameForBehaviors) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefNameForBehaviors when calling removeBehaviorFromWorkItemType'
            );
        }
        // verify the required parameter 'behaviorRefName' is set
        if ($behaviorRefName === null || (is_array($behaviorRefName) && count($behaviorRefName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $behaviorRefName when calling removeBehaviorFromWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling removeBehaviorFromWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefNameForBehaviors}/behaviors/{behaviorRefName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefNameForBehaviors !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefNameForBehaviors' . '}',
                ObjectSerializer::toPathValue($witRefNameForBehaviors),
                $resourcePath
            );
        }
        // path params
        if ($behaviorRefName !== null) {
            $resourcePath = str_replace(
                '{' . 'behaviorRefName' . '}',
                ObjectSerializer::toPathValue($behaviorRefName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBehaviorToWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior
     */
    public function updateBehaviorToWorkItemType($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        list($response) = $this->updateBehaviorToWorkItemTypeWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);
        return $response;
    }

    /**
     * Operation updateBehaviorToWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBehaviorToWorkItemTypeWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->updateBehaviorToWorkItemTypeRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBehaviorToWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBehaviorToWorkItemTypeAsync($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        return $this->updateBehaviorToWorkItemTypeAsyncWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBehaviorToWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBehaviorToWorkItemTypeAsyncWithHttpInfo($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior';
        $request = $this->updateBehaviorToWorkItemTypeRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBehaviorToWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeBehavior $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefNameForBehaviors Work item type reference name for the behavior (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBehaviorToWorkItemTypeRequest($organization, $body, $processId, $witRefNameForBehaviors, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling updateBehaviorToWorkItemType'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateBehaviorToWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling updateBehaviorToWorkItemType'
            );
        }
        // verify the required parameter 'witRefNameForBehaviors' is set
        if ($witRefNameForBehaviors === null || (is_array($witRefNameForBehaviors) && count($witRefNameForBehaviors) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefNameForBehaviors when calling updateBehaviorToWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling updateBehaviorToWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefNameForBehaviors}/behaviors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefNameForBehaviors !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefNameForBehaviors' . '}',
                ObjectSerializer::toPathValue($witRefNameForBehaviors),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkItemType
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeUpdateModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel
     */
    public function updateWorkItemType($organization, $body, $processId, $witRefName, $apiVersion)
    {
        list($response) = $this->updateWorkItemTypeWithHttpInfo($organization, $body, $processId, $witRefName, $apiVersion);
        return $response;
    }

    /**
     * Operation updateWorkItemTypeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeUpdateModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkItemTypeWithHttpInfo($organization, $body, $processId, $witRefName, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->updateWorkItemTypeRequest($organization, $body, $processId, $witRefName, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkItemTypeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeUpdateModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkItemTypeAsync($organization, $body, $processId, $witRefName, $apiVersion)
    {
        return $this->updateWorkItemTypeAsyncWithHttpInfo($organization, $body, $processId, $witRefName, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkItemTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeUpdateModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkItemTypeAsyncWithHttpInfo($organization, $body, $processId, $witRefName, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeModel';
        $request = $this->updateWorkItemTypeRequest($organization, $body, $processId, $witRefName, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkItemType'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\ProcessDefinitions\Model\WorkItemTypeUpdateModel $body  (required)
     * @param  string $processId The ID of the process (required)
     * @param  string $witRefName The reference name of the work item type (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;4.1-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkItemTypeRequest($organization, $body, $processId, $witRefName, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling updateWorkItemType'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateWorkItemType'
            );
        }
        // verify the required parameter 'processId' is set
        if ($processId === null || (is_array($processId) && count($processId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processId when calling updateWorkItemType'
            );
        }
        // verify the required parameter 'witRefName' is set
        if ($witRefName === null || (is_array($witRefName) && count($witRefName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $witRefName when calling updateWorkItemType'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling updateWorkItemType'
            );
        }

        $resourcePath = '/{organization}/_apis/work/processdefinitions/{processId}/workitemtypes/{witRefName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($processId !== null) {
            $resourcePath = str_replace(
                '{' . 'processId' . '}',
                ObjectSerializer::toPathValue($processId),
                $resourcePath
            );
        }
        // path params
        if ($witRefName !== null) {
            $resourcePath = str_replace(
                '{' . 'witRefName' . '}',
                ObjectSerializer::toPathValue($witRefName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
