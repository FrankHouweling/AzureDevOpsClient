<?php
/**
 * ExtensionSummaryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * ExtensionSummaryData Class Doc Comment
 *
 * @category Class
 * @description Summary of Extensions in the organization.
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExtensionSummaryData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExtensionSummaryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assigned' => 'int',
        'available' => 'int',
        'includedQuantity' => 'int',
        'total' => 'int',
        'assignedThroughSubscription' => 'int',
        'extensionId' => 'string',
        'extensionName' => 'string',
        'isTrialVersion' => 'bool',
        'minimumLicenseRequired' => 'string',
        'remainingTrialDays' => 'int',
        'trialExpiryDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assigned' => 'int32',
        'available' => 'int32',
        'includedQuantity' => 'int32',
        'total' => 'int32',
        'assignedThroughSubscription' => 'int32',
        'extensionId' => null,
        'extensionName' => null,
        'isTrialVersion' => null,
        'minimumLicenseRequired' => null,
        'remainingTrialDays' => 'int32',
        'trialExpiryDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assigned' => 'assigned',
        'available' => 'available',
        'includedQuantity' => 'includedQuantity',
        'total' => 'total',
        'assignedThroughSubscription' => 'assignedThroughSubscription',
        'extensionId' => 'extensionId',
        'extensionName' => 'extensionName',
        'isTrialVersion' => 'isTrialVersion',
        'minimumLicenseRequired' => 'minimumLicenseRequired',
        'remainingTrialDays' => 'remainingTrialDays',
        'trialExpiryDate' => 'trialExpiryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assigned' => 'setAssigned',
        'available' => 'setAvailable',
        'includedQuantity' => 'setIncludedQuantity',
        'total' => 'setTotal',
        'assignedThroughSubscription' => 'setAssignedThroughSubscription',
        'extensionId' => 'setExtensionId',
        'extensionName' => 'setExtensionName',
        'isTrialVersion' => 'setIsTrialVersion',
        'minimumLicenseRequired' => 'setMinimumLicenseRequired',
        'remainingTrialDays' => 'setRemainingTrialDays',
        'trialExpiryDate' => 'setTrialExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assigned' => 'getAssigned',
        'available' => 'getAvailable',
        'includedQuantity' => 'getIncludedQuantity',
        'total' => 'getTotal',
        'assignedThroughSubscription' => 'getAssignedThroughSubscription',
        'extensionId' => 'getExtensionId',
        'extensionName' => 'getExtensionName',
        'isTrialVersion' => 'getIsTrialVersion',
        'minimumLicenseRequired' => 'getMinimumLicenseRequired',
        'remainingTrialDays' => 'getRemainingTrialDays',
        'trialExpiryDate' => 'getTrialExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MINIMUM_LICENSE_REQUIRED_NONE = 'none';
    const MINIMUM_LICENSE_REQUIRED_EXPRESS = 'express';
    const MINIMUM_LICENSE_REQUIRED_ADVANCED = 'advanced';
    const MINIMUM_LICENSE_REQUIRED_ADVANCED_PLUS = 'advancedPlus';
    const MINIMUM_LICENSE_REQUIRED_STAKEHOLDER = 'stakeholder';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinimumLicenseRequiredAllowableValues()
    {
        return [
            self::MINIMUM_LICENSE_REQUIRED_NONE,
            self::MINIMUM_LICENSE_REQUIRED_EXPRESS,
            self::MINIMUM_LICENSE_REQUIRED_ADVANCED,
            self::MINIMUM_LICENSE_REQUIRED_ADVANCED_PLUS,
            self::MINIMUM_LICENSE_REQUIRED_STAKEHOLDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['includedQuantity'] = isset($data['includedQuantity']) ? $data['includedQuantity'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['assignedThroughSubscription'] = isset($data['assignedThroughSubscription']) ? $data['assignedThroughSubscription'] : null;
        $this->container['extensionId'] = isset($data['extensionId']) ? $data['extensionId'] : null;
        $this->container['extensionName'] = isset($data['extensionName']) ? $data['extensionName'] : null;
        $this->container['isTrialVersion'] = isset($data['isTrialVersion']) ? $data['isTrialVersion'] : null;
        $this->container['minimumLicenseRequired'] = isset($data['minimumLicenseRequired']) ? $data['minimumLicenseRequired'] : null;
        $this->container['remainingTrialDays'] = isset($data['remainingTrialDays']) ? $data['remainingTrialDays'] : null;
        $this->container['trialExpiryDate'] = isset($data['trialExpiryDate']) ? $data['trialExpiryDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMinimumLicenseRequiredAllowableValues();
        if (!is_null($this->container['minimumLicenseRequired']) && !in_array($this->container['minimumLicenseRequired'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'minimumLicenseRequired', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assigned
     *
     * @return int
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param int $assigned Count of Licenses already assigned.
     *
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets available
     *
     * @return int
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param int $available Available Count.
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets includedQuantity
     *
     * @return int
     */
    public function getIncludedQuantity()
    {
        return $this->container['includedQuantity'];
    }

    /**
     * Sets includedQuantity
     *
     * @param int $includedQuantity Quantity
     *
     * @return $this
     */
    public function setIncludedQuantity($includedQuantity)
    {
        $this->container['includedQuantity'] = $includedQuantity;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Total Count.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets assignedThroughSubscription
     *
     * @return int
     */
    public function getAssignedThroughSubscription()
    {
        return $this->container['assignedThroughSubscription'];
    }

    /**
     * Sets assignedThroughSubscription
     *
     * @param int $assignedThroughSubscription Count of Extension Licenses assigned to users through msdn.
     *
     * @return $this
     */
    public function setAssignedThroughSubscription($assignedThroughSubscription)
    {
        $this->container['assignedThroughSubscription'] = $assignedThroughSubscription;

        return $this;
    }

    /**
     * Gets extensionId
     *
     * @return string
     */
    public function getExtensionId()
    {
        return $this->container['extensionId'];
    }

    /**
     * Sets extensionId
     *
     * @param string $extensionId Gallery Id of the Extension
     *
     * @return $this
     */
    public function setExtensionId($extensionId)
    {
        $this->container['extensionId'] = $extensionId;

        return $this;
    }

    /**
     * Gets extensionName
     *
     * @return string
     */
    public function getExtensionName()
    {
        return $this->container['extensionName'];
    }

    /**
     * Sets extensionName
     *
     * @param string $extensionName Friendly name of this extension
     *
     * @return $this
     */
    public function setExtensionName($extensionName)
    {
        $this->container['extensionName'] = $extensionName;

        return $this;
    }

    /**
     * Gets isTrialVersion
     *
     * @return bool
     */
    public function getIsTrialVersion()
    {
        return $this->container['isTrialVersion'];
    }

    /**
     * Sets isTrialVersion
     *
     * @param bool $isTrialVersion Whether its a Trial Version.
     *
     * @return $this
     */
    public function setIsTrialVersion($isTrialVersion)
    {
        $this->container['isTrialVersion'] = $isTrialVersion;

        return $this;
    }

    /**
     * Gets minimumLicenseRequired
     *
     * @return string
     */
    public function getMinimumLicenseRequired()
    {
        return $this->container['minimumLicenseRequired'];
    }

    /**
     * Sets minimumLicenseRequired
     *
     * @param string $minimumLicenseRequired Minimum License Required for the Extension.
     *
     * @return $this
     */
    public function setMinimumLicenseRequired($minimumLicenseRequired)
    {
        $allowedValues = $this->getMinimumLicenseRequiredAllowableValues();
        if (!is_null($minimumLicenseRequired) && !in_array($minimumLicenseRequired, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'minimumLicenseRequired', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['minimumLicenseRequired'] = $minimumLicenseRequired;

        return $this;
    }

    /**
     * Gets remainingTrialDays
     *
     * @return int
     */
    public function getRemainingTrialDays()
    {
        return $this->container['remainingTrialDays'];
    }

    /**
     * Sets remainingTrialDays
     *
     * @param int $remainingTrialDays Days remaining for the Trial to expire.
     *
     * @return $this
     */
    public function setRemainingTrialDays($remainingTrialDays)
    {
        $this->container['remainingTrialDays'] = $remainingTrialDays;

        return $this;
    }

    /**
     * Gets trialExpiryDate
     *
     * @return \DateTime
     */
    public function getTrialExpiryDate()
    {
        return $this->container['trialExpiryDate'];
    }

    /**
     * Sets trialExpiryDate
     *
     * @param \DateTime $trialExpiryDate Date on which the Trial expires.
     *
     * @return $this
     */
    public function setTrialExpiryDate($trialExpiryDate)
    {
        $this->container['trialExpiryDate'] = $trialExpiryDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


