<?php
/**
 * UsersSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * UsersSummary Class Doc Comment
 *
 * @category Class
 * @description Summary of licenses and extensions assigned to users in the organization
 * @package  FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UsersSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availableAccessLevels' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel[]',
        'groupOptions' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GroupOption[]',
        'licenses' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\LicenseSummaryData[]',
        'projectRefs' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availableAccessLevels' => null,
        'groupOptions' => null,
        'licenses' => null,
        'projectRefs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availableAccessLevels' => 'availableAccessLevels',
        'groupOptions' => 'groupOptions',
        'licenses' => 'licenses',
        'projectRefs' => 'projectRefs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availableAccessLevels' => 'setAvailableAccessLevels',
        'groupOptions' => 'setGroupOptions',
        'licenses' => 'setLicenses',
        'projectRefs' => 'setProjectRefs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availableAccessLevels' => 'getAvailableAccessLevels',
        'groupOptions' => 'getGroupOptions',
        'licenses' => 'getLicenses',
        'projectRefs' => 'getProjectRefs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availableAccessLevels'] = isset($data['availableAccessLevels']) ? $data['availableAccessLevels'] : null;
        $this->container['groupOptions'] = isset($data['groupOptions']) ? $data['groupOptions'] : null;
        $this->container['licenses'] = isset($data['licenses']) ? $data['licenses'] : null;
        $this->container['projectRefs'] = isset($data['projectRefs']) ? $data['projectRefs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availableAccessLevels
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel[]
     */
    public function getAvailableAccessLevels()
    {
        return $this->container['availableAccessLevels'];
    }

    /**
     * Sets availableAccessLevels
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel[] $availableAccessLevels Available Access Levels
     *
     * @return $this
     */
    public function setAvailableAccessLevels($availableAccessLevels)
    {
        $this->container['availableAccessLevels'] = $availableAccessLevels;

        return $this;
    }

    /**
     * Gets groupOptions
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GroupOption[]
     */
    public function getGroupOptions()
    {
        return $this->container['groupOptions'];
    }

    /**
     * Sets groupOptions
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GroupOption[] $groupOptions Group Options
     *
     * @return $this
     */
    public function setGroupOptions($groupOptions)
    {
        $this->container['groupOptions'] = $groupOptions;

        return $this;
    }

    /**
     * Gets licenses
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\LicenseSummaryData[]
     */
    public function getLicenses()
    {
        return $this->container['licenses'];
    }

    /**
     * Sets licenses
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\LicenseSummaryData[] $licenses Summary of Licenses in the organization
     *
     * @return $this
     */
    public function setLicenses($licenses)
    {
        $this->container['licenses'] = $licenses;

        return $this;
    }

    /**
     * Gets projectRefs
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef[]
     */
    public function getProjectRefs()
    {
        return $this->container['projectRefs'];
    }

    /**
     * Sets projectRefs
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef[] $projectRefs Summary of Projects in the organization
     *
     * @return $this
     */
    public function setProjectRefs($projectRefs)
    {
        $this->container['projectRefs'] = $projectRefs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


