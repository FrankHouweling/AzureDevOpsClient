<?php
/**
 * ProjectEntitlement
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * ProjectEntitlement Class Doc Comment
 *
 * @category Class
 * @description Relation between a project and the user&#39;s effective permissions in that project.
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectEntitlement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectEntitlement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignmentSource' => 'string',
        'group' => '\AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\Group',
        'projectPermissionInherited' => 'string',
        'projectRef' => '\AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef',
        'teamRefs' => '\AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\TeamRef[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assignmentSource' => null,
        'group' => null,
        'projectPermissionInherited' => null,
        'projectRef' => null,
        'teamRefs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignmentSource' => 'assignmentSource',
        'group' => 'group',
        'projectPermissionInherited' => 'projectPermissionInherited',
        'projectRef' => 'projectRef',
        'teamRefs' => 'teamRefs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignmentSource' => 'setAssignmentSource',
        'group' => 'setGroup',
        'projectPermissionInherited' => 'setProjectPermissionInherited',
        'projectRef' => 'setProjectRef',
        'teamRefs' => 'setTeamRefs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignmentSource' => 'getAssignmentSource',
        'group' => 'getGroup',
        'projectPermissionInherited' => 'getProjectPermissionInherited',
        'projectRef' => 'getProjectRef',
        'teamRefs' => 'getTeamRefs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSIGNMENT_SOURCE_NONE = 'none';
    const ASSIGNMENT_SOURCE_UNKNOWN = 'unknown';
    const ASSIGNMENT_SOURCE_GROUP_RULE = 'groupRule';
    const PROJECT_PERMISSION_INHERITED_NOT_SET = 'notSet';
    const PROJECT_PERMISSION_INHERITED_NOT_INHERITED = 'notInherited';
    const PROJECT_PERMISSION_INHERITED_INHERITED = 'inherited';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignmentSourceAllowableValues()
    {
        return [
            self::ASSIGNMENT_SOURCE_NONE,
            self::ASSIGNMENT_SOURCE_UNKNOWN,
            self::ASSIGNMENT_SOURCE_GROUP_RULE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectPermissionInheritedAllowableValues()
    {
        return [
            self::PROJECT_PERMISSION_INHERITED_NOT_SET,
            self::PROJECT_PERMISSION_INHERITED_NOT_INHERITED,
            self::PROJECT_PERMISSION_INHERITED_INHERITED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignmentSource'] = isset($data['assignmentSource']) ? $data['assignmentSource'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['projectPermissionInherited'] = isset($data['projectPermissionInherited']) ? $data['projectPermissionInherited'] : null;
        $this->container['projectRef'] = isset($data['projectRef']) ? $data['projectRef'] : null;
        $this->container['teamRefs'] = isset($data['teamRefs']) ? $data['teamRefs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssignmentSourceAllowableValues();
        if (!is_null($this->container['assignmentSource']) && !in_array($this->container['assignmentSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'assignmentSource', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProjectPermissionInheritedAllowableValues();
        if (!is_null($this->container['projectPermissionInherited']) && !in_array($this->container['projectPermissionInherited'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'projectPermissionInherited', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignmentSource
     *
     * @return string
     */
    public function getAssignmentSource()
    {
        return $this->container['assignmentSource'];
    }

    /**
     * Sets assignmentSource
     *
     * @param string $assignmentSource Assignment Source (e.g. Group or Unknown).
     *
     * @return $this
     */
    public function setAssignmentSource($assignmentSource)
    {
        $allowedValues = $this->getAssignmentSourceAllowableValues();
        if (!is_null($assignmentSource) && !in_array($assignmentSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'assignmentSource', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assignmentSource'] = $assignmentSource;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\Group
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\Group $group Project Group (e.g. Contributor, Reader etc.)
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets projectPermissionInherited
     *
     * @return string
     */
    public function getProjectPermissionInherited()
    {
        return $this->container['projectPermissionInherited'];
    }

    /**
     * Sets projectPermissionInherited
     *
     * @param string $projectPermissionInherited Whether the user is inheriting permissions to a project through a Azure DevOps or AAD group membership.
     *
     * @return $this
     */
    public function setProjectPermissionInherited($projectPermissionInherited)
    {
        $allowedValues = $this->getProjectPermissionInheritedAllowableValues();
        if (!is_null($projectPermissionInherited) && !in_array($projectPermissionInherited, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'projectPermissionInherited', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['projectPermissionInherited'] = $projectPermissionInherited;

        return $this;
    }

    /**
     * Gets projectRef
     *
     * @return \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef
     */
    public function getProjectRef()
    {
        return $this->container['projectRef'];
    }

    /**
     * Sets projectRef
     *
     * @param \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectRef $projectRef Project Ref
     *
     * @return $this
     */
    public function setProjectRef($projectRef)
    {
        $this->container['projectRef'] = $projectRef;

        return $this;
    }

    /**
     * Gets teamRefs
     *
     * @return \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\TeamRef[]
     */
    public function getTeamRefs()
    {
        return $this->container['teamRefs'];
    }

    /**
     * Sets teamRefs
     *
     * @param \AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model\TeamRef[] $teamRefs Team Ref.
     *
     * @return $this
     */
    public function setTeamRefs($teamRefs)
    {
        $this->container['teamRefs'] = $teamRefs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


