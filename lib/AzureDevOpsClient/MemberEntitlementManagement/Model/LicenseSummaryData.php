<?php
/**
 * LicenseSummaryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * LicenseSummaryData Class Doc Comment
 *
 * @category Class
 * @description Summary of Licenses in the organization.
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LicenseSummaryData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LicenseSummaryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assigned' => 'int',
        'available' => 'int',
        'includedQuantity' => 'int',
        'total' => 'int',
        'accountLicenseType' => 'string',
        'disabled' => 'int',
        'isPurchasable' => 'bool',
        'licenseName' => 'string',
        'msdnLicenseType' => 'string',
        'nextBillingDate' => '\DateTime',
        'source' => 'string',
        'totalAfterNextBillingDate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assigned' => 'int32',
        'available' => 'int32',
        'includedQuantity' => 'int32',
        'total' => 'int32',
        'accountLicenseType' => null,
        'disabled' => 'int32',
        'isPurchasable' => null,
        'licenseName' => null,
        'msdnLicenseType' => null,
        'nextBillingDate' => 'date-time',
        'source' => null,
        'totalAfterNextBillingDate' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assigned' => 'assigned',
        'available' => 'available',
        'includedQuantity' => 'includedQuantity',
        'total' => 'total',
        'accountLicenseType' => 'accountLicenseType',
        'disabled' => 'disabled',
        'isPurchasable' => 'isPurchasable',
        'licenseName' => 'licenseName',
        'msdnLicenseType' => 'msdnLicenseType',
        'nextBillingDate' => 'nextBillingDate',
        'source' => 'source',
        'totalAfterNextBillingDate' => 'totalAfterNextBillingDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assigned' => 'setAssigned',
        'available' => 'setAvailable',
        'includedQuantity' => 'setIncludedQuantity',
        'total' => 'setTotal',
        'accountLicenseType' => 'setAccountLicenseType',
        'disabled' => 'setDisabled',
        'isPurchasable' => 'setIsPurchasable',
        'licenseName' => 'setLicenseName',
        'msdnLicenseType' => 'setMsdnLicenseType',
        'nextBillingDate' => 'setNextBillingDate',
        'source' => 'setSource',
        'totalAfterNextBillingDate' => 'setTotalAfterNextBillingDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assigned' => 'getAssigned',
        'available' => 'getAvailable',
        'includedQuantity' => 'getIncludedQuantity',
        'total' => 'getTotal',
        'accountLicenseType' => 'getAccountLicenseType',
        'disabled' => 'getDisabled',
        'isPurchasable' => 'getIsPurchasable',
        'licenseName' => 'getLicenseName',
        'msdnLicenseType' => 'getMsdnLicenseType',
        'nextBillingDate' => 'getNextBillingDate',
        'source' => 'getSource',
        'totalAfterNextBillingDate' => 'getTotalAfterNextBillingDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_LICENSE_TYPE_NONE = 'none';
    const ACCOUNT_LICENSE_TYPE_EARLY_ADOPTER = 'earlyAdopter';
    const ACCOUNT_LICENSE_TYPE_EXPRESS = 'express';
    const ACCOUNT_LICENSE_TYPE_PROFESSIONAL = 'professional';
    const ACCOUNT_LICENSE_TYPE_ADVANCED = 'advanced';
    const ACCOUNT_LICENSE_TYPE_STAKEHOLDER = 'stakeholder';
    const MSDN_LICENSE_TYPE_NONE = 'none';
    const MSDN_LICENSE_TYPE_ELIGIBLE = 'eligible';
    const MSDN_LICENSE_TYPE_PROFESSIONAL = 'professional';
    const MSDN_LICENSE_TYPE_PLATFORMS = 'platforms';
    const MSDN_LICENSE_TYPE_TEST_PROFESSIONAL = 'testProfessional';
    const MSDN_LICENSE_TYPE_PREMIUM = 'premium';
    const MSDN_LICENSE_TYPE_ULTIMATE = 'ultimate';
    const MSDN_LICENSE_TYPE_ENTERPRISE = 'enterprise';
    const SOURCE_NONE = 'none';
    const SOURCE_ACCOUNT = 'account';
    const SOURCE_MSDN = 'msdn';
    const SOURCE_PROFILE = 'profile';
    const SOURCE_AUTO = 'auto';
    const SOURCE_TRIAL = 'trial';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountLicenseTypeAllowableValues()
    {
        return [
            self::ACCOUNT_LICENSE_TYPE_NONE,
            self::ACCOUNT_LICENSE_TYPE_EARLY_ADOPTER,
            self::ACCOUNT_LICENSE_TYPE_EXPRESS,
            self::ACCOUNT_LICENSE_TYPE_PROFESSIONAL,
            self::ACCOUNT_LICENSE_TYPE_ADVANCED,
            self::ACCOUNT_LICENSE_TYPE_STAKEHOLDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMsdnLicenseTypeAllowableValues()
    {
        return [
            self::MSDN_LICENSE_TYPE_NONE,
            self::MSDN_LICENSE_TYPE_ELIGIBLE,
            self::MSDN_LICENSE_TYPE_PROFESSIONAL,
            self::MSDN_LICENSE_TYPE_PLATFORMS,
            self::MSDN_LICENSE_TYPE_TEST_PROFESSIONAL,
            self::MSDN_LICENSE_TYPE_PREMIUM,
            self::MSDN_LICENSE_TYPE_ULTIMATE,
            self::MSDN_LICENSE_TYPE_ENTERPRISE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_ACCOUNT,
            self::SOURCE_MSDN,
            self::SOURCE_PROFILE,
            self::SOURCE_AUTO,
            self::SOURCE_TRIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['includedQuantity'] = isset($data['includedQuantity']) ? $data['includedQuantity'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['accountLicenseType'] = isset($data['accountLicenseType']) ? $data['accountLicenseType'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['isPurchasable'] = isset($data['isPurchasable']) ? $data['isPurchasable'] : null;
        $this->container['licenseName'] = isset($data['licenseName']) ? $data['licenseName'] : null;
        $this->container['msdnLicenseType'] = isset($data['msdnLicenseType']) ? $data['msdnLicenseType'] : null;
        $this->container['nextBillingDate'] = isset($data['nextBillingDate']) ? $data['nextBillingDate'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['totalAfterNextBillingDate'] = isset($data['totalAfterNextBillingDate']) ? $data['totalAfterNextBillingDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountLicenseTypeAllowableValues();
        if (!is_null($this->container['accountLicenseType']) && !in_array($this->container['accountLicenseType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accountLicenseType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMsdnLicenseTypeAllowableValues();
        if (!is_null($this->container['msdnLicenseType']) && !in_array($this->container['msdnLicenseType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'msdnLicenseType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assigned
     *
     * @return int
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param int $assigned Count of Licenses already assigned.
     *
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets available
     *
     * @return int
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param int $available Available Count.
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets includedQuantity
     *
     * @return int
     */
    public function getIncludedQuantity()
    {
        return $this->container['includedQuantity'];
    }

    /**
     * Sets includedQuantity
     *
     * @param int $includedQuantity Quantity
     *
     * @return $this
     */
    public function setIncludedQuantity($includedQuantity)
    {
        $this->container['includedQuantity'] = $includedQuantity;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Total Count.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets accountLicenseType
     *
     * @return string
     */
    public function getAccountLicenseType()
    {
        return $this->container['accountLicenseType'];
    }

    /**
     * Sets accountLicenseType
     *
     * @param string $accountLicenseType Type of Account License.
     *
     * @return $this
     */
    public function setAccountLicenseType($accountLicenseType)
    {
        $allowedValues = $this->getAccountLicenseTypeAllowableValues();
        if (!is_null($accountLicenseType) && !in_array($accountLicenseType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accountLicenseType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountLicenseType'] = $accountLicenseType;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return int
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param int $disabled Count of Disabled Licenses.
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets isPurchasable
     *
     * @return bool
     */
    public function getIsPurchasable()
    {
        return $this->container['isPurchasable'];
    }

    /**
     * Sets isPurchasable
     *
     * @param bool $isPurchasable Designates if this license quantity can be changed through purchase
     *
     * @return $this
     */
    public function setIsPurchasable($isPurchasable)
    {
        $this->container['isPurchasable'] = $isPurchasable;

        return $this;
    }

    /**
     * Gets licenseName
     *
     * @return string
     */
    public function getLicenseName()
    {
        return $this->container['licenseName'];
    }

    /**
     * Sets licenseName
     *
     * @param string $licenseName Name of the License.
     *
     * @return $this
     */
    public function setLicenseName($licenseName)
    {
        $this->container['licenseName'] = $licenseName;

        return $this;
    }

    /**
     * Gets msdnLicenseType
     *
     * @return string
     */
    public function getMsdnLicenseType()
    {
        return $this->container['msdnLicenseType'];
    }

    /**
     * Sets msdnLicenseType
     *
     * @param string $msdnLicenseType Type of MSDN License.
     *
     * @return $this
     */
    public function setMsdnLicenseType($msdnLicenseType)
    {
        $allowedValues = $this->getMsdnLicenseTypeAllowableValues();
        if (!is_null($msdnLicenseType) && !in_array($msdnLicenseType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'msdnLicenseType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['msdnLicenseType'] = $msdnLicenseType;

        return $this;
    }

    /**
     * Gets nextBillingDate
     *
     * @return \DateTime
     */
    public function getNextBillingDate()
    {
        return $this->container['nextBillingDate'];
    }

    /**
     * Sets nextBillingDate
     *
     * @param \DateTime $nextBillingDate Specifies the date when billing will charge for paid licenses
     *
     * @return $this
     */
    public function setNextBillingDate($nextBillingDate)
    {
        $this->container['nextBillingDate'] = $nextBillingDate;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source of the License.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets totalAfterNextBillingDate
     *
     * @return int
     */
    public function getTotalAfterNextBillingDate()
    {
        return $this->container['totalAfterNextBillingDate'];
    }

    /**
     * Sets totalAfterNextBillingDate
     *
     * @param int $totalAfterNextBillingDate Total license count after next billing cycle
     *
     * @return $this
     */
    public function setTotalAfterNextBillingDate($totalAfterNextBillingDate)
    {
        $this->container['totalAfterNextBillingDate'] = $totalAfterNextBillingDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


