<?php
/**
 * GroupEntitlement
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * GroupEntitlement Class Doc Comment
 *
 * @category Class
 * @description A group entity with additional properties including its license, extensions, and project membership
 * @package  FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupEntitlement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupEntitlement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GraphGroup',
        'id' => 'string',
        'lastExecuted' => '\DateTime',
        'licenseRule' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel',
        'members' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\UserEntitlement[]',
        'projectEntitlements' => '\FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectEntitlement[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group' => null,
        'id' => 'uuid',
        'lastExecuted' => 'date-time',
        'licenseRule' => null,
        'members' => null,
        'projectEntitlements' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group' => 'group',
        'id' => 'id',
        'lastExecuted' => 'lastExecuted',
        'licenseRule' => 'licenseRule',
        'members' => 'members',
        'projectEntitlements' => 'projectEntitlements',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group' => 'setGroup',
        'id' => 'setId',
        'lastExecuted' => 'setLastExecuted',
        'licenseRule' => 'setLicenseRule',
        'members' => 'setMembers',
        'projectEntitlements' => 'setProjectEntitlements',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group' => 'getGroup',
        'id' => 'getId',
        'lastExecuted' => 'getLastExecuted',
        'licenseRule' => 'getLicenseRule',
        'members' => 'getMembers',
        'projectEntitlements' => 'getProjectEntitlements',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_APPLY_PENDING = 'applyPending';
    const STATUS_APPLIED = 'applied';
    const STATUS_INCOMPATIBLE = 'incompatible';
    const STATUS_UNABLE_TO_APPLY = 'unableToApply';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPLY_PENDING,
            self::STATUS_APPLIED,
            self::STATUS_INCOMPATIBLE,
            self::STATUS_UNABLE_TO_APPLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastExecuted'] = isset($data['lastExecuted']) ? $data['lastExecuted'] : null;
        $this->container['licenseRule'] = isset($data['licenseRule']) ? $data['licenseRule'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['projectEntitlements'] = isset($data['projectEntitlements']) ? $data['projectEntitlements'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GraphGroup
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\GraphGroup $group Member reference.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier which matches the Id of the GraphMember.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastExecuted
     *
     * @return \DateTime
     */
    public function getLastExecuted()
    {
        return $this->container['lastExecuted'];
    }

    /**
     * Sets lastExecuted
     *
     * @param \DateTime $lastExecuted [Readonly] The last time the group licensing rule was executed (regardless of whether any changes were made).
     *
     * @return $this
     */
    public function setLastExecuted($lastExecuted)
    {
        $this->container['lastExecuted'] = $lastExecuted;

        return $this;
    }

    /**
     * Gets licenseRule
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel
     */
    public function getLicenseRule()
    {
        return $this->container['licenseRule'];
    }

    /**
     * Sets licenseRule
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\AccessLevel $licenseRule License Rule.
     *
     * @return $this
     */
    public function setLicenseRule($licenseRule)
    {
        $this->container['licenseRule'] = $licenseRule;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\UserEntitlement[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\UserEntitlement[] $members Group members. Only used when creating a new group.
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets projectEntitlements
     *
     * @return \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectEntitlement[]
     */
    public function getProjectEntitlements()
    {
        return $this->container['projectEntitlements'];
    }

    /**
     * Sets projectEntitlements
     *
     * @param \FrankHouweling\AzureDevOpsClient\MemberEntitlementManagement\Model\ProjectEntitlement[] $projectEntitlements Relation between a project and the member's effective permissions in that project.
     *
     * @return $this
     */
    public function setProjectEntitlements($projectEntitlements)
    {
        $this->container['projectEntitlements'] = $projectEntitlements;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the group rule.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


