<?php
/**
 * AccessLevel
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MemberEntitlementManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\MemberEntitlementManagement\AzureDevOpsClient\MemberEntitlementManagement\Model;

use \ArrayAccess;
use \AzureDevOpsClient\MemberEntitlementManagement\ObjectSerializer;

/**
 * AccessLevel Class Doc Comment
 *
 * @category Class
 * @description License assigned to a user
 * @package  AzureDevOpsClient\MemberEntitlementManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccessLevel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccessLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountLicenseType' => 'string',
        'assignmentSource' => 'string',
        'licenseDisplayName' => 'string',
        'licensingSource' => 'string',
        'msdnLicenseType' => 'string',
        'status' => 'string',
        'statusMessage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountLicenseType' => null,
        'assignmentSource' => null,
        'licenseDisplayName' => null,
        'licensingSource' => null,
        'msdnLicenseType' => null,
        'status' => null,
        'statusMessage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountLicenseType' => 'accountLicenseType',
        'assignmentSource' => 'assignmentSource',
        'licenseDisplayName' => 'licenseDisplayName',
        'licensingSource' => 'licensingSource',
        'msdnLicenseType' => 'msdnLicenseType',
        'status' => 'status',
        'statusMessage' => 'statusMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountLicenseType' => 'setAccountLicenseType',
        'assignmentSource' => 'setAssignmentSource',
        'licenseDisplayName' => 'setLicenseDisplayName',
        'licensingSource' => 'setLicensingSource',
        'msdnLicenseType' => 'setMsdnLicenseType',
        'status' => 'setStatus',
        'statusMessage' => 'setStatusMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountLicenseType' => 'getAccountLicenseType',
        'assignmentSource' => 'getAssignmentSource',
        'licenseDisplayName' => 'getLicenseDisplayName',
        'licensingSource' => 'getLicensingSource',
        'msdnLicenseType' => 'getMsdnLicenseType',
        'status' => 'getStatus',
        'statusMessage' => 'getStatusMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_LICENSE_TYPE_NONE = 'none';
    const ACCOUNT_LICENSE_TYPE_EARLY_ADOPTER = 'earlyAdopter';
    const ACCOUNT_LICENSE_TYPE_EXPRESS = 'express';
    const ACCOUNT_LICENSE_TYPE_PROFESSIONAL = 'professional';
    const ACCOUNT_LICENSE_TYPE_ADVANCED = 'advanced';
    const ACCOUNT_LICENSE_TYPE_STAKEHOLDER = 'stakeholder';
    const ASSIGNMENT_SOURCE_NONE = 'none';
    const ASSIGNMENT_SOURCE_UNKNOWN = 'unknown';
    const ASSIGNMENT_SOURCE_GROUP_RULE = 'groupRule';
    const LICENSING_SOURCE_NONE = 'none';
    const LICENSING_SOURCE_ACCOUNT = 'account';
    const LICENSING_SOURCE_MSDN = 'msdn';
    const LICENSING_SOURCE_PROFILE = 'profile';
    const LICENSING_SOURCE_AUTO = 'auto';
    const LICENSING_SOURCE_TRIAL = 'trial';
    const MSDN_LICENSE_TYPE_NONE = 'none';
    const MSDN_LICENSE_TYPE_ELIGIBLE = 'eligible';
    const MSDN_LICENSE_TYPE_PROFESSIONAL = 'professional';
    const MSDN_LICENSE_TYPE_PLATFORMS = 'platforms';
    const MSDN_LICENSE_TYPE_TEST_PROFESSIONAL = 'testProfessional';
    const MSDN_LICENSE_TYPE_PREMIUM = 'premium';
    const MSDN_LICENSE_TYPE_ULTIMATE = 'ultimate';
    const MSDN_LICENSE_TYPE_ENTERPRISE = 'enterprise';
    const STATUS_NONE = 'none';
    const STATUS_ACTIVE = 'active';
    const STATUS_DISABLED = 'disabled';
    const STATUS_DELETED = 'deleted';
    const STATUS_PENDING = 'pending';
    const STATUS_EXPIRED = 'expired';
    const STATUS_PENDING_DISABLED = 'pendingDisabled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountLicenseTypeAllowableValues()
    {
        return [
            self::ACCOUNT_LICENSE_TYPE_NONE,
            self::ACCOUNT_LICENSE_TYPE_EARLY_ADOPTER,
            self::ACCOUNT_LICENSE_TYPE_EXPRESS,
            self::ACCOUNT_LICENSE_TYPE_PROFESSIONAL,
            self::ACCOUNT_LICENSE_TYPE_ADVANCED,
            self::ACCOUNT_LICENSE_TYPE_STAKEHOLDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignmentSourceAllowableValues()
    {
        return [
            self::ASSIGNMENT_SOURCE_NONE,
            self::ASSIGNMENT_SOURCE_UNKNOWN,
            self::ASSIGNMENT_SOURCE_GROUP_RULE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLicensingSourceAllowableValues()
    {
        return [
            self::LICENSING_SOURCE_NONE,
            self::LICENSING_SOURCE_ACCOUNT,
            self::LICENSING_SOURCE_MSDN,
            self::LICENSING_SOURCE_PROFILE,
            self::LICENSING_SOURCE_AUTO,
            self::LICENSING_SOURCE_TRIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMsdnLicenseTypeAllowableValues()
    {
        return [
            self::MSDN_LICENSE_TYPE_NONE,
            self::MSDN_LICENSE_TYPE_ELIGIBLE,
            self::MSDN_LICENSE_TYPE_PROFESSIONAL,
            self::MSDN_LICENSE_TYPE_PLATFORMS,
            self::MSDN_LICENSE_TYPE_TEST_PROFESSIONAL,
            self::MSDN_LICENSE_TYPE_PREMIUM,
            self::MSDN_LICENSE_TYPE_ULTIMATE,
            self::MSDN_LICENSE_TYPE_ENTERPRISE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
            self::STATUS_DELETED,
            self::STATUS_PENDING,
            self::STATUS_EXPIRED,
            self::STATUS_PENDING_DISABLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountLicenseType'] = isset($data['accountLicenseType']) ? $data['accountLicenseType'] : null;
        $this->container['assignmentSource'] = isset($data['assignmentSource']) ? $data['assignmentSource'] : null;
        $this->container['licenseDisplayName'] = isset($data['licenseDisplayName']) ? $data['licenseDisplayName'] : null;
        $this->container['licensingSource'] = isset($data['licensingSource']) ? $data['licensingSource'] : null;
        $this->container['msdnLicenseType'] = isset($data['msdnLicenseType']) ? $data['msdnLicenseType'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusMessage'] = isset($data['statusMessage']) ? $data['statusMessage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountLicenseTypeAllowableValues();
        if (!is_null($this->container['accountLicenseType']) && !in_array($this->container['accountLicenseType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accountLicenseType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAssignmentSourceAllowableValues();
        if (!is_null($this->container['assignmentSource']) && !in_array($this->container['assignmentSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'assignmentSource', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLicensingSourceAllowableValues();
        if (!is_null($this->container['licensingSource']) && !in_array($this->container['licensingSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'licensingSource', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMsdnLicenseTypeAllowableValues();
        if (!is_null($this->container['msdnLicenseType']) && !in_array($this->container['msdnLicenseType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'msdnLicenseType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountLicenseType
     *
     * @return string
     */
    public function getAccountLicenseType()
    {
        return $this->container['accountLicenseType'];
    }

    /**
     * Sets accountLicenseType
     *
     * @param string $accountLicenseType Type of Account License (e.g. Express, Stakeholder etc.)
     *
     * @return $this
     */
    public function setAccountLicenseType($accountLicenseType)
    {
        $allowedValues = $this->getAccountLicenseTypeAllowableValues();
        if (!is_null($accountLicenseType) && !in_array($accountLicenseType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accountLicenseType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountLicenseType'] = $accountLicenseType;

        return $this;
    }

    /**
     * Gets assignmentSource
     *
     * @return string
     */
    public function getAssignmentSource()
    {
        return $this->container['assignmentSource'];
    }

    /**
     * Sets assignmentSource
     *
     * @param string $assignmentSource Assignment Source of the License (e.g. Group, Unknown etc.
     *
     * @return $this
     */
    public function setAssignmentSource($assignmentSource)
    {
        $allowedValues = $this->getAssignmentSourceAllowableValues();
        if (!is_null($assignmentSource) && !in_array($assignmentSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'assignmentSource', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assignmentSource'] = $assignmentSource;

        return $this;
    }

    /**
     * Gets licenseDisplayName
     *
     * @return string
     */
    public function getLicenseDisplayName()
    {
        return $this->container['licenseDisplayName'];
    }

    /**
     * Sets licenseDisplayName
     *
     * @param string $licenseDisplayName Display name of the License
     *
     * @return $this
     */
    public function setLicenseDisplayName($licenseDisplayName)
    {
        $this->container['licenseDisplayName'] = $licenseDisplayName;

        return $this;
    }

    /**
     * Gets licensingSource
     *
     * @return string
     */
    public function getLicensingSource()
    {
        return $this->container['licensingSource'];
    }

    /**
     * Sets licensingSource
     *
     * @param string $licensingSource Licensing Source (e.g. Account. MSDN etc.)
     *
     * @return $this
     */
    public function setLicensingSource($licensingSource)
    {
        $allowedValues = $this->getLicensingSourceAllowableValues();
        if (!is_null($licensingSource) && !in_array($licensingSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'licensingSource', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['licensingSource'] = $licensingSource;

        return $this;
    }

    /**
     * Gets msdnLicenseType
     *
     * @return string
     */
    public function getMsdnLicenseType()
    {
        return $this->container['msdnLicenseType'];
    }

    /**
     * Sets msdnLicenseType
     *
     * @param string $msdnLicenseType Type of MSDN License (e.g. Visual Studio Professional, Visual Studio Enterprise etc.)
     *
     * @return $this
     */
    public function setMsdnLicenseType($msdnLicenseType)
    {
        $allowedValues = $this->getMsdnLicenseTypeAllowableValues();
        if (!is_null($msdnLicenseType) && !in_array($msdnLicenseType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'msdnLicenseType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['msdnLicenseType'] = $msdnLicenseType;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status User status in the account
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusMessage
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['statusMessage'];
    }

    /**
     * Sets statusMessage
     *
     * @param string $statusMessage Status message.
     *
     * @return $this
     */
    public function setStatusMessage($statusMessage)
    {
        $this->container['statusMessage'] = $statusMessage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


