<?php
/**
 * CheckTemplateExistenceResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Processadmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTrackingProcessTemplate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Processadmin\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Processadmin\ObjectSerializer;

/**
 * CheckTemplateExistenceResult Class Doc Comment
 *
 * @category Class
 * @description Describes result of a check template existence request.
 * @package  FrankHouweling\AzureDevOpsClient\Processadmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckTemplateExistenceResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckTemplateExistenceResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doesTemplateExist' => 'bool',
        'existingTemplateName' => 'string',
        'existingTemplateTypeId' => 'string',
        'requestedTemplateName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doesTemplateExist' => null,
        'existingTemplateName' => null,
        'existingTemplateTypeId' => 'uuid',
        'requestedTemplateName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doesTemplateExist' => 'doesTemplateExist',
        'existingTemplateName' => 'existingTemplateName',
        'existingTemplateTypeId' => 'existingTemplateTypeId',
        'requestedTemplateName' => 'requestedTemplateName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doesTemplateExist' => 'setDoesTemplateExist',
        'existingTemplateName' => 'setExistingTemplateName',
        'existingTemplateTypeId' => 'setExistingTemplateTypeId',
        'requestedTemplateName' => 'setRequestedTemplateName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doesTemplateExist' => 'getDoesTemplateExist',
        'existingTemplateName' => 'getExistingTemplateName',
        'existingTemplateTypeId' => 'getExistingTemplateTypeId',
        'requestedTemplateName' => 'getRequestedTemplateName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doesTemplateExist'] = isset($data['doesTemplateExist']) ? $data['doesTemplateExist'] : null;
        $this->container['existingTemplateName'] = isset($data['existingTemplateName']) ? $data['existingTemplateName'] : null;
        $this->container['existingTemplateTypeId'] = isset($data['existingTemplateTypeId']) ? $data['existingTemplateTypeId'] : null;
        $this->container['requestedTemplateName'] = isset($data['requestedTemplateName']) ? $data['requestedTemplateName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doesTemplateExist
     *
     * @return bool
     */
    public function getDoesTemplateExist()
    {
        return $this->container['doesTemplateExist'];
    }

    /**
     * Sets doesTemplateExist
     *
     * @param bool $doesTemplateExist Indicates whether a template exists.
     *
     * @return $this
     */
    public function setDoesTemplateExist($doesTemplateExist)
    {
        $this->container['doesTemplateExist'] = $doesTemplateExist;

        return $this;
    }

    /**
     * Gets existingTemplateName
     *
     * @return string
     */
    public function getExistingTemplateName()
    {
        return $this->container['existingTemplateName'];
    }

    /**
     * Sets existingTemplateName
     *
     * @param string $existingTemplateName The name of the existing template.
     *
     * @return $this
     */
    public function setExistingTemplateName($existingTemplateName)
    {
        $this->container['existingTemplateName'] = $existingTemplateName;

        return $this;
    }

    /**
     * Gets existingTemplateTypeId
     *
     * @return string
     */
    public function getExistingTemplateTypeId()
    {
        return $this->container['existingTemplateTypeId'];
    }

    /**
     * Sets existingTemplateTypeId
     *
     * @param string $existingTemplateTypeId The existing template type identifier.
     *
     * @return $this
     */
    public function setExistingTemplateTypeId($existingTemplateTypeId)
    {
        $this->container['existingTemplateTypeId'] = $existingTemplateTypeId;

        return $this;
    }

    /**
     * Gets requestedTemplateName
     *
     * @return string
     */
    public function getRequestedTemplateName()
    {
        return $this->container['requestedTemplateName'];
    }

    /**
     * Sets requestedTemplateName
     *
     * @param string $requestedTemplateName The name of the requested template.
     *
     * @return $this
     */
    public function setRequestedTemplateName($requestedTemplateName)
    {
        $this->container['requestedTemplateName'] = $requestedTemplateName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


