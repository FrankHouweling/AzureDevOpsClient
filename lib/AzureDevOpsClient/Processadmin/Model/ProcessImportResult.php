<?php
/**
 * ProcessImportResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Processadmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorkItemTrackingProcessTemplate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Processadmin\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Processadmin\ObjectSerializer;

/**
 * ProcessImportResult Class Doc Comment
 *
 * @category Class
 * @description Describes the result of a Process Import request.
 * @package  FrankHouweling\AzureDevOpsClient\Processadmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessImportResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessImportResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checkExistenceResult' => '\FrankHouweling\AzureDevOpsClient\Processadmin\Model\CheckTemplateExistenceResult',
        'helpUrl' => 'string',
        'id' => 'string',
        'isNew' => 'bool',
        'promoteJobId' => 'string',
        'validationResults' => '\FrankHouweling\AzureDevOpsClient\Processadmin\Model\ValidationIssue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checkExistenceResult' => null,
        'helpUrl' => null,
        'id' => 'uuid',
        'isNew' => null,
        'promoteJobId' => 'uuid',
        'validationResults' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkExistenceResult' => 'checkExistenceResult',
        'helpUrl' => 'helpUrl',
        'id' => 'id',
        'isNew' => 'isNew',
        'promoteJobId' => 'promoteJobId',
        'validationResults' => 'validationResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkExistenceResult' => 'setCheckExistenceResult',
        'helpUrl' => 'setHelpUrl',
        'id' => 'setId',
        'isNew' => 'setIsNew',
        'promoteJobId' => 'setPromoteJobId',
        'validationResults' => 'setValidationResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkExistenceResult' => 'getCheckExistenceResult',
        'helpUrl' => 'getHelpUrl',
        'id' => 'getId',
        'isNew' => 'getIsNew',
        'promoteJobId' => 'getPromoteJobId',
        'validationResults' => 'getValidationResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checkExistenceResult'] = isset($data['checkExistenceResult']) ? $data['checkExistenceResult'] : null;
        $this->container['helpUrl'] = isset($data['helpUrl']) ? $data['helpUrl'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isNew'] = isset($data['isNew']) ? $data['isNew'] : null;
        $this->container['promoteJobId'] = isset($data['promoteJobId']) ? $data['promoteJobId'] : null;
        $this->container['validationResults'] = isset($data['validationResults']) ? $data['validationResults'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checkExistenceResult
     *
     * @return \FrankHouweling\AzureDevOpsClient\Processadmin\Model\CheckTemplateExistenceResult
     */
    public function getCheckExistenceResult()
    {
        return $this->container['checkExistenceResult'];
    }

    /**
     * Sets checkExistenceResult
     *
     * @param \FrankHouweling\AzureDevOpsClient\Processadmin\Model\CheckTemplateExistenceResult $checkExistenceResult Check template existence result.
     *
     * @return $this
     */
    public function setCheckExistenceResult($checkExistenceResult)
    {
        $this->container['checkExistenceResult'] = $checkExistenceResult;

        return $this;
    }

    /**
     * Gets helpUrl
     *
     * @return string
     */
    public function getHelpUrl()
    {
        return $this->container['helpUrl'];
    }

    /**
     * Sets helpUrl
     *
     * @param string $helpUrl Help URL.
     *
     * @return $this
     */
    public function setHelpUrl($helpUrl)
    {
        $this->container['helpUrl'] = $helpUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the import operation.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isNew
     *
     * @return bool
     */
    public function getIsNew()
    {
        return $this->container['isNew'];
    }

    /**
     * Sets isNew
     *
     * @param bool $isNew Whether this imported process is new.
     *
     * @return $this
     */
    public function setIsNew($isNew)
    {
        $this->container['isNew'] = $isNew;

        return $this;
    }

    /**
     * Gets promoteJobId
     *
     * @return string
     */
    public function getPromoteJobId()
    {
        return $this->container['promoteJobId'];
    }

    /**
     * Sets promoteJobId
     *
     * @param string $promoteJobId The promote job identifier.
     *
     * @return $this
     */
    public function setPromoteJobId($promoteJobId)
    {
        $this->container['promoteJobId'] = $promoteJobId;

        return $this;
    }

    /**
     * Gets validationResults
     *
     * @return \FrankHouweling\AzureDevOpsClient\Processadmin\Model\ValidationIssue[]
     */
    public function getValidationResults()
    {
        return $this->container['validationResults'];
    }

    /**
     * Sets validationResults
     *
     * @param \FrankHouweling\AzureDevOpsClient\Processadmin\Model\ValidationIssue[] $validationResults The list of validation results.
     *
     * @return $this
     */
    public function setValidationResults($validationResults)
    {
        $this->container['validationResults'] = $validationResults;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


