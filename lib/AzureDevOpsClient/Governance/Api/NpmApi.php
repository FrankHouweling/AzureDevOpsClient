<?php
/**
 * NpmApi
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Governance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Npm
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Governance\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FrankHouweling\AzureDevOpsClient\Governance\ApiException;
use FrankHouweling\AzureDevOpsClient\Governance\Configuration;
use FrankHouweling\AzureDevOpsClient\Governance\HeaderSelector;
use FrankHouweling\AzureDevOpsClient\Governance\ObjectSerializer;

/**
 * NpmApi Class Doc Comment
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Governance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NpmApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation npmDeletePackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function npmDeletePackageVersionFromRecycleBin($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $this->npmDeletePackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
    }

    /**
     * Operation npmDeletePackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmDeletePackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmDeletePackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation npmDeletePackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDeletePackageVersionFromRecycleBinAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmDeletePackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmDeletePackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDeletePackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmDeletePackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmDeletePackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmDeletePackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmDeletePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmDeletePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmDeletePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmDeletePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmDeletePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmDeletePackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmDeleteScopedPackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function npmDeleteScopedPackageVersionFromRecycleBin($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $this->npmDeleteScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
    }

    /**
     * Operation npmDeleteScopedPackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmDeleteScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmDeleteScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation npmDeleteScopedPackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDeleteScopedPackageVersionFromRecycleBinAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmDeleteScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmDeleteScopedPackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDeleteScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmDeleteScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmDeleteScopedPackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmDeleteScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmDeleteScopedPackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmDownloadPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function npmDownloadPackage($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmDownloadPackageWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmDownloadPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmDownloadPackageWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmDownloadPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmDownloadPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDownloadPackageAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmDownloadPackageAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmDownloadPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDownloadPackageAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmDownloadPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmDownloadPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmDownloadPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmDownloadPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmDownloadPackage'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmDownloadPackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmDownloadPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmDownloadPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmDownloadPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/packages/{packageName}/versions/{packageVersion}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmDownloadScopedPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function npmDownloadScopedPackage($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmDownloadScopedPackageWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmDownloadScopedPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmDownloadScopedPackageWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmDownloadScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmDownloadScopedPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDownloadScopedPackageAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmDownloadScopedPackageAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmDownloadScopedPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmDownloadScopedPackageAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmDownloadScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmDownloadScopedPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmDownloadScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmDownloadScopedPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmDownloadScopedPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/packages/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetPackageReadme
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function npmGetPackageReadme($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetPackageReadmeWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetPackageReadmeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetPackageReadmeWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmGetPackageReadmeRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetPackageReadmeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageReadmeAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetPackageReadmeAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetPackageReadmeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageReadmeAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmGetPackageReadmeRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetPackageReadme'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetPackageReadmeRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetPackageReadme'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetPackageReadme'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmGetPackageReadme'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetPackageReadme'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetPackageReadme'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetPackageReadme'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/packages/{packageName}/versions/{packageVersion}/readme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetPackageVersion
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmGetPackageVersion($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetPackageVersionWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetPackageVersionWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetPackageVersionWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmGetPackageVersionRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetPackageVersionAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageVersionAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetPackageVersionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmGetPackageVersionRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetPackageVersion'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetPackageVersionRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetPackageVersion'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetPackageVersion'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmGetPackageVersion'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetPackageVersion'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetPackageVersion'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetPackageVersion'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetPackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState
     */
    public function npmGetPackageVersionFromRecycleBin($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetPackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState';
        $request = $this->npmGetPackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetPackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageVersionFromRecycleBinAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetPackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState';
        $request = $this->npmGetPackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetPackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetPackageVersionFromRecycleBinRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmGetPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetPackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetScopedPackageReadme
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope\\name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope\\name) (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function npmGetScopedPackageReadme($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetScopedPackageReadmeWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetScopedPackageReadmeWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope\\name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope\\name) (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetScopedPackageReadmeWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmGetScopedPackageReadmeRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetScopedPackageReadmeAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope\\name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope\\name) (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageReadmeAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetScopedPackageReadmeAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetScopedPackageReadmeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope\\name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope\\name) (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageReadmeAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = 'string';
        $request = $this->npmGetScopedPackageReadmeRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetScopedPackageReadme'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope\\name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope\\name) (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetScopedPackageReadmeRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetScopedPackageReadme'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetScopedPackageReadme'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/packages/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}/readme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetScopedPackageVersion
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmGetScopedPackageVersion($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetScopedPackageVersionWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetScopedPackageVersionWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetScopedPackageVersionWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmGetScopedPackageVersionRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetScopedPackageVersionAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageVersionAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetScopedPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetScopedPackageVersionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageVersionAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmGetScopedPackageVersionRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetScopedPackageVersion'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetScopedPackageVersionRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetScopedPackageVersion'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetScopedPackageVersion'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmGetScopedPackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState
     */
    public function npmGetScopedPackageVersionFromRecycleBin($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmGetScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmGetScopedPackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmGetScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState';
        $request = $this->npmGetScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmGetScopedPackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageVersionFromRecycleBinAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmGetScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmGetScopedPackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmGetScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackageVersionDeletionState';
        $request = $this->npmGetScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmGetScopedPackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name) (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmGetScopedPackageVersionFromRecycleBinRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmGetScopedPackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmRestorePackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function npmRestorePackageVersionFromRecycleBin($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $this->npmRestorePackageVersionFromRecycleBinWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);
    }

    /**
     * Operation npmRestorePackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmRestorePackageVersionFromRecycleBinWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmRestorePackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation npmRestorePackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmRestorePackageVersionFromRecycleBinAsync($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmRestorePackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmRestorePackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmRestorePackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmRestorePackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmRestorePackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmRestorePackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmRestorePackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmRestorePackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmRestoreScopedPackageVersionFromRecycleBin
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function npmRestoreScopedPackageVersionFromRecycleBin($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $this->npmRestoreScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
    }

    /**
     * Operation npmRestoreScopedPackageVersionFromRecycleBinWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmRestoreScopedPackageVersionFromRecycleBinWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmRestoreScopedPackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation npmRestoreScopedPackageVersionFromRecycleBinAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmRestoreScopedPackageVersionFromRecycleBinAsync($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmRestoreScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmRestoreScopedPackageVersionFromRecycleBinAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmRestoreScopedPackageVersionFromRecycleBinAsyncWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmRestoreScopedPackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmRestoreScopedPackageVersionFromRecycleBin'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmRecycleBinPackageVersionDetails $body  (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmRestoreScopedPackageVersionFromRecycleBinRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmRestoreScopedPackageVersionFromRecycleBin'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/RecycleBin/packages/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmUnpublishPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmUnpublishPackage($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmUnpublishPackageWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmUnpublishPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmUnpublishPackageWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUnpublishPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmUnpublishPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUnpublishPackageAsync($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmUnpublishPackageAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmUnpublishPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUnpublishPackageAsyncWithHttpInfo($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUnpublishPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmUnpublishPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageName Name of the package. (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmUnpublishPackageRequest($organization, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmUnpublishPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmUnpublishPackage'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmUnpublishPackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmUnpublishPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmUnpublishPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmUnpublishPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmUnpublishScopedPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmUnpublishScopedPackage($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmUnpublishScopedPackageWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmUnpublishScopedPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmUnpublishScopedPackageWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUnpublishScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmUnpublishScopedPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUnpublishScopedPackageAsync($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmUnpublishScopedPackageAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmUnpublishScopedPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUnpublishScopedPackageAsyncWithHttpInfo($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUnpublishScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmUnpublishScopedPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $packageScope Scope of the package (the &#39;scope&#39; part of @scope/name). (required)
     * @param  string $unscopedPackageName Name of the package (the &#39;name&#39; part of @scope/name). (required)
     * @param  string $packageVersion Version of the package. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmUnpublishScopedPackageRequest($organization, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmUnpublishScopedPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmUnpublishScopedPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmUpdatePackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmUpdatePackage($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmUpdatePackageWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmUpdatePackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmUpdatePackageWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUpdatePackageRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmUpdatePackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdatePackageAsync($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmUpdatePackageAsyncWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmUpdatePackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdatePackageAsyncWithHttpInfo($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUpdatePackageRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmUpdatePackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmUpdatePackageRequest($organization, $body, $feedId, $packageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'packageName' is set
        if ($packageName === null || (is_array($packageName) && count($packageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageName when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmUpdatePackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmUpdatePackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/{packageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageName !== null) {
            $resourcePath = str_replace(
                '{' . 'packageName' . '}',
                ObjectSerializer::toPathValue($packageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmUpdatePackages
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackagesBatchRequest $body Information about the packages to update, the operation to perform, and its associated data. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function npmUpdatePackages($organization, $body, $feedId, $project, $apiVersion)
    {
        $this->npmUpdatePackagesWithHttpInfo($organization, $body, $feedId, $project, $apiVersion);
    }

    /**
     * Operation npmUpdatePackagesWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackagesBatchRequest $body Information about the packages to update, the operation to perform, and its associated data. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmUpdatePackagesWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmUpdatePackagesRequest($organization, $body, $feedId, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation npmUpdatePackagesAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackagesBatchRequest $body Information about the packages to update, the operation to perform, and its associated data. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdatePackagesAsync($organization, $body, $feedId, $project, $apiVersion)
    {
        return $this->npmUpdatePackagesAsyncWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmUpdatePackagesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackagesBatchRequest $body Information about the packages to update, the operation to perform, and its associated data. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdatePackagesAsyncWithHttpInfo($organization, $body, $feedId, $project, $apiVersion)
    {
        $returnType = '';
        $request = $this->npmUpdatePackagesRequest($organization, $body, $feedId, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmUpdatePackages'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\NpmPackagesBatchRequest $body Information about the packages to update, the operation to perform, and its associated data. (required)
     * @param  string $feedId Name or ID of the feed. (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmUpdatePackagesRequest($organization, $body, $feedId, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmUpdatePackages'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling npmUpdatePackages'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmUpdatePackages'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmUpdatePackages'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmUpdatePackages'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/packagesbatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation npmUpdateScopedPackage
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FrankHouweling\AzureDevOpsClient\Governance\Model\Package
     */
    public function npmUpdateScopedPackage($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        list($response) = $this->npmUpdateScopedPackageWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);
        return $response;
    }

    /**
     * Operation npmUpdateScopedPackageWithHttpInfo
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \FrankHouweling\AzureDevOpsClient\Governance\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FrankHouweling\AzureDevOpsClient\Governance\Model\Package, HTTP status code, HTTP response headers (array of strings)
     */
    public function npmUpdateScopedPackageWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUpdateScopedPackageRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation npmUpdateScopedPackageAsync
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdateScopedPackageAsync($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        return $this->npmUpdateScopedPackageAsyncWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation npmUpdateScopedPackageAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function npmUpdateScopedPackageAsyncWithHttpInfo($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        $returnType = '\FrankHouweling\AzureDevOpsClient\Governance\Model\Package';
        $request = $this->npmUpdateScopedPackageRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'npmUpdateScopedPackage'
     *
     * @param  string $organization The name of the Azure DevOps organization. (required)
     * @param  \FrankHouweling\AzureDevOpsClient\Governance\Model\PackageVersionDetails $body  (required)
     * @param  string $feedId  (required)
     * @param  string $packageScope  (required)
     * @param  string $unscopedPackageName  (required)
     * @param  string $packageVersion  (required)
     * @param  string $project Project ID or project name (required)
     * @param  string $apiVersion Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function npmUpdateScopedPackageRequest($organization, $body, $feedId, $packageScope, $unscopedPackageName, $packageVersion, $project, $apiVersion)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'packageScope' is set
        if ($packageScope === null || (is_array($packageScope) && count($packageScope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageScope when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'unscopedPackageName' is set
        if ($unscopedPackageName === null || (is_array($unscopedPackageName) && count($unscopedPackageName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unscopedPackageName when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'packageVersion' is set
        if ($packageVersion === null || (is_array($packageVersion) && count($packageVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageVersion when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling npmUpdateScopedPackage'
            );
        }
        // verify the required parameter 'apiVersion' is set
        if ($apiVersion === null || (is_array($apiVersion) && count($apiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiVersion when calling npmUpdateScopedPackage'
            );
        }

        $resourcePath = '/{organization}/{project}/_apis/packaging/feeds/{feedId}/npm/@{packageScope}/{unscopedPackageName}/versions/{packageVersion}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($apiVersion !== null) {
            $queryParams['api-version'] = ObjectSerializer::toQueryValue($apiVersion);
        }

        // path params
        if ($organization !== null) {
            $resourcePath = str_replace(
                '{' . 'organization' . '}',
                ObjectSerializer::toPathValue($organization),
                $resourcePath
            );
        }
        // path params
        if ($feedId !== null) {
            $resourcePath = str_replace(
                '{' . 'feedId' . '}',
                ObjectSerializer::toPathValue($feedId),
                $resourcePath
            );
        }
        // path params
        if ($packageScope !== null) {
            $resourcePath = str_replace(
                '{' . 'packageScope' . '}',
                ObjectSerializer::toPathValue($packageScope),
                $resourcePath
            );
        }
        // path params
        if ($unscopedPackageName !== null) {
            $resourcePath = str_replace(
                '{' . 'unscopedPackageName' . '}',
                ObjectSerializer::toPathValue($unscopedPackageName),
                $resourcePath
            );
        }
        // path params
        if ($packageVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'packageVersion' . '}',
                ObjectSerializer::toPathValue($packageVersion),
                $resourcePath
            );
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                '{' . 'project' . '}',
                ObjectSerializer::toPathValue($project),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
