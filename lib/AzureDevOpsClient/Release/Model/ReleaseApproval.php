<?php
/**
 * ReleaseApproval
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ReleaseApproval Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseApproval implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseApproval';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approvalType' => 'string',
        'approvedBy' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'approver' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'attempt' => 'int',
        'comments' => 'string',
        'createdOn' => '\DateTime',
        'history' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApprovalHistory[]',
        'id' => 'int',
        'isAutomated' => 'bool',
        'modifiedOn' => '\DateTime',
        'rank' => 'int',
        'release' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseShallowReference',
        'releaseDefinition' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference',
        'releaseEnvironment' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference',
        'revision' => 'int',
        'status' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'approvalType' => null,
        'approvedBy' => null,
        'approver' => null,
        'attempt' => 'int32',
        'comments' => null,
        'createdOn' => 'date-time',
        'history' => null,
        'id' => 'int32',
        'isAutomated' => null,
        'modifiedOn' => 'date-time',
        'rank' => 'int32',
        'release' => null,
        'releaseDefinition' => null,
        'releaseEnvironment' => null,
        'revision' => 'int32',
        'status' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approvalType' => 'approvalType',
        'approvedBy' => 'approvedBy',
        'approver' => 'approver',
        'attempt' => 'attempt',
        'comments' => 'comments',
        'createdOn' => 'createdOn',
        'history' => 'history',
        'id' => 'id',
        'isAutomated' => 'isAutomated',
        'modifiedOn' => 'modifiedOn',
        'rank' => 'rank',
        'release' => 'release',
        'releaseDefinition' => 'releaseDefinition',
        'releaseEnvironment' => 'releaseEnvironment',
        'revision' => 'revision',
        'status' => 'status',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approvalType' => 'setApprovalType',
        'approvedBy' => 'setApprovedBy',
        'approver' => 'setApprover',
        'attempt' => 'setAttempt',
        'comments' => 'setComments',
        'createdOn' => 'setCreatedOn',
        'history' => 'setHistory',
        'id' => 'setId',
        'isAutomated' => 'setIsAutomated',
        'modifiedOn' => 'setModifiedOn',
        'rank' => 'setRank',
        'release' => 'setRelease',
        'releaseDefinition' => 'setReleaseDefinition',
        'releaseEnvironment' => 'setReleaseEnvironment',
        'revision' => 'setRevision',
        'status' => 'setStatus',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approvalType' => 'getApprovalType',
        'approvedBy' => 'getApprovedBy',
        'approver' => 'getApprover',
        'attempt' => 'getAttempt',
        'comments' => 'getComments',
        'createdOn' => 'getCreatedOn',
        'history' => 'getHistory',
        'id' => 'getId',
        'isAutomated' => 'getIsAutomated',
        'modifiedOn' => 'getModifiedOn',
        'rank' => 'getRank',
        'release' => 'getRelease',
        'releaseDefinition' => 'getReleaseDefinition',
        'releaseEnvironment' => 'getReleaseEnvironment',
        'revision' => 'getRevision',
        'status' => 'getStatus',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPROVAL_TYPE_UNDEFINED = 'undefined';
    const APPROVAL_TYPE_PRE_DEPLOY = 'preDeploy';
    const APPROVAL_TYPE_POST_DEPLOY = 'postDeploy';
    const APPROVAL_TYPE_ALL = 'all';
    const STATUS_UNDEFINED = 'undefined';
    const STATUS_PENDING = 'pending';
    const STATUS_APPROVED = 'approved';
    const STATUS_REJECTED = 'rejected';
    const STATUS_REASSIGNED = 'reassigned';
    const STATUS_CANCELED = 'canceled';
    const STATUS_SKIPPED = 'skipped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalTypeAllowableValues()
    {
        return [
            self::APPROVAL_TYPE_UNDEFINED,
            self::APPROVAL_TYPE_PRE_DEPLOY,
            self::APPROVAL_TYPE_POST_DEPLOY,
            self::APPROVAL_TYPE_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDEFINED,
            self::STATUS_PENDING,
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_REASSIGNED,
            self::STATUS_CANCELED,
            self::STATUS_SKIPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approvalType'] = isset($data['approvalType']) ? $data['approvalType'] : null;
        $this->container['approvedBy'] = isset($data['approvedBy']) ? $data['approvedBy'] : null;
        $this->container['approver'] = isset($data['approver']) ? $data['approver'] : null;
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['isAutomated'] = isset($data['isAutomated']) ? $data['isAutomated'] : null;
        $this->container['modifiedOn'] = isset($data['modifiedOn']) ? $data['modifiedOn'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['releaseDefinition'] = isset($data['releaseDefinition']) ? $data['releaseDefinition'] : null;
        $this->container['releaseEnvironment'] = isset($data['releaseEnvironment']) ? $data['releaseEnvironment'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($this->container['approvalType']) && !in_array($this->container['approvalType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approvalType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approvalType
     *
     * @return string
     */
    public function getApprovalType()
    {
        return $this->container['approvalType'];
    }

    /**
     * Sets approvalType
     *
     * @param string $approvalType Gets or sets the type of approval.
     *
     * @return $this
     */
    public function setApprovalType($approvalType)
    {
        $allowedValues = $this->getApprovalTypeAllowableValues();
        if (!is_null($approvalType) && !in_array($approvalType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approvalType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approvalType'] = $approvalType;

        return $this;
    }

    /**
     * Gets approvedBy
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getApprovedBy()
    {
        return $this->container['approvedBy'];
    }

    /**
     * Sets approvedBy
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $approvedBy Gets the identity who approved.
     *
     * @return $this
     */
    public function setApprovedBy($approvedBy)
    {
        $this->container['approvedBy'] = $approvedBy;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $approver Gets or sets the identity who should approve.
     *
     * @return $this
     */
    public function setApprover($approver)
    {
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets attempt
     *
     * @return int
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int $attempt Gets or sets attempt which specifies as which deployment attempt it belongs.
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments Gets or sets comments for approval.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn Gets date on which it got created.
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApprovalHistory[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApprovalHistory[] $history Gets history which specifies all approvals associated with this approval.
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Gets the unique identifier of this field.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isAutomated
     *
     * @return bool
     */
    public function getIsAutomated()
    {
        return $this->container['isAutomated'];
    }

    /**
     * Sets isAutomated
     *
     * @param bool $isAutomated Gets or sets as approval is automated or not.
     *
     * @return $this
     */
    public function setIsAutomated($isAutomated)
    {
        $this->container['isAutomated'] = $isAutomated;

        return $this;
    }

    /**
     * Gets modifiedOn
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modifiedOn'];
    }

    /**
     * Sets modifiedOn
     *
     * @param \DateTime $modifiedOn Gets date on which it got modified.
     *
     * @return $this
     */
    public function setModifiedOn($modifiedOn)
    {
        $this->container['modifiedOn'] = $modifiedOn;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank Gets or sets rank which specifies the order of the approval. e.g. Same rank denotes parallel approval.
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseShallowReference
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseShallowReference $release Gets releaseReference which specifies the reference of the release to which this approval is associated.
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets releaseDefinition
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference
     */
    public function getReleaseDefinition()
    {
        return $this->container['releaseDefinition'];
    }

    /**
     * Sets releaseDefinition
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference $releaseDefinition Gets releaseDefinitionReference which specifies the reference of the release definition to which this approval is associated.
     *
     * @return $this
     */
    public function setReleaseDefinition($releaseDefinition)
    {
        $this->container['releaseDefinition'] = $releaseDefinition;

        return $this;
    }

    /**
     * Gets releaseEnvironment
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference
     */
    public function getReleaseEnvironment()
    {
        return $this->container['releaseEnvironment'];
    }

    /**
     * Sets releaseEnvironment
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference $releaseEnvironment Gets releaseEnvironmentReference which specifies the reference of the release environment to which this approval is associated.
     *
     * @return $this
     */
    public function setReleaseEnvironment($releaseEnvironment)
    {
        $this->container['releaseEnvironment'] = $releaseEnvironment;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision Gets the revision number.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Gets or sets the status of the approval.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Gets url to access the approval.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


