<?php
/**
 * ArtifactContributionDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ArtifactContributionDefinition Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArtifactContributionDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArtifactContributionDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'artifactTriggerConfiguration' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ArtifactTriggerConfiguration',
        'artifactType' => 'string',
        'artifactTypeStreamMapping' => 'map[string,string]',
        'browsableArtifactTypeMapping' => 'map[string,string]',
        'dataSourceBindings' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DataSourceBinding[]',
        'displayName' => 'string',
        'downloadTaskId' => 'string',
        'endpointTypeId' => 'string',
        'inputDescriptors' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\InputDescriptor[]',
        'isCommitsTraceabilitySupported' => 'bool',
        'isWorkitemsTraceabilitySupported' => 'bool',
        'name' => 'string',
        'taskInputMapping' => 'map[string,string]',
        'uniqueSourceIdentifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'artifactTriggerConfiguration' => null,
        'artifactType' => null,
        'artifactTypeStreamMapping' => null,
        'browsableArtifactTypeMapping' => null,
        'dataSourceBindings' => null,
        'displayName' => null,
        'downloadTaskId' => null,
        'endpointTypeId' => null,
        'inputDescriptors' => null,
        'isCommitsTraceabilitySupported' => null,
        'isWorkitemsTraceabilitySupported' => null,
        'name' => null,
        'taskInputMapping' => null,
        'uniqueSourceIdentifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artifactTriggerConfiguration' => 'artifactTriggerConfiguration',
        'artifactType' => 'artifactType',
        'artifactTypeStreamMapping' => 'artifactTypeStreamMapping',
        'browsableArtifactTypeMapping' => 'browsableArtifactTypeMapping',
        'dataSourceBindings' => 'dataSourceBindings',
        'displayName' => 'displayName',
        'downloadTaskId' => 'downloadTaskId',
        'endpointTypeId' => 'endpointTypeId',
        'inputDescriptors' => 'inputDescriptors',
        'isCommitsTraceabilitySupported' => 'isCommitsTraceabilitySupported',
        'isWorkitemsTraceabilitySupported' => 'isWorkitemsTraceabilitySupported',
        'name' => 'name',
        'taskInputMapping' => 'taskInputMapping',
        'uniqueSourceIdentifier' => 'uniqueSourceIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artifactTriggerConfiguration' => 'setArtifactTriggerConfiguration',
        'artifactType' => 'setArtifactType',
        'artifactTypeStreamMapping' => 'setArtifactTypeStreamMapping',
        'browsableArtifactTypeMapping' => 'setBrowsableArtifactTypeMapping',
        'dataSourceBindings' => 'setDataSourceBindings',
        'displayName' => 'setDisplayName',
        'downloadTaskId' => 'setDownloadTaskId',
        'endpointTypeId' => 'setEndpointTypeId',
        'inputDescriptors' => 'setInputDescriptors',
        'isCommitsTraceabilitySupported' => 'setIsCommitsTraceabilitySupported',
        'isWorkitemsTraceabilitySupported' => 'setIsWorkitemsTraceabilitySupported',
        'name' => 'setName',
        'taskInputMapping' => 'setTaskInputMapping',
        'uniqueSourceIdentifier' => 'setUniqueSourceIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artifactTriggerConfiguration' => 'getArtifactTriggerConfiguration',
        'artifactType' => 'getArtifactType',
        'artifactTypeStreamMapping' => 'getArtifactTypeStreamMapping',
        'browsableArtifactTypeMapping' => 'getBrowsableArtifactTypeMapping',
        'dataSourceBindings' => 'getDataSourceBindings',
        'displayName' => 'getDisplayName',
        'downloadTaskId' => 'getDownloadTaskId',
        'endpointTypeId' => 'getEndpointTypeId',
        'inputDescriptors' => 'getInputDescriptors',
        'isCommitsTraceabilitySupported' => 'getIsCommitsTraceabilitySupported',
        'isWorkitemsTraceabilitySupported' => 'getIsWorkitemsTraceabilitySupported',
        'name' => 'getName',
        'taskInputMapping' => 'getTaskInputMapping',
        'uniqueSourceIdentifier' => 'getUniqueSourceIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['artifactTriggerConfiguration'] = isset($data['artifactTriggerConfiguration']) ? $data['artifactTriggerConfiguration'] : null;
        $this->container['artifactType'] = isset($data['artifactType']) ? $data['artifactType'] : null;
        $this->container['artifactTypeStreamMapping'] = isset($data['artifactTypeStreamMapping']) ? $data['artifactTypeStreamMapping'] : null;
        $this->container['browsableArtifactTypeMapping'] = isset($data['browsableArtifactTypeMapping']) ? $data['browsableArtifactTypeMapping'] : null;
        $this->container['dataSourceBindings'] = isset($data['dataSourceBindings']) ? $data['dataSourceBindings'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['downloadTaskId'] = isset($data['downloadTaskId']) ? $data['downloadTaskId'] : null;
        $this->container['endpointTypeId'] = isset($data['endpointTypeId']) ? $data['endpointTypeId'] : null;
        $this->container['inputDescriptors'] = isset($data['inputDescriptors']) ? $data['inputDescriptors'] : null;
        $this->container['isCommitsTraceabilitySupported'] = isset($data['isCommitsTraceabilitySupported']) ? $data['isCommitsTraceabilitySupported'] : null;
        $this->container['isWorkitemsTraceabilitySupported'] = isset($data['isWorkitemsTraceabilitySupported']) ? $data['isWorkitemsTraceabilitySupported'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['taskInputMapping'] = isset($data['taskInputMapping']) ? $data['taskInputMapping'] : null;
        $this->container['uniqueSourceIdentifier'] = isset($data['uniqueSourceIdentifier']) ? $data['uniqueSourceIdentifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artifactTriggerConfiguration
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ArtifactTriggerConfiguration
     */
    public function getArtifactTriggerConfiguration()
    {
        return $this->container['artifactTriggerConfiguration'];
    }

    /**
     * Sets artifactTriggerConfiguration
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ArtifactTriggerConfiguration $artifactTriggerConfiguration artifactTriggerConfiguration
     *
     * @return $this
     */
    public function setArtifactTriggerConfiguration($artifactTriggerConfiguration)
    {
        $this->container['artifactTriggerConfiguration'] = $artifactTriggerConfiguration;

        return $this;
    }

    /**
     * Gets artifactType
     *
     * @return string
     */
    public function getArtifactType()
    {
        return $this->container['artifactType'];
    }

    /**
     * Sets artifactType
     *
     * @param string $artifactType artifactType
     *
     * @return $this
     */
    public function setArtifactType($artifactType)
    {
        $this->container['artifactType'] = $artifactType;

        return $this;
    }

    /**
     * Gets artifactTypeStreamMapping
     *
     * @return map[string,string]
     */
    public function getArtifactTypeStreamMapping()
    {
        return $this->container['artifactTypeStreamMapping'];
    }

    /**
     * Sets artifactTypeStreamMapping
     *
     * @param map[string,string] $artifactTypeStreamMapping artifactTypeStreamMapping
     *
     * @return $this
     */
    public function setArtifactTypeStreamMapping($artifactTypeStreamMapping)
    {
        $this->container['artifactTypeStreamMapping'] = $artifactTypeStreamMapping;

        return $this;
    }

    /**
     * Gets browsableArtifactTypeMapping
     *
     * @return map[string,string]
     */
    public function getBrowsableArtifactTypeMapping()
    {
        return $this->container['browsableArtifactTypeMapping'];
    }

    /**
     * Sets browsableArtifactTypeMapping
     *
     * @param map[string,string] $browsableArtifactTypeMapping browsableArtifactTypeMapping
     *
     * @return $this
     */
    public function setBrowsableArtifactTypeMapping($browsableArtifactTypeMapping)
    {
        $this->container['browsableArtifactTypeMapping'] = $browsableArtifactTypeMapping;

        return $this;
    }

    /**
     * Gets dataSourceBindings
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DataSourceBinding[]
     */
    public function getDataSourceBindings()
    {
        return $this->container['dataSourceBindings'];
    }

    /**
     * Sets dataSourceBindings
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DataSourceBinding[] $dataSourceBindings dataSourceBindings
     *
     * @return $this
     */
    public function setDataSourceBindings($dataSourceBindings)
    {
        $this->container['dataSourceBindings'] = $dataSourceBindings;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets downloadTaskId
     *
     * @return string
     */
    public function getDownloadTaskId()
    {
        return $this->container['downloadTaskId'];
    }

    /**
     * Sets downloadTaskId
     *
     * @param string $downloadTaskId downloadTaskId
     *
     * @return $this
     */
    public function setDownloadTaskId($downloadTaskId)
    {
        $this->container['downloadTaskId'] = $downloadTaskId;

        return $this;
    }

    /**
     * Gets endpointTypeId
     *
     * @return string
     */
    public function getEndpointTypeId()
    {
        return $this->container['endpointTypeId'];
    }

    /**
     * Sets endpointTypeId
     *
     * @param string $endpointTypeId endpointTypeId
     *
     * @return $this
     */
    public function setEndpointTypeId($endpointTypeId)
    {
        $this->container['endpointTypeId'] = $endpointTypeId;

        return $this;
    }

    /**
     * Gets inputDescriptors
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\InputDescriptor[]
     */
    public function getInputDescriptors()
    {
        return $this->container['inputDescriptors'];
    }

    /**
     * Sets inputDescriptors
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\InputDescriptor[] $inputDescriptors inputDescriptors
     *
     * @return $this
     */
    public function setInputDescriptors($inputDescriptors)
    {
        $this->container['inputDescriptors'] = $inputDescriptors;

        return $this;
    }

    /**
     * Gets isCommitsTraceabilitySupported
     *
     * @return bool
     */
    public function getIsCommitsTraceabilitySupported()
    {
        return $this->container['isCommitsTraceabilitySupported'];
    }

    /**
     * Sets isCommitsTraceabilitySupported
     *
     * @param bool $isCommitsTraceabilitySupported isCommitsTraceabilitySupported
     *
     * @return $this
     */
    public function setIsCommitsTraceabilitySupported($isCommitsTraceabilitySupported)
    {
        $this->container['isCommitsTraceabilitySupported'] = $isCommitsTraceabilitySupported;

        return $this;
    }

    /**
     * Gets isWorkitemsTraceabilitySupported
     *
     * @return bool
     */
    public function getIsWorkitemsTraceabilitySupported()
    {
        return $this->container['isWorkitemsTraceabilitySupported'];
    }

    /**
     * Sets isWorkitemsTraceabilitySupported
     *
     * @param bool $isWorkitemsTraceabilitySupported isWorkitemsTraceabilitySupported
     *
     * @return $this
     */
    public function setIsWorkitemsTraceabilitySupported($isWorkitemsTraceabilitySupported)
    {
        $this->container['isWorkitemsTraceabilitySupported'] = $isWorkitemsTraceabilitySupported;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets taskInputMapping
     *
     * @return map[string,string]
     */
    public function getTaskInputMapping()
    {
        return $this->container['taskInputMapping'];
    }

    /**
     * Sets taskInputMapping
     *
     * @param map[string,string] $taskInputMapping taskInputMapping
     *
     * @return $this
     */
    public function setTaskInputMapping($taskInputMapping)
    {
        $this->container['taskInputMapping'] = $taskInputMapping;

        return $this;
    }

    /**
     * Gets uniqueSourceIdentifier
     *
     * @return string
     */
    public function getUniqueSourceIdentifier()
    {
        return $this->container['uniqueSourceIdentifier'];
    }

    /**
     * Sets uniqueSourceIdentifier
     *
     * @param string $uniqueSourceIdentifier uniqueSourceIdentifier
     *
     * @return $this
     */
    public function setUniqueSourceIdentifier($uniqueSourceIdentifier)
    {
        $this->container['uniqueSourceIdentifier'] = $uniqueSourceIdentifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


