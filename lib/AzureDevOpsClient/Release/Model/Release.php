<?php
/**
 * Release
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * Release Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Release implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Release';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReferenceLinks',
        'artifacts' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Artifact[]',
        'comment' => 'string',
        'createdBy' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'createdFor' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'createdOn' => '\DateTime',
        'definitionSnapshotRevision' => 'int',
        'description' => 'string',
        'environments' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironment[]',
        'id' => 'int',
        'keepForever' => 'bool',
        'logsContainerUrl' => 'string',
        'modifiedBy' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'modifiedOn' => '\DateTime',
        'name' => 'string',
        'poolName' => 'string',
        'projectReference' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference',
        'properties' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\PropertiesCollection',
        'reason' => 'string',
        'releaseDefinition' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference',
        'releaseDefinitionRevision' => 'int',
        'releaseNameFormat' => 'string',
        'status' => 'string',
        'tags' => 'string[]',
        'triggeringArtifactAlias' => 'string',
        'variableGroups' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\VariableGroup[]',
        'variables' => 'map[string,\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ConfigurationVariableValue]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'artifacts' => null,
        'comment' => null,
        'createdBy' => null,
        'createdFor' => null,
        'createdOn' => 'date-time',
        'definitionSnapshotRevision' => 'int32',
        'description' => null,
        'environments' => null,
        'id' => 'int32',
        'keepForever' => null,
        'logsContainerUrl' => null,
        'modifiedBy' => null,
        'modifiedOn' => 'date-time',
        'name' => null,
        'poolName' => null,
        'projectReference' => null,
        'properties' => null,
        'reason' => null,
        'releaseDefinition' => null,
        'releaseDefinitionRevision' => 'int32',
        'releaseNameFormat' => null,
        'status' => null,
        'tags' => null,
        'triggeringArtifactAlias' => null,
        'variableGroups' => null,
        'variables' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => '_links',
        'artifacts' => 'artifacts',
        'comment' => 'comment',
        'createdBy' => 'createdBy',
        'createdFor' => 'createdFor',
        'createdOn' => 'createdOn',
        'definitionSnapshotRevision' => 'definitionSnapshotRevision',
        'description' => 'description',
        'environments' => 'environments',
        'id' => 'id',
        'keepForever' => 'keepForever',
        'logsContainerUrl' => 'logsContainerUrl',
        'modifiedBy' => 'modifiedBy',
        'modifiedOn' => 'modifiedOn',
        'name' => 'name',
        'poolName' => 'poolName',
        'projectReference' => 'projectReference',
        'properties' => 'properties',
        'reason' => 'reason',
        'releaseDefinition' => 'releaseDefinition',
        'releaseDefinitionRevision' => 'releaseDefinitionRevision',
        'releaseNameFormat' => 'releaseNameFormat',
        'status' => 'status',
        'tags' => 'tags',
        'triggeringArtifactAlias' => 'triggeringArtifactAlias',
        'variableGroups' => 'variableGroups',
        'variables' => 'variables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'artifacts' => 'setArtifacts',
        'comment' => 'setComment',
        'createdBy' => 'setCreatedBy',
        'createdFor' => 'setCreatedFor',
        'createdOn' => 'setCreatedOn',
        'definitionSnapshotRevision' => 'setDefinitionSnapshotRevision',
        'description' => 'setDescription',
        'environments' => 'setEnvironments',
        'id' => 'setId',
        'keepForever' => 'setKeepForever',
        'logsContainerUrl' => 'setLogsContainerUrl',
        'modifiedBy' => 'setModifiedBy',
        'modifiedOn' => 'setModifiedOn',
        'name' => 'setName',
        'poolName' => 'setPoolName',
        'projectReference' => 'setProjectReference',
        'properties' => 'setProperties',
        'reason' => 'setReason',
        'releaseDefinition' => 'setReleaseDefinition',
        'releaseDefinitionRevision' => 'setReleaseDefinitionRevision',
        'releaseNameFormat' => 'setReleaseNameFormat',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'triggeringArtifactAlias' => 'setTriggeringArtifactAlias',
        'variableGroups' => 'setVariableGroups',
        'variables' => 'setVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'artifacts' => 'getArtifacts',
        'comment' => 'getComment',
        'createdBy' => 'getCreatedBy',
        'createdFor' => 'getCreatedFor',
        'createdOn' => 'getCreatedOn',
        'definitionSnapshotRevision' => 'getDefinitionSnapshotRevision',
        'description' => 'getDescription',
        'environments' => 'getEnvironments',
        'id' => 'getId',
        'keepForever' => 'getKeepForever',
        'logsContainerUrl' => 'getLogsContainerUrl',
        'modifiedBy' => 'getModifiedBy',
        'modifiedOn' => 'getModifiedOn',
        'name' => 'getName',
        'poolName' => 'getPoolName',
        'projectReference' => 'getProjectReference',
        'properties' => 'getProperties',
        'reason' => 'getReason',
        'releaseDefinition' => 'getReleaseDefinition',
        'releaseDefinitionRevision' => 'getReleaseDefinitionRevision',
        'releaseNameFormat' => 'getReleaseNameFormat',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'triggeringArtifactAlias' => 'getTriggeringArtifactAlias',
        'variableGroups' => 'getVariableGroups',
        'variables' => 'getVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_NONE = 'none';
    const REASON_MANUAL = 'manual';
    const REASON_CONTINUOUS_INTEGRATION = 'continuousIntegration';
    const REASON_SCHEDULE = 'schedule';
    const REASON_PULL_REQUEST = 'pullRequest';
    const STATUS_UNDEFINED = 'undefined';
    const STATUS_DRAFT = 'draft';
    const STATUS_ACTIVE = 'active';
    const STATUS_ABANDONED = 'abandoned';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NONE,
            self::REASON_MANUAL,
            self::REASON_CONTINUOUS_INTEGRATION,
            self::REASON_SCHEDULE,
            self::REASON_PULL_REQUEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDEFINED,
            self::STATUS_DRAFT,
            self::STATUS_ACTIVE,
            self::STATUS_ABANDONED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['artifacts'] = isset($data['artifacts']) ? $data['artifacts'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdFor'] = isset($data['createdFor']) ? $data['createdFor'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['definitionSnapshotRevision'] = isset($data['definitionSnapshotRevision']) ? $data['definitionSnapshotRevision'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['environments'] = isset($data['environments']) ? $data['environments'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['keepForever'] = isset($data['keepForever']) ? $data['keepForever'] : null;
        $this->container['logsContainerUrl'] = isset($data['logsContainerUrl']) ? $data['logsContainerUrl'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['modifiedOn'] = isset($data['modifiedOn']) ? $data['modifiedOn'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['poolName'] = isset($data['poolName']) ? $data['poolName'] : null;
        $this->container['projectReference'] = isset($data['projectReference']) ? $data['projectReference'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['releaseDefinition'] = isset($data['releaseDefinition']) ? $data['releaseDefinition'] : null;
        $this->container['releaseDefinitionRevision'] = isset($data['releaseDefinitionRevision']) ? $data['releaseDefinitionRevision'] : null;
        $this->container['releaseNameFormat'] = isset($data['releaseNameFormat']) ? $data['releaseNameFormat'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['triggeringArtifactAlias'] = isset($data['triggeringArtifactAlias']) ? $data['triggeringArtifactAlias'] : null;
        $this->container['variableGroups'] = isset($data['variableGroups']) ? $data['variableGroups'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReferenceLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReferenceLinks $links Gets links to access the release.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets artifacts
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Artifact[]
     */
    public function getArtifacts()
    {
        return $this->container['artifacts'];
    }

    /**
     * Sets artifacts
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Artifact[] $artifacts Gets or sets the list of artifacts.
     *
     * @return $this
     */
    public function setArtifacts($artifacts)
    {
        $this->container['artifacts'] = $artifacts;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Gets or sets comment.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $createdBy Gets or sets the identity who created.
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdFor
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getCreatedFor()
    {
        return $this->container['createdFor'];
    }

    /**
     * Sets createdFor
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $createdFor Gets or sets the identity for whom release was created.
     *
     * @return $this
     */
    public function setCreatedFor($createdFor)
    {
        $this->container['createdFor'] = $createdFor;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn Gets date on which it got created.
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets definitionSnapshotRevision
     *
     * @return int
     */
    public function getDefinitionSnapshotRevision()
    {
        return $this->container['definitionSnapshotRevision'];
    }

    /**
     * Sets definitionSnapshotRevision
     *
     * @param int $definitionSnapshotRevision Gets revision number of definition snapshot.
     *
     * @return $this
     */
    public function setDefinitionSnapshotRevision($definitionSnapshotRevision)
    {
        $this->container['definitionSnapshotRevision'] = $definitionSnapshotRevision;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Gets or sets description of release.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironment[]
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironment[] $environments Gets list of environments.
     *
     * @return $this
     */
    public function setEnvironments($environments)
    {
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Gets the unique identifier of this field.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keepForever
     *
     * @return bool
     */
    public function getKeepForever()
    {
        return $this->container['keepForever'];
    }

    /**
     * Sets keepForever
     *
     * @param bool $keepForever Whether to exclude the release from retention policies.
     *
     * @return $this
     */
    public function setKeepForever($keepForever)
    {
        $this->container['keepForever'] = $keepForever;

        return $this;
    }

    /**
     * Gets logsContainerUrl
     *
     * @return string
     */
    public function getLogsContainerUrl()
    {
        return $this->container['logsContainerUrl'];
    }

    /**
     * Sets logsContainerUrl
     *
     * @param string $logsContainerUrl Gets logs container url.
     *
     * @return $this
     */
    public function setLogsContainerUrl($logsContainerUrl)
    {
        $this->container['logsContainerUrl'] = $logsContainerUrl;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $modifiedBy Gets or sets the identity who modified.
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modifiedOn
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modifiedOn'];
    }

    /**
     * Sets modifiedOn
     *
     * @param \DateTime $modifiedOn Gets date on which it got modified.
     *
     * @return $this
     */
    public function setModifiedOn($modifiedOn)
    {
        $this->container['modifiedOn'] = $modifiedOn;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Gets name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets poolName
     *
     * @return string
     */
    public function getPoolName()
    {
        return $this->container['poolName'];
    }

    /**
     * Sets poolName
     *
     * @param string $poolName Gets pool name.
     *
     * @return $this
     */
    public function setPoolName($poolName)
    {
        $this->container['poolName'] = $poolName;

        return $this;
    }

    /**
     * Gets projectReference
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference
     */
    public function getProjectReference()
    {
        return $this->container['projectReference'];
    }

    /**
     * Sets projectReference
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference $projectReference Gets or sets project reference.
     *
     * @return $this
     */
    public function setProjectReference($projectReference)
    {
        $this->container['projectReference'] = $projectReference;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\PropertiesCollection
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\PropertiesCollection $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Gets reason of release.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets releaseDefinition
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference
     */
    public function getReleaseDefinition()
    {
        return $this->container['releaseDefinition'];
    }

    /**
     * Sets releaseDefinition
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference $releaseDefinition Gets releaseDefinitionReference which specifies the reference of the release definition to which this release is associated.
     *
     * @return $this
     */
    public function setReleaseDefinition($releaseDefinition)
    {
        $this->container['releaseDefinition'] = $releaseDefinition;

        return $this;
    }

    /**
     * Gets releaseDefinitionRevision
     *
     * @return int
     */
    public function getReleaseDefinitionRevision()
    {
        return $this->container['releaseDefinitionRevision'];
    }

    /**
     * Sets releaseDefinitionRevision
     *
     * @param int $releaseDefinitionRevision Gets or sets the release definition revision.
     *
     * @return $this
     */
    public function setReleaseDefinitionRevision($releaseDefinitionRevision)
    {
        $this->container['releaseDefinitionRevision'] = $releaseDefinitionRevision;

        return $this;
    }

    /**
     * Gets releaseNameFormat
     *
     * @return string
     */
    public function getReleaseNameFormat()
    {
        return $this->container['releaseNameFormat'];
    }

    /**
     * Sets releaseNameFormat
     *
     * @param string $releaseNameFormat Gets release name format.
     *
     * @return $this
     */
    public function setReleaseNameFormat($releaseNameFormat)
    {
        $this->container['releaseNameFormat'] = $releaseNameFormat;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Gets status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Gets or sets list of tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets triggeringArtifactAlias
     *
     * @return string
     */
    public function getTriggeringArtifactAlias()
    {
        return $this->container['triggeringArtifactAlias'];
    }

    /**
     * Sets triggeringArtifactAlias
     *
     * @param string $triggeringArtifactAlias triggeringArtifactAlias
     *
     * @return $this
     */
    public function setTriggeringArtifactAlias($triggeringArtifactAlias)
    {
        $this->container['triggeringArtifactAlias'] = $triggeringArtifactAlias;

        return $this;
    }

    /**
     * Gets variableGroups
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\VariableGroup[]
     */
    public function getVariableGroups()
    {
        return $this->container['variableGroups'];
    }

    /**
     * Sets variableGroups
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\VariableGroup[] $variableGroups Gets the list of variable groups.
     *
     * @return $this
     */
    public function setVariableGroups($variableGroups)
    {
        $this->container['variableGroups'] = $variableGroups;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ConfigurationVariableValue]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param map[string,\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ConfigurationVariableValue] $variables Gets or sets the dictionary of variables.
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


