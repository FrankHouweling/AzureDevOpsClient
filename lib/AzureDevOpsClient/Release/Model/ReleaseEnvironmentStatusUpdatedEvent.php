<?php
/**
 * ReleaseEnvironmentStatusUpdatedEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ReleaseEnvironmentStatusUpdatedEvent Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseEnvironmentStatusUpdatedEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseEnvironmentStatusUpdatedEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definitionId' => 'int',
        'projectId' => 'string',
        'environmentId' => 'int',
        'environmentStatus' => 'string',
        'latestDeploymentOperationStatus' => 'string',
        'latestDeploymentStatus' => 'string',
        'releaseId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definitionId' => 'int32',
        'projectId' => 'uuid',
        'environmentId' => 'int32',
        'environmentStatus' => null,
        'latestDeploymentOperationStatus' => null,
        'latestDeploymentStatus' => null,
        'releaseId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definitionId' => 'definitionId',
        'projectId' => 'projectId',
        'environmentId' => 'environmentId',
        'environmentStatus' => 'environmentStatus',
        'latestDeploymentOperationStatus' => 'latestDeploymentOperationStatus',
        'latestDeploymentStatus' => 'latestDeploymentStatus',
        'releaseId' => 'releaseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definitionId' => 'setDefinitionId',
        'projectId' => 'setProjectId',
        'environmentId' => 'setEnvironmentId',
        'environmentStatus' => 'setEnvironmentStatus',
        'latestDeploymentOperationStatus' => 'setLatestDeploymentOperationStatus',
        'latestDeploymentStatus' => 'setLatestDeploymentStatus',
        'releaseId' => 'setReleaseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definitionId' => 'getDefinitionId',
        'projectId' => 'getProjectId',
        'environmentId' => 'getEnvironmentId',
        'environmentStatus' => 'getEnvironmentStatus',
        'latestDeploymentOperationStatus' => 'getLatestDeploymentOperationStatus',
        'latestDeploymentStatus' => 'getLatestDeploymentStatus',
        'releaseId' => 'getReleaseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENVIRONMENT_STATUS_UNDEFINED = 'undefined';
    const ENVIRONMENT_STATUS_NOT_STARTED = 'notStarted';
    const ENVIRONMENT_STATUS_IN_PROGRESS = 'inProgress';
    const ENVIRONMENT_STATUS_SUCCEEDED = 'succeeded';
    const ENVIRONMENT_STATUS_CANCELED = 'canceled';
    const ENVIRONMENT_STATUS_REJECTED = 'rejected';
    const ENVIRONMENT_STATUS_QUEUED = 'queued';
    const ENVIRONMENT_STATUS_SCHEDULED = 'scheduled';
    const ENVIRONMENT_STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_UNDEFINED = 'undefined';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED = 'queued';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_SCHEDULED = 'scheduled';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PENDING = 'pending';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_APPROVED = 'approved';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_REJECTED = 'rejected';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_DEFERRED = 'deferred';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED_FOR_AGENT = 'queuedForAgent';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_IN_PROGRESS = 'phaseInProgress';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_SUCCEEDED = 'phaseSucceeded';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED = 'phasePartiallySucceeded';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_FAILED = 'phaseFailed';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_CANCELED = 'canceled';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_CANCELED = 'phaseCanceled';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_MANUAL_INTERVENTION_PENDING = 'manualInterventionPending';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED_FOR_PIPELINE = 'queuedForPipeline';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_CANCELLING = 'cancelling';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_EVALUATING_GATES = 'evaluatingGates';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_GATE_FAILED = 'gateFailed';
    const LATEST_DEPLOYMENT_OPERATION_STATUS_ALL = 'all';
    const LATEST_DEPLOYMENT_STATUS_UNDEFINED = 'undefined';
    const LATEST_DEPLOYMENT_STATUS_NOT_DEPLOYED = 'notDeployed';
    const LATEST_DEPLOYMENT_STATUS_IN_PROGRESS = 'inProgress';
    const LATEST_DEPLOYMENT_STATUS_SUCCEEDED = 'succeeded';
    const LATEST_DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const LATEST_DEPLOYMENT_STATUS_FAILED = 'failed';
    const LATEST_DEPLOYMENT_STATUS_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentStatusAllowableValues()
    {
        return [
            self::ENVIRONMENT_STATUS_UNDEFINED,
            self::ENVIRONMENT_STATUS_NOT_STARTED,
            self::ENVIRONMENT_STATUS_IN_PROGRESS,
            self::ENVIRONMENT_STATUS_SUCCEEDED,
            self::ENVIRONMENT_STATUS_CANCELED,
            self::ENVIRONMENT_STATUS_REJECTED,
            self::ENVIRONMENT_STATUS_QUEUED,
            self::ENVIRONMENT_STATUS_SCHEDULED,
            self::ENVIRONMENT_STATUS_PARTIALLY_SUCCEEDED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLatestDeploymentOperationStatusAllowableValues()
    {
        return [
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_UNDEFINED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_SCHEDULED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PENDING,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_APPROVED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_REJECTED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_DEFERRED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED_FOR_AGENT,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_IN_PROGRESS,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_SUCCEEDED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_FAILED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_CANCELED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_PHASE_CANCELED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_MANUAL_INTERVENTION_PENDING,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_QUEUED_FOR_PIPELINE,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_CANCELLING,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_EVALUATING_GATES,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_GATE_FAILED,
            self::LATEST_DEPLOYMENT_OPERATION_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLatestDeploymentStatusAllowableValues()
    {
        return [
            self::LATEST_DEPLOYMENT_STATUS_UNDEFINED,
            self::LATEST_DEPLOYMENT_STATUS_NOT_DEPLOYED,
            self::LATEST_DEPLOYMENT_STATUS_IN_PROGRESS,
            self::LATEST_DEPLOYMENT_STATUS_SUCCEEDED,
            self::LATEST_DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED,
            self::LATEST_DEPLOYMENT_STATUS_FAILED,
            self::LATEST_DEPLOYMENT_STATUS_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definitionId'] = isset($data['definitionId']) ? $data['definitionId'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['environmentId'] = isset($data['environmentId']) ? $data['environmentId'] : null;
        $this->container['environmentStatus'] = isset($data['environmentStatus']) ? $data['environmentStatus'] : null;
        $this->container['latestDeploymentOperationStatus'] = isset($data['latestDeploymentOperationStatus']) ? $data['latestDeploymentOperationStatus'] : null;
        $this->container['latestDeploymentStatus'] = isset($data['latestDeploymentStatus']) ? $data['latestDeploymentStatus'] : null;
        $this->container['releaseId'] = isset($data['releaseId']) ? $data['releaseId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnvironmentStatusAllowableValues();
        if (!is_null($this->container['environmentStatus']) && !in_array($this->container['environmentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'environmentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLatestDeploymentOperationStatusAllowableValues();
        if (!is_null($this->container['latestDeploymentOperationStatus']) && !in_array($this->container['latestDeploymentOperationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'latestDeploymentOperationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLatestDeploymentStatusAllowableValues();
        if (!is_null($this->container['latestDeploymentStatus']) && !in_array($this->container['latestDeploymentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'latestDeploymentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definitionId
     *
     * @return int
     */
    public function getDefinitionId()
    {
        return $this->container['definitionId'];
    }

    /**
     * Sets definitionId
     *
     * @param int $definitionId definitionId
     *
     * @return $this
     */
    public function setDefinitionId($definitionId)
    {
        $this->container['definitionId'] = $definitionId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int
     */
    public function getEnvironmentId()
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int $environmentId environmentId
     *
     * @return $this
     */
    public function setEnvironmentId($environmentId)
    {
        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets environmentStatus
     *
     * @return string
     */
    public function getEnvironmentStatus()
    {
        return $this->container['environmentStatus'];
    }

    /**
     * Sets environmentStatus
     *
     * @param string $environmentStatus environmentStatus
     *
     * @return $this
     */
    public function setEnvironmentStatus($environmentStatus)
    {
        $allowedValues = $this->getEnvironmentStatusAllowableValues();
        if (!is_null($environmentStatus) && !in_array($environmentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'environmentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environmentStatus'] = $environmentStatus;

        return $this;
    }

    /**
     * Gets latestDeploymentOperationStatus
     *
     * @return string
     */
    public function getLatestDeploymentOperationStatus()
    {
        return $this->container['latestDeploymentOperationStatus'];
    }

    /**
     * Sets latestDeploymentOperationStatus
     *
     * @param string $latestDeploymentOperationStatus latestDeploymentOperationStatus
     *
     * @return $this
     */
    public function setLatestDeploymentOperationStatus($latestDeploymentOperationStatus)
    {
        $allowedValues = $this->getLatestDeploymentOperationStatusAllowableValues();
        if (!is_null($latestDeploymentOperationStatus) && !in_array($latestDeploymentOperationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'latestDeploymentOperationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['latestDeploymentOperationStatus'] = $latestDeploymentOperationStatus;

        return $this;
    }

    /**
     * Gets latestDeploymentStatus
     *
     * @return string
     */
    public function getLatestDeploymentStatus()
    {
        return $this->container['latestDeploymentStatus'];
    }

    /**
     * Sets latestDeploymentStatus
     *
     * @param string $latestDeploymentStatus latestDeploymentStatus
     *
     * @return $this
     */
    public function setLatestDeploymentStatus($latestDeploymentStatus)
    {
        $allowedValues = $this->getLatestDeploymentStatusAllowableValues();
        if (!is_null($latestDeploymentStatus) && !in_array($latestDeploymentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'latestDeploymentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['latestDeploymentStatus'] = $latestDeploymentStatus;

        return $this;
    }

    /**
     * Gets releaseId
     *
     * @return int
     */
    public function getReleaseId()
    {
        return $this->container['releaseId'];
    }

    /**
     * Sets releaseId
     *
     * @param int $releaseId releaseId
     *
     * @return $this
     */
    public function setReleaseId($releaseId)
    {
        $this->container['releaseId'] = $releaseId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


