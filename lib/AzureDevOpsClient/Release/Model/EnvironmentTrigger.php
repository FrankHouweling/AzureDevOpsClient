<?php
/**
 * EnvironmentTrigger
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * EnvironmentTrigger Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvironmentTrigger implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvironmentTrigger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'definitionEnvironmentId' => 'int',
        'releaseDefinitionId' => 'int',
        'triggerContent' => 'string',
        'triggerType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'definitionEnvironmentId' => 'int32',
        'releaseDefinitionId' => 'int32',
        'triggerContent' => null,
        'triggerType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definitionEnvironmentId' => 'definitionEnvironmentId',
        'releaseDefinitionId' => 'releaseDefinitionId',
        'triggerContent' => 'triggerContent',
        'triggerType' => 'triggerType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definitionEnvironmentId' => 'setDefinitionEnvironmentId',
        'releaseDefinitionId' => 'setReleaseDefinitionId',
        'triggerContent' => 'setTriggerContent',
        'triggerType' => 'setTriggerType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definitionEnvironmentId' => 'getDefinitionEnvironmentId',
        'releaseDefinitionId' => 'getReleaseDefinitionId',
        'triggerContent' => 'getTriggerContent',
        'triggerType' => 'getTriggerType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRIGGER_TYPE_UNDEFINED = 'undefined';
    const TRIGGER_TYPE_DEPLOYMENT_GROUP_REDEPLOY = 'deploymentGroupRedeploy';
    const TRIGGER_TYPE_ROLLBACK_REDEPLOY = 'rollbackRedeploy';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerTypeAllowableValues()
    {
        return [
            self::TRIGGER_TYPE_UNDEFINED,
            self::TRIGGER_TYPE_DEPLOYMENT_GROUP_REDEPLOY,
            self::TRIGGER_TYPE_ROLLBACK_REDEPLOY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['definitionEnvironmentId'] = isset($data['definitionEnvironmentId']) ? $data['definitionEnvironmentId'] : null;
        $this->container['releaseDefinitionId'] = isset($data['releaseDefinitionId']) ? $data['releaseDefinitionId'] : null;
        $this->container['triggerContent'] = isset($data['triggerContent']) ? $data['triggerContent'] : null;
        $this->container['triggerType'] = isset($data['triggerType']) ? $data['triggerType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($this->container['triggerType']) && !in_array($this->container['triggerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'triggerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definitionEnvironmentId
     *
     * @return int
     */
    public function getDefinitionEnvironmentId()
    {
        return $this->container['definitionEnvironmentId'];
    }

    /**
     * Sets definitionEnvironmentId
     *
     * @param int $definitionEnvironmentId Definition environment ID on which this trigger applicable.
     *
     * @return $this
     */
    public function setDefinitionEnvironmentId($definitionEnvironmentId)
    {
        $this->container['definitionEnvironmentId'] = $definitionEnvironmentId;

        return $this;
    }

    /**
     * Gets releaseDefinitionId
     *
     * @return int
     */
    public function getReleaseDefinitionId()
    {
        return $this->container['releaseDefinitionId'];
    }

    /**
     * Sets releaseDefinitionId
     *
     * @param int $releaseDefinitionId ReleaseDefinition ID on which this trigger applicable.
     *
     * @return $this
     */
    public function setReleaseDefinitionId($releaseDefinitionId)
    {
        $this->container['releaseDefinitionId'] = $releaseDefinitionId;

        return $this;
    }

    /**
     * Gets triggerContent
     *
     * @return string
     */
    public function getTriggerContent()
    {
        return $this->container['triggerContent'];
    }

    /**
     * Sets triggerContent
     *
     * @param string $triggerContent Gets or sets the trigger content.
     *
     * @return $this
     */
    public function setTriggerContent($triggerContent)
    {
        $this->container['triggerContent'] = $triggerContent;

        return $this;
    }

    /**
     * Gets triggerType
     *
     * @return string
     */
    public function getTriggerType()
    {
        return $this->container['triggerType'];
    }

    /**
     * Sets triggerType
     *
     * @param string $triggerType Gets or sets the trigger type.
     *
     * @return $this
     */
    public function setTriggerType($triggerType)
    {
        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($triggerType) && !in_array($triggerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'triggerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggerType'] = $triggerType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


