<?php
/**
 * DeploymentAttempt
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * DeploymentAttempt Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeploymentAttempt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentAttempt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attempt' => 'int',
        'deploymentId' => 'int',
        'hasStarted' => 'bool',
        'id' => 'int',
        'issues' => '\FrankHouweling\AzureDevOpsClient\Release\Model\Issue[]',
        'lastModifiedBy' => '\FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef',
        'lastModifiedOn' => '\DateTime',
        'operationStatus' => 'string',
        'postDeploymentGates' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates',
        'preDeploymentGates' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates',
        'queuedOn' => '\DateTime',
        'reason' => 'string',
        'releaseDeployPhases' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseDeployPhase[]',
        'requestedBy' => '\FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef',
        'requestedFor' => '\FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attempt' => 'int32',
        'deploymentId' => 'int32',
        'hasStarted' => null,
        'id' => 'int32',
        'issues' => null,
        'lastModifiedBy' => null,
        'lastModifiedOn' => 'date-time',
        'operationStatus' => null,
        'postDeploymentGates' => null,
        'preDeploymentGates' => null,
        'queuedOn' => 'date-time',
        'reason' => null,
        'releaseDeployPhases' => null,
        'requestedBy' => null,
        'requestedFor' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempt' => 'attempt',
        'deploymentId' => 'deploymentId',
        'hasStarted' => 'hasStarted',
        'id' => 'id',
        'issues' => 'issues',
        'lastModifiedBy' => 'lastModifiedBy',
        'lastModifiedOn' => 'lastModifiedOn',
        'operationStatus' => 'operationStatus',
        'postDeploymentGates' => 'postDeploymentGates',
        'preDeploymentGates' => 'preDeploymentGates',
        'queuedOn' => 'queuedOn',
        'reason' => 'reason',
        'releaseDeployPhases' => 'releaseDeployPhases',
        'requestedBy' => 'requestedBy',
        'requestedFor' => 'requestedFor',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempt' => 'setAttempt',
        'deploymentId' => 'setDeploymentId',
        'hasStarted' => 'setHasStarted',
        'id' => 'setId',
        'issues' => 'setIssues',
        'lastModifiedBy' => 'setLastModifiedBy',
        'lastModifiedOn' => 'setLastModifiedOn',
        'operationStatus' => 'setOperationStatus',
        'postDeploymentGates' => 'setPostDeploymentGates',
        'preDeploymentGates' => 'setPreDeploymentGates',
        'queuedOn' => 'setQueuedOn',
        'reason' => 'setReason',
        'releaseDeployPhases' => 'setReleaseDeployPhases',
        'requestedBy' => 'setRequestedBy',
        'requestedFor' => 'setRequestedFor',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempt' => 'getAttempt',
        'deploymentId' => 'getDeploymentId',
        'hasStarted' => 'getHasStarted',
        'id' => 'getId',
        'issues' => 'getIssues',
        'lastModifiedBy' => 'getLastModifiedBy',
        'lastModifiedOn' => 'getLastModifiedOn',
        'operationStatus' => 'getOperationStatus',
        'postDeploymentGates' => 'getPostDeploymentGates',
        'preDeploymentGates' => 'getPreDeploymentGates',
        'queuedOn' => 'getQueuedOn',
        'reason' => 'getReason',
        'releaseDeployPhases' => 'getReleaseDeployPhases',
        'requestedBy' => 'getRequestedBy',
        'requestedFor' => 'getRequestedFor',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_STATUS_UNDEFINED = 'undefined';
    const OPERATION_STATUS_QUEUED = 'queued';
    const OPERATION_STATUS_SCHEDULED = 'scheduled';
    const OPERATION_STATUS_PENDING = 'pending';
    const OPERATION_STATUS_APPROVED = 'approved';
    const OPERATION_STATUS_REJECTED = 'rejected';
    const OPERATION_STATUS_DEFERRED = 'deferred';
    const OPERATION_STATUS_QUEUED_FOR_AGENT = 'queuedForAgent';
    const OPERATION_STATUS_PHASE_IN_PROGRESS = 'phaseInProgress';
    const OPERATION_STATUS_PHASE_SUCCEEDED = 'phaseSucceeded';
    const OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED = 'phasePartiallySucceeded';
    const OPERATION_STATUS_PHASE_FAILED = 'phaseFailed';
    const OPERATION_STATUS_CANCELED = 'canceled';
    const OPERATION_STATUS_PHASE_CANCELED = 'phaseCanceled';
    const OPERATION_STATUS_MANUAL_INTERVENTION_PENDING = 'manualInterventionPending';
    const OPERATION_STATUS_QUEUED_FOR_PIPELINE = 'queuedForPipeline';
    const OPERATION_STATUS_CANCELLING = 'cancelling';
    const OPERATION_STATUS_EVALUATING_GATES = 'evaluatingGates';
    const OPERATION_STATUS_GATE_FAILED = 'gateFailed';
    const OPERATION_STATUS_ALL = 'all';
    const REASON_NONE = 'none';
    const REASON_MANUAL = 'manual';
    const REASON_AUTOMATED = 'automated';
    const REASON_SCHEDULED = 'scheduled';
    const REASON_REDEPLOY_TRIGGER = 'redeployTrigger';
    const STATUS_UNDEFINED = 'undefined';
    const STATUS_NOT_DEPLOYED = 'notDeployed';
    const STATUS_IN_PROGRESS = 'inProgress';
    const STATUS_SUCCEEDED = 'succeeded';
    const STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const STATUS_FAILED = 'failed';
    const STATUS_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationStatusAllowableValues()
    {
        return [
            self::OPERATION_STATUS_UNDEFINED,
            self::OPERATION_STATUS_QUEUED,
            self::OPERATION_STATUS_SCHEDULED,
            self::OPERATION_STATUS_PENDING,
            self::OPERATION_STATUS_APPROVED,
            self::OPERATION_STATUS_REJECTED,
            self::OPERATION_STATUS_DEFERRED,
            self::OPERATION_STATUS_QUEUED_FOR_AGENT,
            self::OPERATION_STATUS_PHASE_IN_PROGRESS,
            self::OPERATION_STATUS_PHASE_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_FAILED,
            self::OPERATION_STATUS_CANCELED,
            self::OPERATION_STATUS_PHASE_CANCELED,
            self::OPERATION_STATUS_MANUAL_INTERVENTION_PENDING,
            self::OPERATION_STATUS_QUEUED_FOR_PIPELINE,
            self::OPERATION_STATUS_CANCELLING,
            self::OPERATION_STATUS_EVALUATING_GATES,
            self::OPERATION_STATUS_GATE_FAILED,
            self::OPERATION_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NONE,
            self::REASON_MANUAL,
            self::REASON_AUTOMATED,
            self::REASON_SCHEDULED,
            self::REASON_REDEPLOY_TRIGGER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDEFINED,
            self::STATUS_NOT_DEPLOYED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_SUCCEEDED,
            self::STATUS_PARTIALLY_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['deploymentId'] = isset($data['deploymentId']) ? $data['deploymentId'] : null;
        $this->container['hasStarted'] = isset($data['hasStarted']) ? $data['hasStarted'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['issues'] = isset($data['issues']) ? $data['issues'] : null;
        $this->container['lastModifiedBy'] = isset($data['lastModifiedBy']) ? $data['lastModifiedBy'] : null;
        $this->container['lastModifiedOn'] = isset($data['lastModifiedOn']) ? $data['lastModifiedOn'] : null;
        $this->container['operationStatus'] = isset($data['operationStatus']) ? $data['operationStatus'] : null;
        $this->container['postDeploymentGates'] = isset($data['postDeploymentGates']) ? $data['postDeploymentGates'] : null;
        $this->container['preDeploymentGates'] = isset($data['preDeploymentGates']) ? $data['preDeploymentGates'] : null;
        $this->container['queuedOn'] = isset($data['queuedOn']) ? $data['queuedOn'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['releaseDeployPhases'] = isset($data['releaseDeployPhases']) ? $data['releaseDeployPhases'] : null;
        $this->container['requestedBy'] = isset($data['requestedBy']) ? $data['requestedBy'] : null;
        $this->container['requestedFor'] = isset($data['requestedFor']) ? $data['requestedFor'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($this->container['operationStatus']) && !in_array($this->container['operationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempt
     *
     * @return int
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int $attempt Deployment attempt.
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets deploymentId
     *
     * @return int
     */
    public function getDeploymentId()
    {
        return $this->container['deploymentId'];
    }

    /**
     * Sets deploymentId
     *
     * @param int $deploymentId ID of the deployment.
     *
     * @return $this
     */
    public function setDeploymentId($deploymentId)
    {
        $this->container['deploymentId'] = $deploymentId;

        return $this;
    }

    /**
     * Gets hasStarted
     *
     * @return bool
     */
    public function getHasStarted()
    {
        return $this->container['hasStarted'];
    }

    /**
     * Sets hasStarted
     *
     * @param bool $hasStarted Specifies whether deployment has started or not.
     *
     * @return $this
     */
    public function setHasStarted($hasStarted)
    {
        $this->container['hasStarted'] = $hasStarted;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of deployment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\Issue[]
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\Issue[] $issues All the issues related to the deployment.
     *
     * @return $this
     */
    public function setIssues($issues)
    {
        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getLastModifiedBy()
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef $lastModifiedBy Identity who last modified this deployment.
     *
     * @return $this
     */
    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets lastModifiedOn
     *
     * @return \DateTime
     */
    public function getLastModifiedOn()
    {
        return $this->container['lastModifiedOn'];
    }

    /**
     * Sets lastModifiedOn
     *
     * @param \DateTime $lastModifiedOn Time when this deployment last modified.
     *
     * @return $this
     */
    public function setLastModifiedOn($lastModifiedOn)
    {
        $this->container['lastModifiedOn'] = $lastModifiedOn;

        return $this;
    }

    /**
     * Gets operationStatus
     *
     * @return string
     */
    public function getOperationStatus()
    {
        return $this->container['operationStatus'];
    }

    /**
     * Sets operationStatus
     *
     * @param string $operationStatus Deployment operation status.
     *
     * @return $this
     */
    public function setOperationStatus($operationStatus)
    {
        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($operationStatus) && !in_array($operationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationStatus'] = $operationStatus;

        return $this;
    }

    /**
     * Gets postDeploymentGates
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates
     */
    public function getPostDeploymentGates()
    {
        return $this->container['postDeploymentGates'];
    }

    /**
     * Sets postDeploymentGates
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates $postDeploymentGates Post deployment gates that executed in this deployment.
     *
     * @return $this
     */
    public function setPostDeploymentGates($postDeploymentGates)
    {
        $this->container['postDeploymentGates'] = $postDeploymentGates;

        return $this;
    }

    /**
     * Gets preDeploymentGates
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates
     */
    public function getPreDeploymentGates()
    {
        return $this->container['preDeploymentGates'];
    }

    /**
     * Sets preDeploymentGates
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseGates $preDeploymentGates Pre deployment gates that executed in this deployment.
     *
     * @return $this
     */
    public function setPreDeploymentGates($preDeploymentGates)
    {
        $this->container['preDeploymentGates'] = $preDeploymentGates;

        return $this;
    }

    /**
     * Gets queuedOn
     *
     * @return \DateTime
     */
    public function getQueuedOn()
    {
        return $this->container['queuedOn'];
    }

    /**
     * Sets queuedOn
     *
     * @param \DateTime $queuedOn When this deployment queued on.
     *
     * @return $this
     */
    public function setQueuedOn($queuedOn)
    {
        $this->container['queuedOn'] = $queuedOn;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Reason for the deployment.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets releaseDeployPhases
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseDeployPhase[]
     */
    public function getReleaseDeployPhases()
    {
        return $this->container['releaseDeployPhases'];
    }

    /**
     * Sets releaseDeployPhases
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ReleaseDeployPhase[] $releaseDeployPhases List of release deployphases executed in this deployment.
     *
     * @return $this
     */
    public function setReleaseDeployPhases($releaseDeployPhases)
    {
        $this->container['releaseDeployPhases'] = $releaseDeployPhases;

        return $this;
    }

    /**
     * Gets requestedBy
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getRequestedBy()
    {
        return $this->container['requestedBy'];
    }

    /**
     * Sets requestedBy
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef $requestedBy Identity who requested this deployment.
     *
     * @return $this
     */
    public function setRequestedBy($requestedBy)
    {
        $this->container['requestedBy'] = $requestedBy;

        return $this;
    }

    /**
     * Gets requestedFor
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getRequestedFor()
    {
        return $this->container['requestedFor'];
    }

    /**
     * Sets requestedFor
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef $requestedFor Identity for this deployment requested.
     *
     * @return $this
     */
    public function setRequestedFor($requestedFor)
    {
        $this->container['requestedFor'] = $requestedFor;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status of the deployment.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


