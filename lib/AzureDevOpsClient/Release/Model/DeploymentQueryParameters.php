<?php
/**
 * DeploymentQueryParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * DeploymentQueryParameters Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeploymentQueryParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentQueryParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'artifactSourceId' => 'string',
        'artifactTypeId' => 'string',
        'artifactVersions' => 'string[]',
        'deploymentsPerEnvironment' => 'int',
        'deploymentStatus' => 'string',
        'environments' => '\FrankHouweling\AzureDevOpsClient\Release\Model\DefinitionEnvironmentReference[]',
        'expands' => 'string',
        'isDeleted' => 'bool',
        'operationStatus' => 'string',
        'queryType' => 'string',
        'sourceBranch' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'artifactSourceId' => null,
        'artifactTypeId' => null,
        'artifactVersions' => null,
        'deploymentsPerEnvironment' => 'int32',
        'deploymentStatus' => null,
        'environments' => null,
        'expands' => null,
        'isDeleted' => null,
        'operationStatus' => null,
        'queryType' => null,
        'sourceBranch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artifactSourceId' => 'artifactSourceId',
        'artifactTypeId' => 'artifactTypeId',
        'artifactVersions' => 'artifactVersions',
        'deploymentsPerEnvironment' => 'deploymentsPerEnvironment',
        'deploymentStatus' => 'deploymentStatus',
        'environments' => 'environments',
        'expands' => 'expands',
        'isDeleted' => 'isDeleted',
        'operationStatus' => 'operationStatus',
        'queryType' => 'queryType',
        'sourceBranch' => 'sourceBranch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artifactSourceId' => 'setArtifactSourceId',
        'artifactTypeId' => 'setArtifactTypeId',
        'artifactVersions' => 'setArtifactVersions',
        'deploymentsPerEnvironment' => 'setDeploymentsPerEnvironment',
        'deploymentStatus' => 'setDeploymentStatus',
        'environments' => 'setEnvironments',
        'expands' => 'setExpands',
        'isDeleted' => 'setIsDeleted',
        'operationStatus' => 'setOperationStatus',
        'queryType' => 'setQueryType',
        'sourceBranch' => 'setSourceBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artifactSourceId' => 'getArtifactSourceId',
        'artifactTypeId' => 'getArtifactTypeId',
        'artifactVersions' => 'getArtifactVersions',
        'deploymentsPerEnvironment' => 'getDeploymentsPerEnvironment',
        'deploymentStatus' => 'getDeploymentStatus',
        'environments' => 'getEnvironments',
        'expands' => 'getExpands',
        'isDeleted' => 'getIsDeleted',
        'operationStatus' => 'getOperationStatus',
        'queryType' => 'getQueryType',
        'sourceBranch' => 'getSourceBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEPLOYMENT_STATUS_UNDEFINED = 'undefined';
    const DEPLOYMENT_STATUS_NOT_DEPLOYED = 'notDeployed';
    const DEPLOYMENT_STATUS_IN_PROGRESS = 'inProgress';
    const DEPLOYMENT_STATUS_SUCCEEDED = 'succeeded';
    const DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const DEPLOYMENT_STATUS_FAILED = 'failed';
    const DEPLOYMENT_STATUS_ALL = 'all';
    const EXPANDS_ALL = 'all';
    const EXPANDS_DEPLOYMENT_ONLY = 'deploymentOnly';
    const EXPANDS_APPROVALS = 'approvals';
    const EXPANDS_ARTIFACTS = 'artifacts';
    const OPERATION_STATUS_UNDEFINED = 'undefined';
    const OPERATION_STATUS_QUEUED = 'queued';
    const OPERATION_STATUS_SCHEDULED = 'scheduled';
    const OPERATION_STATUS_PENDING = 'pending';
    const OPERATION_STATUS_APPROVED = 'approved';
    const OPERATION_STATUS_REJECTED = 'rejected';
    const OPERATION_STATUS_DEFERRED = 'deferred';
    const OPERATION_STATUS_QUEUED_FOR_AGENT = 'queuedForAgent';
    const OPERATION_STATUS_PHASE_IN_PROGRESS = 'phaseInProgress';
    const OPERATION_STATUS_PHASE_SUCCEEDED = 'phaseSucceeded';
    const OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED = 'phasePartiallySucceeded';
    const OPERATION_STATUS_PHASE_FAILED = 'phaseFailed';
    const OPERATION_STATUS_CANCELED = 'canceled';
    const OPERATION_STATUS_PHASE_CANCELED = 'phaseCanceled';
    const OPERATION_STATUS_MANUAL_INTERVENTION_PENDING = 'manualInterventionPending';
    const OPERATION_STATUS_QUEUED_FOR_PIPELINE = 'queuedForPipeline';
    const OPERATION_STATUS_CANCELLING = 'cancelling';
    const OPERATION_STATUS_EVALUATING_GATES = 'evaluatingGates';
    const OPERATION_STATUS_GATE_FAILED = 'gateFailed';
    const OPERATION_STATUS_ALL = 'all';
    const QUERY_TYPE_REGULAR = 'regular';
    const QUERY_TYPE_FAILING_SINCE = 'failingSince';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeploymentStatusAllowableValues()
    {
        return [
            self::DEPLOYMENT_STATUS_UNDEFINED,
            self::DEPLOYMENT_STATUS_NOT_DEPLOYED,
            self::DEPLOYMENT_STATUS_IN_PROGRESS,
            self::DEPLOYMENT_STATUS_SUCCEEDED,
            self::DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED,
            self::DEPLOYMENT_STATUS_FAILED,
            self::DEPLOYMENT_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpandsAllowableValues()
    {
        return [
            self::EXPANDS_ALL,
            self::EXPANDS_DEPLOYMENT_ONLY,
            self::EXPANDS_APPROVALS,
            self::EXPANDS_ARTIFACTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationStatusAllowableValues()
    {
        return [
            self::OPERATION_STATUS_UNDEFINED,
            self::OPERATION_STATUS_QUEUED,
            self::OPERATION_STATUS_SCHEDULED,
            self::OPERATION_STATUS_PENDING,
            self::OPERATION_STATUS_APPROVED,
            self::OPERATION_STATUS_REJECTED,
            self::OPERATION_STATUS_DEFERRED,
            self::OPERATION_STATUS_QUEUED_FOR_AGENT,
            self::OPERATION_STATUS_PHASE_IN_PROGRESS,
            self::OPERATION_STATUS_PHASE_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_FAILED,
            self::OPERATION_STATUS_CANCELED,
            self::OPERATION_STATUS_PHASE_CANCELED,
            self::OPERATION_STATUS_MANUAL_INTERVENTION_PENDING,
            self::OPERATION_STATUS_QUEUED_FOR_PIPELINE,
            self::OPERATION_STATUS_CANCELLING,
            self::OPERATION_STATUS_EVALUATING_GATES,
            self::OPERATION_STATUS_GATE_FAILED,
            self::OPERATION_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryTypeAllowableValues()
    {
        return [
            self::QUERY_TYPE_REGULAR,
            self::QUERY_TYPE_FAILING_SINCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['artifactSourceId'] = isset($data['artifactSourceId']) ? $data['artifactSourceId'] : null;
        $this->container['artifactTypeId'] = isset($data['artifactTypeId']) ? $data['artifactTypeId'] : null;
        $this->container['artifactVersions'] = isset($data['artifactVersions']) ? $data['artifactVersions'] : null;
        $this->container['deploymentsPerEnvironment'] = isset($data['deploymentsPerEnvironment']) ? $data['deploymentsPerEnvironment'] : null;
        $this->container['deploymentStatus'] = isset($data['deploymentStatus']) ? $data['deploymentStatus'] : null;
        $this->container['environments'] = isset($data['environments']) ? $data['environments'] : null;
        $this->container['expands'] = isset($data['expands']) ? $data['expands'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['operationStatus'] = isset($data['operationStatus']) ? $data['operationStatus'] : null;
        $this->container['queryType'] = isset($data['queryType']) ? $data['queryType'] : null;
        $this->container['sourceBranch'] = isset($data['sourceBranch']) ? $data['sourceBranch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeploymentStatusAllowableValues();
        if (!is_null($this->container['deploymentStatus']) && !in_array($this->container['deploymentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deploymentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpandsAllowableValues();
        if (!is_null($this->container['expands']) && !in_array($this->container['expands'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'expands', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($this->container['operationStatus']) && !in_array($this->container['operationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($this->container['queryType']) && !in_array($this->container['queryType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'queryType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artifactSourceId
     *
     * @return string
     */
    public function getArtifactSourceId()
    {
        return $this->container['artifactSourceId'];
    }

    /**
     * Sets artifactSourceId
     *
     * @param string $artifactSourceId Query deployments based specified artifact source id.
     *
     * @return $this
     */
    public function setArtifactSourceId($artifactSourceId)
    {
        $this->container['artifactSourceId'] = $artifactSourceId;

        return $this;
    }

    /**
     * Gets artifactTypeId
     *
     * @return string
     */
    public function getArtifactTypeId()
    {
        return $this->container['artifactTypeId'];
    }

    /**
     * Sets artifactTypeId
     *
     * @param string $artifactTypeId Query deployments based specified artifact type id.
     *
     * @return $this
     */
    public function setArtifactTypeId($artifactTypeId)
    {
        $this->container['artifactTypeId'] = $artifactTypeId;

        return $this;
    }

    /**
     * Gets artifactVersions
     *
     * @return string[]
     */
    public function getArtifactVersions()
    {
        return $this->container['artifactVersions'];
    }

    /**
     * Sets artifactVersions
     *
     * @param string[] $artifactVersions Query deployments based specified artifact versions.
     *
     * @return $this
     */
    public function setArtifactVersions($artifactVersions)
    {
        $this->container['artifactVersions'] = $artifactVersions;

        return $this;
    }

    /**
     * Gets deploymentsPerEnvironment
     *
     * @return int
     */
    public function getDeploymentsPerEnvironment()
    {
        return $this->container['deploymentsPerEnvironment'];
    }

    /**
     * Sets deploymentsPerEnvironment
     *
     * @param int $deploymentsPerEnvironment Query deployments number of deployments per environment.
     *
     * @return $this
     */
    public function setDeploymentsPerEnvironment($deploymentsPerEnvironment)
    {
        $this->container['deploymentsPerEnvironment'] = $deploymentsPerEnvironment;

        return $this;
    }

    /**
     * Gets deploymentStatus
     *
     * @return string
     */
    public function getDeploymentStatus()
    {
        return $this->container['deploymentStatus'];
    }

    /**
     * Sets deploymentStatus
     *
     * @param string $deploymentStatus Query deployment based on deployment status.
     *
     * @return $this
     */
    public function setDeploymentStatus($deploymentStatus)
    {
        $allowedValues = $this->getDeploymentStatusAllowableValues();
        if (!is_null($deploymentStatus) && !in_array($deploymentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploymentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploymentStatus'] = $deploymentStatus;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\DefinitionEnvironmentReference[]
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\DefinitionEnvironmentReference[] $environments Query deployments of specified environments.
     *
     * @return $this
     */
    public function setEnvironments($environments)
    {
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets expands
     *
     * @return string
     */
    public function getExpands()
    {
        return $this->container['expands'];
    }

    /**
     * Sets expands
     *
     * @param string $expands Query deployments based specified expands.
     *
     * @return $this
     */
    public function setExpands($expands)
    {
        $allowedValues = $this->getExpandsAllowableValues();
        if (!is_null($expands) && !in_array($expands, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'expands', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expands'] = $expands;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted Specify deleted deployments should return or not.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets operationStatus
     *
     * @return string
     */
    public function getOperationStatus()
    {
        return $this->container['operationStatus'];
    }

    /**
     * Sets operationStatus
     *
     * @param string $operationStatus Query deployment based on deployment operation status.
     *
     * @return $this
     */
    public function setOperationStatus($operationStatus)
    {
        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($operationStatus) && !in_array($operationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationStatus'] = $operationStatus;

        return $this;
    }

    /**
     * Gets queryType
     *
     * @return string
     */
    public function getQueryType()
    {
        return $this->container['queryType'];
    }

    /**
     * Sets queryType
     *
     * @param string $queryType Query deployments based query type.
     *
     * @return $this
     */
    public function setQueryType($queryType)
    {
        $allowedValues = $this->getQueryTypeAllowableValues();
        if (!is_null($queryType) && !in_array($queryType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'queryType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queryType'] = $queryType;

        return $this;
    }

    /**
     * Gets sourceBranch
     *
     * @return string
     */
    public function getSourceBranch()
    {
        return $this->container['sourceBranch'];
    }

    /**
     * Sets sourceBranch
     *
     * @param string $sourceBranch Query deployments based specified source branch.
     *
     * @return $this
     */
    public function setSourceBranch($sourceBranch)
    {
        $this->container['sourceBranch'] = $sourceBranch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


