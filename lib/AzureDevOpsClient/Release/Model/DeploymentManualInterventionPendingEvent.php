<?php
/**
 * DeploymentManualInterventionPendingEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * DeploymentManualInterventionPendingEvent Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeploymentManualInterventionPendingEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentManualInterventionPendingEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deployment' => '\FrankHouweling\AzureDevOpsClient\Release\Model\Deployment',
        'emailRecipients' => 'string[]',
        'environmentOwner' => '\FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef',
        'manualIntervention' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ManualIntervention',
        'project' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ProjectReference',
        'release' => '\FrankHouweling\AzureDevOpsClient\Release\Model\Release'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deployment' => null,
        'emailRecipients' => 'uuid',
        'environmentOwner' => null,
        'manualIntervention' => null,
        'project' => null,
        'release' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deployment' => 'deployment',
        'emailRecipients' => 'emailRecipients',
        'environmentOwner' => 'environmentOwner',
        'manualIntervention' => 'manualIntervention',
        'project' => 'project',
        'release' => 'release'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deployment' => 'setDeployment',
        'emailRecipients' => 'setEmailRecipients',
        'environmentOwner' => 'setEnvironmentOwner',
        'manualIntervention' => 'setManualIntervention',
        'project' => 'setProject',
        'release' => 'setRelease'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deployment' => 'getDeployment',
        'emailRecipients' => 'getEmailRecipients',
        'environmentOwner' => 'getEnvironmentOwner',
        'manualIntervention' => 'getManualIntervention',
        'project' => 'getProject',
        'release' => 'getRelease'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deployment'] = isset($data['deployment']) ? $data['deployment'] : null;
        $this->container['emailRecipients'] = isset($data['emailRecipients']) ? $data['emailRecipients'] : null;
        $this->container['environmentOwner'] = isset($data['environmentOwner']) ? $data['environmentOwner'] : null;
        $this->container['manualIntervention'] = isset($data['manualIntervention']) ? $data['manualIntervention'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deployment
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\Deployment
     */
    public function getDeployment()
    {
        return $this->container['deployment'];
    }

    /**
     * Sets deployment
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\Deployment $deployment deployment
     *
     * @return $this
     */
    public function setDeployment($deployment)
    {
        $this->container['deployment'] = $deployment;

        return $this;
    }

    /**
     * Gets emailRecipients
     *
     * @return string[]
     */
    public function getEmailRecipients()
    {
        return $this->container['emailRecipients'];
    }

    /**
     * Sets emailRecipients
     *
     * @param string[] $emailRecipients emailRecipients
     *
     * @return $this
     */
    public function setEmailRecipients($emailRecipients)
    {
        $this->container['emailRecipients'] = $emailRecipients;

        return $this;
    }

    /**
     * Gets environmentOwner
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getEnvironmentOwner()
    {
        return $this->container['environmentOwner'];
    }

    /**
     * Sets environmentOwner
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\IdentityRef $environmentOwner environmentOwner
     *
     * @return $this
     */
    public function setEnvironmentOwner($environmentOwner)
    {
        $this->container['environmentOwner'] = $environmentOwner;

        return $this;
    }

    /**
     * Gets manualIntervention
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ManualIntervention
     */
    public function getManualIntervention()
    {
        return $this->container['manualIntervention'];
    }

    /**
     * Sets manualIntervention
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ManualIntervention $manualIntervention manualIntervention
     *
     * @return $this
     */
    public function setManualIntervention($manualIntervention)
    {
        $this->container['manualIntervention'] = $manualIntervention;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ProjectReference $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\Release
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\Release $release release
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


