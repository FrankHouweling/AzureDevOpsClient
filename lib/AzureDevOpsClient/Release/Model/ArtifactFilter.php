<?php
/**
 * ArtifactFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ArtifactFilter Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArtifactFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArtifactFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'createReleaseOnBuildTagging' => 'bool',
        'sourceBranch' => 'string',
        'tagFilter' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\TagFilter',
        'tags' => 'string[]',
        'useBuildDefinitionBranch' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'createReleaseOnBuildTagging' => null,
        'sourceBranch' => null,
        'tagFilter' => null,
        'tags' => null,
        'useBuildDefinitionBranch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createReleaseOnBuildTagging' => 'createReleaseOnBuildTagging',
        'sourceBranch' => 'sourceBranch',
        'tagFilter' => 'tagFilter',
        'tags' => 'tags',
        'useBuildDefinitionBranch' => 'useBuildDefinitionBranch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createReleaseOnBuildTagging' => 'setCreateReleaseOnBuildTagging',
        'sourceBranch' => 'setSourceBranch',
        'tagFilter' => 'setTagFilter',
        'tags' => 'setTags',
        'useBuildDefinitionBranch' => 'setUseBuildDefinitionBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createReleaseOnBuildTagging' => 'getCreateReleaseOnBuildTagging',
        'sourceBranch' => 'getSourceBranch',
        'tagFilter' => 'getTagFilter',
        'tags' => 'getTags',
        'useBuildDefinitionBranch' => 'getUseBuildDefinitionBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['createReleaseOnBuildTagging'] = isset($data['createReleaseOnBuildTagging']) ? $data['createReleaseOnBuildTagging'] : null;
        $this->container['sourceBranch'] = isset($data['sourceBranch']) ? $data['sourceBranch'] : null;
        $this->container['tagFilter'] = isset($data['tagFilter']) ? $data['tagFilter'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['useBuildDefinitionBranch'] = isset($data['useBuildDefinitionBranch']) ? $data['useBuildDefinitionBranch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createReleaseOnBuildTagging
     *
     * @return bool
     */
    public function getCreateReleaseOnBuildTagging()
    {
        return $this->container['createReleaseOnBuildTagging'];
    }

    /**
     * Sets createReleaseOnBuildTagging
     *
     * @param bool $createReleaseOnBuildTagging Gets or sets whether a release should be created on build tagging.
     *
     * @return $this
     */
    public function setCreateReleaseOnBuildTagging($createReleaseOnBuildTagging)
    {
        $this->container['createReleaseOnBuildTagging'] = $createReleaseOnBuildTagging;

        return $this;
    }

    /**
     * Gets sourceBranch
     *
     * @return string
     */
    public function getSourceBranch()
    {
        return $this->container['sourceBranch'];
    }

    /**
     * Sets sourceBranch
     *
     * @param string $sourceBranch Gets or sets the branch for the filter.
     *
     * @return $this
     */
    public function setSourceBranch($sourceBranch)
    {
        $this->container['sourceBranch'] = $sourceBranch;

        return $this;
    }

    /**
     * Gets tagFilter
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\TagFilter
     */
    public function getTagFilter()
    {
        return $this->container['tagFilter'];
    }

    /**
     * Sets tagFilter
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\TagFilter $tagFilter Gets or sets the regex based tag filter.
     *
     * @return $this
     */
    public function setTagFilter($tagFilter)
    {
        $this->container['tagFilter'] = $tagFilter;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Gets or sets the list of tags for the filter.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets useBuildDefinitionBranch
     *
     * @return bool
     */
    public function getUseBuildDefinitionBranch()
    {
        return $this->container['useBuildDefinitionBranch'];
    }

    /**
     * Sets useBuildDefinitionBranch
     *
     * @param bool $useBuildDefinitionBranch Gets or sets whether filter should default to build definition branch.
     *
     * @return $this
     */
    public function setUseBuildDefinitionBranch($useBuildDefinitionBranch)
    {
        $this->container['useBuildDefinitionBranch'] = $useBuildDefinitionBranch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


