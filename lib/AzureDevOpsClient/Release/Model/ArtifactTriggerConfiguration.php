<?php
/**
 * ArtifactTriggerConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ArtifactTriggerConfiguration Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArtifactTriggerConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArtifactTriggerConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'isTriggerSupported' => 'bool',
        'isTriggerSupportedOnlyInHosted' => 'bool',
        'isWebhookSupportedAtServerLevel' => 'bool',
        'payloadHashHeaderName' => 'string',
        'resources' => 'map[string,string]',
        'webhookPayloadMapping' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'isTriggerSupported' => null,
        'isTriggerSupportedOnlyInHosted' => null,
        'isWebhookSupportedAtServerLevel' => null,
        'payloadHashHeaderName' => null,
        'resources' => null,
        'webhookPayloadMapping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isTriggerSupported' => 'isTriggerSupported',
        'isTriggerSupportedOnlyInHosted' => 'isTriggerSupportedOnlyInHosted',
        'isWebhookSupportedAtServerLevel' => 'isWebhookSupportedAtServerLevel',
        'payloadHashHeaderName' => 'payloadHashHeaderName',
        'resources' => 'resources',
        'webhookPayloadMapping' => 'webhookPayloadMapping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isTriggerSupported' => 'setIsTriggerSupported',
        'isTriggerSupportedOnlyInHosted' => 'setIsTriggerSupportedOnlyInHosted',
        'isWebhookSupportedAtServerLevel' => 'setIsWebhookSupportedAtServerLevel',
        'payloadHashHeaderName' => 'setPayloadHashHeaderName',
        'resources' => 'setResources',
        'webhookPayloadMapping' => 'setWebhookPayloadMapping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isTriggerSupported' => 'getIsTriggerSupported',
        'isTriggerSupportedOnlyInHosted' => 'getIsTriggerSupportedOnlyInHosted',
        'isWebhookSupportedAtServerLevel' => 'getIsWebhookSupportedAtServerLevel',
        'payloadHashHeaderName' => 'getPayloadHashHeaderName',
        'resources' => 'getResources',
        'webhookPayloadMapping' => 'getWebhookPayloadMapping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isTriggerSupported'] = isset($data['isTriggerSupported']) ? $data['isTriggerSupported'] : null;
        $this->container['isTriggerSupportedOnlyInHosted'] = isset($data['isTriggerSupportedOnlyInHosted']) ? $data['isTriggerSupportedOnlyInHosted'] : null;
        $this->container['isWebhookSupportedAtServerLevel'] = isset($data['isWebhookSupportedAtServerLevel']) ? $data['isWebhookSupportedAtServerLevel'] : null;
        $this->container['payloadHashHeaderName'] = isset($data['payloadHashHeaderName']) ? $data['payloadHashHeaderName'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['webhookPayloadMapping'] = isset($data['webhookPayloadMapping']) ? $data['webhookPayloadMapping'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isTriggerSupported
     *
     * @return bool
     */
    public function getIsTriggerSupported()
    {
        return $this->container['isTriggerSupported'];
    }

    /**
     * Sets isTriggerSupported
     *
     * @param bool $isTriggerSupported Gets or sets the whether trigger is supported or not.
     *
     * @return $this
     */
    public function setIsTriggerSupported($isTriggerSupported)
    {
        $this->container['isTriggerSupported'] = $isTriggerSupported;

        return $this;
    }

    /**
     * Gets isTriggerSupportedOnlyInHosted
     *
     * @return bool
     */
    public function getIsTriggerSupportedOnlyInHosted()
    {
        return $this->container['isTriggerSupportedOnlyInHosted'];
    }

    /**
     * Sets isTriggerSupportedOnlyInHosted
     *
     * @param bool $isTriggerSupportedOnlyInHosted Gets or sets the whether trigger is supported only on hosted environment.
     *
     * @return $this
     */
    public function setIsTriggerSupportedOnlyInHosted($isTriggerSupportedOnlyInHosted)
    {
        $this->container['isTriggerSupportedOnlyInHosted'] = $isTriggerSupportedOnlyInHosted;

        return $this;
    }

    /**
     * Gets isWebhookSupportedAtServerLevel
     *
     * @return bool
     */
    public function getIsWebhookSupportedAtServerLevel()
    {
        return $this->container['isWebhookSupportedAtServerLevel'];
    }

    /**
     * Sets isWebhookSupportedAtServerLevel
     *
     * @param bool $isWebhookSupportedAtServerLevel Gets or sets the whether webhook is supported at server level.
     *
     * @return $this
     */
    public function setIsWebhookSupportedAtServerLevel($isWebhookSupportedAtServerLevel)
    {
        $this->container['isWebhookSupportedAtServerLevel'] = $isWebhookSupportedAtServerLevel;

        return $this;
    }

    /**
     * Gets payloadHashHeaderName
     *
     * @return string
     */
    public function getPayloadHashHeaderName()
    {
        return $this->container['payloadHashHeaderName'];
    }

    /**
     * Sets payloadHashHeaderName
     *
     * @param string $payloadHashHeaderName Gets or sets the payload hash header name for the artifact trigger configuration.
     *
     * @return $this
     */
    public function setPayloadHashHeaderName($payloadHashHeaderName)
    {
        $this->container['payloadHashHeaderName'] = $payloadHashHeaderName;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return map[string,string]
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param map[string,string] $resources Gets or sets the resources for artifact trigger configuration.
     *
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets webhookPayloadMapping
     *
     * @return map[string,string]
     */
    public function getWebhookPayloadMapping()
    {
        return $this->container['webhookPayloadMapping'];
    }

    /**
     * Sets webhookPayloadMapping
     *
     * @param map[string,string] $webhookPayloadMapping Gets or sets the webhook payload mapping for artifact trigger configuration.
     *
     * @return $this
     */
    public function setWebhookPayloadMapping($webhookPayloadMapping)
    {
        $this->container['webhookPayloadMapping'] = $webhookPayloadMapping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


