<?php
/**
 * ReleaseGatesPhase
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * ReleaseGatesPhase Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReleaseGatesPhase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseGatesPhase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deploymentJobs' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DeploymentJob[]',
        'errorLog' => 'string',
        'manualInterventions' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ManualIntervention[]',
        'name' => 'string',
        'phaseId' => 'string',
        'phaseType' => 'string',
        'rank' => 'int',
        'runPlanId' => 'string',
        'startedOn' => '\DateTime',
        'status' => 'string',
        'ignoredGates' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IgnoredGate[]',
        'stabilizationCompletedOn' => '\DateTime',
        'succeedingSince' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deploymentJobs' => null,
        'errorLog' => null,
        'manualInterventions' => null,
        'name' => null,
        'phaseId' => null,
        'phaseType' => null,
        'rank' => 'int32',
        'runPlanId' => 'uuid',
        'startedOn' => 'date-time',
        'status' => null,
        'ignoredGates' => null,
        'stabilizationCompletedOn' => 'date-time',
        'succeedingSince' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deploymentJobs' => 'deploymentJobs',
        'errorLog' => 'errorLog',
        'manualInterventions' => 'manualInterventions',
        'name' => 'name',
        'phaseId' => 'phaseId',
        'phaseType' => 'phaseType',
        'rank' => 'rank',
        'runPlanId' => 'runPlanId',
        'startedOn' => 'startedOn',
        'status' => 'status',
        'ignoredGates' => 'ignoredGates',
        'stabilizationCompletedOn' => 'stabilizationCompletedOn',
        'succeedingSince' => 'succeedingSince'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deploymentJobs' => 'setDeploymentJobs',
        'errorLog' => 'setErrorLog',
        'manualInterventions' => 'setManualInterventions',
        'name' => 'setName',
        'phaseId' => 'setPhaseId',
        'phaseType' => 'setPhaseType',
        'rank' => 'setRank',
        'runPlanId' => 'setRunPlanId',
        'startedOn' => 'setStartedOn',
        'status' => 'setStatus',
        'ignoredGates' => 'setIgnoredGates',
        'stabilizationCompletedOn' => 'setStabilizationCompletedOn',
        'succeedingSince' => 'setSucceedingSince'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deploymentJobs' => 'getDeploymentJobs',
        'errorLog' => 'getErrorLog',
        'manualInterventions' => 'getManualInterventions',
        'name' => 'getName',
        'phaseId' => 'getPhaseId',
        'phaseType' => 'getPhaseType',
        'rank' => 'getRank',
        'runPlanId' => 'getRunPlanId',
        'startedOn' => 'getStartedOn',
        'status' => 'getStatus',
        'ignoredGates' => 'getIgnoredGates',
        'stabilizationCompletedOn' => 'getStabilizationCompletedOn',
        'succeedingSince' => 'getSucceedingSince'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PHASE_TYPE_UNDEFINED = 'undefined';
    const PHASE_TYPE_AGENT_BASED_DEPLOYMENT = 'agentBasedDeployment';
    const PHASE_TYPE_RUN_ON_SERVER = 'runOnServer';
    const PHASE_TYPE_MACHINE_GROUP_BASED_DEPLOYMENT = 'machineGroupBasedDeployment';
    const PHASE_TYPE_DEPLOYMENT_GATES = 'deploymentGates';
    const STATUS_UNDEFINED = 'undefined';
    const STATUS_NOT_STARTED = 'notStarted';
    const STATUS_IN_PROGRESS = 'inProgress';
    const STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const STATUS_SUCCEEDED = 'succeeded';
    const STATUS_FAILED = 'failed';
    const STATUS_CANCELED = 'canceled';
    const STATUS_SKIPPED = 'skipped';
    const STATUS_CANCELLING = 'cancelling';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhaseTypeAllowableValues()
    {
        return [
            self::PHASE_TYPE_UNDEFINED,
            self::PHASE_TYPE_AGENT_BASED_DEPLOYMENT,
            self::PHASE_TYPE_RUN_ON_SERVER,
            self::PHASE_TYPE_MACHINE_GROUP_BASED_DEPLOYMENT,
            self::PHASE_TYPE_DEPLOYMENT_GATES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDEFINED,
            self::STATUS_NOT_STARTED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_PARTIALLY_SUCCEEDED,
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_CANCELED,
            self::STATUS_SKIPPED,
            self::STATUS_CANCELLING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deploymentJobs'] = isset($data['deploymentJobs']) ? $data['deploymentJobs'] : null;
        $this->container['errorLog'] = isset($data['errorLog']) ? $data['errorLog'] : null;
        $this->container['manualInterventions'] = isset($data['manualInterventions']) ? $data['manualInterventions'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phaseId'] = isset($data['phaseId']) ? $data['phaseId'] : null;
        $this->container['phaseType'] = isset($data['phaseType']) ? $data['phaseType'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['runPlanId'] = isset($data['runPlanId']) ? $data['runPlanId'] : null;
        $this->container['startedOn'] = isset($data['startedOn']) ? $data['startedOn'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ignoredGates'] = isset($data['ignoredGates']) ? $data['ignoredGates'] : null;
        $this->container['stabilizationCompletedOn'] = isset($data['stabilizationCompletedOn']) ? $data['stabilizationCompletedOn'] : null;
        $this->container['succeedingSince'] = isset($data['succeedingSince']) ? $data['succeedingSince'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPhaseTypeAllowableValues();
        if (!is_null($this->container['phaseType']) && !in_array($this->container['phaseType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phaseType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deploymentJobs
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DeploymentJob[]
     */
    public function getDeploymentJobs()
    {
        return $this->container['deploymentJobs'];
    }

    /**
     * Sets deploymentJobs
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\DeploymentJob[] $deploymentJobs Deployment jobs of the phase.
     *
     * @return $this
     */
    public function setDeploymentJobs($deploymentJobs)
    {
        $this->container['deploymentJobs'] = $deploymentJobs;

        return $this;
    }

    /**
     * Gets errorLog
     *
     * @return string
     */
    public function getErrorLog()
    {
        return $this->container['errorLog'];
    }

    /**
     * Sets errorLog
     *
     * @param string $errorLog Phase execution error logs.
     *
     * @return $this
     */
    public function setErrorLog($errorLog)
    {
        $this->container['errorLog'] = $errorLog;

        return $this;
    }

    /**
     * Gets manualInterventions
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ManualIntervention[]
     */
    public function getManualInterventions()
    {
        return $this->container['manualInterventions'];
    }

    /**
     * Sets manualInterventions
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ManualIntervention[] $manualInterventions List of manual intervention tasks execution information in phase.
     *
     * @return $this
     */
    public function setManualInterventions($manualInterventions)
    {
        $this->container['manualInterventions'] = $manualInterventions;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the phase.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phaseId
     *
     * @return string
     */
    public function getPhaseId()
    {
        return $this->container['phaseId'];
    }

    /**
     * Sets phaseId
     *
     * @param string $phaseId ID of the phase.
     *
     * @return $this
     */
    public function setPhaseId($phaseId)
    {
        $this->container['phaseId'] = $phaseId;

        return $this;
    }

    /**
     * Gets phaseType
     *
     * @return string
     */
    public function getPhaseType()
    {
        return $this->container['phaseType'];
    }

    /**
     * Sets phaseType
     *
     * @param string $phaseType Type of the phase.
     *
     * @return $this
     */
    public function setPhaseType($phaseType)
    {
        $allowedValues = $this->getPhaseTypeAllowableValues();
        if (!is_null($phaseType) && !in_array($phaseType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phaseType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phaseType'] = $phaseType;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank Rank of the phase.
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets runPlanId
     *
     * @return string
     */
    public function getRunPlanId()
    {
        return $this->container['runPlanId'];
    }

    /**
     * Sets runPlanId
     *
     * @param string $runPlanId Run Plan ID of the phase.
     *
     * @return $this
     */
    public function setRunPlanId($runPlanId)
    {
        $this->container['runPlanId'] = $runPlanId;

        return $this;
    }

    /**
     * Gets startedOn
     *
     * @return \DateTime
     */
    public function getStartedOn()
    {
        return $this->container['startedOn'];
    }

    /**
     * Sets startedOn
     *
     * @param \DateTime $startedOn Phase start time.
     *
     * @return $this
     */
    public function setStartedOn($startedOn)
    {
        $this->container['startedOn'] = $startedOn;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the phase.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ignoredGates
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IgnoredGate[]
     */
    public function getIgnoredGates()
    {
        return $this->container['ignoredGates'];
    }

    /**
     * Sets ignoredGates
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IgnoredGate[] $ignoredGates List of ignored gates.
     *
     * @return $this
     */
    public function setIgnoredGates($ignoredGates)
    {
        $this->container['ignoredGates'] = $ignoredGates;

        return $this;
    }

    /**
     * Gets stabilizationCompletedOn
     *
     * @return \DateTime
     */
    public function getStabilizationCompletedOn()
    {
        return $this->container['stabilizationCompletedOn'];
    }

    /**
     * Sets stabilizationCompletedOn
     *
     * @param \DateTime $stabilizationCompletedOn Date and time at which stabilization of gates completed.
     *
     * @return $this
     */
    public function setStabilizationCompletedOn($stabilizationCompletedOn)
    {
        $this->container['stabilizationCompletedOn'] = $stabilizationCompletedOn;

        return $this;
    }

    /**
     * Gets succeedingSince
     *
     * @return \DateTime
     */
    public function getSucceedingSince()
    {
        return $this->container['succeedingSince'];
    }

    /**
     * Sets succeedingSince
     *
     * @param \DateTime $succeedingSince Date and time at which all gates executed successfully.
     *
     * @return $this
     */
    public function setSucceedingSince($succeedingSince)
    {
        $this->container['succeedingSince'] = $succeedingSince;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


