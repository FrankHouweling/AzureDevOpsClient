<?php
/**
 * AgentDeploymentInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FrankHouweling\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \FrankHouweling\AzureDevOpsClient\Release\ObjectSerializer;

/**
 * AgentDeploymentInput Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FrankHouweling\AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentDeploymentInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgentDeploymentInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'artifactsDownloadInput' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ArtifactsDownloadInput',
        'demands' => '\FrankHouweling\AzureDevOpsClient\Release\Model\Demand[]',
        'enableAccessToken' => 'bool',
        'queueId' => 'int',
        'skipArtifactsDownload' => 'bool',
        'condition' => 'string',
        'jobCancelTimeoutInMinutes' => 'int',
        'overrideInputs' => 'map[string,string]',
        'timeoutInMinutes' => 'int',
        'agentSpecification' => '\FrankHouweling\AzureDevOpsClient\Release\Model\AgentSpecification',
        'imageId' => 'int',
        'parallelExecution' => '\FrankHouweling\AzureDevOpsClient\Release\Model\ExecutionInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'artifactsDownloadInput' => null,
        'demands' => null,
        'enableAccessToken' => null,
        'queueId' => 'int32',
        'skipArtifactsDownload' => null,
        'condition' => null,
        'jobCancelTimeoutInMinutes' => 'int32',
        'overrideInputs' => null,
        'timeoutInMinutes' => 'int32',
        'agentSpecification' => null,
        'imageId' => 'int32',
        'parallelExecution' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artifactsDownloadInput' => 'artifactsDownloadInput',
        'demands' => 'demands',
        'enableAccessToken' => 'enableAccessToken',
        'queueId' => 'queueId',
        'skipArtifactsDownload' => 'skipArtifactsDownload',
        'condition' => 'condition',
        'jobCancelTimeoutInMinutes' => 'jobCancelTimeoutInMinutes',
        'overrideInputs' => 'overrideInputs',
        'timeoutInMinutes' => 'timeoutInMinutes',
        'agentSpecification' => 'agentSpecification',
        'imageId' => 'imageId',
        'parallelExecution' => 'parallelExecution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artifactsDownloadInput' => 'setArtifactsDownloadInput',
        'demands' => 'setDemands',
        'enableAccessToken' => 'setEnableAccessToken',
        'queueId' => 'setQueueId',
        'skipArtifactsDownload' => 'setSkipArtifactsDownload',
        'condition' => 'setCondition',
        'jobCancelTimeoutInMinutes' => 'setJobCancelTimeoutInMinutes',
        'overrideInputs' => 'setOverrideInputs',
        'timeoutInMinutes' => 'setTimeoutInMinutes',
        'agentSpecification' => 'setAgentSpecification',
        'imageId' => 'setImageId',
        'parallelExecution' => 'setParallelExecution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artifactsDownloadInput' => 'getArtifactsDownloadInput',
        'demands' => 'getDemands',
        'enableAccessToken' => 'getEnableAccessToken',
        'queueId' => 'getQueueId',
        'skipArtifactsDownload' => 'getSkipArtifactsDownload',
        'condition' => 'getCondition',
        'jobCancelTimeoutInMinutes' => 'getJobCancelTimeoutInMinutes',
        'overrideInputs' => 'getOverrideInputs',
        'timeoutInMinutes' => 'getTimeoutInMinutes',
        'agentSpecification' => 'getAgentSpecification',
        'imageId' => 'getImageId',
        'parallelExecution' => 'getParallelExecution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['artifactsDownloadInput'] = isset($data['artifactsDownloadInput']) ? $data['artifactsDownloadInput'] : null;
        $this->container['demands'] = isset($data['demands']) ? $data['demands'] : null;
        $this->container['enableAccessToken'] = isset($data['enableAccessToken']) ? $data['enableAccessToken'] : null;
        $this->container['queueId'] = isset($data['queueId']) ? $data['queueId'] : null;
        $this->container['skipArtifactsDownload'] = isset($data['skipArtifactsDownload']) ? $data['skipArtifactsDownload'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['jobCancelTimeoutInMinutes'] = isset($data['jobCancelTimeoutInMinutes']) ? $data['jobCancelTimeoutInMinutes'] : null;
        $this->container['overrideInputs'] = isset($data['overrideInputs']) ? $data['overrideInputs'] : null;
        $this->container['timeoutInMinutes'] = isset($data['timeoutInMinutes']) ? $data['timeoutInMinutes'] : null;
        $this->container['agentSpecification'] = isset($data['agentSpecification']) ? $data['agentSpecification'] : null;
        $this->container['imageId'] = isset($data['imageId']) ? $data['imageId'] : null;
        $this->container['parallelExecution'] = isset($data['parallelExecution']) ? $data['parallelExecution'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artifactsDownloadInput
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ArtifactsDownloadInput
     */
    public function getArtifactsDownloadInput()
    {
        return $this->container['artifactsDownloadInput'];
    }

    /**
     * Sets artifactsDownloadInput
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ArtifactsDownloadInput $artifactsDownloadInput Artifacts that downloaded during job execution.
     *
     * @return $this
     */
    public function setArtifactsDownloadInput($artifactsDownloadInput)
    {
        $this->container['artifactsDownloadInput'] = $artifactsDownloadInput;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\Demand[]
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\Demand[] $demands List demands that needs to meet to execute the job.
     *
     * @return $this
     */
    public function setDemands($demands)
    {
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets enableAccessToken
     *
     * @return bool
     */
    public function getEnableAccessToken()
    {
        return $this->container['enableAccessToken'];
    }

    /**
     * Sets enableAccessToken
     *
     * @param bool $enableAccessToken Indicates whether to include access token in deployment job or not.
     *
     * @return $this
     */
    public function setEnableAccessToken($enableAccessToken)
    {
        $this->container['enableAccessToken'] = $enableAccessToken;

        return $this;
    }

    /**
     * Gets queueId
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queueId'];
    }

    /**
     * Sets queueId
     *
     * @param int $queueId Id of the pool on which job get executed.
     *
     * @return $this
     */
    public function setQueueId($queueId)
    {
        $this->container['queueId'] = $queueId;

        return $this;
    }

    /**
     * Gets skipArtifactsDownload
     *
     * @return bool
     */
    public function getSkipArtifactsDownload()
    {
        return $this->container['skipArtifactsDownload'];
    }

    /**
     * Sets skipArtifactsDownload
     *
     * @param bool $skipArtifactsDownload Indicates whether artifacts downloaded while job execution or not.
     *
     * @return $this
     */
    public function setSkipArtifactsDownload($skipArtifactsDownload)
    {
        $this->container['skipArtifactsDownload'] = $skipArtifactsDownload;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition Gets or sets the job condition.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets jobCancelTimeoutInMinutes
     *
     * @return int
     */
    public function getJobCancelTimeoutInMinutes()
    {
        return $this->container['jobCancelTimeoutInMinutes'];
    }

    /**
     * Sets jobCancelTimeoutInMinutes
     *
     * @param int $jobCancelTimeoutInMinutes Gets or sets the job cancel timeout in minutes for deployment which are cancelled by user for this release environment.
     *
     * @return $this
     */
    public function setJobCancelTimeoutInMinutes($jobCancelTimeoutInMinutes)
    {
        $this->container['jobCancelTimeoutInMinutes'] = $jobCancelTimeoutInMinutes;

        return $this;
    }

    /**
     * Gets overrideInputs
     *
     * @return map[string,string]
     */
    public function getOverrideInputs()
    {
        return $this->container['overrideInputs'];
    }

    /**
     * Sets overrideInputs
     *
     * @param map[string,string] $overrideInputs Gets or sets the override inputs.
     *
     * @return $this
     */
    public function setOverrideInputs($overrideInputs)
    {
        $this->container['overrideInputs'] = $overrideInputs;

        return $this;
    }

    /**
     * Gets timeoutInMinutes
     *
     * @return int
     */
    public function getTimeoutInMinutes()
    {
        return $this->container['timeoutInMinutes'];
    }

    /**
     * Sets timeoutInMinutes
     *
     * @param int $timeoutInMinutes Gets or sets the job execution timeout in minutes for deployment which are queued against this release environment.
     *
     * @return $this
     */
    public function setTimeoutInMinutes($timeoutInMinutes)
    {
        $this->container['timeoutInMinutes'] = $timeoutInMinutes;

        return $this;
    }

    /**
     * Gets agentSpecification
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\AgentSpecification
     */
    public function getAgentSpecification()
    {
        return $this->container['agentSpecification'];
    }

    /**
     * Sets agentSpecification
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\AgentSpecification $agentSpecification Specification for an agent on which a job gets executed.
     *
     * @return $this
     */
    public function setAgentSpecification($agentSpecification)
    {
        $this->container['agentSpecification'] = $agentSpecification;

        return $this;
    }

    /**
     * Gets imageId
     *
     * @return int
     */
    public function getImageId()
    {
        return $this->container['imageId'];
    }

    /**
     * Sets imageId
     *
     * @param int $imageId Gets or sets the image ID.
     *
     * @return $this
     */
    public function setImageId($imageId)
    {
        $this->container['imageId'] = $imageId;

        return $this;
    }

    /**
     * Gets parallelExecution
     *
     * @return \FrankHouweling\AzureDevOpsClient\Release\Model\ExecutionInput
     */
    public function getParallelExecution()
    {
        return $this->container['parallelExecution'];
    }

    /**
     * Sets parallelExecution
     *
     * @param \FrankHouweling\AzureDevOpsClient\Release\Model\ExecutionInput $parallelExecution Gets or sets the parallel execution input.
     *
     * @return $this
     */
    public function setParallelExecution($parallelExecution)
    {
        $this->container['parallelExecution'] = $parallelExecution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


