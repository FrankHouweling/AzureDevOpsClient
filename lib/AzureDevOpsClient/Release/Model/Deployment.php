<?php
/**
 * Deployment
 *
 * PHP version 5
 *
 * @category Class
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Release
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model;

use \ArrayAccess;
use \AzureDevOpsClient\Release\ObjectSerializer;

/**
 * Deployment Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  AzureDevOpsClient\Release
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Deployment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Deployment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attempt' => 'int',
        'completedOn' => '\DateTime',
        'conditions' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Condition[]',
        'definitionEnvironmentId' => 'int',
        'deploymentStatus' => 'string',
        'id' => 'int',
        'lastModifiedBy' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'lastModifiedOn' => '\DateTime',
        'operationStatus' => 'string',
        'postDeployApprovals' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[]',
        'preDeployApprovals' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[]',
        'projectReference' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference',
        'queuedOn' => '\DateTime',
        'reason' => 'string',
        'release' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseReference',
        'releaseDefinition' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference',
        'releaseEnvironment' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference',
        'requestedBy' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'requestedFor' => '\AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef',
        'scheduledDeploymentTime' => '\DateTime',
        'startedOn' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attempt' => 'int32',
        'completedOn' => 'date-time',
        'conditions' => null,
        'definitionEnvironmentId' => 'int32',
        'deploymentStatus' => null,
        'id' => 'int32',
        'lastModifiedBy' => null,
        'lastModifiedOn' => 'date-time',
        'operationStatus' => null,
        'postDeployApprovals' => null,
        'preDeployApprovals' => null,
        'projectReference' => null,
        'queuedOn' => 'date-time',
        'reason' => null,
        'release' => null,
        'releaseDefinition' => null,
        'releaseEnvironment' => null,
        'requestedBy' => null,
        'requestedFor' => null,
        'scheduledDeploymentTime' => 'date-time',
        'startedOn' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempt' => 'attempt',
        'completedOn' => 'completedOn',
        'conditions' => 'conditions',
        'definitionEnvironmentId' => 'definitionEnvironmentId',
        'deploymentStatus' => 'deploymentStatus',
        'id' => 'id',
        'lastModifiedBy' => 'lastModifiedBy',
        'lastModifiedOn' => 'lastModifiedOn',
        'operationStatus' => 'operationStatus',
        'postDeployApprovals' => 'postDeployApprovals',
        'preDeployApprovals' => 'preDeployApprovals',
        'projectReference' => 'projectReference',
        'queuedOn' => 'queuedOn',
        'reason' => 'reason',
        'release' => 'release',
        'releaseDefinition' => 'releaseDefinition',
        'releaseEnvironment' => 'releaseEnvironment',
        'requestedBy' => 'requestedBy',
        'requestedFor' => 'requestedFor',
        'scheduledDeploymentTime' => 'scheduledDeploymentTime',
        'startedOn' => 'startedOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempt' => 'setAttempt',
        'completedOn' => 'setCompletedOn',
        'conditions' => 'setConditions',
        'definitionEnvironmentId' => 'setDefinitionEnvironmentId',
        'deploymentStatus' => 'setDeploymentStatus',
        'id' => 'setId',
        'lastModifiedBy' => 'setLastModifiedBy',
        'lastModifiedOn' => 'setLastModifiedOn',
        'operationStatus' => 'setOperationStatus',
        'postDeployApprovals' => 'setPostDeployApprovals',
        'preDeployApprovals' => 'setPreDeployApprovals',
        'projectReference' => 'setProjectReference',
        'queuedOn' => 'setQueuedOn',
        'reason' => 'setReason',
        'release' => 'setRelease',
        'releaseDefinition' => 'setReleaseDefinition',
        'releaseEnvironment' => 'setReleaseEnvironment',
        'requestedBy' => 'setRequestedBy',
        'requestedFor' => 'setRequestedFor',
        'scheduledDeploymentTime' => 'setScheduledDeploymentTime',
        'startedOn' => 'setStartedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempt' => 'getAttempt',
        'completedOn' => 'getCompletedOn',
        'conditions' => 'getConditions',
        'definitionEnvironmentId' => 'getDefinitionEnvironmentId',
        'deploymentStatus' => 'getDeploymentStatus',
        'id' => 'getId',
        'lastModifiedBy' => 'getLastModifiedBy',
        'lastModifiedOn' => 'getLastModifiedOn',
        'operationStatus' => 'getOperationStatus',
        'postDeployApprovals' => 'getPostDeployApprovals',
        'preDeployApprovals' => 'getPreDeployApprovals',
        'projectReference' => 'getProjectReference',
        'queuedOn' => 'getQueuedOn',
        'reason' => 'getReason',
        'release' => 'getRelease',
        'releaseDefinition' => 'getReleaseDefinition',
        'releaseEnvironment' => 'getReleaseEnvironment',
        'requestedBy' => 'getRequestedBy',
        'requestedFor' => 'getRequestedFor',
        'scheduledDeploymentTime' => 'getScheduledDeploymentTime',
        'startedOn' => 'getStartedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEPLOYMENT_STATUS_UNDEFINED = 'undefined';
    const DEPLOYMENT_STATUS_NOT_DEPLOYED = 'notDeployed';
    const DEPLOYMENT_STATUS_IN_PROGRESS = 'inProgress';
    const DEPLOYMENT_STATUS_SUCCEEDED = 'succeeded';
    const DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED = 'partiallySucceeded';
    const DEPLOYMENT_STATUS_FAILED = 'failed';
    const DEPLOYMENT_STATUS_ALL = 'all';
    const OPERATION_STATUS_UNDEFINED = 'undefined';
    const OPERATION_STATUS_QUEUED = 'queued';
    const OPERATION_STATUS_SCHEDULED = 'scheduled';
    const OPERATION_STATUS_PENDING = 'pending';
    const OPERATION_STATUS_APPROVED = 'approved';
    const OPERATION_STATUS_REJECTED = 'rejected';
    const OPERATION_STATUS_DEFERRED = 'deferred';
    const OPERATION_STATUS_QUEUED_FOR_AGENT = 'queuedForAgent';
    const OPERATION_STATUS_PHASE_IN_PROGRESS = 'phaseInProgress';
    const OPERATION_STATUS_PHASE_SUCCEEDED = 'phaseSucceeded';
    const OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED = 'phasePartiallySucceeded';
    const OPERATION_STATUS_PHASE_FAILED = 'phaseFailed';
    const OPERATION_STATUS_CANCELED = 'canceled';
    const OPERATION_STATUS_PHASE_CANCELED = 'phaseCanceled';
    const OPERATION_STATUS_MANUAL_INTERVENTION_PENDING = 'manualInterventionPending';
    const OPERATION_STATUS_QUEUED_FOR_PIPELINE = 'queuedForPipeline';
    const OPERATION_STATUS_CANCELLING = 'cancelling';
    const OPERATION_STATUS_EVALUATING_GATES = 'evaluatingGates';
    const OPERATION_STATUS_GATE_FAILED = 'gateFailed';
    const OPERATION_STATUS_ALL = 'all';
    const REASON_NONE = 'none';
    const REASON_MANUAL = 'manual';
    const REASON_AUTOMATED = 'automated';
    const REASON_SCHEDULED = 'scheduled';
    const REASON_REDEPLOY_TRIGGER = 'redeployTrigger';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeploymentStatusAllowableValues()
    {
        return [
            self::DEPLOYMENT_STATUS_UNDEFINED,
            self::DEPLOYMENT_STATUS_NOT_DEPLOYED,
            self::DEPLOYMENT_STATUS_IN_PROGRESS,
            self::DEPLOYMENT_STATUS_SUCCEEDED,
            self::DEPLOYMENT_STATUS_PARTIALLY_SUCCEEDED,
            self::DEPLOYMENT_STATUS_FAILED,
            self::DEPLOYMENT_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationStatusAllowableValues()
    {
        return [
            self::OPERATION_STATUS_UNDEFINED,
            self::OPERATION_STATUS_QUEUED,
            self::OPERATION_STATUS_SCHEDULED,
            self::OPERATION_STATUS_PENDING,
            self::OPERATION_STATUS_APPROVED,
            self::OPERATION_STATUS_REJECTED,
            self::OPERATION_STATUS_DEFERRED,
            self::OPERATION_STATUS_QUEUED_FOR_AGENT,
            self::OPERATION_STATUS_PHASE_IN_PROGRESS,
            self::OPERATION_STATUS_PHASE_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_PARTIALLY_SUCCEEDED,
            self::OPERATION_STATUS_PHASE_FAILED,
            self::OPERATION_STATUS_CANCELED,
            self::OPERATION_STATUS_PHASE_CANCELED,
            self::OPERATION_STATUS_MANUAL_INTERVENTION_PENDING,
            self::OPERATION_STATUS_QUEUED_FOR_PIPELINE,
            self::OPERATION_STATUS_CANCELLING,
            self::OPERATION_STATUS_EVALUATING_GATES,
            self::OPERATION_STATUS_GATE_FAILED,
            self::OPERATION_STATUS_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NONE,
            self::REASON_MANUAL,
            self::REASON_AUTOMATED,
            self::REASON_SCHEDULED,
            self::REASON_REDEPLOY_TRIGGER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['completedOn'] = isset($data['completedOn']) ? $data['completedOn'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['definitionEnvironmentId'] = isset($data['definitionEnvironmentId']) ? $data['definitionEnvironmentId'] : null;
        $this->container['deploymentStatus'] = isset($data['deploymentStatus']) ? $data['deploymentStatus'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastModifiedBy'] = isset($data['lastModifiedBy']) ? $data['lastModifiedBy'] : null;
        $this->container['lastModifiedOn'] = isset($data['lastModifiedOn']) ? $data['lastModifiedOn'] : null;
        $this->container['operationStatus'] = isset($data['operationStatus']) ? $data['operationStatus'] : null;
        $this->container['postDeployApprovals'] = isset($data['postDeployApprovals']) ? $data['postDeployApprovals'] : null;
        $this->container['preDeployApprovals'] = isset($data['preDeployApprovals']) ? $data['preDeployApprovals'] : null;
        $this->container['projectReference'] = isset($data['projectReference']) ? $data['projectReference'] : null;
        $this->container['queuedOn'] = isset($data['queuedOn']) ? $data['queuedOn'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['releaseDefinition'] = isset($data['releaseDefinition']) ? $data['releaseDefinition'] : null;
        $this->container['releaseEnvironment'] = isset($data['releaseEnvironment']) ? $data['releaseEnvironment'] : null;
        $this->container['requestedBy'] = isset($data['requestedBy']) ? $data['requestedBy'] : null;
        $this->container['requestedFor'] = isset($data['requestedFor']) ? $data['requestedFor'] : null;
        $this->container['scheduledDeploymentTime'] = isset($data['scheduledDeploymentTime']) ? $data['scheduledDeploymentTime'] : null;
        $this->container['startedOn'] = isset($data['startedOn']) ? $data['startedOn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeploymentStatusAllowableValues();
        if (!is_null($this->container['deploymentStatus']) && !in_array($this->container['deploymentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deploymentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($this->container['operationStatus']) && !in_array($this->container['operationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempt
     *
     * @return int
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int $attempt Gets attempt number.
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets completedOn
     *
     * @return \DateTime
     */
    public function getCompletedOn()
    {
        return $this->container['completedOn'];
    }

    /**
     * Sets completedOn
     *
     * @param \DateTime $completedOn Gets the date on which deployment is complete.
     *
     * @return $this
     */
    public function setCompletedOn($completedOn)
    {
        $this->container['completedOn'] = $completedOn;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Condition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\Condition[] $conditions Gets the list of condition associated with deployment.
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets definitionEnvironmentId
     *
     * @return int
     */
    public function getDefinitionEnvironmentId()
    {
        return $this->container['definitionEnvironmentId'];
    }

    /**
     * Sets definitionEnvironmentId
     *
     * @param int $definitionEnvironmentId Gets release definition environment id.
     *
     * @return $this
     */
    public function setDefinitionEnvironmentId($definitionEnvironmentId)
    {
        $this->container['definitionEnvironmentId'] = $definitionEnvironmentId;

        return $this;
    }

    /**
     * Gets deploymentStatus
     *
     * @return string
     */
    public function getDeploymentStatus()
    {
        return $this->container['deploymentStatus'];
    }

    /**
     * Sets deploymentStatus
     *
     * @param string $deploymentStatus Gets status of the deployment.
     *
     * @return $this
     */
    public function setDeploymentStatus($deploymentStatus)
    {
        $allowedValues = $this->getDeploymentStatusAllowableValues();
        if (!is_null($deploymentStatus) && !in_array($deploymentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploymentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploymentStatus'] = $deploymentStatus;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Gets the unique identifier for deployment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getLastModifiedBy()
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $lastModifiedBy Gets the identity who last modified the deployment.
     *
     * @return $this
     */
    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }

    /**
     * Gets lastModifiedOn
     *
     * @return \DateTime
     */
    public function getLastModifiedOn()
    {
        return $this->container['lastModifiedOn'];
    }

    /**
     * Sets lastModifiedOn
     *
     * @param \DateTime $lastModifiedOn Gets the date on which deployment is last modified.
     *
     * @return $this
     */
    public function setLastModifiedOn($lastModifiedOn)
    {
        $this->container['lastModifiedOn'] = $lastModifiedOn;

        return $this;
    }

    /**
     * Gets operationStatus
     *
     * @return string
     */
    public function getOperationStatus()
    {
        return $this->container['operationStatus'];
    }

    /**
     * Sets operationStatus
     *
     * @param string $operationStatus Gets operation status of deployment.
     *
     * @return $this
     */
    public function setOperationStatus($operationStatus)
    {
        $allowedValues = $this->getOperationStatusAllowableValues();
        if (!is_null($operationStatus) && !in_array($operationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationStatus'] = $operationStatus;

        return $this;
    }

    /**
     * Gets postDeployApprovals
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[]
     */
    public function getPostDeployApprovals()
    {
        return $this->container['postDeployApprovals'];
    }

    /**
     * Sets postDeployApprovals
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[] $postDeployApprovals Gets list of PostDeployApprovals.
     *
     * @return $this
     */
    public function setPostDeployApprovals($postDeployApprovals)
    {
        $this->container['postDeployApprovals'] = $postDeployApprovals;

        return $this;
    }

    /**
     * Gets preDeployApprovals
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[]
     */
    public function getPreDeployApprovals()
    {
        return $this->container['preDeployApprovals'];
    }

    /**
     * Sets preDeployApprovals
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseApproval[] $preDeployApprovals Gets list of PreDeployApprovals.
     *
     * @return $this
     */
    public function setPreDeployApprovals($preDeployApprovals)
    {
        $this->container['preDeployApprovals'] = $preDeployApprovals;

        return $this;
    }

    /**
     * Gets projectReference
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference
     */
    public function getProjectReference()
    {
        return $this->container['projectReference'];
    }

    /**
     * Sets projectReference
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ProjectReference $projectReference Gets or sets project reference.
     *
     * @return $this
     */
    public function setProjectReference($projectReference)
    {
        $this->container['projectReference'] = $projectReference;

        return $this;
    }

    /**
     * Gets queuedOn
     *
     * @return \DateTime
     */
    public function getQueuedOn()
    {
        return $this->container['queuedOn'];
    }

    /**
     * Sets queuedOn
     *
     * @param \DateTime $queuedOn Gets the date on which deployment is queued.
     *
     * @return $this
     */
    public function setQueuedOn($queuedOn)
    {
        $this->container['queuedOn'] = $queuedOn;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Gets reason of deployment.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseReference
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseReference $release Gets the reference of release.
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets releaseDefinition
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference
     */
    public function getReleaseDefinition()
    {
        return $this->container['releaseDefinition'];
    }

    /**
     * Sets releaseDefinition
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseDefinitionShallowReference $releaseDefinition Gets releaseDefinitionReference which specifies the reference of the release definition to which the deployment is associated.
     *
     * @return $this
     */
    public function setReleaseDefinition($releaseDefinition)
    {
        $this->container['releaseDefinition'] = $releaseDefinition;

        return $this;
    }

    /**
     * Gets releaseEnvironment
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference
     */
    public function getReleaseEnvironment()
    {
        return $this->container['releaseEnvironment'];
    }

    /**
     * Sets releaseEnvironment
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\ReleaseEnvironmentShallowReference $releaseEnvironment Gets releaseEnvironmentReference which specifies the reference of the release environment to which the deployment is associated.
     *
     * @return $this
     */
    public function setReleaseEnvironment($releaseEnvironment)
    {
        $this->container['releaseEnvironment'] = $releaseEnvironment;

        return $this;
    }

    /**
     * Gets requestedBy
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getRequestedBy()
    {
        return $this->container['requestedBy'];
    }

    /**
     * Sets requestedBy
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $requestedBy Gets the identity who requested.
     *
     * @return $this
     */
    public function setRequestedBy($requestedBy)
    {
        $this->container['requestedBy'] = $requestedBy;

        return $this;
    }

    /**
     * Gets requestedFor
     *
     * @return \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef
     */
    public function getRequestedFor()
    {
        return $this->container['requestedFor'];
    }

    /**
     * Sets requestedFor
     *
     * @param \AzureDevOpsClient\Release\AzureDevOpsClient\Release\Model\IdentityRef $requestedFor Gets the identity for whom deployment is requested.
     *
     * @return $this
     */
    public function setRequestedFor($requestedFor)
    {
        $this->container['requestedFor'] = $requestedFor;

        return $this;
    }

    /**
     * Gets scheduledDeploymentTime
     *
     * @return \DateTime
     */
    public function getScheduledDeploymentTime()
    {
        return $this->container['scheduledDeploymentTime'];
    }

    /**
     * Sets scheduledDeploymentTime
     *
     * @param \DateTime $scheduledDeploymentTime Gets the date on which deployment is scheduled.
     *
     * @return $this
     */
    public function setScheduledDeploymentTime($scheduledDeploymentTime)
    {
        $this->container['scheduledDeploymentTime'] = $scheduledDeploymentTime;

        return $this;
    }

    /**
     * Gets startedOn
     *
     * @return \DateTime
     */
    public function getStartedOn()
    {
        return $this->container['startedOn'];
    }

    /**
     * Sets startedOn
     *
     * @param \DateTime $startedOn Gets the date on which deployment is started.
     *
     * @return $this
     */
    public function setStartedOn($startedOn)
    {
        $this->container['startedOn'] = $startedOn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


